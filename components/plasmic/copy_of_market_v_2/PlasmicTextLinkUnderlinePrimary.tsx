// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: 6pY-cK_-KJMdF_
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicTextLinkUnderlinePrimary.module.css"; // plasmic-import: 6pY-cK_-KJMdF_/css

export type PlasmicTextLinkUnderlinePrimary__VariantMembers = {
  color: "light" | "dark" | "brand" | "headline";
  size:
    | "_8"
    | "_10"
    | "_12"
    | "_14"
    | "_16"
    | "_18"
    | "_24"
    | "_32"
    | "_36"
    | "_40";
  state: "disabled";
};

export type PlasmicTextLinkUnderlinePrimary__VariantsArgs = {
  color?: SingleChoiceArg<"light" | "dark" | "brand" | "headline">;
  size?: SingleChoiceArg<
    "_8" | "_10" | "_12" | "_14" | "_16" | "_18" | "_24" | "_32" | "_36" | "_40"
  >;
  state?: SingleChoiceArg<"disabled">;
};

type VariantPropType = keyof PlasmicTextLinkUnderlinePrimary__VariantsArgs;
export const PlasmicTextLinkUnderlinePrimary__VariantProps =
  new Array<VariantPropType>("color", "size", "state");

export type PlasmicTextLinkUnderlinePrimary__ArgsType = {
  text?: React.ReactNode;
  destination?: string | PageHref;
  id?: string;
};

type ArgPropType = keyof PlasmicTextLinkUnderlinePrimary__ArgsType;
export const PlasmicTextLinkUnderlinePrimary__ArgProps = new Array<ArgPropType>(
  "text",
  "destination",
  "id"
);

export type PlasmicTextLinkUnderlinePrimary__OverridesType = {
  root?: p.Flex<"a"> & Partial<LinkProps>;
  parent?: p.Flex<"div">;
};

export interface DefaultTextLinkUnderlinePrimaryProps {
  text?: React.ReactNode;
  destination?: string | PageHref;
  id?: string;
  color?: SingleChoiceArg<"light" | "dark" | "brand" | "headline">;
  size?: SingleChoiceArg<
    "_8" | "_10" | "_12" | "_14" | "_16" | "_18" | "_24" | "_32" | "_36" | "_40"
  >;
  state?: SingleChoiceArg<"disabled">;
  className?: string;
}

function PlasmicTextLinkUnderlinePrimary__RenderFunc(props: {
  variants: PlasmicTextLinkUnderlinePrimary__VariantsArgs;
  args: PlasmicTextLinkUnderlinePrimary__ArgsType;
  overrides: PlasmicTextLinkUnderlinePrimary__OverridesType;
  dataFetches?: PlasmicTextLinkUnderlinePrimary__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.PlasmicLink
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__color_brand]: hasVariant(variants, "color", "brand"),
        [sty.root__color_dark]: hasVariant(variants, "color", "dark"),
        [sty.root__color_headline]: hasVariant(variants, "color", "headline"),
        [sty.root__color_light]: hasVariant(variants, "color", "light"),
        [sty.root__color_light_size__14]:
          hasVariant(variants, "color", "light") &&
          hasVariant(variants, "size", "_14"),
        [sty.root__color_light_size__16]:
          hasVariant(variants, "color", "light") &&
          hasVariant(variants, "size", "_16"),
        [sty.root__color_light_size__18]:
          hasVariant(variants, "color", "light") &&
          hasVariant(variants, "size", "_18"),
        [sty.root__color_light_size__24]:
          hasVariant(variants, "color", "light") &&
          hasVariant(variants, "size", "_24"),
        [sty.root__size__14]: hasVariant(variants, "size", "_14"),
        [sty.root__size__16]: hasVariant(variants, "size", "_16"),
        [sty.root__size__18]: hasVariant(variants, "size", "_18"),
        [sty.root__size__24]: hasVariant(variants, "size", "_24"),
        [sty.root__size__32]: hasVariant(variants, "size", "_32"),
        [sty.root__size__40]: hasVariant(variants, "size", "_40")
      })}
      component={Link}
      href={args.destination}
      id={args.id}
      platform={"nextjs"}
    >
      <div
        data-plasmic-name={"parent"}
        data-plasmic-override={overrides.parent}
        className={classNames(defaultcss.all, sty.parent)}
      >
        {p.renderPlasmicSlot({
          defaultContents: "Text link",
          value: args.text,
          className: classNames(sty.slotText, {
            [sty.slotText__color_brand]: hasVariant(variants, "color", "brand"),
            [sty.slotText__color_dark]: hasVariant(variants, "color", "dark"),
            [sty.slotText__color_headline]: hasVariant(
              variants,
              "color",
              "headline"
            ),
            [sty.slotText__color_light]: hasVariant(variants, "color", "light"),
            [sty.slotText__color_light_size__14]:
              hasVariant(variants, "color", "light") &&
              hasVariant(variants, "size", "_14"),
            [sty.slotText__color_light_size__24]:
              hasVariant(variants, "color", "light") &&
              hasVariant(variants, "size", "_24"),
            [sty.slotText__color_light_size__32]:
              hasVariant(variants, "color", "light") &&
              hasVariant(variants, "size", "_32"),
            [sty.slotText__color_light_size__40]:
              hasVariant(variants, "color", "light") &&
              hasVariant(variants, "size", "_40"),
            [sty.slotText__size__10]: hasVariant(variants, "size", "_10"),
            [sty.slotText__size__12]: hasVariant(variants, "size", "_12"),
            [sty.slotText__size__14]: hasVariant(variants, "size", "_14"),
            [sty.slotText__size__16]: hasVariant(variants, "size", "_16"),
            [sty.slotText__size__16_color_light]:
              hasVariant(variants, "size", "_16") &&
              hasVariant(variants, "color", "light"),
            [sty.slotText__size__18]: hasVariant(variants, "size", "_18"),
            [sty.slotText__size__18_color_light]:
              hasVariant(variants, "size", "_18") &&
              hasVariant(variants, "color", "light"),
            [sty.slotText__size__24]: hasVariant(variants, "size", "_24"),
            [sty.slotText__size__32]: hasVariant(variants, "size", "_32"),
            [sty.slotText__size__36]: hasVariant(variants, "size", "_36"),
            [sty.slotText__size__40]: hasVariant(variants, "size", "_40"),
            [sty.slotText__size__8]: hasVariant(variants, "size", "_8")
          })
        })}
      </div>
    </p.PlasmicLink>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "parent"],
  parent: ["parent"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "a";
  parent: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTextLinkUnderlinePrimary__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTextLinkUnderlinePrimary__VariantsArgs;
    args?: PlasmicTextLinkUnderlinePrimary__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicTextLinkUnderlinePrimary__Fetches;
  } & Omit<PlasmicTextLinkUnderlinePrimary__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTextLinkUnderlinePrimary__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTextLinkUnderlinePrimary__ArgProps,
      internalVariantPropNames: PlasmicTextLinkUnderlinePrimary__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicTextLinkUnderlinePrimary__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTextLinkUnderlinePrimary";
  } else {
    func.displayName = `PlasmicTextLinkUnderlinePrimary.${nodeName}`;
  }
  return func;
}

export const PlasmicTextLinkUnderlinePrimary = Object.assign(
  // Top-level PlasmicTextLinkUnderlinePrimary renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    parent: makeNodeComponent("parent"),

    // Metadata about props expected for PlasmicTextLinkUnderlinePrimary
    internalVariantProps: PlasmicTextLinkUnderlinePrimary__VariantProps,
    internalArgProps: PlasmicTextLinkUnderlinePrimary__ArgProps
  }
);

export default PlasmicTextLinkUnderlinePrimary;
/* prettier-ignore-end */
