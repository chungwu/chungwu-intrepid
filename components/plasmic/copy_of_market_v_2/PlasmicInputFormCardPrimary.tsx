// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: IUTWs8Mcuxi7RE
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ButtonFormDropdownSelect from "../../ButtonFormDropdownSelect"; // plasmic-import: 3Qqc2KbBe45URw/component
import InputTextForm from "../../InputTextForm"; // plasmic-import: xiZmrha0lhlIet/component
import TextMultiLineA from "../../TextMultiLineA"; // plasmic-import: GciqOy8BXpcdNe/component
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: gpNjXfbD_ZdpPU/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicInputFormCardPrimary.module.css"; // plasmic-import: IUTWs8Mcuxi7RE/css

import Icon96Icon from "./icons/PlasmicIcon__Icon96"; // plasmic-import: bC6DTgVYN3bioSf/icon
import PlusBoldIcon from "./icons/PlasmicIcon__PlusBold"; // plasmic-import: lhSEEajPJGZatfD/icon

export type PlasmicInputFormCardPrimary__VariantMembers = {
  button: "button";
  subDescription: "subDescription";
  border: "border";
  multiLineText: "multiLineText";
  singleLineText: "singleLineText";
  inputType:
    | "username"
    | "companyname"
    | "dropdownText"
    | "dropdownDropdown"
    | "displayText";
};

export type PlasmicInputFormCardPrimary__VariantsArgs = {
  button?: SingleBooleanChoiceArg<"button">;
  subDescription?: SingleBooleanChoiceArg<"subDescription">;
  border?: SingleBooleanChoiceArg<"border">;
  multiLineText?: SingleBooleanChoiceArg<"multiLineText">;
  singleLineText?: SingleBooleanChoiceArg<"singleLineText">;
  inputType?: SingleChoiceArg<
    | "username"
    | "companyname"
    | "dropdownText"
    | "dropdownDropdown"
    | "displayText"
  >;
};

type VariantPropType = keyof PlasmicInputFormCardPrimary__VariantsArgs;
export const PlasmicInputFormCardPrimary__VariantProps =
  new Array<VariantPropType>(
    "button",
    "subDescription",
    "border",
    "multiLineText",
    "singleLineText",
    "inputType"
  );

export type PlasmicInputFormCardPrimary__ArgsType = {
  headline?: React.ReactNode;
  subHead?: React.ReactNode;
  description?: React.ReactNode;
  children?: React.ReactNode;
  label?: React.ReactNode;
  slotLabel?: React.ReactNode;
  slot?: React.ReactNode;
  dropdownHeadlineA?: React.ReactNode;
  dropdownHeadlineB?: React.ReactNode;
  slot2?: React.ReactNode;
  descriptionA?: React.ReactNode;
  descriptionB?: React.ReactNode;
  singleLineTextContainer?: React.ReactNode;
};

type ArgPropType = keyof PlasmicInputFormCardPrimary__ArgsType;
export const PlasmicInputFormCardPrimary__ArgProps = new Array<ArgPropType>(
  "headline",
  "subHead",
  "description",
  "children",
  "label",
  "slotLabel",
  "slot",
  "dropdownHeadlineA",
  "dropdownHeadlineB",
  "slot2",
  "descriptionA",
  "descriptionB",
  "singleLineTextContainer"
);

export type PlasmicInputFormCardPrimary__OverridesType = {
  root?: p.Flex<"div">;
  parent?: p.Flex<"div">;
  mainCard?: p.Flex<"div">;
  headlineParent?: p.Flex<"div">;
  inputElementParent?: p.Flex<"div">;
  textMultiLineA?: p.Flex<typeof TextMultiLineA>;
  inputTextContainer?: p.Flex<"div">;
  singleLineTextContainerParent?: p.Flex<"div">;
  urlTextParent?: p.Flex<"div">;
  inputTextParent?: p.Flex<"div">;
  inputUrlTextParent?: p.Flex<"div">;
  textParent?: p.Flex<"div">;
  inputMultiLineTextParent?: p.Flex<"div">;
  descriptionCard?: p.Flex<"div">;
  descriptionParent?: p.Flex<"div">;
  buttonPrimary?: p.Flex<typeof ButtonPrimary>;
};

export interface DefaultInputFormCardPrimaryProps {
  headline?: React.ReactNode;
  subHead?: React.ReactNode;
  description?: React.ReactNode;
  children?: React.ReactNode;
  label?: React.ReactNode;
  slotLabel?: React.ReactNode;
  slot?: React.ReactNode;
  dropdownHeadlineA?: React.ReactNode;
  dropdownHeadlineB?: React.ReactNode;
  slot2?: React.ReactNode;
  descriptionA?: React.ReactNode;
  descriptionB?: React.ReactNode;
  singleLineTextContainer?: React.ReactNode;
  button?: SingleBooleanChoiceArg<"button">;
  subDescription?: SingleBooleanChoiceArg<"subDescription">;
  border?: SingleBooleanChoiceArg<"border">;
  multiLineText?: SingleBooleanChoiceArg<"multiLineText">;
  singleLineText?: SingleBooleanChoiceArg<"singleLineText">;
  inputType?: SingleChoiceArg<
    | "username"
    | "companyname"
    | "dropdownText"
    | "dropdownDropdown"
    | "displayText"
  >;
  className?: string;
}

function PlasmicInputFormCardPrimary__RenderFunc(props: {
  variants: PlasmicInputFormCardPrimary__VariantsArgs;
  args: PlasmicInputFormCardPrimary__ArgsType;
  overrides: PlasmicInputFormCardPrimary__OverridesType;
  dataFetches?: PlasmicInputFormCardPrimary__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__border]: hasVariant(variants, "border", "border"),
        [sty.root__multiLineText]: hasVariant(
          variants,
          "multiLineText",
          "multiLineText"
        )
      })}
    >
      <div
        data-plasmic-name={"parent"}
        data-plasmic-override={overrides.parent}
        className={classNames(defaultcss.all, sty.parent, {
          [sty.parent__border]: hasVariant(variants, "border", "border"),
          [sty.parent__multiLineText]: hasVariant(
            variants,
            "multiLineText",
            "multiLineText"
          )
        })}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"mainCard"}
          data-plasmic-override={overrides.mainCard}
          hasGap={true}
          className={classNames(defaultcss.all, sty.mainCard, {
            [sty.mainCard__border]: hasVariant(variants, "border", "border"),
            [sty.mainCard__inputType_companyname]: hasVariant(
              variants,
              "inputType",
              "companyname"
            ),
            [sty.mainCard__inputType_displayText]: hasVariant(
              variants,
              "inputType",
              "displayText"
            ),
            [sty.mainCard__inputType_dropdownDropdown]: hasVariant(
              variants,
              "inputType",
              "dropdownDropdown"
            ),
            [sty.mainCard__inputType_dropdownText]: hasVariant(
              variants,
              "inputType",
              "dropdownText"
            ),
            [sty.mainCard__inputType_username]: hasVariant(
              variants,
              "inputType",
              "username"
            ),
            [sty.mainCard__multiLineText]: hasVariant(
              variants,
              "multiLineText",
              "multiLineText"
            ),
            [sty.mainCard__singleLineText]: hasVariant(
              variants,
              "singleLineText",
              "singleLineText"
            ),
            [sty.mainCard__singleLineText_multiLineText]:
              hasVariant(variants, "singleLineText", "singleLineText") &&
              hasVariant(variants, "multiLineText", "multiLineText")
          })}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"headlineParent"}
            data-plasmic-override={overrides.headlineParent}
            hasGap={true}
            className={classNames(defaultcss.all, sty.headlineParent, {
              [sty.headlineParent__inputType_dropdownText]: hasVariant(
                variants,
                "inputType",
                "dropdownText"
              ),
              [sty.headlineParent__multiLineText]: hasVariant(
                variants,
                "multiLineText",
                "multiLineText"
              )
            })}
          >
            <div
              className={classNames(defaultcss.all, sty.freeBox__put2P, {
                [sty.freeBox__multiLineText__put2PYidhx]: hasVariant(
                  variants,
                  "multiLineText",
                  "multiLineText"
                )
              })}
            >
              {p.renderPlasmicSlot({
                defaultContents: "Headline",
                value: args.headline,
                className: classNames(sty.slotHeadline, {
                  [sty.slotHeadline__button_subDescription]:
                    hasVariant(variants, "button", "button") &&
                    hasVariant(variants, "subDescription", "subDescription"),
                  [sty.slotHeadline__inputType_dropdownText]: hasVariant(
                    variants,
                    "inputType",
                    "dropdownText"
                  ),
                  [sty.slotHeadline__multiLineText]: hasVariant(
                    variants,
                    "multiLineText",
                    "multiLineText"
                  ),
                  [sty.slotHeadline__singleLineText]: hasVariant(
                    variants,
                    "singleLineText",
                    "singleLineText"
                  )
                })
              })}
            </div>

            {p.renderPlasmicSlot({
              defaultContents: "Sub head",
              value: args.subHead,
              className: classNames(sty.slotSubHead, {
                [sty.slotSubHead__inputType_companyname]: hasVariant(
                  variants,
                  "inputType",
                  "companyname"
                ),
                [sty.slotSubHead__inputType_dropdownText]: hasVariant(
                  variants,
                  "inputType",
                  "dropdownText"
                ),
                [sty.slotSubHead__inputType_username]: hasVariant(
                  variants,
                  "inputType",
                  "username"
                ),
                [sty.slotSubHead__multiLineText]: hasVariant(
                  variants,
                  "multiLineText",
                  "multiLineText"
                ),
                [sty.slotSubHead__singleLineText]: hasVariant(
                  variants,
                  "singleLineText",
                  "singleLineText"
                )
              })
            })}
          </p.Stack>

          {(
            hasVariant(variants, "multiLineText", "multiLineText")
              ? false
              : true
          ) ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"inputElementParent"}
              data-plasmic-override={overrides.inputElementParent}
              hasGap={true}
              className={classNames(defaultcss.all, sty.inputElementParent, {
                [sty.inputElementParent__inputType_companyname]: hasVariant(
                  variants,
                  "inputType",
                  "companyname"
                ),
                [sty.inputElementParent__inputType_displayText]: hasVariant(
                  variants,
                  "inputType",
                  "displayText"
                ),
                [sty.inputElementParent__inputType_dropdownDropdown]:
                  hasVariant(variants, "inputType", "dropdownDropdown"),
                [sty.inputElementParent__inputType_dropdownText]: hasVariant(
                  variants,
                  "inputType",
                  "dropdownText"
                ),
                [sty.inputElementParent__inputType_username]: hasVariant(
                  variants,
                  "inputType",
                  "username"
                ),
                [sty.inputElementParent__multiLineText]: hasVariant(
                  variants,
                  "multiLineText",
                  "multiLineText"
                ),
                [sty.inputElementParent__singleLineText]: hasVariant(
                  variants,
                  "singleLineText",
                  "singleLineText"
                )
              })}
            >
              {(
                hasVariant(variants, "inputType", "dropdownText") ? true : false
              ) ? (
                <ButtonFormDropdownSelect
                  className={classNames(
                    "__wab_instance",
                    sty.buttonFormDropdownSelect__oxspq,
                    {
                      [sty.buttonFormDropdownSelect__inputType_dropdownText__oxspqcUrbc]:
                        hasVariant(variants, "inputType", "dropdownText")
                    }
                  )}
                  description={
                    hasVariant(variants, "inputType", "dropdownText")
                      ? ("description" as const)
                      : undefined
                  }
                  dropdownTitle={"Select"}
                  headlineLabelTitle={p.renderPlasmicSlot({
                    defaultContents: hasVariant(
                      variants,
                      "inputType",
                      "dropdownText"
                    )
                      ? "Label"
                      : "Country",
                    value: args.label
                  })}
                  size={
                    hasVariant(variants, "inputType", "dropdownText")
                      ? ("_270X32" as const)
                      : undefined
                  }
                />
              ) : null}
              {(
                hasVariant(variants, "inputType", "dropdownDropdown")
                  ? true
                  : false
              ) ? (
                <ButtonFormDropdownSelect
                  className={classNames(
                    "__wab_instance",
                    sty.buttonFormDropdownSelect__gCkBv,
                    {
                      [sty.buttonFormDropdownSelect__inputType_dropdownDropdown__gCkBvFhTyX]:
                        hasVariant(variants, "inputType", "dropdownDropdown")
                    }
                  )}
                  headlineLabelTitle={p.renderPlasmicSlot({
                    defaultContents: "Primary",
                    value: args.dropdownHeadlineA
                  })}
                  size={
                    hasVariant(variants, "inputType", "dropdownDropdown")
                      ? ("_270X32" as const)
                      : undefined
                  }
                >
                  {p.renderPlasmicSlot({
                    defaultContents: "Description",
                    value: args.descriptionA
                  })}
                </ButtonFormDropdownSelect>
              ) : null}
              {(
                hasVariant(variants, "inputType", "dropdownDropdown")
                  ? true
                  : false
              ) ? (
                <ButtonFormDropdownSelect
                  className={classNames(
                    "__wab_instance",
                    sty.buttonFormDropdownSelect__bzgkO,
                    {
                      [sty.buttonFormDropdownSelect__inputType_dropdownDropdown__bzgkOFhTyX]:
                        hasVariant(variants, "inputType", "dropdownDropdown")
                    }
                  )}
                  headlineLabelTitle={p.renderPlasmicSlot({
                    defaultContents: "Secondary",
                    value: args.dropdownHeadlineB
                  })}
                  size={
                    hasVariant(variants, "inputType", "dropdownDropdown")
                      ? ("_270X32" as const)
                      : undefined
                  }
                >
                  {p.renderPlasmicSlot({
                    defaultContents: "Description",
                    value: args.descriptionB
                  })}
                </ButtonFormDropdownSelect>
              ) : null}
              {(
                hasVariant(variants, "inputType", "displayText") ? true : false
              ) ? (
                <div
                  className={classNames(defaultcss.all, sty.freeBox___9ZcGl, {
                    [sty.freeBox__inputType_companyname___9ZcGLykMv3]:
                      hasVariant(variants, "inputType", "companyname"),
                    [sty.freeBox__inputType_displayText___9ZcGLtnHb0]:
                      hasVariant(variants, "inputType", "displayText")
                  })}
                >
                  {p.renderPlasmicSlot({
                    defaultContents: "Enter some text",
                    value: args.slot,
                    className: classNames(sty.slotSlot, {
                      [sty.slotSlot__inputType_displayText]: hasVariant(
                        variants,
                        "inputType",
                        "displayText"
                      )
                    })
                  })}
                </div>
              ) : null}
              {(
                hasVariant(variants, "inputType", "dropdownDropdown")
                  ? false
                  : hasVariant(variants, "inputType", "dropdownText")
                  ? false
                  : hasVariant(variants, "inputType", "companyname")
                  ? false
                  : hasVariant(variants, "inputType", "username")
                  ? false
                  : hasVariant(variants, "singleLineText", "singleLineText")
                  ? false
                  : hasVariant(variants, "multiLineText", "multiLineText")
                  ? false
                  : hasVariant(variants, "inputType", "displayText")
                  ? false
                  : true
              ) ? (
                <InputTextForm
                  className={classNames(
                    "__wab_instance",
                    sty.inputTextForm__h4LjI,
                    {
                      [sty.inputTextForm__inputType_companyname__h4LjIykMv3]:
                        hasVariant(variants, "inputType", "companyname"),
                      [sty.inputTextForm__inputType_displayText__h4LjItnHb0]:
                        hasVariant(variants, "inputType", "displayText"),
                      [sty.inputTextForm__inputType_dropdownDropdown__h4LjIFhTyX]:
                        hasVariant(variants, "inputType", "dropdownDropdown"),
                      [sty.inputTextForm__inputType_dropdownText__h4LjIcUrbc]:
                        hasVariant(variants, "inputType", "dropdownText"),
                      [sty.inputTextForm__inputType_username__h4LjIxJrn]:
                        hasVariant(variants, "inputType", "username"),
                      [sty.inputTextForm__multiLineText__h4LjIyidhx]:
                        hasVariant(variants, "multiLineText", "multiLineText"),
                      [sty.inputTextForm__singleLineText__h4LjIcwdGi]:
                        hasVariant(variants, "singleLineText", "singleLineText")
                    }
                  )}
                  labelHeadline={"First name"}
                  width={"_270" as const}
                />
              ) : null}
              {(
                hasVariant(variants, "inputType", "dropdownDropdown")
                  ? false
                  : hasVariant(variants, "inputType", "dropdownText")
                  ? false
                  : hasVariant(variants, "inputType", "companyname")
                  ? false
                  : hasVariant(variants, "inputType", "username")
                  ? false
                  : hasVariant(variants, "singleLineText", "singleLineText")
                  ? false
                  : hasVariant(variants, "multiLineText", "multiLineText")
                  ? false
                  : hasVariant(variants, "inputType", "displayText")
                  ? false
                  : true
              ) ? (
                <InputTextForm
                  className={classNames(
                    "__wab_instance",
                    sty.inputTextForm___8M2Gr,
                    {
                      [sty.inputTextForm__inputType_companyname___8M2GrykMv3]:
                        hasVariant(variants, "inputType", "companyname"),
                      [sty.inputTextForm__inputType_displayText___8M2GrtnHb0]:
                        hasVariant(variants, "inputType", "displayText"),
                      [sty.inputTextForm__inputType_dropdownDropdown___8M2GrFhTyX]:
                        hasVariant(variants, "inputType", "dropdownDropdown"),
                      [sty.inputTextForm__inputType_dropdownText___8M2GrCUrbc]:
                        hasVariant(variants, "inputType", "dropdownText"),
                      [sty.inputTextForm__inputType_username___8M2GrxJrn]:
                        hasVariant(variants, "inputType", "username"),
                      [sty.inputTextForm__multiLineText___8M2GrYidhx]:
                        hasVariant(variants, "multiLineText", "multiLineText"),
                      [sty.inputTextForm__singleLineText___8M2GrCwdGi]:
                        hasVariant(variants, "singleLineText", "singleLineText")
                    }
                  )}
                  labelHeadline={"Last name"}
                  width={"_270" as const}
                />
              ) : null}
              {(
                hasVariant(variants, "multiLineText", "multiLineText")
                  ? false
                  : false
              ) ? (
                <TextMultiLineA
                  data-plasmic-name={"textMultiLineA"}
                  data-plasmic-override={overrides.textMultiLineA}
                  className={classNames("__wab_instance", sty.textMultiLineA, {
                    [sty.textMultiLineA__multiLineText]: hasVariant(
                      variants,
                      "multiLineText",
                      "multiLineText"
                    )
                  })}
                  size={
                    hasVariant(variants, "multiLineText", "multiLineText")
                      ? ("large" as const)
                      : undefined
                  }
                />
              ) : null}
              {(
                hasVariant(variants, "inputType", "dropdownText") ? true : false
              ) ? (
                <InputTextForm
                  className={classNames(
                    "__wab_instance",
                    sty.inputTextForm__svMhu,
                    {
                      [sty.inputTextForm__inputType_displayText__svMhUtnHb0]:
                        hasVariant(variants, "inputType", "displayText"),
                      [sty.inputTextForm__inputType_dropdownDropdown__svMhuFhTyX]:
                        hasVariant(variants, "inputType", "dropdownDropdown"),
                      [sty.inputTextForm__inputType_dropdownText__svMhucUrbc]:
                        hasVariant(variants, "inputType", "dropdownText")
                    }
                  )}
                  labelHeadline={p.renderPlasmicSlot({
                    defaultContents: hasVariant(
                      variants,
                      "inputType",
                      "dropdownText"
                    )
                      ? "Label"
                      : "City",
                    value: args.slotLabel,
                    className: classNames(sty.slotSlotLabel, {
                      [sty.slotSlotLabel__inputType_dropdownText]: hasVariant(
                        variants,
                        "inputType",
                        "dropdownText"
                      )
                    })
                  })}
                  width={
                    hasVariant(variants, "inputType", "dropdownText")
                      ? ("_270" as const)
                      : undefined
                  }
                />
              ) : null}
              {(
                hasVariant(variants, "singleLineText", "singleLineText")
                  ? true
                  : false
              ) ? (
                <div
                  data-plasmic-name={"inputTextContainer"}
                  data-plasmic-override={overrides.inputTextContainer}
                  className={classNames(
                    defaultcss.all,
                    sty.inputTextContainer,
                    {
                      [sty.inputTextContainer__multiLineText]: hasVariant(
                        variants,
                        "multiLineText",
                        "multiLineText"
                      ),
                      [sty.inputTextContainer__singleLineText]: hasVariant(
                        variants,
                        "singleLineText",
                        "singleLineText"
                      )
                    }
                  )}
                >
                  <div
                    data-plasmic-name={"singleLineTextContainerParent"}
                    data-plasmic-override={
                      overrides.singleLineTextContainerParent
                    }
                    className={classNames(
                      defaultcss.all,
                      sty.singleLineTextContainerParent,
                      {
                        [sty.singleLineTextContainerParent__singleLineText]:
                          hasVariant(
                            variants,
                            "singleLineText",
                            "singleLineText"
                          )
                      }
                    )}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: (
                        <input
                          className={classNames(
                            defaultcss.input,
                            sty.textbox__m2Ruz
                          )}
                          placeholder={"Some placeholder" as const}
                          size={1 as const}
                          type={"text" as const}
                          value={"Some value" as const}
                        />
                      ),

                      value: args.singleLineTextContainer
                    })}
                  </div>
                </div>
              ) : null}
              {(
                hasVariant(variants, "inputType", "username") ? true : false
              ) ? (
                <div
                  data-plasmic-name={"urlTextParent"}
                  data-plasmic-override={overrides.urlTextParent}
                  className={classNames(defaultcss.all, sty.urlTextParent, {
                    [sty.urlTextParent__inputType_dropdownText]: hasVariant(
                      variants,
                      "inputType",
                      "dropdownText"
                    ),
                    [sty.urlTextParent__inputType_username]: hasVariant(
                      variants,
                      "inputType",
                      "username"
                    )
                  })}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__cjJpG,
                      {
                        [sty.freeBox__inputType_username__cjJpGxJrn]:
                          hasVariant(variants, "inputType", "username")
                      }
                    )}
                  >
                    {"intrepid.technology/"}
                  </div>
                </div>
              ) : null}
              {(
                hasVariant(variants, "inputType", "username") ? false : false
              ) ? (
                <input
                  className={classNames(defaultcss.input, sty.textbox__swp6E, {
                    [sty.textbox__inputType_username__swp6ExJrn]: hasVariant(
                      variants,
                      "inputType",
                      "username"
                    )
                  })}
                  placeholder={"Some placeholder" as const}
                  size={1 as const}
                  type={"text" as const}
                  value={"Some value" as const}
                />
              ) : null}
              {(
                hasVariant(variants, "inputType", "username") ? true : false
              ) ? (
                <div
                  data-plasmic-name={"inputTextParent"}
                  data-plasmic-override={overrides.inputTextParent}
                  className={classNames(defaultcss.all, sty.inputTextParent, {
                    [sty.inputTextParent__inputType_username]: hasVariant(
                      variants,
                      "inputType",
                      "username"
                    )
                  })}
                >
                  {(
                    hasVariant(variants, "inputType", "username") ? true : false
                  ) ? (
                    <input
                      className={classNames(
                        defaultcss.input,
                        sty.textbox__gLrP,
                        {
                          [sty.textbox__inputType_username__gLrPxJrn]:
                            hasVariant(variants, "inputType", "username")
                        }
                      )}
                      placeholder={
                        hasVariant(variants, "inputType", "username")
                          ? ("" as const)
                          : ("Some placeholder" as const)
                      }
                      size={1 as const}
                      type={"text" as const}
                      value={
                        hasVariant(variants, "inputType", "username")
                          ? ("" as const)
                          : ("Some value" as const)
                      }
                    />
                  ) : null}
                </div>
              ) : null}
              {(
                hasVariant(variants, "inputType", "companyname") ? true : false
              ) ? (
                <div
                  className={classNames(defaultcss.all, sty.freeBox__pcZhW, {
                    [sty.freeBox__inputType_companyname__pcZhWykMv3]:
                      hasVariant(variants, "inputType", "companyname")
                  })}
                >
                  <div
                    className={classNames(defaultcss.all, sty.freeBox__p7Dc, {
                      [sty.freeBox__inputType_companyname__p7DcykMv3]:
                        hasVariant(variants, "inputType", "companyname")
                    })}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: "intrepid.technology/company/",
                      value: args.slot2,
                      className: classNames(sty.slotSlot2, {
                        [sty.slotSlot2__inputType_companyname]: hasVariant(
                          variants,
                          "inputType",
                          "companyname"
                        )
                      })
                    })}
                  </div>
                </div>
              ) : null}
              {(
                hasVariant(variants, "inputType", "companyname") ? true : false
              ) ? (
                <div
                  data-plasmic-name={"inputUrlTextParent"}
                  data-plasmic-override={overrides.inputUrlTextParent}
                  className={classNames(
                    defaultcss.all,
                    sty.inputUrlTextParent,
                    {
                      [sty.inputUrlTextParent__inputType_companyname]:
                        hasVariant(variants, "inputType", "companyname")
                    }
                  )}
                >
                  {(
                    hasVariant(variants, "inputType", "companyname")
                      ? true
                      : false
                  ) ? (
                    <input
                      className={classNames(
                        defaultcss.input,
                        sty.textbox___6Ejj,
                        {
                          [sty.textbox__inputType_companyname___6EjjykMv3]:
                            hasVariant(variants, "inputType", "companyname")
                        }
                      )}
                      placeholder={
                        hasVariant(variants, "inputType", "companyname")
                          ? ("" as const)
                          : ("" as const)
                      }
                      size={1 as const}
                      type={"text" as const}
                      value={
                        hasVariant(variants, "inputType", "companyname")
                          ? ("" as const)
                          : ("" as const)
                      }
                    />
                  ) : null}
                </div>
              ) : null}
            </p.Stack>
          ) : null}
          {(
            hasVariant(variants, "multiLineText", "multiLineText")
              ? true
              : false
          ) ? (
            <div
              data-plasmic-name={"textParent"}
              data-plasmic-override={overrides.textParent}
              className={classNames(defaultcss.all, sty.textParent, {
                [sty.textParent__multiLineText]: hasVariant(
                  variants,
                  "multiLineText",
                  "multiLineText"
                )
              })}
            >
              <div
                data-plasmic-name={"inputMultiLineTextParent"}
                data-plasmic-override={overrides.inputMultiLineTextParent}
                className={classNames(
                  defaultcss.all,
                  sty.inputMultiLineTextParent,
                  {
                    [sty.inputMultiLineTextParent__multiLineText]: hasVariant(
                      variants,
                      "multiLineText",
                      "multiLineText"
                    ),
                    [sty.inputMultiLineTextParent__singleLineText]: hasVariant(
                      variants,
                      "singleLineText",
                      "singleLineText"
                    )
                  }
                )}
              >
                {p.renderPlasmicSlot({
                  defaultContents: (
                    <textarea
                      className={classNames(
                        defaultcss.textarea,
                        sty.textarea__neW4Q
                      )}
                      value={"long form text" as const}
                    />
                  ),

                  value: args.children
                })}
              </div>
            </div>
          ) : null}
        </p.Stack>

        <p.Stack
          as={"div"}
          data-plasmic-name={"descriptionCard"}
          data-plasmic-override={overrides.descriptionCard}
          hasGap={true}
          className={classNames(defaultcss.all, sty.descriptionCard, {
            [sty.descriptionCard__button_subDescription]:
              hasVariant(variants, "button", "button") &&
              hasVariant(variants, "subDescription", "subDescription"),
            [sty.descriptionCard__inputType_companyname]: hasVariant(
              variants,
              "inputType",
              "companyname"
            ),
            [sty.descriptionCard__inputType_dropdownText]: hasVariant(
              variants,
              "inputType",
              "dropdownText"
            ),
            [sty.descriptionCard__inputType_username]: hasVariant(
              variants,
              "inputType",
              "username"
            ),
            [sty.descriptionCard__singleLineText]: hasVariant(
              variants,
              "singleLineText",
              "singleLineText"
            ),
            [sty.descriptionCard__subDescription]: hasVariant(
              variants,
              "subDescription",
              "subDescription"
            )
          })}
        >
          <div
            data-plasmic-name={"descriptionParent"}
            data-plasmic-override={overrides.descriptionParent}
            className={classNames(defaultcss.all, sty.descriptionParent, {
              [sty.descriptionParent__subDescription]: hasVariant(
                variants,
                "subDescription",
                "subDescription"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: "Description",
              value: args.description,
              className: classNames(sty.slotDescription, {
                [sty.slotDescription__inputType_displayText]: hasVariant(
                  variants,
                  "inputType",
                  "displayText"
                ),
                [sty.slotDescription__inputType_dropdownText]: hasVariant(
                  variants,
                  "inputType",
                  "dropdownText"
                ),
                [sty.slotDescription__multiLineText]: hasVariant(
                  variants,
                  "multiLineText",
                  "multiLineText"
                ),
                [sty.slotDescription__subDescription]: hasVariant(
                  variants,
                  "subDescription",
                  "subDescription"
                )
              })
            })}
          </div>

          <ButtonPrimary
            data-plasmic-name={"buttonPrimary"}
            data-plasmic-override={overrides.buttonPrimary}
            className={classNames("__wab_instance", sty.buttonPrimary, {
              [sty.buttonPrimary__button]: hasVariant(
                variants,
                "button",
                "button"
              ),
              [sty.buttonPrimary__subDescription]: hasVariant(
                variants,
                "subDescription",
                "subDescription"
              )
            })}
            size={"_140" as const}
          >
            {"Save"}
          </ButtonPrimary>
        </p.Stack>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "parent",
    "mainCard",
    "headlineParent",
    "inputElementParent",
    "textMultiLineA",
    "inputTextContainer",
    "singleLineTextContainerParent",
    "urlTextParent",
    "inputTextParent",
    "inputUrlTextParent",
    "textParent",
    "inputMultiLineTextParent",
    "descriptionCard",
    "descriptionParent",
    "buttonPrimary"
  ],
  parent: [
    "parent",
    "mainCard",
    "headlineParent",
    "inputElementParent",
    "textMultiLineA",
    "inputTextContainer",
    "singleLineTextContainerParent",
    "urlTextParent",
    "inputTextParent",
    "inputUrlTextParent",
    "textParent",
    "inputMultiLineTextParent",
    "descriptionCard",
    "descriptionParent",
    "buttonPrimary"
  ],
  mainCard: [
    "mainCard",
    "headlineParent",
    "inputElementParent",
    "textMultiLineA",
    "inputTextContainer",
    "singleLineTextContainerParent",
    "urlTextParent",
    "inputTextParent",
    "inputUrlTextParent",
    "textParent",
    "inputMultiLineTextParent"
  ],
  headlineParent: ["headlineParent"],
  inputElementParent: [
    "inputElementParent",
    "textMultiLineA",
    "inputTextContainer",
    "singleLineTextContainerParent",
    "urlTextParent",
    "inputTextParent",
    "inputUrlTextParent"
  ],
  textMultiLineA: ["textMultiLineA"],
  inputTextContainer: ["inputTextContainer", "singleLineTextContainerParent"],
  singleLineTextContainerParent: ["singleLineTextContainerParent"],
  urlTextParent: ["urlTextParent"],
  inputTextParent: ["inputTextParent"],
  inputUrlTextParent: ["inputUrlTextParent"],
  textParent: ["textParent", "inputMultiLineTextParent"],
  inputMultiLineTextParent: ["inputMultiLineTextParent"],
  descriptionCard: ["descriptionCard", "descriptionParent", "buttonPrimary"],
  descriptionParent: ["descriptionParent"],
  buttonPrimary: ["buttonPrimary"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  parent: "div";
  mainCard: "div";
  headlineParent: "div";
  inputElementParent: "div";
  textMultiLineA: typeof TextMultiLineA;
  inputTextContainer: "div";
  singleLineTextContainerParent: "div";
  urlTextParent: "div";
  inputTextParent: "div";
  inputUrlTextParent: "div";
  textParent: "div";
  inputMultiLineTextParent: "div";
  descriptionCard: "div";
  descriptionParent: "div";
  buttonPrimary: typeof ButtonPrimary;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInputFormCardPrimary__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicInputFormCardPrimary__VariantsArgs;
    args?: PlasmicInputFormCardPrimary__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicInputFormCardPrimary__Fetches;
  } & Omit<PlasmicInputFormCardPrimary__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicInputFormCardPrimary__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicInputFormCardPrimary__ArgProps,
      internalVariantPropNames: PlasmicInputFormCardPrimary__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicInputFormCardPrimary__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInputFormCardPrimary";
  } else {
    func.displayName = `PlasmicInputFormCardPrimary.${nodeName}`;
  }
  return func;
}

export const PlasmicInputFormCardPrimary = Object.assign(
  // Top-level PlasmicInputFormCardPrimary renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    parent: makeNodeComponent("parent"),
    mainCard: makeNodeComponent("mainCard"),
    headlineParent: makeNodeComponent("headlineParent"),
    inputElementParent: makeNodeComponent("inputElementParent"),
    textMultiLineA: makeNodeComponent("textMultiLineA"),
    inputTextContainer: makeNodeComponent("inputTextContainer"),
    singleLineTextContainerParent: makeNodeComponent(
      "singleLineTextContainerParent"
    ),
    urlTextParent: makeNodeComponent("urlTextParent"),
    inputTextParent: makeNodeComponent("inputTextParent"),
    inputUrlTextParent: makeNodeComponent("inputUrlTextParent"),
    textParent: makeNodeComponent("textParent"),
    inputMultiLineTextParent: makeNodeComponent("inputMultiLineTextParent"),
    descriptionCard: makeNodeComponent("descriptionCard"),
    descriptionParent: makeNodeComponent("descriptionParent"),
    buttonPrimary: makeNodeComponent("buttonPrimary"),

    // Metadata about props expected for PlasmicInputFormCardPrimary
    internalVariantProps: PlasmicInputFormCardPrimary__VariantProps,
    internalArgProps: PlasmicInputFormCardPrimary__ArgProps
  }
);

export default PlasmicInputFormCardPrimary;
/* prettier-ignore-end */
