// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: 3BzJ4vc4wuycTx
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavbarInternal from "../../NavbarInternal"; // plasmic-import: nBfIHHqHvjUywN9/component
import NavbarMemberEdit from "../../NavbarMemberEdit"; // plasmic-import: MpfEfF3PxMa-4U/component
import CardHeaderTitleDisplay from "../../CardHeaderTitleDisplay"; // plasmic-import: fk5BRaqICb6MOmt/component
import CardHeaderTitlePrimary from "../../CardHeaderTitlePrimary"; // plasmic-import: qjG0g-Rmz0BeDH/component
import InputTextField from "../../InputTextField"; // plasmic-import: eRJarSvs8Cmudj/component
import InputTextForm from "../../InputTextForm"; // plasmic-import: xiZmrha0lhlIet/component
import SelectGroupDropdownPrimary from "../../SelectGroupDropdownPrimary"; // plasmic-import: LkR_9K5xfRnJSu/component
import ButtonGroupStripeConnect from "../../ButtonGroupStripeConnect"; // plasmic-import: CuE0PDTgv-3GDi/component
import CardSocialConnectSwitch from "../../CardSocialConnectSwitch"; // plasmic-import: 9czIbo_1TSRssu/component
import InputTextPrefixSuffix from "../../InputTextPrefixSuffix"; // plasmic-import: SC-07wTZAqk8QnI/component
import SwitchTextGroupPrimary from "../../SwitchTextGroupPrimary"; // plasmic-import: _1lDuzbqoV4zJL/component
import CheckboxTextPrimary from "../../CheckboxTextPrimary"; // plasmic-import: zFzsipj3oueIlJt/component
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: gpNjXfbD_ZdpPU/component
import FooterB from "../../FooterB"; // plasmic-import: IZENTiSL4_zyK8/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicEditteamsettings.module.css"; // plasmic-import: 3BzJ4vc4wuycTx/css

import PlusBoldIcon from "./icons/PlasmicIcon__PlusBold"; // plasmic-import: lhSEEajPJGZatfD/icon

export type PlasmicEditteamsettings__VariantMembers = {};

export type PlasmicEditteamsettings__VariantsArgs = {};
type VariantPropType = keyof PlasmicEditteamsettings__VariantsArgs;
export const PlasmicEditteamsettings__VariantProps =
  new Array<VariantPropType>();

export type PlasmicEditteamsettings__ArgsType = {};
type ArgPropType = keyof PlasmicEditteamsettings__ArgsType;
export const PlasmicEditteamsettings__ArgProps = new Array<ArgPropType>();

export type PlasmicEditteamsettings__OverridesType = {
  root?: p.Flex<"div">;
  navbarInternal?: p.Flex<typeof NavbarInternal>;
  navbarMemberEdit?: p.Flex<typeof NavbarMemberEdit>;
  sectionTeamSettingsStripeConnect?: p.Flex<"section">;
  formTeamEditBusinessVerification?: p.Flex<"form">;
  cardTeamLegalBusinessGroup?: p.Flex<"div">;
  inputTextField?: p.Flex<typeof InputTextField>;
  cardTeamRegisteredAddress?: p.Flex<"div">;
  teamAddressGroup?: p.Flex<"div">;
  teamStateZipGroup?: p.Flex<"div">;
  cardTeamTaxId?: p.Flex<"div">;
  teamTaxIdGroup?: p.Flex<"div">;
  buttonGroupStripeConnect?: p.Flex<typeof ButtonGroupStripeConnect>;
  sectionTeamSettingsAccountingConnect?: p.Flex<"section">;
  cardTeamAccountingConnections?: p.Flex<"div">;
  inputGroupTeamAccountingConnections?: p.Flex<"div">;
  sectionTeamSettingsAnalyticsConnect?: p.Flex<"section">;
  cardTeamAnalytics?: p.Flex<"div">;
  inputTextPrefixSuffix?: p.Flex<typeof InputTextPrefixSuffix>;
  sectionTeamNotifications?: p.Flex<"div">;
  notificationPushEmail?: p.Flex<"div">;
  notificationActivity?: p.Flex<"div">;
  notificationNewsEvents?: p.Flex<"div">;
  sectionTeamSettingsLeaveTeam?: p.Flex<"section">;
  cardTeamLeaveAccount?: p.Flex<"section">;
  sectionTeamSettingsDeleteTeam?: p.Flex<"section">;
  cardTeamDeleteAccount?: p.Flex<"section">;
  footerB?: p.Flex<typeof FooterB>;
};

export interface DefaultEditteamsettingsProps {
  dataFetches: PlasmicEditteamsettings__Fetches;
}

function PlasmicEditteamsettings__RenderFunc(props: {
  variants: PlasmicEditteamsettings__VariantsArgs;
  args: PlasmicEditteamsettings__ArgsType;
  overrides: PlasmicEditteamsettings__OverridesType;
  dataFetches?: PlasmicEditteamsettings__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <React.Fragment>
      <Head>
        <title key="title">{""}</title>
        <meta key="og:title" property="og:title" content={""} />
        <meta
          key="description"
          name="description"
          property="og:description"
          content={""}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <NavbarInternal
            data-plasmic-name={"navbarInternal"}
            data-plasmic-override={overrides.navbarInternal}
            className={classNames("__wab_instance", sty.navbarInternal)}
          />

          <NavbarMemberEdit
            data-plasmic-name={"navbarMemberEdit"}
            data-plasmic-override={overrides.navbarMemberEdit}
            className={classNames("__wab_instance", sty.navbarMemberEdit)}
            navItems={[
              "notifications",
              "wallet",
              "lists",
              "reviews",
              "messages"
            ]}
            selected={"settings" as const}
          />

          <p.Stack
            as={"section"}
            data-plasmic-name={"sectionTeamSettingsStripeConnect"}
            data-plasmic-override={overrides.sectionTeamSettingsStripeConnect}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              sty.sectionTeamSettingsStripeConnect
            )}
          >
            <CardHeaderTitleDisplay
              className={classNames(
                "__wab_instance",
                sty.cardHeaderTitleDisplay__gd1ZH
              )}
              size={"_720" as const}
              slot={
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__wizdw
                  )}
                >
                  {"Manage team account"}
                </div>
              }
              textDisplay={"Settings"}
              textSubhead={"Maintain a safe and secure community experience  "}
            />

            <p.Stack
              as={"form"}
              data-plasmic-name={"formTeamEditBusinessVerification"}
              data-plasmic-override={overrides.formTeamEditBusinessVerification}
              hasGap={true}
              className={classNames(
                defaultcss.all,
                sty.formTeamEditBusinessVerification
              )}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"cardTeamLegalBusinessGroup"}
                data-plasmic-override={overrides.cardTeamLegalBusinessGroup}
                hasGap={true}
                className={classNames(
                  defaultcss.all,
                  sty.cardTeamLegalBusinessGroup
                )}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary__wWBx0
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox___8Oetn
                      )}
                    >
                      {
                        "Enter the legal or registered name of your your team or business to verify your account - This will not show up on your profile"
                      }
                    </div>
                  }
                >
                  {"Legal business name"}
                </CardHeaderTitlePrimary>

                <InputTextField
                  data-plasmic-name={"inputTextField"}
                  data-plasmic-override={overrides.inputTextField}
                  className={classNames("__wab_instance", sty.inputTextField)}
                  size={"_540" as const}
                  type={"secondary" as const}
                />

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"cardTeamRegisteredAddress"}
                  data-plasmic-override={overrides.cardTeamRegisteredAddress}
                  hasGap={true}
                  className={classNames(
                    defaultcss.all,
                    sty.cardTeamRegisteredAddress
                  )}
                >
                  <CardHeaderTitlePrimary
                    className={classNames(
                      "__wab_instance",
                      sty.cardHeaderTitlePrimary__uyjai
                    )}
                    slot={
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.freeBox__tJXeo
                        )}
                      >
                        {
                          "Speed up the verification process and unlock customised financial services for your team."
                        }
                      </div>
                    }
                  >
                    {"Registered address"}
                  </CardHeaderTitlePrimary>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"teamAddressGroup"}
                    data-plasmic-override={overrides.teamAddressGroup}
                    hasGap={true}
                    className={classNames(defaultcss.all, sty.teamAddressGroup)}
                  >
                    <InputTextForm
                      labelHeadline={"Address"}
                      subhead={"subhead" as const}
                      type={"primary" as const}
                      width={"_540" as const}
                    />

                    <InputTextForm
                      label={"label" as const}
                      labelHeadline={"Number"}
                      subhead={"subhead" as const}
                      type={"primary" as const}
                      width={"_540" as const}
                    />

                    <SelectGroupDropdownPrimary
                      className={classNames(
                        "__wab_instance",
                        sty.selectGroupDropdownPrimary__qPq1O
                      )}
                      description={"description" as const}
                      width={"_360" as const}
                    >
                      {"Country"}
                    </SelectGroupDropdownPrimary>

                    <InputTextForm
                      className={classNames(
                        "__wab_instance",
                        sty.inputTextForm__uD2U
                      )}
                      labelHeadline={
                        <div
                          className={classNames(
                            defaultcss.all,
                            defaultcss.__wab_text,
                            sty.freeBox__lTjJu
                          )}
                        >
                          {"City"}
                        </div>
                      }
                      subhead={"subhead" as const}
                      type={"primary" as const}
                      width={"_360" as const}
                    />

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"teamStateZipGroup"}
                      data-plasmic-override={overrides.teamStateZipGroup}
                      hasGap={true}
                      className={classNames(
                        defaultcss.all,
                        sty.teamStateZipGroup
                      )}
                    >
                      <InputTextForm
                        labelHeadline={"Province/State"}
                        subhead={"subhead" as const}
                        type={"primary" as const}
                        width={"_160" as const}
                      />

                      <InputTextForm
                        labelHeadline={
                          <div
                            className={classNames(
                              defaultcss.all,
                              defaultcss.__wab_text,
                              sty.freeBox__vIiHk
                            )}
                          >
                            {"Zip/Postal code"}
                          </div>
                        }
                        subhead={"subhead" as const}
                        type={"primary" as const}
                        width={"_160" as const}
                      />
                    </p.Stack>
                  </p.Stack>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"cardTeamTaxId"}
                  data-plasmic-override={overrides.cardTeamTaxId}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.cardTeamTaxId)}
                >
                  <CardHeaderTitlePrimary
                    className={classNames(
                      "__wab_instance",
                      sty.cardHeaderTitlePrimary__hm70G
                    )}
                    slot={
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.freeBox__crGb
                        )}
                      >
                        {
                          "Let us automatically handle your taxes. Countries that do not use Tax IDs are not listed"
                        }
                      </div>
                    }
                  >
                    {"Tax ID"}
                  </CardHeaderTitlePrimary>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"teamTaxIdGroup"}
                    data-plasmic-override={overrides.teamTaxIdGroup}
                    hasGap={true}
                    className={classNames(defaultcss.all, sty.teamTaxIdGroup)}
                  >
                    <SelectGroupDropdownPrimary
                      className={classNames(
                        "__wab_instance",
                        sty.selectGroupDropdownPrimary__gs3F6
                      )}
                      description={"description" as const}
                      width={"_144" as const}
                    >
                      {"Country"}
                    </SelectGroupDropdownPrimary>

                    <InputTextForm
                      className={classNames(
                        "__wab_instance",
                        sty.inputTextForm__h07OR
                      )}
                      labelHeadline={"Number"}
                      subhead={"subhead" as const}
                      type={"primary" as const}
                      width={"_360" as const}
                    />
                  </p.Stack>
                </p.Stack>
              </p.Stack>

              <ButtonGroupStripeConnect
                data-plasmic-name={"buttonGroupStripeConnect"}
                data-plasmic-override={overrides.buttonGroupStripeConnect}
                className={classNames(
                  "__wab_instance",
                  sty.buttonGroupStripeConnect
                )}
              />
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"section"}
            data-plasmic-name={"sectionTeamSettingsAccountingConnect"}
            data-plasmic-override={
              overrides.sectionTeamSettingsAccountingConnect
            }
            hasGap={true}
            className={classNames(
              defaultcss.all,
              sty.sectionTeamSettingsAccountingConnect
            )}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"cardTeamAccountingConnections"}
              data-plasmic-override={overrides.cardTeamAccountingConnections}
              hasGap={true}
              className={classNames(
                defaultcss.all,
                sty.cardTeamAccountingConnections
              )}
            >
              <CardHeaderTitlePrimary
                className={classNames(
                  "__wab_instance",
                  sty.cardHeaderTitlePrimary__fDxo3
                )}
                slot={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__cP1Vr
                    )}
                  >
                    {
                      "Connect your accounting software to receive added financial services"
                    }
                  </div>
                }
              >
                {"Accounting connections"}
              </CardHeaderTitlePrimary>

              <div
                data-plasmic-name={"inputGroupTeamAccountingConnections"}
                data-plasmic-override={
                  overrides.inputGroupTeamAccountingConnections
                }
                className={classNames(
                  defaultcss.all,
                  sty.inputGroupTeamAccountingConnections
                )}
              >
                <CardSocialConnectSwitch
                  accounting={"xero" as const}
                  className={classNames(
                    "__wab_instance",
                    sty.cardSocialConnectSwitch__if00I
                  )}
                  width={"_540" as const}
                />

                <CardSocialConnectSwitch
                  accounting={"quickbooks" as const}
                  className={classNames(
                    "__wab_instance",
                    sty.cardSocialConnectSwitch__wBgZq
                  )}
                  width={"_540" as const}
                />
              </div>
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"section"}
            data-plasmic-name={"sectionTeamSettingsAnalyticsConnect"}
            data-plasmic-override={
              overrides.sectionTeamSettingsAnalyticsConnect
            }
            hasGap={true}
            className={classNames(
              defaultcss.all,
              sty.sectionTeamSettingsAnalyticsConnect
            )}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"cardTeamAnalytics"}
              data-plasmic-override={overrides.cardTeamAnalytics}
              hasGap={true}
              className={classNames(defaultcss.all, sty.cardTeamAnalytics)}
            >
              <CardHeaderTitlePrimary
                className={classNames(
                  "__wab_instance",
                  sty.cardHeaderTitlePrimary__eat5B
                )}
                slot={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__m3DYl
                    )}
                  >
                    {"Send page visitor data to your Google Analytics account."}
                  </div>
                }
              >
                {"Analytics"}
              </CardHeaderTitlePrimary>

              <InputTextPrefixSuffix
                data-plasmic-name={"inputTextPrefixSuffix"}
                data-plasmic-override={overrides.inputTextPrefixSuffix}
                className={classNames(
                  "__wab_instance",
                  sty.inputTextPrefixSuffix
                )}
                prefixLabelHeadline={"UA"}
                suffix={"suffix" as const}
                type={"primary" as const}
                width={"_360" as const}
              />
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"sectionTeamNotifications"}
            data-plasmic-override={overrides.sectionTeamNotifications}
            hasGap={true}
            className={classNames(defaultcss.all, sty.sectionTeamNotifications)}
          >
            <CardHeaderTitleDisplay
              className={classNames(
                "__wab_instance",
                sty.cardHeaderTitleDisplay__nbkZz
              )}
              headings={["title"]}
              size={"_720" as const}
              slot={
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__pleZy
                  )}
                >
                  {"Notifications"}
                </div>
              }
              textDisplay={"Profile edit"}
              textSubhead={"Get notified about activity on Intrepid"}
            />

            <p.Stack
              as={"div"}
              data-plasmic-name={"notificationPushEmail"}
              data-plasmic-override={overrides.notificationPushEmail}
              hasGap={true}
              className={classNames(defaultcss.all, sty.notificationPushEmail)}
            >
              <CardHeaderTitlePrimary
                className={classNames(
                  "__wab_instance",
                  sty.cardHeaderTitlePrimary__oHdhR
                )}
                slot={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__b5BBz
                    )}
                  >
                    {"Updates when you're away from the community."}
                  </div>
                }
              >
                {"Speak easy"}
              </CardHeaderTitlePrimary>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.freeBox__rt7Or)}
              >
                <SwitchTextGroupPrimary
                  className={classNames(
                    "__wab_instance",
                    sty.switchTextGroupPrimary__wlgVc
                  )}
                  descriptionText={
                    "What's going on in the community - sent to your mobile"
                  }
                  textGroup={"Push notifications"}
                />

                <SwitchTextGroupPrimary
                  className={classNames(
                    "__wab_instance",
                    sty.switchTextGroupPrimary__ycypa
                  )}
                  descriptionText={
                    "What's going on in the community - sent to your inbox"
                  }
                  textGroup={"Email notifications"}
                />
              </p.Stack>
            </p.Stack>

            <p.Stack
              as={"div"}
              data-plasmic-name={"notificationActivity"}
              data-plasmic-override={overrides.notificationActivity}
              hasGap={true}
              className={classNames(defaultcss.all, sty.notificationActivity)}
            >
              <CardHeaderTitlePrimary
                className={classNames(
                  "__wab_instance",
                  sty.cardHeaderTitlePrimary__kI7Uh
                )}
                slot={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__bIdRs
                    )}
                  >
                    {
                      "Get notifications from your interactions within the community."
                    }
                  </div>
                }
              >
                {"Heads up"}
              </CardHeaderTitlePrimary>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.freeBox__pv0Bm)}
              >
                <CheckboxTextPrimary
                  className={classNames(
                    "__wab_instance",
                    sty.checkboxTextPrimary__ve55J
                  )}
                  text={"_16" as const}
                >
                  {"New subscriber"}
                </CheckboxTextPrimary>

                <CheckboxTextPrimary
                  className={classNames(
                    "__wab_instance",
                    sty.checkboxTextPrimary__righE
                  )}
                  text={"_16" as const}
                >
                  {"New tip"}
                </CheckboxTextPrimary>

                <CheckboxTextPrimary
                  className={classNames(
                    "__wab_instance",
                    sty.checkboxTextPrimary__z5WxB
                  )}
                  text={"_16" as const}
                >
                  {"New review"}
                </CheckboxTextPrimary>

                <CheckboxTextPrimary
                  className={classNames(
                    "__wab_instance",
                    sty.checkboxTextPrimary___5JzX2
                  )}
                  text={"_16" as const}
                >
                  {"New comment"}
                </CheckboxTextPrimary>

                <CheckboxTextPrimary
                  className={classNames(
                    "__wab_instance",
                    sty.checkboxTextPrimary___4Mww7
                  )}
                  text={"_16" as const}
                >
                  {"New follower"}
                </CheckboxTextPrimary>

                <CheckboxTextPrimary
                  className={classNames(
                    "__wab_instance",
                    sty.checkboxTextPrimary__gLpku
                  )}
                  text={"_16" as const}
                >
                  {"New connection request"}
                </CheckboxTextPrimary>

                <CheckboxTextPrimary
                  className={classNames(
                    "__wab_instance",
                    sty.checkboxTextPrimary___2Hm9I
                  )}
                  text={"_16" as const}
                >
                  {"Added to list"}
                </CheckboxTextPrimary>

                <CheckboxTextPrimary
                  className={classNames(
                    "__wab_instance",
                    sty.checkboxTextPrimary__drlZl
                  )}
                  text={"_16" as const}
                >
                  {"New reaction"}
                </CheckboxTextPrimary>
              </p.Stack>
            </p.Stack>

            <p.Stack
              as={"div"}
              data-plasmic-name={"notificationNewsEvents"}
              data-plasmic-override={overrides.notificationNewsEvents}
              hasGap={true}
              className={classNames(defaultcss.all, sty.notificationNewsEvents)}
            >
              <CardHeaderTitlePrimary
                className={classNames(
                  "__wab_instance",
                  sty.cardHeaderTitlePrimary__m8D77
                )}
                slot={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox___3Mpzz
                    )}
                  >
                    {
                      "All the fun things going on in the community- be in the know."
                    }
                  </div>
                }
              >
                {"Happenings"}
              </CardHeaderTitlePrimary>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.freeBox__vl58L)}
              >
                <SwitchTextGroupPrimary
                  className={classNames(
                    "__wab_instance",
                    sty.switchTextGroupPrimary___0SHfz
                  )}
                  descriptionText={
                    "Our weekly newsletter packed with fun stuff"
                  }
                  textGroup={"Email newsletter"}
                />

                <SwitchTextGroupPrimary
                  className={classNames(
                    "__wab_instance",
                    sty.switchTextGroupPrimary__lU3UH
                  )}
                  descriptionText={"Meet members live and in person"}
                  textGroup={"Events and meetups"}
                />
              </p.Stack>
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"section"}
            data-plasmic-name={"sectionTeamSettingsLeaveTeam"}
            data-plasmic-override={overrides.sectionTeamSettingsLeaveTeam}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              sty.sectionTeamSettingsLeaveTeam
            )}
          >
            <p.Stack
              as={"section"}
              data-plasmic-name={"cardTeamLeaveAccount"}
              data-plasmic-override={overrides.cardTeamLeaveAccount}
              hasGap={true}
              className={classNames(defaultcss.all, sty.cardTeamLeaveAccount)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.freeBox__phvK5)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary__wWImx
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox__brHlb
                      )}
                    >
                      {
                        "Permanently remove your account and all of its contents from the Intrepid community. This action is not reversible, so please continue with caution."
                      }
                    </div>
                  }
                >
                  {"Leave team"}
                </CardHeaderTitlePrimary>
              </p.Stack>

              <ButtonPrimary
                className={classNames(
                  "__wab_instance",
                  sty.buttonPrimary___9OmP
                )}
                color={"caution" as const}
                size={"_140" as const}
                type={"ghost" as const}
              >
                {"Delete account"}
              </ButtonPrimary>
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"section"}
            data-plasmic-name={"sectionTeamSettingsDeleteTeam"}
            data-plasmic-override={overrides.sectionTeamSettingsDeleteTeam}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              sty.sectionTeamSettingsDeleteTeam
            )}
          >
            <p.Stack
              as={"section"}
              data-plasmic-name={"cardTeamDeleteAccount"}
              data-plasmic-override={overrides.cardTeamDeleteAccount}
              hasGap={true}
              className={classNames(defaultcss.all, sty.cardTeamDeleteAccount)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.freeBox__nilsh)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary__ogOp1
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox__i2Kp5
                      )}
                    >
                      {
                        "Permanently remove your account and all of its contents from the Intrepid community. This action is not reversible, so please continue with caution."
                      }
                    </div>
                  }
                >
                  {"Delete team"}
                </CardHeaderTitlePrimary>
              </p.Stack>

              <ButtonPrimary
                className={classNames(
                  "__wab_instance",
                  sty.buttonPrimary__inHw0
                )}
                color={"caution" as const}
                size={"_140" as const}
                type={"ghost" as const}
              >
                {"Delete account"}
              </ButtonPrimary>
            </p.Stack>
          </p.Stack>

          <FooterB
            data-plasmic-name={"footerB"}
            data-plasmic-override={overrides.footerB}
            className={classNames("__wab_instance", sty.footerB)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbarInternal",
    "navbarMemberEdit",
    "sectionTeamSettingsStripeConnect",
    "formTeamEditBusinessVerification",
    "cardTeamLegalBusinessGroup",
    "inputTextField",
    "cardTeamRegisteredAddress",
    "teamAddressGroup",
    "teamStateZipGroup",
    "cardTeamTaxId",
    "teamTaxIdGroup",
    "buttonGroupStripeConnect",
    "sectionTeamSettingsAccountingConnect",
    "cardTeamAccountingConnections",
    "inputGroupTeamAccountingConnections",
    "sectionTeamSettingsAnalyticsConnect",
    "cardTeamAnalytics",
    "inputTextPrefixSuffix",
    "sectionTeamNotifications",
    "notificationPushEmail",
    "notificationActivity",
    "notificationNewsEvents",
    "sectionTeamSettingsLeaveTeam",
    "cardTeamLeaveAccount",
    "sectionTeamSettingsDeleteTeam",
    "cardTeamDeleteAccount",
    "footerB"
  ],
  navbarInternal: ["navbarInternal"],
  navbarMemberEdit: ["navbarMemberEdit"],
  sectionTeamSettingsStripeConnect: [
    "sectionTeamSettingsStripeConnect",
    "formTeamEditBusinessVerification",
    "cardTeamLegalBusinessGroup",
    "inputTextField",
    "cardTeamRegisteredAddress",
    "teamAddressGroup",
    "teamStateZipGroup",
    "cardTeamTaxId",
    "teamTaxIdGroup",
    "buttonGroupStripeConnect"
  ],
  formTeamEditBusinessVerification: [
    "formTeamEditBusinessVerification",
    "cardTeamLegalBusinessGroup",
    "inputTextField",
    "cardTeamRegisteredAddress",
    "teamAddressGroup",
    "teamStateZipGroup",
    "cardTeamTaxId",
    "teamTaxIdGroup",
    "buttonGroupStripeConnect"
  ],
  cardTeamLegalBusinessGroup: [
    "cardTeamLegalBusinessGroup",
    "inputTextField",
    "cardTeamRegisteredAddress",
    "teamAddressGroup",
    "teamStateZipGroup",
    "cardTeamTaxId",
    "teamTaxIdGroup"
  ],
  inputTextField: ["inputTextField"],
  cardTeamRegisteredAddress: [
    "cardTeamRegisteredAddress",
    "teamAddressGroup",
    "teamStateZipGroup"
  ],
  teamAddressGroup: ["teamAddressGroup", "teamStateZipGroup"],
  teamStateZipGroup: ["teamStateZipGroup"],
  cardTeamTaxId: ["cardTeamTaxId", "teamTaxIdGroup"],
  teamTaxIdGroup: ["teamTaxIdGroup"],
  buttonGroupStripeConnect: ["buttonGroupStripeConnect"],
  sectionTeamSettingsAccountingConnect: [
    "sectionTeamSettingsAccountingConnect",
    "cardTeamAccountingConnections",
    "inputGroupTeamAccountingConnections"
  ],
  cardTeamAccountingConnections: [
    "cardTeamAccountingConnections",
    "inputGroupTeamAccountingConnections"
  ],
  inputGroupTeamAccountingConnections: ["inputGroupTeamAccountingConnections"],
  sectionTeamSettingsAnalyticsConnect: [
    "sectionTeamSettingsAnalyticsConnect",
    "cardTeamAnalytics",
    "inputTextPrefixSuffix"
  ],
  cardTeamAnalytics: ["cardTeamAnalytics", "inputTextPrefixSuffix"],
  inputTextPrefixSuffix: ["inputTextPrefixSuffix"],
  sectionTeamNotifications: [
    "sectionTeamNotifications",
    "notificationPushEmail",
    "notificationActivity",
    "notificationNewsEvents"
  ],
  notificationPushEmail: ["notificationPushEmail"],
  notificationActivity: ["notificationActivity"],
  notificationNewsEvents: ["notificationNewsEvents"],
  sectionTeamSettingsLeaveTeam: [
    "sectionTeamSettingsLeaveTeam",
    "cardTeamLeaveAccount"
  ],
  cardTeamLeaveAccount: ["cardTeamLeaveAccount"],
  sectionTeamSettingsDeleteTeam: [
    "sectionTeamSettingsDeleteTeam",
    "cardTeamDeleteAccount"
  ],
  cardTeamDeleteAccount: ["cardTeamDeleteAccount"],
  footerB: ["footerB"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbarInternal: typeof NavbarInternal;
  navbarMemberEdit: typeof NavbarMemberEdit;
  sectionTeamSettingsStripeConnect: "section";
  formTeamEditBusinessVerification: "form";
  cardTeamLegalBusinessGroup: "div";
  inputTextField: typeof InputTextField;
  cardTeamRegisteredAddress: "div";
  teamAddressGroup: "div";
  teamStateZipGroup: "div";
  cardTeamTaxId: "div";
  teamTaxIdGroup: "div";
  buttonGroupStripeConnect: typeof ButtonGroupStripeConnect;
  sectionTeamSettingsAccountingConnect: "section";
  cardTeamAccountingConnections: "div";
  inputGroupTeamAccountingConnections: "div";
  sectionTeamSettingsAnalyticsConnect: "section";
  cardTeamAnalytics: "div";
  inputTextPrefixSuffix: typeof InputTextPrefixSuffix;
  sectionTeamNotifications: "div";
  notificationPushEmail: "div";
  notificationActivity: "div";
  notificationNewsEvents: "div";
  sectionTeamSettingsLeaveTeam: "section";
  cardTeamLeaveAccount: "section";
  sectionTeamSettingsDeleteTeam: "section";
  cardTeamDeleteAccount: "section";
  footerB: typeof FooterB;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicEditteamsettings__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicEditteamsettings__VariantsArgs;
    args?: PlasmicEditteamsettings__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicEditteamsettings__Fetches;
  } & Omit<PlasmicEditteamsettings__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicEditteamsettings__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicEditteamsettings__ArgProps,
      internalVariantPropNames: PlasmicEditteamsettings__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicEditteamsettings__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEditteamsettings";
  } else {
    func.displayName = `PlasmicEditteamsettings.${nodeName}`;
  }
  return func;
}

export const PlasmicEditteamsettings = Object.assign(
  // Top-level PlasmicEditteamsettings renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbarInternal: makeNodeComponent("navbarInternal"),
    navbarMemberEdit: makeNodeComponent("navbarMemberEdit"),
    sectionTeamSettingsStripeConnect: makeNodeComponent(
      "sectionTeamSettingsStripeConnect"
    ),
    formTeamEditBusinessVerification: makeNodeComponent(
      "formTeamEditBusinessVerification"
    ),
    cardTeamLegalBusinessGroup: makeNodeComponent("cardTeamLegalBusinessGroup"),
    inputTextField: makeNodeComponent("inputTextField"),
    cardTeamRegisteredAddress: makeNodeComponent("cardTeamRegisteredAddress"),
    teamAddressGroup: makeNodeComponent("teamAddressGroup"),
    teamStateZipGroup: makeNodeComponent("teamStateZipGroup"),
    cardTeamTaxId: makeNodeComponent("cardTeamTaxId"),
    teamTaxIdGroup: makeNodeComponent("teamTaxIdGroup"),
    buttonGroupStripeConnect: makeNodeComponent("buttonGroupStripeConnect"),
    sectionTeamSettingsAccountingConnect: makeNodeComponent(
      "sectionTeamSettingsAccountingConnect"
    ),
    cardTeamAccountingConnections: makeNodeComponent(
      "cardTeamAccountingConnections"
    ),
    inputGroupTeamAccountingConnections: makeNodeComponent(
      "inputGroupTeamAccountingConnections"
    ),
    sectionTeamSettingsAnalyticsConnect: makeNodeComponent(
      "sectionTeamSettingsAnalyticsConnect"
    ),
    cardTeamAnalytics: makeNodeComponent("cardTeamAnalytics"),
    inputTextPrefixSuffix: makeNodeComponent("inputTextPrefixSuffix"),
    sectionTeamNotifications: makeNodeComponent("sectionTeamNotifications"),
    notificationPushEmail: makeNodeComponent("notificationPushEmail"),
    notificationActivity: makeNodeComponent("notificationActivity"),
    notificationNewsEvents: makeNodeComponent("notificationNewsEvents"),
    sectionTeamSettingsLeaveTeam: makeNodeComponent(
      "sectionTeamSettingsLeaveTeam"
    ),
    cardTeamLeaveAccount: makeNodeComponent("cardTeamLeaveAccount"),
    sectionTeamSettingsDeleteTeam: makeNodeComponent(
      "sectionTeamSettingsDeleteTeam"
    ),
    cardTeamDeleteAccount: makeNodeComponent("cardTeamDeleteAccount"),
    footerB: makeNodeComponent("footerB"),

    // Metadata about props expected for PlasmicEditteamsettings
    internalVariantProps: PlasmicEditteamsettings__VariantProps,
    internalArgProps: PlasmicEditteamsettings__ArgProps
  }
);

export default PlasmicEditteamsettings;
/* prettier-ignore-end */
