// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: p7xKZbn5aYyGic
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavLink from "../../NavLink"; // plasmic-import: XqQQfEEDIGeiz/component
import NavLinkCounter from "../../NavLinkCounter"; // plasmic-import: hZnsIRN1C34btPr/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicNavbarTeamUserProfile.module.css"; // plasmic-import: p7xKZbn5aYyGic/css

export type PlasmicNavbarTeamUserProfile__VariantMembers = {
  selected:
    | "about"
    | "listings"
    | "packages"
    | "performance"
    | "views"
    | "reacts"
    | "saves"
    | "team"
    | "members"
    | "partners";
};

export type PlasmicNavbarTeamUserProfile__VariantsArgs = {
  selected?: SingleChoiceArg<
    | "about"
    | "listings"
    | "packages"
    | "performance"
    | "views"
    | "reacts"
    | "saves"
    | "team"
    | "members"
    | "partners"
  >;
};

type VariantPropType = keyof PlasmicNavbarTeamUserProfile__VariantsArgs;
export const PlasmicNavbarTeamUserProfile__VariantProps =
  new Array<VariantPropType>("selected");

export type PlasmicNavbarTeamUserProfile__ArgsType = {};
type ArgPropType = keyof PlasmicNavbarTeamUserProfile__ArgsType;
export const PlasmicNavbarTeamUserProfile__ArgProps = new Array<ArgPropType>();

export type PlasmicNavbarTeamUserProfile__OverridesType = {
  root?: p.Flex<"div">;
  parent?: p.Flex<"div">;
  navLink?: p.Flex<typeof NavLink>;
};

export interface DefaultNavbarTeamUserProfileProps {
  selected?: SingleChoiceArg<
    | "about"
    | "listings"
    | "packages"
    | "performance"
    | "views"
    | "reacts"
    | "saves"
    | "team"
    | "members"
    | "partners"
  >;
  className?: string;
}

function PlasmicNavbarTeamUserProfile__RenderFunc(props: {
  variants: PlasmicNavbarTeamUserProfile__VariantsArgs;
  args: PlasmicNavbarTeamUserProfile__ArgsType;
  overrides: PlasmicNavbarTeamUserProfile__OverridesType;
  dataFetches?: PlasmicNavbarTeamUserProfile__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__selected_about]: hasVariant(variants, "selected", "about"),
        [sty.root__selected_partners]: hasVariant(
          variants,
          "selected",
          "partners"
        )
      })}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"parent"}
        data-plasmic-override={overrides.parent}
        hasGap={true}
        className={classNames(defaultcss.all, sty.parent, {
          [sty.parent__selected_about]: hasVariant(
            variants,
            "selected",
            "about"
          ),
          [sty.parent__selected_partners]: hasVariant(
            variants,
            "selected",
            "partners"
          )
        })}
      >
        <NavLink
          data-plasmic-name={"navLink"}
          data-plasmic-override={overrides.navLink}
          className={classNames("__wab_instance", sty.navLink, {
            [sty.navLink__selected_about]: hasVariant(
              variants,
              "selected",
              "about"
            ),
            [sty.navLink__selected_listings]: hasVariant(
              variants,
              "selected",
              "listings"
            ),
            [sty.navLink__selected_members]: hasVariant(
              variants,
              "selected",
              "members"
            ),
            [sty.navLink__selected_packages]: hasVariant(
              variants,
              "selected",
              "packages"
            ),
            [sty.navLink__selected_partners]: hasVariant(
              variants,
              "selected",
              "partners"
            ),
            [sty.navLink__selected_performance]: hasVariant(
              variants,
              "selected",
              "performance"
            ),
            [sty.navLink__selected_reacts]: hasVariant(
              variants,
              "selected",
              "reacts"
            ),
            [sty.navLink__selected_saves]: hasVariant(
              variants,
              "selected",
              "saves"
            ),
            [sty.navLink__selected_team]: hasVariant(
              variants,
              "selected",
              "team"
            ),
            [sty.navLink__selected_views]: hasVariant(
              variants,
              "selected",
              "views"
            )
          })}
          linkText={"About"}
          state={
            hasVariant(variants, "selected", "members")
              ? undefined
              : hasVariant(variants, "selected", "team")
              ? undefined
              : hasVariant(variants, "selected", "saves")
              ? undefined
              : hasVariant(variants, "selected", "reacts")
              ? undefined
              : hasVariant(variants, "selected", "views")
              ? undefined
              : hasVariant(variants, "selected", "performance")
              ? undefined
              : hasVariant(variants, "selected", "packages")
              ? undefined
              : hasVariant(variants, "selected", "listings")
              ? undefined
              : hasVariant(variants, "selected", "partners")
              ? undefined
              : hasVariant(variants, "selected", "about")
              ? ("selected" as const)
              : ("selected" as const)
          }
        />

        <NavLinkCounter
          className={classNames("__wab_instance", sty.navLinkCounter__a4Hda, {
            [sty.navLinkCounter__selected_listings__a4HdAiZ9Ko]: hasVariant(
              variants,
              "selected",
              "listings"
            )
          })}
          navLabel={"Listings"}
          numberValue={"9"}
          state={
            hasVariant(variants, "selected", "listings")
              ? ("selected" as const)
              : ("disabled" as const)
          }
        />

        <NavLinkCounter
          className={classNames("__wab_instance", sty.navLinkCounter__ti0Um, {
            [sty.navLinkCounter__selected_packages__ti0Umv6GvP]: hasVariant(
              variants,
              "selected",
              "packages"
            )
          })}
          navLabel={"Packages"}
          numberValue={"9"}
          state={
            hasVariant(variants, "selected", "packages")
              ? ("selected" as const)
              : ("disabled" as const)
          }
        />

        <NavLinkCounter
          className={classNames("__wab_instance", sty.navLinkCounter___6Noc, {
            [sty.navLinkCounter__selected_performance___6NoclWcc]: hasVariant(
              variants,
              "selected",
              "performance"
            )
          })}
          navLabel={"Performance"}
          numberValue={"12"}
          state={
            hasVariant(variants, "selected", "performance")
              ? ("selected" as const)
              : ("disabled" as const)
          }
        />

        <NavLinkCounter
          className={classNames("__wab_instance", sty.navLinkCounter__es9WY, {
            [sty.navLinkCounter__selected_views__es9WYnwl4U]: hasVariant(
              variants,
              "selected",
              "views"
            )
          })}
          navLabel={"Views"}
          numberValue={"99,999"}
          state={
            hasVariant(variants, "selected", "views")
              ? ("selected" as const)
              : ("disabled" as const)
          }
        />

        <NavLinkCounter
          className={classNames("__wab_instance", sty.navLinkCounter__cxpex, {
            [sty.navLinkCounter__selected_reacts__cxpex3EgNw]: hasVariant(
              variants,
              "selected",
              "reacts"
            )
          })}
          navLabel={"Reacts"}
          numberValue={"99,999"}
          state={
            hasVariant(variants, "selected", "reacts")
              ? ("selected" as const)
              : ("disabled" as const)
          }
        />

        <NavLinkCounter
          className={classNames("__wab_instance", sty.navLinkCounter__pvOjd, {
            [sty.navLinkCounter__selected_saves__pvOjdsfHNc]: hasVariant(
              variants,
              "selected",
              "saves"
            )
          })}
          navLabel={"Saves"}
          numberValue={"9"}
          state={
            hasVariant(variants, "selected", "saves")
              ? ("selected" as const)
              : ("disabled" as const)
          }
        />

        <NavLinkCounter
          className={classNames("__wab_instance", sty.navLinkCounter__ifsN4, {
            [sty.navLinkCounter__selected_team__ifsN4XXTl9]: hasVariant(
              variants,
              "selected",
              "team"
            )
          })}
          navLabel={"Team"}
          numberValue={"9"}
          state={
            hasVariant(variants, "selected", "team")
              ? ("selected" as const)
              : ("disabled" as const)
          }
        />

        <NavLinkCounter
          className={classNames("__wab_instance", sty.navLinkCounter__hlpU2, {
            [sty.navLinkCounter__selected_members__hlpU2ZhAjQ]: hasVariant(
              variants,
              "selected",
              "members"
            )
          })}
          navLabel={"Members"}
          numberValue={"999"}
          state={
            hasVariant(variants, "selected", "members")
              ? ("selected" as const)
              : ("disabled" as const)
          }
        />

        <NavLinkCounter
          className={classNames("__wab_instance", sty.navLinkCounter__ucGib, {
            [sty.navLinkCounter__selected_partners__ucGiBgSrht]: hasVariant(
              variants,
              "selected",
              "partners"
            )
          })}
          navLabel={"Partners"}
          numberValue={"9"}
          state={
            hasVariant(variants, "selected", "partners")
              ? ("selected" as const)
              : ("disabled" as const)
          }
        />
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "parent", "navLink"],
  parent: ["parent", "navLink"],
  navLink: ["navLink"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  parent: "div";
  navLink: typeof NavLink;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavbarTeamUserProfile__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavbarTeamUserProfile__VariantsArgs;
    args?: PlasmicNavbarTeamUserProfile__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicNavbarTeamUserProfile__Fetches;
  } & Omit<PlasmicNavbarTeamUserProfile__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNavbarTeamUserProfile__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNavbarTeamUserProfile__ArgProps,
      internalVariantPropNames: PlasmicNavbarTeamUserProfile__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicNavbarTeamUserProfile__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavbarTeamUserProfile";
  } else {
    func.displayName = `PlasmicNavbarTeamUserProfile.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbarTeamUserProfile = Object.assign(
  // Top-level PlasmicNavbarTeamUserProfile renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    parent: makeNodeComponent("parent"),
    navLink: makeNodeComponent("navLink"),

    // Metadata about props expected for PlasmicNavbarTeamUserProfile
    internalVariantProps: PlasmicNavbarTeamUserProfile__VariantProps,
    internalArgProps: PlasmicNavbarTeamUserProfile__ArgProps
  }
);

export default PlasmicNavbarTeamUserProfile;
/* prettier-ignore-end */
