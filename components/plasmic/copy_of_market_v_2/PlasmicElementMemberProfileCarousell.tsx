// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: 1Z-t_MHRbSqXDq
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ChipUserProfile from "../../ChipUserProfile"; // plasmic-import: Bxpx-jQAWOTDxtF/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: biX3aS42hiG0fF/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicElementMemberProfileCarousell.module.css"; // plasmic-import: 1Z-t_MHRbSqXDq/css

export type PlasmicElementMemberProfileCarousell__VariantMembers = {};

export type PlasmicElementMemberProfileCarousell__VariantsArgs = {};
type VariantPropType = keyof PlasmicElementMemberProfileCarousell__VariantsArgs;
export const PlasmicElementMemberProfileCarousell__VariantProps =
  new Array<VariantPropType>();

export type PlasmicElementMemberProfileCarousell__ArgsType = {
  headlineLabel?: React.ReactNode;
};

type ArgPropType = keyof PlasmicElementMemberProfileCarousell__ArgsType;
export const PlasmicElementMemberProfileCarousell__ArgProps =
  new Array<ArgPropType>("headlineLabel");

export type PlasmicElementMemberProfileCarousell__OverridesType = {
  root?: p.Flex<"div">;
  parent?: p.Flex<"div">;
  headlineLabelParent?: p.Flex<"div">;
  memberCarousel?: p.Flex<"div">;
};

export interface DefaultElementMemberProfileCarousellProps {
  headlineLabel?: React.ReactNode;
  className?: string;
}

function PlasmicElementMemberProfileCarousell__RenderFunc(props: {
  variants: PlasmicElementMemberProfileCarousell__VariantsArgs;
  args: PlasmicElementMemberProfileCarousell__ArgsType;
  overrides: PlasmicElementMemberProfileCarousell__OverridesType;
  dataFetches?: PlasmicElementMemberProfileCarousell__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      {(hasVariant(globalVariants, "screen", "desktop") ? true : true) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"parent"}
          data-plasmic-override={overrides.parent}
          hasGap={true}
          className={classNames(defaultcss.all, sty.parent)}
        >
          {(
            hasVariant(globalVariants, "screen", "mobile")
              ? true
              : hasVariant(globalVariants, "screen", "desktop")
              ? true
              : true
          ) ? (
            <div
              data-plasmic-name={"headlineLabelParent"}
              data-plasmic-override={overrides.headlineLabelParent}
              className={classNames(defaultcss.all, sty.headlineLabelParent)}
            >
              {(
                hasVariant(globalVariants, "screen", "desktop") ? true : true
              ) ? (
                <div className={classNames(defaultcss.all, sty.freeBox__r45S)}>
                  <div
                    className={classNames(defaultcss.all, sty.freeBox__aS8DO)}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: "Headline label",
                      value: args.headlineLabel,
                      className: classNames(sty.slotHeadlineLabel)
                    })}
                  </div>
                </div>
              ) : null}
            </div>
          ) : null}
          {(
            hasVariant(globalVariants, "screen", "mobile")
              ? true
              : hasVariant(globalVariants, "screen", "desktop")
              ? true
              : true
          ) ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"memberCarousel"}
              data-plasmic-override={overrides.memberCarousel}
              hasGap={true}
              className={classNames(defaultcss.all, sty.memberCarousel)}
            >
              {(
                hasVariant(globalVariants, "screen", "desktop") ? true : true
              ) ? (
                <ChipUserProfile
                  className={classNames(
                    "__wab_instance",
                    sty.chipUserProfile___0Qn4Y
                  )}
                />
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "desktop") ? true : true
              ) ? (
                <ChipUserProfile
                  className={classNames(
                    "__wab_instance",
                    sty.chipUserProfile__r9C1M
                  )}
                />
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "desktop") ? true : true
              ) ? (
                <ChipUserProfile
                  className={classNames(
                    "__wab_instance",
                    sty.chipUserProfile__gctx7
                  )}
                />
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "desktop") ? true : true
              ) ? (
                <ChipUserProfile
                  className={classNames(
                    "__wab_instance",
                    sty.chipUserProfile__uUkE4
                  )}
                />
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "desktop") ? true : true
              ) ? (
                <ChipUserProfile
                  className={classNames(
                    "__wab_instance",
                    sty.chipUserProfile___21QJd
                  )}
                />
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "desktop") ? true : true
              ) ? (
                <ChipUserProfile
                  className={classNames(
                    "__wab_instance",
                    sty.chipUserProfile___8OeYa
                  )}
                />
              ) : null}
            </p.Stack>
          ) : null}
        </p.Stack>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "parent", "headlineLabelParent", "memberCarousel"],
  parent: ["parent", "headlineLabelParent", "memberCarousel"],
  headlineLabelParent: ["headlineLabelParent"],
  memberCarousel: ["memberCarousel"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  parent: "div";
  headlineLabelParent: "div";
  memberCarousel: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicElementMemberProfileCarousell__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicElementMemberProfileCarousell__VariantsArgs;
    args?: PlasmicElementMemberProfileCarousell__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicElementMemberProfileCarousell__Fetches;
  } & Omit< // Specify variants directly as props
    PlasmicElementMemberProfileCarousell__VariantsArgs,
    ReservedPropsType
  > &
    // Specify args directly as props
    Omit<PlasmicElementMemberProfileCarousell__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicElementMemberProfileCarousell__ArgProps,
      internalVariantPropNames:
        PlasmicElementMemberProfileCarousell__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicElementMemberProfileCarousell__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicElementMemberProfileCarousell";
  } else {
    func.displayName = `PlasmicElementMemberProfileCarousell.${nodeName}`;
  }
  return func;
}

export const PlasmicElementMemberProfileCarousell = Object.assign(
  // Top-level PlasmicElementMemberProfileCarousell renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    parent: makeNodeComponent("parent"),
    headlineLabelParent: makeNodeComponent("headlineLabelParent"),
    memberCarousel: makeNodeComponent("memberCarousel"),

    // Metadata about props expected for PlasmicElementMemberProfileCarousell
    internalVariantProps: PlasmicElementMemberProfileCarousell__VariantProps,
    internalArgProps: PlasmicElementMemberProfileCarousell__ArgProps
  }
);

export default PlasmicElementMemberProfileCarousell;
/* prettier-ignore-end */
