// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: tTEt4VhljRx6qm
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import SearchbarFilter from "../../SearchbarFilter"; // plasmic-import: mCmqmDGLBHnCKjD/component
import ChipBadgeDisplay from "../../ChipBadgeDisplay"; // plasmic-import: SSFk1BeJq0HW6X/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicInputSearchbarFilterDisplay.module.css"; // plasmic-import: tTEt4VhljRx6qm/css

import PlusBoldIcon from "./icons/PlasmicIcon__PlusBold"; // plasmic-import: lhSEEajPJGZatfD/icon
import Icon114Icon from "./icons/PlasmicIcon__Icon114"; // plasmic-import: VfXaOZlZvq_xDZf/icon
import Icon170Icon from "./icons/PlasmicIcon__Icon170"; // plasmic-import: 8dZnFQrWLcwMPnF/icon

export type PlasmicInputSearchbarFilterDisplay__VariantMembers = {};

export type PlasmicInputSearchbarFilterDisplay__VariantsArgs = {};
type VariantPropType = keyof PlasmicInputSearchbarFilterDisplay__VariantsArgs;
export const PlasmicInputSearchbarFilterDisplay__VariantProps =
  new Array<VariantPropType>();

export type PlasmicInputSearchbarFilterDisplay__ArgsType = {};
type ArgPropType = keyof PlasmicInputSearchbarFilterDisplay__ArgsType;
export const PlasmicInputSearchbarFilterDisplay__ArgProps =
  new Array<ArgPropType>();

export type PlasmicInputSearchbarFilterDisplay__OverridesType = {
  root?: p.Flex<"div">;
  searchbarFilter?: p.Flex<typeof SearchbarFilter>;
  badgeDisplayParent?: p.Flex<"div">;
  chipBadgeDisplay?: p.Flex<typeof ChipBadgeDisplay>;
};

export interface DefaultInputSearchbarFilterDisplayProps {
  className?: string;
}

function PlasmicInputSearchbarFilterDisplay__RenderFunc(props: {
  variants: PlasmicInputSearchbarFilterDisplay__VariantsArgs;
  args: PlasmicInputSearchbarFilterDisplay__ArgsType;
  overrides: PlasmicInputSearchbarFilterDisplay__OverridesType;
  dataFetches?: PlasmicInputSearchbarFilterDisplay__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <SearchbarFilter
        data-plasmic-name={"searchbarFilter"}
        data-plasmic-override={overrides.searchbarFilter}
        className={classNames("__wab_instance", sty.searchbarFilter)}
        width={"_360" as const}
      />

      <p.Stack
        as={"div"}
        data-plasmic-name={"badgeDisplayParent"}
        data-plasmic-override={overrides.badgeDisplayParent}
        hasGap={true}
        className={classNames(defaultcss.all, sty.badgeDisplayParent)}
      >
        <ChipBadgeDisplay
          data-plasmic-name={"chipBadgeDisplay"}
          data-plasmic-override={overrides.chipBadgeDisplay}
          className={classNames("__wab_instance", sty.chipBadgeDisplay)}
          color={"brand" as const}
          size={"_24" as const}
          type={"ghost" as const}
        />
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "searchbarFilter", "badgeDisplayParent", "chipBadgeDisplay"],
  searchbarFilter: ["searchbarFilter"],
  badgeDisplayParent: ["badgeDisplayParent", "chipBadgeDisplay"],
  chipBadgeDisplay: ["chipBadgeDisplay"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  searchbarFilter: typeof SearchbarFilter;
  badgeDisplayParent: "div";
  chipBadgeDisplay: typeof ChipBadgeDisplay;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInputSearchbarFilterDisplay__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicInputSearchbarFilterDisplay__VariantsArgs;
    args?: PlasmicInputSearchbarFilterDisplay__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicInputSearchbarFilterDisplay__Fetches;
  } & Omit< // Specify variants directly as props
    PlasmicInputSearchbarFilterDisplay__VariantsArgs,
    ReservedPropsType
  > &
    // Specify args directly as props
    Omit<PlasmicInputSearchbarFilterDisplay__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicInputSearchbarFilterDisplay__ArgProps,
      internalVariantPropNames: PlasmicInputSearchbarFilterDisplay__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicInputSearchbarFilterDisplay__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInputSearchbarFilterDisplay";
  } else {
    func.displayName = `PlasmicInputSearchbarFilterDisplay.${nodeName}`;
  }
  return func;
}

export const PlasmicInputSearchbarFilterDisplay = Object.assign(
  // Top-level PlasmicInputSearchbarFilterDisplay renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    searchbarFilter: makeNodeComponent("searchbarFilter"),
    badgeDisplayParent: makeNodeComponent("badgeDisplayParent"),
    chipBadgeDisplay: makeNodeComponent("chipBadgeDisplay"),

    // Metadata about props expected for PlasmicInputSearchbarFilterDisplay
    internalVariantProps: PlasmicInputSearchbarFilterDisplay__VariantProps,
    internalArgProps: PlasmicInputSearchbarFilterDisplay__ArgProps
  }
);

export default PlasmicInputSearchbarFilterDisplay;
/* prettier-ignore-end */
