// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: 3JhIrbPbEduMnvd
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicInputIconPrefixSuffix.module.css"; // plasmic-import: 3JhIrbPbEduMnvd/css

import PlusBoldIcon from "./icons/PlasmicIcon__PlusBold"; // plasmic-import: lhSEEajPJGZatfD/icon

export type PlasmicInputIconPrefixSuffix__VariantMembers = {
  prefix: "prefix";
  suffix: "suffix";
  width: "_90" | "_180" | "_270" | "_360" | "_540" | "_720";
  height: "_32" | "_36" | "_40" | "_48";
};

export type PlasmicInputIconPrefixSuffix__VariantsArgs = {
  prefix?: SingleBooleanChoiceArg<"prefix">;
  suffix?: SingleBooleanChoiceArg<"suffix">;
  width?: SingleChoiceArg<"_90" | "_180" | "_270" | "_360" | "_540" | "_720">;
  height?: SingleChoiceArg<"_32" | "_36" | "_40" | "_48">;
};

type VariantPropType = keyof PlasmicInputIconPrefixSuffix__VariantsArgs;
export const PlasmicInputIconPrefixSuffix__VariantProps =
  new Array<VariantPropType>("prefix", "suffix", "width", "height");

export type PlasmicInputIconPrefixSuffix__ArgsType = {};
type ArgPropType = keyof PlasmicInputIconPrefixSuffix__ArgsType;
export const PlasmicInputIconPrefixSuffix__ArgProps = new Array<ArgPropType>();

export type PlasmicInputIconPrefixSuffix__OverridesType = {
  root?: p.Flex<"div">;
  parent?: p.Flex<"div">;
  prefixParent?: p.Flex<"div">;
  textbox?: p.Flex<"input">;
  suffixParent?: p.Flex<"div">;
};

export interface DefaultInputIconPrefixSuffixProps {
  prefix?: SingleBooleanChoiceArg<"prefix">;
  suffix?: SingleBooleanChoiceArg<"suffix">;
  width?: SingleChoiceArg<"_90" | "_180" | "_270" | "_360" | "_540" | "_720">;
  height?: SingleChoiceArg<"_32" | "_36" | "_40" | "_48">;
  className?: string;
}

function PlasmicInputIconPrefixSuffix__RenderFunc(props: {
  variants: PlasmicInputIconPrefixSuffix__VariantsArgs;
  args: PlasmicInputIconPrefixSuffix__ArgsType;
  overrides: PlasmicInputIconPrefixSuffix__OverridesType;
  dataFetches?: PlasmicInputIconPrefixSuffix__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div
        data-plasmic-name={"parent"}
        data-plasmic-override={overrides.parent}
        className={classNames(defaultcss.all, sty.parent, {
          [sty.parent__width__180]: hasVariant(variants, "width", "_180"),
          [sty.parent__width__270]: hasVariant(variants, "width", "_270"),
          [sty.parent__width__360]: hasVariant(variants, "width", "_360"),
          [sty.parent__width__540]: hasVariant(variants, "width", "_540"),
          [sty.parent__width__720]: hasVariant(variants, "width", "_720"),
          [sty.parent__width__90]: hasVariant(variants, "width", "_90")
        })}
      >
        {(hasVariant(variants, "prefix", "prefix") ? true : true) ? (
          <div
            data-plasmic-name={"prefixParent"}
            data-plasmic-override={overrides.prefixParent}
            className={classNames(defaultcss.all, sty.prefixParent, {
              [sty.prefixParent__prefix]: hasVariant(
                variants,
                "prefix",
                "prefix"
              )
            })}
          >
            <PlusBoldIcon
              className={classNames(defaultcss.all, sty.svg__qU2Zp)}
              role={"img"}
            />
          </div>
        ) : null}

        <input
          data-plasmic-name={"textbox"}
          data-plasmic-override={overrides.textbox}
          className={classNames(defaultcss.input, sty.textbox, {
            [sty.textbox__prefix]: hasVariant(variants, "prefix", "prefix")
          })}
          placeholder={"" as const}
          size={1 as const}
          type={"text" as const}
          value={"" as const}
        />

        {(hasVariant(variants, "suffix", "suffix") ? true : true) ? (
          <div
            data-plasmic-name={"suffixParent"}
            data-plasmic-override={overrides.suffixParent}
            className={classNames(defaultcss.all, sty.suffixParent, {
              [sty.suffixParent__suffix]: hasVariant(
                variants,
                "suffix",
                "suffix"
              )
            })}
          >
            <PlusBoldIcon
              className={classNames(defaultcss.all, sty.svg___1Wq7A)}
              role={"img"}
            />
          </div>
        ) : null}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "parent", "prefixParent", "textbox", "suffixParent"],
  parent: ["parent", "prefixParent", "textbox", "suffixParent"],
  prefixParent: ["prefixParent"],
  textbox: ["textbox"],
  suffixParent: ["suffixParent"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  parent: "div";
  prefixParent: "div";
  textbox: "input";
  suffixParent: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInputIconPrefixSuffix__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicInputIconPrefixSuffix__VariantsArgs;
    args?: PlasmicInputIconPrefixSuffix__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicInputIconPrefixSuffix__Fetches;
  } & Omit<PlasmicInputIconPrefixSuffix__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicInputIconPrefixSuffix__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicInputIconPrefixSuffix__ArgProps,
      internalVariantPropNames: PlasmicInputIconPrefixSuffix__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicInputIconPrefixSuffix__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInputIconPrefixSuffix";
  } else {
    func.displayName = `PlasmicInputIconPrefixSuffix.${nodeName}`;
  }
  return func;
}

export const PlasmicInputIconPrefixSuffix = Object.assign(
  // Top-level PlasmicInputIconPrefixSuffix renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    parent: makeNodeComponent("parent"),
    prefixParent: makeNodeComponent("prefixParent"),
    textbox: makeNodeComponent("textbox"),
    suffixParent: makeNodeComponent("suffixParent"),

    // Metadata about props expected for PlasmicInputIconPrefixSuffix
    internalVariantProps: PlasmicInputIconPrefixSuffix__VariantProps,
    internalArgProps: PlasmicInputIconPrefixSuffix__ArgProps
  }
);

export default PlasmicInputIconPrefixSuffix;
/* prettier-ignore-end */
