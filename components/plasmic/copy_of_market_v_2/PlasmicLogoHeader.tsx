// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: KYZQ9ThnFfyK_
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: biX3aS42hiG0fF/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicLogoHeader.module.css"; // plasmic-import: KYZQ9ThnFfyK_/css

export type PlasmicLogoHeader__VariantMembers = {
  color: "color";
};

export type PlasmicLogoHeader__VariantsArgs = {
  color?: SingleBooleanChoiceArg<"color">;
};

type VariantPropType = keyof PlasmicLogoHeader__VariantsArgs;
export const PlasmicLogoHeader__VariantProps = new Array<VariantPropType>(
  "color"
);

export type PlasmicLogoHeader__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicLogoHeader__ArgsType;
export const PlasmicLogoHeader__ArgProps = new Array<ArgPropType>("children");

export type PlasmicLogoHeader__OverridesType = {
  logoLink?: p.Flex<"a"> & Partial<LinkProps>;
  img?: p.Flex<"img">;
};

export interface DefaultLogoHeaderProps {
  children?: React.ReactNode;
  color?: SingleBooleanChoiceArg<"color">;
  className?: string;
}

function PlasmicLogoHeader__RenderFunc(props: {
  variants: PlasmicLogoHeader__VariantsArgs;
  args: PlasmicLogoHeader__ArgsType;
  overrides: PlasmicLogoHeader__OverridesType;
  dataFetches?: PlasmicLogoHeader__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <p.PlasmicLink
      data-plasmic-name={"logoLink"}
      data-plasmic-override={overrides.logoLink}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        defaultcss.all,
        projectcss.root_reset,
        sty.logoLink,
        { [sty.logoLink__color]: hasVariant(variants, "color", "color") }
      )}
      component={Link}
      href={
        hasVariant(globalVariants, "screen", "desktop")
          ? ("/" as const)
          : ("/app" as const)
      }
      platform={"nextjs"}
    >
      {(hasVariant(variants, "color", "color") ? false : true)
        ? p.renderPlasmicSlot({
            defaultContents: (
              <img
                alt={""}
                className={classNames(defaultcss.img, sty.img__hGcSp)}
                role={"img"}
                src={
                  "/plasmic/copy_of_market_v_2/images/intrepidLogo2021V2Darksvg.svg"
                }
              />
            ),

            value: args.children
          })
        : null}
      {(hasVariant(variants, "color", "color") ? true : false) ? (
        <img
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(defaultcss.img, sty.img, {
            [sty.img__color]: hasVariant(variants, "color", "color")
          })}
          role={"img"}
          src={
            hasVariant(variants, "color", "color")
              ? "/plasmic/copy_of_market_v_2/images/intrepidLogo2021V2Lightsvg.svg"
              : undefined
          }
        />
      ) : null}
    </p.PlasmicLink>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  logoLink: ["logoLink", "img"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  logoLink: "a";
  img: "img";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLogoHeader__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLogoHeader__VariantsArgs;
    args?: PlasmicLogoHeader__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicLogoHeader__Fetches;
  } & Omit<PlasmicLogoHeader__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLogoHeader__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicLogoHeader__ArgProps,
      internalVariantPropNames: PlasmicLogoHeader__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicLogoHeader__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "logoLink") {
    func.displayName = "PlasmicLogoHeader";
  } else {
    func.displayName = `PlasmicLogoHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicLogoHeader = Object.assign(
  // Top-level PlasmicLogoHeader renders the root element
  makeNodeComponent("logoLink"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicLogoHeader
    internalVariantProps: PlasmicLogoHeader__VariantProps,
    internalArgProps: PlasmicLogoHeader__ArgProps
  }
);

export default PlasmicLogoHeader;
/* prettier-ignore-end */
