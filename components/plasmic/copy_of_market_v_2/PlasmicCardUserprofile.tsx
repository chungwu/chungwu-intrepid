// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: RoZ08K4SWkjSRTC
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import IconPrimary from "../../IconPrimary"; // plasmic-import: leoxU5GkcMHMK8X/component
import UserAvatar from "../../UserAvatar"; // plasmic-import: kWaJrwe3c90GY1/component
import TagBadgeVerification from "../../TagBadgeVerification"; // plasmic-import: VGML93vWMU9W43k/component
import TagPartnerD from "../../TagPartnerD"; // plasmic-import: oP3_LL4xXepZaZN/component
import RatingDisplayDetail from "../../RatingDisplayDetail"; // plasmic-import: EZFFldQYBrJIX/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: biX3aS42hiG0fF/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicCardUserprofile.module.css"; // plasmic-import: RoZ08K4SWkjSRTC/css

import BookmarkIcon from "./icons/PlasmicIcon__Bookmark"; // plasmic-import: jLuEpvSpry_1edd/icon
import Icon171Icon from "./icons/PlasmicIcon__Icon171"; // plasmic-import: L1T0WWEIfF6hPBd/icon
import ViewIcon from "./icons/PlasmicIcon__View"; // plasmic-import: I6EK4zmpxF59ShL/icon
import HeartFillIcon from "./icons/PlasmicIcon__HeartFill"; // plasmic-import: BXMci0FAqLD75cK/icon

export type PlasmicCardUserprofile__VariantMembers = {};

export type PlasmicCardUserprofile__VariantsArgs = {};
type VariantPropType = keyof PlasmicCardUserprofile__VariantsArgs;
export const PlasmicCardUserprofile__VariantProps =
  new Array<VariantPropType>();

export type PlasmicCardUserprofile__ArgsType = {};
type ArgPropType = keyof PlasmicCardUserprofile__ArgsType;
export const PlasmicCardUserprofile__ArgProps = new Array<ArgPropType>();

export type PlasmicCardUserprofile__OverridesType = {
  root?: p.Flex<"div">;
  saveButtonContainer?: p.Flex<"div">;
  saveProfile?: p.Flex<"button">;
  iconPrimary?: p.Flex<typeof IconPrimary>;
  svgIcon?: p.Flex<"svg">;
  svgIcon3?: p.Flex<"svg">;
  svgSave?: p.Flex<"svg">;
  userAvatar?: p.Flex<typeof UserAvatar>;
  tagBadgeVerification?: p.Flex<typeof TagBadgeVerification>;
  tagPartnerD?: p.Flex<typeof TagPartnerD>;
  ratingDisplayDetail?: p.Flex<typeof RatingDisplayDetail>;
  userStatsParent?: p.Flex<"div">;
  viewButtonCount?: p.Flex<"div">;
  viewButton?: p.Flex<"button">;
  viewDisplay?: p.Flex<"svg">;
  viewNumberValueParent?: p.Flex<"div">;
  viewNumberIncrement?: p.Flex<"div">;
  heartButtonCount?: p.Flex<"div">;
  heartButton?: p.Flex<"button">;
  heartDisplay?: p.Flex<"svg">;
  heartNumberValueParent?: p.Flex<"div">;
  heartNumberIncrement?: p.Flex<"div">;
  bookmarkButtonCount?: p.Flex<"div">;
  bookmarkButton?: p.Flex<"button">;
  bookmarkDisplay?: p.Flex<"svg">;
  bookmarkNumberValueParent?: p.Flex<"div">;
  bookmarkNumberIncrement?: p.Flex<"div">;
  location?: p.Flex<"div">;
  cityText?: p.Flex<"div">;
};

export interface DefaultCardUserprofileProps {
  className?: string;
}

function PlasmicCardUserprofile__RenderFunc(props: {
  variants: PlasmicCardUserprofile__VariantsArgs;
  args: PlasmicCardUserprofile__ArgsType;
  overrides: PlasmicCardUserprofile__OverridesType;
  dataFetches?: PlasmicCardUserprofile__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const [isRootActive, triggerRootActiveProps] = useTrigger("usePressed", {});
  const triggers = {
    active_root: isRootActive
  };

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
      data-plasmic-trigger-props={[triggerRootActiveProps]}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"saveButtonContainer"}
        data-plasmic-override={overrides.saveButtonContainer}
        hasGap={true}
        className={classNames(defaultcss.all, sty.saveButtonContainer)}
      >
        {(triggers.active_root ? true : true) ? (
          <button
            data-plasmic-name={"saveProfile"}
            data-plasmic-override={overrides.saveProfile}
            className={classNames(defaultcss.button, sty.saveProfile)}
          >
            <IconPrimary
              data-plasmic-name={"iconPrimary"}
              data-plasmic-override={overrides.iconPrimary}
              size={"_18Px" as const}
              svgIcon={
                <BookmarkIcon
                  data-plasmic-name={"svgIcon"}
                  data-plasmic-override={overrides.svgIcon}
                  className={classNames(defaultcss.all, sty.svgIcon)}
                  role={"img"}
                />
              }
              svgIcon16Px={
                <BookmarkIcon
                  data-plasmic-name={"svgIcon3"}
                  data-plasmic-override={overrides.svgIcon3}
                  className={classNames(defaultcss.all, sty.svgIcon3)}
                  role={"img"}
                />
              }
              svgIcon18Px={
                <BookmarkIcon
                  data-plasmic-name={"svgSave"}
                  data-plasmic-override={overrides.svgSave}
                  className={classNames(defaultcss.all, sty.svgSave)}
                  role={"img"}
                />
              }
            />
          </button>
        ) : null}
      </p.Stack>

      <UserAvatar
        data-plasmic-name={"userAvatar"}
        data-plasmic-override={overrides.userAvatar}
        className={classNames("__wab_instance", sty.userAvatar)}
        size={"_80" as const}
      />

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.freeBox__w2LvB)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.freeBox__sNpFa)}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.freeBox__njJWm)}
          >
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox__zmqJi
              )}
            >
              {hasVariant(globalVariants, "screen", "mobile")
                ? "DisplayName"
                : hasVariant(globalVariants, "screen", "desktop")
                ? "DisplayName"
                : "Username"}
            </div>

            <div className={classNames(defaultcss.all, sty.freeBox__mEatm)}>
              <TagBadgeVerification
                data-plasmic-name={"tagBadgeVerification"}
                data-plasmic-override={overrides.tagBadgeVerification}
                size={"_16" as const}
              />
            </div>
          </p.Stack>
        </p.Stack>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.freeBox__c5Ikt)}
        >
          <div className={classNames(defaultcss.all, sty.freeBox__c5TaK)}>
            <TagPartnerD
              data-plasmic-name={"tagPartnerD"}
              data-plasmic-override={overrides.tagPartnerD}
            />
          </div>

          <div className={classNames(defaultcss.all, sty.freeBox__yWxFo)}>
            <RatingDisplayDetail
              data-plasmic-name={"ratingDisplayDetail"}
              data-plasmic-override={overrides.ratingDisplayDetail}
            />
          </div>
        </p.Stack>
      </p.Stack>

      <div className={classNames(defaultcss.all, sty.freeBox__abG3U)}>
        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.freeBox__ft9Ym
          )}
        >
          {
            "One morning, when Gregor Samsa woke from troubled dreams, he found himself transforme"
          }
        </div>
      </div>

      <p.Stack
        as={"div"}
        data-plasmic-name={"userStatsParent"}
        data-plasmic-override={overrides.userStatsParent}
        hasGap={true}
        className={classNames(defaultcss.all, sty.userStatsParent)}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"viewButtonCount"}
          data-plasmic-override={overrides.viewButtonCount}
          hasGap={true}
          className={classNames(defaultcss.all, sty.viewButtonCount)}
        >
          <button
            data-plasmic-name={"viewButton"}
            data-plasmic-override={overrides.viewButton}
            className={classNames(defaultcss.button, sty.viewButton)}
          >
            <ViewIcon
              data-plasmic-name={"viewDisplay"}
              data-plasmic-override={overrides.viewDisplay}
              className={classNames(defaultcss.all, sty.viewDisplay)}
              role={"img"}
            />
          </button>

          <div
            data-plasmic-name={"viewNumberValueParent"}
            data-plasmic-override={overrides.viewNumberValueParent}
            className={classNames(defaultcss.all, sty.viewNumberValueParent)}
          >
            <div
              data-plasmic-name={"viewNumberIncrement"}
              data-plasmic-override={overrides.viewNumberIncrement}
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.viewNumberIncrement
              )}
            >
              {"1000"}
            </div>
          </div>
        </p.Stack>

        <p.Stack
          as={"div"}
          data-plasmic-name={"heartButtonCount"}
          data-plasmic-override={overrides.heartButtonCount}
          hasGap={true}
          className={classNames(defaultcss.all, sty.heartButtonCount)}
        >
          <button
            data-plasmic-name={"heartButton"}
            data-plasmic-override={overrides.heartButton}
            className={classNames(defaultcss.button, sty.heartButton)}
          >
            <HeartFillIcon
              data-plasmic-name={"heartDisplay"}
              data-plasmic-override={overrides.heartDisplay}
              className={classNames(defaultcss.all, sty.heartDisplay)}
              role={"img"}
            />
          </button>

          <div
            data-plasmic-name={"heartNumberValueParent"}
            data-plasmic-override={overrides.heartNumberValueParent}
            className={classNames(defaultcss.all, sty.heartNumberValueParent)}
          >
            <div
              data-plasmic-name={"heartNumberIncrement"}
              data-plasmic-override={overrides.heartNumberIncrement}
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.heartNumberIncrement
              )}
            >
              {"1000"}
            </div>
          </div>
        </p.Stack>

        <p.Stack
          as={"div"}
          data-plasmic-name={"bookmarkButtonCount"}
          data-plasmic-override={overrides.bookmarkButtonCount}
          hasGap={true}
          className={classNames(defaultcss.all, sty.bookmarkButtonCount)}
        >
          <button
            data-plasmic-name={"bookmarkButton"}
            data-plasmic-override={overrides.bookmarkButton}
            className={classNames(defaultcss.button, sty.bookmarkButton)}
          >
            <BookmarkIcon
              data-plasmic-name={"bookmarkDisplay"}
              data-plasmic-override={overrides.bookmarkDisplay}
              className={classNames(defaultcss.all, sty.bookmarkDisplay)}
              role={"img"}
            />
          </button>

          <div
            data-plasmic-name={"bookmarkNumberValueParent"}
            data-plasmic-override={overrides.bookmarkNumberValueParent}
            className={classNames(
              defaultcss.all,
              sty.bookmarkNumberValueParent
            )}
          >
            <div
              data-plasmic-name={"bookmarkNumberIncrement"}
              data-plasmic-override={overrides.bookmarkNumberIncrement}
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.bookmarkNumberIncrement
              )}
            >
              {"1000"}
            </div>
          </div>
        </p.Stack>
      </p.Stack>

      <p.Stack
        as={"div"}
        data-plasmic-name={"location"}
        data-plasmic-override={overrides.location}
        hasGap={true}
        className={classNames(defaultcss.all, sty.location)}
      >
        <div
          data-plasmic-name={"cityText"}
          data-plasmic-override={overrides.cityText}
          className={classNames(defaultcss.all, sty.cityText)}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox__ffhoM
            )}
          >
            {"City"}
          </div>

          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox__tBbD5
            )}
          >
            {","}
          </div>
        </div>

        <div className={classNames(defaultcss.all, sty.freeBox__fL2Ri)}>
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox___2Kzb
            )}
          >
            {"Country"}
          </div>
        </div>
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "saveButtonContainer",
    "saveProfile",
    "iconPrimary",
    "svgIcon",
    "svgIcon3",
    "svgSave",
    "userAvatar",
    "tagBadgeVerification",
    "tagPartnerD",
    "ratingDisplayDetail",
    "userStatsParent",
    "viewButtonCount",
    "viewButton",
    "viewDisplay",
    "viewNumberValueParent",
    "viewNumberIncrement",
    "heartButtonCount",
    "heartButton",
    "heartDisplay",
    "heartNumberValueParent",
    "heartNumberIncrement",
    "bookmarkButtonCount",
    "bookmarkButton",
    "bookmarkDisplay",
    "bookmarkNumberValueParent",
    "bookmarkNumberIncrement",
    "location",
    "cityText"
  ],
  saveButtonContainer: [
    "saveButtonContainer",
    "saveProfile",
    "iconPrimary",
    "svgIcon",
    "svgIcon3",
    "svgSave"
  ],
  saveProfile: ["saveProfile", "iconPrimary", "svgIcon", "svgIcon3", "svgSave"],
  iconPrimary: ["iconPrimary", "svgIcon", "svgIcon3", "svgSave"],
  svgIcon: ["svgIcon"],
  svgIcon3: ["svgIcon3"],
  svgSave: ["svgSave"],
  userAvatar: ["userAvatar"],
  tagBadgeVerification: ["tagBadgeVerification"],
  tagPartnerD: ["tagPartnerD"],
  ratingDisplayDetail: ["ratingDisplayDetail"],
  userStatsParent: [
    "userStatsParent",
    "viewButtonCount",
    "viewButton",
    "viewDisplay",
    "viewNumberValueParent",
    "viewNumberIncrement",
    "heartButtonCount",
    "heartButton",
    "heartDisplay",
    "heartNumberValueParent",
    "heartNumberIncrement",
    "bookmarkButtonCount",
    "bookmarkButton",
    "bookmarkDisplay",
    "bookmarkNumberValueParent",
    "bookmarkNumberIncrement"
  ],
  viewButtonCount: [
    "viewButtonCount",
    "viewButton",
    "viewDisplay",
    "viewNumberValueParent",
    "viewNumberIncrement"
  ],
  viewButton: ["viewButton", "viewDisplay"],
  viewDisplay: ["viewDisplay"],
  viewNumberValueParent: ["viewNumberValueParent", "viewNumberIncrement"],
  viewNumberIncrement: ["viewNumberIncrement"],
  heartButtonCount: [
    "heartButtonCount",
    "heartButton",
    "heartDisplay",
    "heartNumberValueParent",
    "heartNumberIncrement"
  ],
  heartButton: ["heartButton", "heartDisplay"],
  heartDisplay: ["heartDisplay"],
  heartNumberValueParent: ["heartNumberValueParent", "heartNumberIncrement"],
  heartNumberIncrement: ["heartNumberIncrement"],
  bookmarkButtonCount: [
    "bookmarkButtonCount",
    "bookmarkButton",
    "bookmarkDisplay",
    "bookmarkNumberValueParent",
    "bookmarkNumberIncrement"
  ],
  bookmarkButton: ["bookmarkButton", "bookmarkDisplay"],
  bookmarkDisplay: ["bookmarkDisplay"],
  bookmarkNumberValueParent: [
    "bookmarkNumberValueParent",
    "bookmarkNumberIncrement"
  ],
  bookmarkNumberIncrement: ["bookmarkNumberIncrement"],
  location: ["location", "cityText"],
  cityText: ["cityText"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  saveButtonContainer: "div";
  saveProfile: "button";
  iconPrimary: typeof IconPrimary;
  svgIcon: "svg";
  svgIcon3: "svg";
  svgSave: "svg";
  userAvatar: typeof UserAvatar;
  tagBadgeVerification: typeof TagBadgeVerification;
  tagPartnerD: typeof TagPartnerD;
  ratingDisplayDetail: typeof RatingDisplayDetail;
  userStatsParent: "div";
  viewButtonCount: "div";
  viewButton: "button";
  viewDisplay: "svg";
  viewNumberValueParent: "div";
  viewNumberIncrement: "div";
  heartButtonCount: "div";
  heartButton: "button";
  heartDisplay: "svg";
  heartNumberValueParent: "div";
  heartNumberIncrement: "div";
  bookmarkButtonCount: "div";
  bookmarkButton: "button";
  bookmarkDisplay: "svg";
  bookmarkNumberValueParent: "div";
  bookmarkNumberIncrement: "div";
  location: "div";
  cityText: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCardUserprofile__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCardUserprofile__VariantsArgs;
    args?: PlasmicCardUserprofile__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicCardUserprofile__Fetches;
  } & Omit<PlasmicCardUserprofile__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCardUserprofile__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCardUserprofile__ArgProps,
      internalVariantPropNames: PlasmicCardUserprofile__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicCardUserprofile__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCardUserprofile";
  } else {
    func.displayName = `PlasmicCardUserprofile.${nodeName}`;
  }
  return func;
}

export const PlasmicCardUserprofile = Object.assign(
  // Top-level PlasmicCardUserprofile renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    saveButtonContainer: makeNodeComponent("saveButtonContainer"),
    saveProfile: makeNodeComponent("saveProfile"),
    iconPrimary: makeNodeComponent("iconPrimary"),
    svgIcon: makeNodeComponent("svgIcon"),
    svgIcon3: makeNodeComponent("svgIcon3"),
    svgSave: makeNodeComponent("svgSave"),
    userAvatar: makeNodeComponent("userAvatar"),
    tagBadgeVerification: makeNodeComponent("tagBadgeVerification"),
    tagPartnerD: makeNodeComponent("tagPartnerD"),
    ratingDisplayDetail: makeNodeComponent("ratingDisplayDetail"),
    userStatsParent: makeNodeComponent("userStatsParent"),
    viewButtonCount: makeNodeComponent("viewButtonCount"),
    viewButton: makeNodeComponent("viewButton"),
    viewDisplay: makeNodeComponent("viewDisplay"),
    viewNumberValueParent: makeNodeComponent("viewNumberValueParent"),
    viewNumberIncrement: makeNodeComponent("viewNumberIncrement"),
    heartButtonCount: makeNodeComponent("heartButtonCount"),
    heartButton: makeNodeComponent("heartButton"),
    heartDisplay: makeNodeComponent("heartDisplay"),
    heartNumberValueParent: makeNodeComponent("heartNumberValueParent"),
    heartNumberIncrement: makeNodeComponent("heartNumberIncrement"),
    bookmarkButtonCount: makeNodeComponent("bookmarkButtonCount"),
    bookmarkButton: makeNodeComponent("bookmarkButton"),
    bookmarkDisplay: makeNodeComponent("bookmarkDisplay"),
    bookmarkNumberValueParent: makeNodeComponent("bookmarkNumberValueParent"),
    bookmarkNumberIncrement: makeNodeComponent("bookmarkNumberIncrement"),
    location: makeNodeComponent("location"),
    cityText: makeNodeComponent("cityText"),

    // Metadata about props expected for PlasmicCardUserprofile
    internalVariantProps: PlasmicCardUserprofile__VariantProps,
    internalArgProps: PlasmicCardUserprofile__ArgProps
  }
);

export default PlasmicCardUserprofile;
/* prettier-ignore-end */
