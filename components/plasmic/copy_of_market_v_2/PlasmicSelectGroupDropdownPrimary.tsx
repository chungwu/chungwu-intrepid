// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: LkR_9K5xfRnJSu
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import SelectDropdownPrimary from "../../SelectDropdownPrimary"; // plasmic-import: v8d0bbfFjkOeuiJ/component
import SelectDropdownPrimary__Option from "../../SelectDropdownPrimary__Option"; // plasmic-import: AqtjodigdxHDQVL/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicSelectGroupDropdownPrimary.module.css"; // plasmic-import: LkR_9K5xfRnJSu/css

export type PlasmicSelectGroupDropdownPrimary__VariantMembers = {
  label: "label";
  description: "description";
  width:
    | "_90"
    | "_120"
    | "_144"
    | "_160"
    | "_180"
    | "_270"
    | "_360"
    | "_540"
    | "_720";
};

export type PlasmicSelectGroupDropdownPrimary__VariantsArgs = {
  label?: SingleBooleanChoiceArg<"label">;
  description?: SingleBooleanChoiceArg<"description">;
  width?: SingleChoiceArg<
    | "_90"
    | "_120"
    | "_144"
    | "_160"
    | "_180"
    | "_270"
    | "_360"
    | "_540"
    | "_720"
  >;
};

type VariantPropType = keyof PlasmicSelectGroupDropdownPrimary__VariantsArgs;
export const PlasmicSelectGroupDropdownPrimary__VariantProps =
  new Array<VariantPropType>("label", "description", "width");

export type PlasmicSelectGroupDropdownPrimary__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  placeholder?: React.ReactNode;
};

type ArgPropType = keyof PlasmicSelectGroupDropdownPrimary__ArgsType;
export const PlasmicSelectGroupDropdownPrimary__ArgProps =
  new Array<ArgPropType>("children", "slot", "placeholder");

export type PlasmicSelectGroupDropdownPrimary__OverridesType = {
  root?: p.Flex<"div">;
  parent?: p.Flex<"div">;
  labelParent?: p.Flex<"label">;
  selectDropdownPrimary?: p.Flex<typeof SelectDropdownPrimary>;
  descriptionParent?: p.Flex<"div">;
};

export interface DefaultSelectGroupDropdownPrimaryProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  placeholder?: React.ReactNode;
  label?: SingleBooleanChoiceArg<"label">;
  description?: SingleBooleanChoiceArg<"description">;
  width?: SingleChoiceArg<
    | "_90"
    | "_120"
    | "_144"
    | "_160"
    | "_180"
    | "_270"
    | "_360"
    | "_540"
    | "_720"
  >;
  className?: string;
}

function PlasmicSelectGroupDropdownPrimary__RenderFunc(props: {
  variants: PlasmicSelectGroupDropdownPrimary__VariantsArgs;
  args: PlasmicSelectGroupDropdownPrimary__ArgsType;
  overrides: PlasmicSelectGroupDropdownPrimary__OverridesType;
  dataFetches?: PlasmicSelectGroupDropdownPrimary__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"parent"}
        data-plasmic-override={overrides.parent}
        hasGap={true}
        className={classNames(defaultcss.all, sty.parent, {
          [sty.parent__width__90]: hasVariant(variants, "width", "_90")
        })}
      >
        {(hasVariant(variants, "label", "label") ? true : true) ? (
          <label
            data-plasmic-name={"labelParent"}
            data-plasmic-override={overrides.labelParent}
            className={classNames(defaultcss.all, sty.labelParent, {
              [sty.labelParent__description]: hasVariant(
                variants,
                "description",
                "description"
              ),
              [sty.labelParent__label]: hasVariant(variants, "label", "label")
            })}
          >
            <div className={classNames(defaultcss.all, sty.freeBox__dUoF9)}>
              {p.renderPlasmicSlot({
                defaultContents: "Label",
                value: args.children,
                className: classNames(sty.slotChildren)
              })}
            </div>
          </label>
        ) : null}

        <SelectDropdownPrimary
          data-plasmic-name={"selectDropdownPrimary"}
          data-plasmic-override={overrides.selectDropdownPrimary}
          className={classNames("__wab_instance", sty.selectDropdownPrimary, {
            [sty.selectDropdownPrimary__width__120]: hasVariant(
              variants,
              "width",
              "_120"
            ),
            [sty.selectDropdownPrimary__width__144]: hasVariant(
              variants,
              "width",
              "_144"
            ),
            [sty.selectDropdownPrimary__width__160]: hasVariant(
              variants,
              "width",
              "_160"
            ),
            [sty.selectDropdownPrimary__width__180]: hasVariant(
              variants,
              "width",
              "_180"
            ),
            [sty.selectDropdownPrimary__width__270]: hasVariant(
              variants,
              "width",
              "_270"
            ),
            [sty.selectDropdownPrimary__width__360]: hasVariant(
              variants,
              "width",
              "_360"
            ),
            [sty.selectDropdownPrimary__width__540]: hasVariant(
              variants,
              "width",
              "_540"
            ),
            [sty.selectDropdownPrimary__width__720]: hasVariant(
              variants,
              "width",
              "_720"
            ),
            [sty.selectDropdownPrimary__width__90]: hasVariant(
              variants,
              "width",
              "_90"
            )
          })}
          placeholder={p.renderPlasmicSlot({
            defaultContents: "Select...",
            value: args.placeholder
          })}
          width={
            hasVariant(variants, "width", "_360")
              ? ("_360" as const)
              : hasVariant(variants, "width", "_270")
              ? ("_270" as const)
              : hasVariant(variants, "width", "_180")
              ? ("_180" as const)
              : hasVariant(variants, "width", "_160")
              ? ("_160" as const)
              : hasVariant(variants, "width", "_144")
              ? ("_144" as const)
              : hasVariant(variants, "width", "_120")
              ? ("_120" as const)
              : hasVariant(variants, "width", "_90")
              ? ("_90" as const)
              : hasVariant(variants, "width", "_720")
              ? ("_720" as const)
              : hasVariant(variants, "width", "_540")
              ? ("_540" as const)
              : ("_360" as const)
          }
        />

        {(hasVariant(variants, "description", "description") ? true : true) ? (
          <div
            data-plasmic-name={"descriptionParent"}
            data-plasmic-override={overrides.descriptionParent}
            className={classNames(defaultcss.all, sty.descriptionParent, {
              [sty.descriptionParent__description]: hasVariant(
                variants,
                "description",
                "description"
              ),
              [sty.descriptionParent__label]: hasVariant(
                variants,
                "label",
                "label"
              )
            })}
          >
            <div className={classNames(defaultcss.all, sty.freeBox__yq7Jv)}>
              {p.renderPlasmicSlot({
                defaultContents: "Description",
                value: args.slot,
                className: classNames(sty.slotSlot)
              })}
            </div>
          </div>
        ) : null}
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "parent",
    "labelParent",
    "selectDropdownPrimary",
    "descriptionParent"
  ],
  parent: [
    "parent",
    "labelParent",
    "selectDropdownPrimary",
    "descriptionParent"
  ],
  labelParent: ["labelParent"],
  selectDropdownPrimary: ["selectDropdownPrimary"],
  descriptionParent: ["descriptionParent"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  parent: "div";
  labelParent: "label";
  selectDropdownPrimary: typeof SelectDropdownPrimary;
  descriptionParent: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSelectGroupDropdownPrimary__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSelectGroupDropdownPrimary__VariantsArgs;
    args?: PlasmicSelectGroupDropdownPrimary__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicSelectGroupDropdownPrimary__Fetches;
  } & Omit<PlasmicSelectGroupDropdownPrimary__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSelectGroupDropdownPrimary__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSelectGroupDropdownPrimary__ArgProps,
      internalVariantPropNames: PlasmicSelectGroupDropdownPrimary__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicSelectGroupDropdownPrimary__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSelectGroupDropdownPrimary";
  } else {
    func.displayName = `PlasmicSelectGroupDropdownPrimary.${nodeName}`;
  }
  return func;
}

export const PlasmicSelectGroupDropdownPrimary = Object.assign(
  // Top-level PlasmicSelectGroupDropdownPrimary renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    parent: makeNodeComponent("parent"),
    labelParent: makeNodeComponent("labelParent"),
    selectDropdownPrimary: makeNodeComponent("selectDropdownPrimary"),
    descriptionParent: makeNodeComponent("descriptionParent"),

    // Metadata about props expected for PlasmicSelectGroupDropdownPrimary
    internalVariantProps: PlasmicSelectGroupDropdownPrimary__VariantProps,
    internalArgProps: PlasmicSelectGroupDropdownPrimary__ArgProps
  }
);

export default PlasmicSelectGroupDropdownPrimary;
/* prettier-ignore-end */
