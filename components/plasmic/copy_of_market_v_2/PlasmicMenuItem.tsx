// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: BK282v6KXFLKiAW
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicMenuItem.module.css"; // plasmic-import: BK282v6KXFLKiAW/css

export type PlasmicMenuItem__VariantMembers = {
  disabled: "disabled";
  size: "_14Px" | "_16Px";
};

export type PlasmicMenuItem__VariantsArgs = {
  disabled?: SingleBooleanChoiceArg<"disabled">;
  size?: SingleChoiceArg<"_14Px" | "_16Px">;
};

type VariantPropType = keyof PlasmicMenuItem__VariantsArgs;
export const PlasmicMenuItem__VariantProps = new Array<VariantPropType>(
  "disabled",
  "size"
);

export type PlasmicMenuItem__ArgsType = {
  text?: React.ReactNode;
  destination?: string | PageHref;
};

type ArgPropType = keyof PlasmicMenuItem__ArgsType;
export const PlasmicMenuItem__ArgProps = new Array<ArgPropType>(
  "text",
  "destination"
);

export type PlasmicMenuItem__OverridesType = {
  menuItemLink?: p.Flex<"a"> & Partial<LinkProps>;
  textParent?: p.Flex<"div">;
};

export interface DefaultMenuItemProps {
  text?: React.ReactNode;
  destination?: string | PageHref;
  disabled?: SingleBooleanChoiceArg<"disabled">;
  size?: SingleChoiceArg<"_14Px" | "_16Px">;
  className?: string;
}

function PlasmicMenuItem__RenderFunc(props: {
  variants: PlasmicMenuItem__VariantsArgs;
  args: PlasmicMenuItem__ArgsType;
  overrides: PlasmicMenuItem__OverridesType;
  dataFetches?: PlasmicMenuItem__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={p.PlasmicLink}
      data-plasmic-name={"menuItemLink"}
      data-plasmic-override={overrides.menuItemLink}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        defaultcss.all,
        projectcss.root_reset,
        sty.menuItemLink,
        {
          [sty.menuItemLink__disabled]: hasVariant(
            variants,
            "disabled",
            "disabled"
          )
        }
      )}
      component={Link}
      href={args.destination}
      platform={"nextjs"}
    >
      <div
        data-plasmic-name={"textParent"}
        data-plasmic-override={overrides.textParent}
        className={classNames(defaultcss.all, sty.textParent)}
      >
        {p.renderPlasmicSlot({
          defaultContents: "Menu item",
          value: args.text,
          className: classNames(sty.slotText, {
            [sty.slotText__disabled]: hasVariant(
              variants,
              "disabled",
              "disabled"
            ),
            [sty.slotText__size__14Px]: hasVariant(variants, "size", "_14Px"),
            [sty.slotText__size__16Px]: hasVariant(variants, "size", "_16Px")
          })
        })}
      </div>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  menuItemLink: ["menuItemLink", "textParent"],
  textParent: ["textParent"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  menuItemLink: "a";
  textParent: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMenuItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMenuItem__VariantsArgs;
    args?: PlasmicMenuItem__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicMenuItem__Fetches;
  } & Omit<PlasmicMenuItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMenuItem__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicMenuItem__ArgProps,
      internalVariantPropNames: PlasmicMenuItem__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicMenuItem__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "menuItemLink") {
    func.displayName = "PlasmicMenuItem";
  } else {
    func.displayName = `PlasmicMenuItem.${nodeName}`;
  }
  return func;
}

export const PlasmicMenuItem = Object.assign(
  // Top-level PlasmicMenuItem renders the root element
  makeNodeComponent("menuItemLink"),
  {
    // Helper components rendering sub-elements
    textParent: makeNodeComponent("textParent"),

    // Metadata about props expected for PlasmicMenuItem
    internalVariantProps: PlasmicMenuItem__VariantProps,
    internalArgProps: PlasmicMenuItem__ArgProps
  }
);

export default PlasmicMenuItem;
/* prettier-ignore-end */
