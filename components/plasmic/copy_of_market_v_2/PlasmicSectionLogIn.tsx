// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: x0OVT7TfQVhffO
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import CardLogIn from "../../CardLogIn"; // plasmic-import: E5VOlk3wsw20Wp/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: biX3aS42hiG0fF/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicSectionLogIn.module.css"; // plasmic-import: x0OVT7TfQVhffO/css

import Icon43Icon from "./icons/PlasmicIcon__Icon43"; // plasmic-import: uYZcHonxcU9iEGk/icon

export type PlasmicSectionLogIn__VariantMembers = {};

export type PlasmicSectionLogIn__VariantsArgs = {};
type VariantPropType = keyof PlasmicSectionLogIn__VariantsArgs;
export const PlasmicSectionLogIn__VariantProps = new Array<VariantPropType>();

export type PlasmicSectionLogIn__ArgsType = {};
type ArgPropType = keyof PlasmicSectionLogIn__ArgsType;
export const PlasmicSectionLogIn__ArgProps = new Array<ArgPropType>();

export type PlasmicSectionLogIn__OverridesType = {
  parent?: p.Flex<"div">;
  loginHeadlineParent?: p.Flex<"div">;
  loginHeadlineText?: p.Flex<"div">;
  svgLinkDiv?: p.Flex<"a"> & Partial<LinkProps>;
  svg?: p.Flex<"svg">;
  freeBox?: p.Flex<"div">;
  cardLogIn?: p.Flex<typeof CardLogIn>;
};

export interface DefaultSectionLogInProps {
  className?: string;
}

function PlasmicSectionLogIn__RenderFunc(props: {
  variants: PlasmicSectionLogIn__VariantsArgs;
  args: PlasmicSectionLogIn__ArgsType;
  overrides: PlasmicSectionLogIn__OverridesType;
  dataFetches?: PlasmicSectionLogIn__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"parent"}
      data-plasmic-override={overrides.parent}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.parent)}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"loginHeadlineParent"}
        data-plasmic-override={overrides.loginHeadlineParent}
        hasGap={true}
        className={classNames(defaultcss.all, sty.loginHeadlineParent)}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"loginHeadlineText"}
          data-plasmic-override={overrides.loginHeadlineText}
          hasGap={true}
          className={classNames(defaultcss.all, sty.loginHeadlineText)}
        >
          <p.PlasmicLink
            data-plasmic-name={"svgLinkDiv"}
            data-plasmic-override={overrides.svgLinkDiv}
            className={classNames(defaultcss.all, sty.svgLinkDiv)}
            component={Link}
            href={"/" as const}
            platform={"nextjs"}
          >
            <Icon43Icon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(defaultcss.all, sty.svg)}
              role={"img"}
            />
          </p.PlasmicLink>

          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox
            )}
          >
            {"Log in"}
          </div>
        </p.Stack>

        <CardLogIn
          data-plasmic-name={"cardLogIn"}
          data-plasmic-override={overrides.cardLogIn}
          className={classNames("__wab_instance", sty.cardLogIn)}
          size={"_360" as const}
        />
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  parent: [
    "parent",
    "loginHeadlineParent",
    "loginHeadlineText",
    "svgLinkDiv",
    "svg",
    "freeBox",
    "cardLogIn"
  ],
  loginHeadlineParent: [
    "loginHeadlineParent",
    "loginHeadlineText",
    "svgLinkDiv",
    "svg",
    "freeBox",
    "cardLogIn"
  ],
  loginHeadlineText: ["loginHeadlineText", "svgLinkDiv", "svg", "freeBox"],
  svgLinkDiv: ["svgLinkDiv", "svg"],
  svg: ["svg"],
  freeBox: ["freeBox"],
  cardLogIn: ["cardLogIn"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  parent: "div";
  loginHeadlineParent: "div";
  loginHeadlineText: "div";
  svgLinkDiv: "a";
  svg: "svg";
  freeBox: "div";
  cardLogIn: typeof CardLogIn;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSectionLogIn__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSectionLogIn__VariantsArgs;
    args?: PlasmicSectionLogIn__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicSectionLogIn__Fetches;
  } & Omit<PlasmicSectionLogIn__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSectionLogIn__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSectionLogIn__ArgProps,
      internalVariantPropNames: PlasmicSectionLogIn__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicSectionLogIn__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "parent") {
    func.displayName = "PlasmicSectionLogIn";
  } else {
    func.displayName = `PlasmicSectionLogIn.${nodeName}`;
  }
  return func;
}

export const PlasmicSectionLogIn = Object.assign(
  // Top-level PlasmicSectionLogIn renders the root element
  makeNodeComponent("parent"),
  {
    // Helper components rendering sub-elements
    loginHeadlineParent: makeNodeComponent("loginHeadlineParent"),
    loginHeadlineText: makeNodeComponent("loginHeadlineText"),
    svgLinkDiv: makeNodeComponent("svgLinkDiv"),
    svg: makeNodeComponent("svg"),
    freeBox: makeNodeComponent("freeBox"),
    cardLogIn: makeNodeComponent("cardLogIn"),

    // Metadata about props expected for PlasmicSectionLogIn
    internalVariantProps: PlasmicSectionLogIn__VariantProps,
    internalArgProps: PlasmicSectionLogIn__ArgProps
  }
);

export default PlasmicSectionLogIn;
/* prettier-ignore-end */
