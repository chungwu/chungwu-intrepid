// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: 496UG9Le0YgMJU3
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ElementRadioPrimary from "../../ElementRadioPrimary"; // plasmic-import: LCJ0Mh3XlqeJy94/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicRadioTextInputSecondary.module.css"; // plasmic-import: 496UG9Le0YgMJU3/css

export type PlasmicRadioTextInputSecondary__VariantMembers = {
  size: "_12Px" | "_14Px" | "_16Px";
};

export type PlasmicRadioTextInputSecondary__VariantsArgs = {
  size?: SingleChoiceArg<"_12Px" | "_14Px" | "_16Px">;
};

type VariantPropType = keyof PlasmicRadioTextInputSecondary__VariantsArgs;
export const PlasmicRadioTextInputSecondary__VariantProps =
  new Array<VariantPropType>("size");

export type PlasmicRadioTextInputSecondary__ArgsType = {
  itemText?: React.ReactNode;
  descriptionText?: React.ReactNode;
};

type ArgPropType = keyof PlasmicRadioTextInputSecondary__ArgsType;
export const PlasmicRadioTextInputSecondary__ArgProps = new Array<ArgPropType>(
  "itemText",
  "descriptionText"
);

export type PlasmicRadioTextInputSecondary__OverridesType = {
  root?: p.Flex<"div">;
  elementRadioPrimary?: p.Flex<typeof ElementRadioPrimary>;
  textParent?: p.Flex<"div">;
};

export interface DefaultRadioTextInputSecondaryProps {
  itemText?: React.ReactNode;
  descriptionText?: React.ReactNode;
  size?: SingleChoiceArg<"_12Px" | "_14Px" | "_16Px">;
  className?: string;
}

function PlasmicRadioTextInputSecondary__RenderFunc(props: {
  variants: PlasmicRadioTextInputSecondary__VariantsArgs;
  args: PlasmicRadioTextInputSecondary__ArgsType;
  overrides: PlasmicRadioTextInputSecondary__OverridesType;
  dataFetches?: PlasmicRadioTextInputSecondary__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__size__16Px]: hasVariant(variants, "size", "_16Px")
      })}
    >
      <ElementRadioPrimary
        data-plasmic-name={"elementRadioPrimary"}
        data-plasmic-override={overrides.elementRadioPrimary}
        className={classNames("__wab_instance", sty.elementRadioPrimary, {
          [sty.elementRadioPrimary__size__12Px]: hasVariant(
            variants,
            "size",
            "_12Px"
          ),
          [sty.elementRadioPrimary__size__14Px]: hasVariant(
            variants,
            "size",
            "_14Px"
          ),
          [sty.elementRadioPrimary__size__16Px]: hasVariant(
            variants,
            "size",
            "_16Px"
          )
        })}
        size={
          hasVariant(variants, "size", "_16Px")
            ? ("_16Px" as const)
            : hasVariant(variants, "size", "_12Px")
            ? ("_12Px" as const)
            : ("_14Px" as const)
        }
      />

      <p.Stack
        as={"div"}
        data-plasmic-name={"textParent"}
        data-plasmic-override={overrides.textParent}
        hasGap={true}
        className={classNames(defaultcss.all, sty.textParent)}
      >
        {p.renderPlasmicSlot({
          defaultContents: "Item element",
          value: args.itemText,
          className: classNames(sty.slotItemText, {
            [sty.slotItemText__size__12Px]: hasVariant(
              variants,
              "size",
              "_12Px"
            ),
            [sty.slotItemText__size__14Px]: hasVariant(
              variants,
              "size",
              "_14Px"
            ),
            [sty.slotItemText__size__16Px]: hasVariant(
              variants,
              "size",
              "_16Px"
            )
          })
        })}

        {p.renderPlasmicSlot({
          defaultContents: "Description",
          value: args.descriptionText,
          className: classNames(sty.slotDescriptionText, {
            [sty.slotDescriptionText__size__12Px]: hasVariant(
              variants,
              "size",
              "_12Px"
            ),
            [sty.slotDescriptionText__size__14Px]: hasVariant(
              variants,
              "size",
              "_14Px"
            ),
            [sty.slotDescriptionText__size__16Px]: hasVariant(
              variants,
              "size",
              "_16Px"
            )
          })
        })}
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "elementRadioPrimary", "textParent"],
  elementRadioPrimary: ["elementRadioPrimary"],
  textParent: ["textParent"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  elementRadioPrimary: typeof ElementRadioPrimary;
  textParent: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRadioTextInputSecondary__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRadioTextInputSecondary__VariantsArgs;
    args?: PlasmicRadioTextInputSecondary__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicRadioTextInputSecondary__Fetches;
  } & Omit<PlasmicRadioTextInputSecondary__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicRadioTextInputSecondary__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicRadioTextInputSecondary__ArgProps,
      internalVariantPropNames: PlasmicRadioTextInputSecondary__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicRadioTextInputSecondary__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRadioTextInputSecondary";
  } else {
    func.displayName = `PlasmicRadioTextInputSecondary.${nodeName}`;
  }
  return func;
}

export const PlasmicRadioTextInputSecondary = Object.assign(
  // Top-level PlasmicRadioTextInputSecondary renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    elementRadioPrimary: makeNodeComponent("elementRadioPrimary"),
    textParent: makeNodeComponent("textParent"),

    // Metadata about props expected for PlasmicRadioTextInputSecondary
    internalVariantProps: PlasmicRadioTextInputSecondary__VariantProps,
    internalArgProps: PlasmicRadioTextInputSecondary__ArgProps
  }
);

export default PlasmicRadioTextInputSecondary;
/* prettier-ignore-end */
