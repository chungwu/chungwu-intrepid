// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: _vJ_WmCvPDxuXr
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: gpNjXfbD_ZdpPU/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: biX3aS42hiG0fF/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicCardPasswordReset.module.css"; // plasmic-import: _vJ_WmCvPDxuXr/css

import Icon43Icon from "./icons/PlasmicIcon__Icon43"; // plasmic-import: uYZcHonxcU9iEGk/icon
import PlusBoldIcon from "./icons/PlasmicIcon__PlusBold"; // plasmic-import: lhSEEajPJGZatfD/icon

export type PlasmicCardPasswordReset__VariantMembers = {};

export type PlasmicCardPasswordReset__VariantsArgs = {};
type VariantPropType = keyof PlasmicCardPasswordReset__VariantsArgs;
export const PlasmicCardPasswordReset__VariantProps =
  new Array<VariantPropType>();

export type PlasmicCardPasswordReset__ArgsType = {
  textSlot?: React.ReactNode;
};

type ArgPropType = keyof PlasmicCardPasswordReset__ArgsType;
export const PlasmicCardPasswordReset__ArgProps = new Array<ArgPropType>(
  "textSlot"
);

export type PlasmicCardPasswordReset__OverridesType = {
  root?: p.Flex<"div">;
  parent?: p.Flex<"div">;
  navLinkBack?: p.Flex<"a"> & Partial<LinkProps>;
  svg?: p.Flex<"svg">;
  passwordReset?: p.Flex<"form">;
  headlineSubheadGroupParent?: p.Flex<"div">;
  headlineText?: p.Flex<"div">;
  textBodyParent?: p.Flex<"div">;
  emailButtonGroupParent?: p.Flex<"div">;
  emailParent?: p.Flex<"div">;
  emailLabel?: p.Flex<"label">;
  registeredEmail?: p.Flex<"input">;
  recoveryLinkEmail?: p.Flex<typeof ButtonPrimary>;
  freeBox?: p.Flex<"div">;
};

export interface DefaultCardPasswordResetProps {
  textSlot?: React.ReactNode;
  className?: string;
}

function PlasmicCardPasswordReset__RenderFunc(props: {
  variants: PlasmicCardPasswordReset__VariantsArgs;
  args: PlasmicCardPasswordReset__ArgsType;
  overrides: PlasmicCardPasswordReset__OverridesType;
  dataFetches?: PlasmicCardPasswordReset__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"parent"}
        data-plasmic-override={overrides.parent}
        hasGap={true}
        className={classNames(defaultcss.all, sty.parent)}
      >
        <p.PlasmicLink
          data-plasmic-name={"navLinkBack"}
          data-plasmic-override={overrides.navLinkBack}
          className={classNames(defaultcss.all, sty.navLinkBack)}
          component={Link}
          href={"/log-in" as const}
          platform={"nextjs"}
        >
          <Icon43Icon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(defaultcss.all, sty.svg)}
            role={"img"}
          />
        </p.PlasmicLink>

        <p.Stack
          as={"form"}
          data-plasmic-name={"passwordReset"}
          data-plasmic-override={overrides.passwordReset}
          hasGap={true}
          className={classNames(defaultcss.all, sty.passwordReset)}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"headlineSubheadGroupParent"}
            data-plasmic-override={overrides.headlineSubheadGroupParent}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              sty.headlineSubheadGroupParent
            )}
          >
            <div
              data-plasmic-name={"headlineText"}
              data-plasmic-override={overrides.headlineText}
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.headlineText
              )}
            >
              {"Password reset?"}
            </div>

            <div
              data-plasmic-name={"textBodyParent"}
              data-plasmic-override={overrides.textBodyParent}
              className={classNames(defaultcss.all, sty.textBodyParent)}
            >
              {p.renderPlasmicSlot({
                defaultContents:
                  "Enter your registered email below to receive your password recovery link.",
                value: args.textSlot,
                className: classNames(sty.slotTextSlot)
              })}
            </div>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"emailButtonGroupParent"}
            data-plasmic-override={overrides.emailButtonGroupParent}
            hasGap={true}
            className={classNames(defaultcss.all, sty.emailButtonGroupParent)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"emailParent"}
              data-plasmic-override={overrides.emailParent}
              hasGap={true}
              className={classNames(defaultcss.all, sty.emailParent)}
            >
              <label
                data-plasmic-name={"emailLabel"}
                data-plasmic-override={overrides.emailLabel}
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.emailLabel
                )}
              >
                {"Email"}
              </label>

              <input
                data-plasmic-name={"registeredEmail"}
                data-plasmic-override={overrides.registeredEmail}
                className={classNames(defaultcss.input, sty.registeredEmail)}
                placeholder={"enter your registered email address" as const}
                size={1 as const}
                type={"text" as const}
                value={"" as const}
              />
            </p.Stack>

            <ButtonPrimary
              data-plasmic-name={"recoveryLinkEmail"}
              data-plasmic-override={overrides.recoveryLinkEmail}
              className={classNames("__wab_instance", sty.recoveryLinkEmail)}
              size={"_360" as const}
            >
              <div
                data-plasmic-name={"freeBox"}
                data-plasmic-override={overrides.freeBox}
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.freeBox
                )}
              >
                {"Send recovery link"}
              </div>
            </ButtonPrimary>
          </p.Stack>
        </p.Stack>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "parent",
    "navLinkBack",
    "svg",
    "passwordReset",
    "headlineSubheadGroupParent",
    "headlineText",
    "textBodyParent",
    "emailButtonGroupParent",
    "emailParent",
    "emailLabel",
    "registeredEmail",
    "recoveryLinkEmail",
    "freeBox"
  ],
  parent: [
    "parent",
    "navLinkBack",
    "svg",
    "passwordReset",
    "headlineSubheadGroupParent",
    "headlineText",
    "textBodyParent",
    "emailButtonGroupParent",
    "emailParent",
    "emailLabel",
    "registeredEmail",
    "recoveryLinkEmail",
    "freeBox"
  ],
  navLinkBack: ["navLinkBack", "svg"],
  svg: ["svg"],
  passwordReset: [
    "passwordReset",
    "headlineSubheadGroupParent",
    "headlineText",
    "textBodyParent",
    "emailButtonGroupParent",
    "emailParent",
    "emailLabel",
    "registeredEmail",
    "recoveryLinkEmail",
    "freeBox"
  ],
  headlineSubheadGroupParent: [
    "headlineSubheadGroupParent",
    "headlineText",
    "textBodyParent"
  ],
  headlineText: ["headlineText"],
  textBodyParent: ["textBodyParent"],
  emailButtonGroupParent: [
    "emailButtonGroupParent",
    "emailParent",
    "emailLabel",
    "registeredEmail",
    "recoveryLinkEmail",
    "freeBox"
  ],
  emailParent: ["emailParent", "emailLabel", "registeredEmail"],
  emailLabel: ["emailLabel"],
  registeredEmail: ["registeredEmail"],
  recoveryLinkEmail: ["recoveryLinkEmail", "freeBox"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  parent: "div";
  navLinkBack: "a";
  svg: "svg";
  passwordReset: "form";
  headlineSubheadGroupParent: "div";
  headlineText: "div";
  textBodyParent: "div";
  emailButtonGroupParent: "div";
  emailParent: "div";
  emailLabel: "label";
  registeredEmail: "input";
  recoveryLinkEmail: typeof ButtonPrimary;
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCardPasswordReset__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCardPasswordReset__VariantsArgs;
    args?: PlasmicCardPasswordReset__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicCardPasswordReset__Fetches;
  } & Omit<PlasmicCardPasswordReset__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCardPasswordReset__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCardPasswordReset__ArgProps,
      internalVariantPropNames: PlasmicCardPasswordReset__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicCardPasswordReset__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCardPasswordReset";
  } else {
    func.displayName = `PlasmicCardPasswordReset.${nodeName}`;
  }
  return func;
}

export const PlasmicCardPasswordReset = Object.assign(
  // Top-level PlasmicCardPasswordReset renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    parent: makeNodeComponent("parent"),
    navLinkBack: makeNodeComponent("navLinkBack"),
    svg: makeNodeComponent("svg"),
    passwordReset: makeNodeComponent("passwordReset"),
    headlineSubheadGroupParent: makeNodeComponent("headlineSubheadGroupParent"),
    headlineText: makeNodeComponent("headlineText"),
    textBodyParent: makeNodeComponent("textBodyParent"),
    emailButtonGroupParent: makeNodeComponent("emailButtonGroupParent"),
    emailParent: makeNodeComponent("emailParent"),
    emailLabel: makeNodeComponent("emailLabel"),
    registeredEmail: makeNodeComponent("registeredEmail"),
    recoveryLinkEmail: makeNodeComponent("recoveryLinkEmail"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicCardPasswordReset
    internalVariantProps: PlasmicCardPasswordReset__VariantProps,
    internalArgProps: PlasmicCardPasswordReset__ArgProps
  }
);

export default PlasmicCardPasswordReset;
/* prettier-ignore-end */
