// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: GBa_tJKE4sY1Mwa
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicElementCheckoutPromotionPercentTotalValue.module.css"; // plasmic-import: GBa_tJKE4sY1Mwa/css

export type PlasmicElementCheckoutPromotionPercentTotalValue__VariantMembers =
  {};

export type PlasmicElementCheckoutPromotionPercentTotalValue__VariantsArgs = {};
type VariantPropType =
  keyof PlasmicElementCheckoutPromotionPercentTotalValue__VariantsArgs;
export const PlasmicElementCheckoutPromotionPercentTotalValue__VariantProps =
  new Array<VariantPropType>();

export type PlasmicElementCheckoutPromotionPercentTotalValue__ArgsType = {
  promotionTitleText?: React.ReactNode;
  promotionPercentValueNumber?: React.ReactNode;
  promotionCurrency?: React.ReactNode;
};

type ArgPropType =
  keyof PlasmicElementCheckoutPromotionPercentTotalValue__ArgsType;
export const PlasmicElementCheckoutPromotionPercentTotalValue__ArgProps =
  new Array<ArgPropType>(
    "promotionTitleText",
    "promotionPercentValueNumber",
    "promotionCurrency"
  );

export type PlasmicElementCheckoutPromotionPercentTotalValue__OverridesType = {
  root?: p.Flex<"div">;
  promotionTitleTextParent?: p.Flex<"div">;
  promotionFactorPercentNumberParent?: p.Flex<"div">;
  promotionFactorText?: p.Flex<"div">;
  promotionCurrencyTotalValueDiscountNumber?: p.Flex<"div">;
  promotionCurrencyParent?: p.Flex<"div">;
};

export interface DefaultElementCheckoutPromotionPercentTotalValueProps {
  promotionTitleText?: React.ReactNode;
  promotionPercentValueNumber?: React.ReactNode;
  promotionCurrency?: React.ReactNode;
  className?: string;
}

function PlasmicElementCheckoutPromotionPercentTotalValue__RenderFunc(props: {
  variants: PlasmicElementCheckoutPromotionPercentTotalValue__VariantsArgs;
  args: PlasmicElementCheckoutPromotionPercentTotalValue__ArgsType;
  overrides: PlasmicElementCheckoutPromotionPercentTotalValue__OverridesType;
  dataFetches?: PlasmicElementCheckoutPromotionPercentTotalValue__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.freeBox___06Kmb)}
      >
        <div
          data-plasmic-name={"promotionTitleTextParent"}
          data-plasmic-override={overrides.promotionTitleTextParent}
          className={classNames(defaultcss.all, sty.promotionTitleTextParent)}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Promotion",
            value: args.promotionTitleText,
            className: classNames(sty.slotPromotionTitleText)
          })}
        </div>

        <p.Stack
          as={"div"}
          data-plasmic-name={"promotionFactorPercentNumberParent"}
          data-plasmic-override={overrides.promotionFactorPercentNumberParent}
          hasGap={true}
          className={classNames(
            defaultcss.all,
            sty.promotionFactorPercentNumberParent
          )}
        >
          <div
            data-plasmic-name={"promotionFactorText"}
            data-plasmic-override={overrides.promotionFactorText}
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.promotionFactorText
            )}
          >
            {"%"}
          </div>

          {p.renderPlasmicSlot({
            defaultContents: "0.00",
            value: args.promotionPercentValueNumber,
            className: classNames(sty.slotPromotionPercentValueNumber)
          })}
        </p.Stack>
      </p.Stack>

      <p.Stack
        as={"div"}
        data-plasmic-name={"promotionCurrencyTotalValueDiscountNumber"}
        data-plasmic-override={
          overrides.promotionCurrencyTotalValueDiscountNumber
        }
        hasGap={true}
        className={classNames(
          defaultcss.all,
          sty.promotionCurrencyTotalValueDiscountNumber
        )}
      >
        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.freeBox__swwAb
          )}
        >
          {"-"}
        </div>

        <div
          data-plasmic-name={"promotionCurrencyParent"}
          data-plasmic-override={overrides.promotionCurrencyParent}
          className={classNames(defaultcss.all, sty.promotionCurrencyParent)}
        >
          {p.renderPlasmicSlot({
            defaultContents: "$",
            value: args.promotionCurrency,
            className: classNames(sty.slotPromotionCurrency)
          })}
        </div>

        <div className={classNames(defaultcss.all, sty.freeBox__gRS9)}>
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox__pwqAa
            )}
          >
            {"0.00"}
          </div>
        </div>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "promotionTitleTextParent",
    "promotionFactorPercentNumberParent",
    "promotionFactorText",
    "promotionCurrencyTotalValueDiscountNumber",
    "promotionCurrencyParent"
  ],
  promotionTitleTextParent: ["promotionTitleTextParent"],
  promotionFactorPercentNumberParent: [
    "promotionFactorPercentNumberParent",
    "promotionFactorText"
  ],
  promotionFactorText: ["promotionFactorText"],
  promotionCurrencyTotalValueDiscountNumber: [
    "promotionCurrencyTotalValueDiscountNumber",
    "promotionCurrencyParent"
  ],
  promotionCurrencyParent: ["promotionCurrencyParent"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  promotionTitleTextParent: "div";
  promotionFactorPercentNumberParent: "div";
  promotionFactorText: "div";
  promotionCurrencyTotalValueDiscountNumber: "div";
  promotionCurrencyParent: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicElementCheckoutPromotionPercentTotalValue__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicElementCheckoutPromotionPercentTotalValue__VariantsArgs;
    args?: PlasmicElementCheckoutPromotionPercentTotalValue__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicElementCheckoutPromotionPercentTotalValue__Fetches;
  } & Omit< // Specify variants directly as props
    PlasmicElementCheckoutPromotionPercentTotalValue__VariantsArgs,
    ReservedPropsType
  > &
    // Specify args directly as props
    Omit<
      PlasmicElementCheckoutPromotionPercentTotalValue__ArgsType,
      ReservedPropsType
    > &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames:
        PlasmicElementCheckoutPromotionPercentTotalValue__ArgProps,
      internalVariantPropNames:
        PlasmicElementCheckoutPromotionPercentTotalValue__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicElementCheckoutPromotionPercentTotalValue__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicElementCheckoutPromotionPercentTotalValue";
  } else {
    func.displayName = `PlasmicElementCheckoutPromotionPercentTotalValue.${nodeName}`;
  }
  return func;
}

export const PlasmicElementCheckoutPromotionPercentTotalValue = Object.assign(
  // Top-level PlasmicElementCheckoutPromotionPercentTotalValue renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    promotionTitleTextParent: makeNodeComponent("promotionTitleTextParent"),
    promotionFactorPercentNumberParent: makeNodeComponent(
      "promotionFactorPercentNumberParent"
    ),
    promotionFactorText: makeNodeComponent("promotionFactorText"),
    promotionCurrencyTotalValueDiscountNumber: makeNodeComponent(
      "promotionCurrencyTotalValueDiscountNumber"
    ),
    promotionCurrencyParent: makeNodeComponent("promotionCurrencyParent"),

    // Metadata about props expected for PlasmicElementCheckoutPromotionPercentTotalValue
    internalVariantProps:
      PlasmicElementCheckoutPromotionPercentTotalValue__VariantProps,
    internalArgProps: PlasmicElementCheckoutPromotionPercentTotalValue__ArgProps
  }
);

export default PlasmicElementCheckoutPromotionPercentTotalValue;
/* prettier-ignore-end */
