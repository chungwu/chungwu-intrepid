// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: p4P6aRucJwmJYM
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ElementRadioPrimary from "../../ElementRadioPrimary"; // plasmic-import: LCJ0Mh3XlqeJy94/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: biX3aS42hiG0fF/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicTableProjectAdminHeader.module.css"; // plasmic-import: p4P6aRucJwmJYM/css

export type PlasmicTableProjectAdminHeader__VariantMembers = {};

export type PlasmicTableProjectAdminHeader__VariantsArgs = {};
type VariantPropType = keyof PlasmicTableProjectAdminHeader__VariantsArgs;
export const PlasmicTableProjectAdminHeader__VariantProps =
  new Array<VariantPropType>();

export type PlasmicTableProjectAdminHeader__ArgsType = {};
type ArgPropType = keyof PlasmicTableProjectAdminHeader__ArgsType;
export const PlasmicTableProjectAdminHeader__ArgProps =
  new Array<ArgPropType>();

export type PlasmicTableProjectAdminHeader__OverridesType = {
  root?: p.Flex<"div">;
  orderHeaderSelectAll?: p.Flex<"div">;
  elementRadioPrimary?: p.Flex<typeof ElementRadioPrimary>;
  order?: p.Flex<"div">;
  status?: p.Flex<"div">;
  price?: p.Flex<"div">;
  partner?: p.Flex<"div">;
  notifications?: p.Flex<"div">;
  delivery?: p.Flex<"div">;
  review?: p.Flex<"div">;
  approved?: p.Flex<"div">;
  cancel?: p.Flex<"div">;
};

export interface DefaultTableProjectAdminHeaderProps {
  className?: string;
}

function PlasmicTableProjectAdminHeader__RenderFunc(props: {
  variants: PlasmicTableProjectAdminHeader__VariantsArgs;
  args: PlasmicTableProjectAdminHeader__ArgsType;
  overrides: PlasmicTableProjectAdminHeader__OverridesType;
  dataFetches?: PlasmicTableProjectAdminHeader__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"orderHeaderSelectAll"}
        data-plasmic-override={overrides.orderHeaderSelectAll}
        hasGap={true}
        className={classNames(defaultcss.all, sty.orderHeaderSelectAll)}
      >
        <ElementRadioPrimary
          data-plasmic-name={"elementRadioPrimary"}
          data-plasmic-override={overrides.elementRadioPrimary}
          className={classNames("__wab_instance", sty.elementRadioPrimary)}
          size={"_14Px" as const}
        />

        <div
          data-plasmic-name={"order"}
          data-plasmic-override={overrides.order}
          className={classNames(defaultcss.all, sty.order)}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox__nIDw
            )}
          >
            {"order"}
          </div>
        </div>
      </p.Stack>

      {(hasVariant(globalVariants, "screen", "mobile") ? true : true) ? (
        <div
          data-plasmic-name={"status"}
          data-plasmic-override={overrides.status}
          className={classNames(defaultcss.all, sty.status)}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox__m630D
            )}
          >
            {"Status"}
          </div>
        </div>
      ) : null}
      {(hasVariant(globalVariants, "screen", "mobile") ? true : true) ? (
        <div
          data-plasmic-name={"price"}
          data-plasmic-override={overrides.price}
          className={classNames(defaultcss.all, sty.price)}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox__jonj4
            )}
          >
            {"Price"}
          </div>
        </div>
      ) : null}
      {(hasVariant(globalVariants, "screen", "mobile") ? true : true) ? (
        <div
          data-plasmic-name={"partner"}
          data-plasmic-override={overrides.partner}
          className={classNames(defaultcss.all, sty.partner)}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox__uqz1O
            )}
          >
            {"Partner"}
          </div>
        </div>
      ) : null}
      {(hasVariant(globalVariants, "screen", "mobile") ? true : true) ? (
        <div
          data-plasmic-name={"notifications"}
          data-plasmic-override={overrides.notifications}
          className={classNames(defaultcss.all, sty.notifications)}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox___6PeHo
            )}
          >
            {"Notifications"}
          </div>
        </div>
      ) : null}
      {(hasVariant(globalVariants, "screen", "mobile") ? true : true) ? (
        <div
          data-plasmic-name={"delivery"}
          data-plasmic-override={overrides.delivery}
          className={classNames(defaultcss.all, sty.delivery)}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox___6ZGxC
            )}
          >
            {"Delivery date"}
          </div>
        </div>
      ) : null}
      {(hasVariant(globalVariants, "screen", "mobile") ? true : true) ? (
        <div
          data-plasmic-name={"review"}
          data-plasmic-override={overrides.review}
          className={classNames(defaultcss.all, sty.review)}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox___9QKsv
            )}
          >
            {"review"}
          </div>
        </div>
      ) : null}
      {(hasVariant(globalVariants, "screen", "mobile") ? true : true) ? (
        <div
          data-plasmic-name={"approved"}
          data-plasmic-override={overrides.approved}
          className={classNames(defaultcss.all, sty.approved)}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox__siZbS
            )}
          >
            {"Approved"}
          </div>
        </div>
      ) : null}
      {(hasVariant(globalVariants, "screen", "mobile") ? true : true) ? (
        <div
          data-plasmic-name={"cancel"}
          data-plasmic-override={overrides.cancel}
          className={classNames(defaultcss.all, sty.cancel)}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox__zqibe
            )}
          >
            {"cancel"}
          </div>
        </div>
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "orderHeaderSelectAll",
    "elementRadioPrimary",
    "order",
    "status",
    "price",
    "partner",
    "notifications",
    "delivery",
    "review",
    "approved",
    "cancel"
  ],
  orderHeaderSelectAll: [
    "orderHeaderSelectAll",
    "elementRadioPrimary",
    "order"
  ],
  elementRadioPrimary: ["elementRadioPrimary"],
  order: ["order"],
  status: ["status"],
  price: ["price"],
  partner: ["partner"],
  notifications: ["notifications"],
  delivery: ["delivery"],
  review: ["review"],
  approved: ["approved"],
  cancel: ["cancel"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  orderHeaderSelectAll: "div";
  elementRadioPrimary: typeof ElementRadioPrimary;
  order: "div";
  status: "div";
  price: "div";
  partner: "div";
  notifications: "div";
  delivery: "div";
  review: "div";
  approved: "div";
  cancel: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTableProjectAdminHeader__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTableProjectAdminHeader__VariantsArgs;
    args?: PlasmicTableProjectAdminHeader__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicTableProjectAdminHeader__Fetches;
  } & Omit<PlasmicTableProjectAdminHeader__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTableProjectAdminHeader__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTableProjectAdminHeader__ArgProps,
      internalVariantPropNames: PlasmicTableProjectAdminHeader__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicTableProjectAdminHeader__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTableProjectAdminHeader";
  } else {
    func.displayName = `PlasmicTableProjectAdminHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicTableProjectAdminHeader = Object.assign(
  // Top-level PlasmicTableProjectAdminHeader renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    orderHeaderSelectAll: makeNodeComponent("orderHeaderSelectAll"),
    elementRadioPrimary: makeNodeComponent("elementRadioPrimary"),
    order: makeNodeComponent("order"),
    status: makeNodeComponent("status"),
    price: makeNodeComponent("price"),
    partner: makeNodeComponent("partner"),
    notifications: makeNodeComponent("notifications"),
    delivery: makeNodeComponent("delivery"),
    review: makeNodeComponent("review"),
    approved: makeNodeComponent("approved"),
    cancel: makeNodeComponent("cancel"),

    // Metadata about props expected for PlasmicTableProjectAdminHeader
    internalVariantProps: PlasmicTableProjectAdminHeader__VariantProps,
    internalArgProps: PlasmicTableProjectAdminHeader__ArgProps
  }
);

export default PlasmicTableProjectAdminHeader;
/* prettier-ignore-end */
