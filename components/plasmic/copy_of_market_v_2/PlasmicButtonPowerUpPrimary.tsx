// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: CJ95U28AqiIHiid
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicButtonPowerUpPrimary.module.css"; // plasmic-import: CJ95U28AqiIHiid/css

import BoostIcon from "./icons/PlasmicIcon__Boost"; // plasmic-import: zTeN8PzxWbg23t7/icon

export type PlasmicButtonPowerUpPrimary__VariantMembers = {};

export type PlasmicButtonPowerUpPrimary__VariantsArgs = {};
type VariantPropType = keyof PlasmicButtonPowerUpPrimary__VariantsArgs;
export const PlasmicButtonPowerUpPrimary__VariantProps =
  new Array<VariantPropType>();

export type PlasmicButtonPowerUpPrimary__ArgsType = {};
type ArgPropType = keyof PlasmicButtonPowerUpPrimary__ArgsType;
export const PlasmicButtonPowerUpPrimary__ArgProps = new Array<ArgPropType>();

export type PlasmicButtonPowerUpPrimary__OverridesType = {
  root?: p.Flex<"button">;
  navbarListButtonTextParent2?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
  navbarListButtonText2?: p.Flex<"div">;
};

export interface DefaultButtonPowerUpPrimaryProps {
  className?: string;
}

function PlasmicButtonPowerUpPrimary__RenderFunc(props: {
  variants: PlasmicButtonPowerUpPrimary__VariantsArgs;
  args: PlasmicButtonPowerUpPrimary__ArgsType;
  overrides: PlasmicButtonPowerUpPrimary__OverridesType;
  dataFetches?: PlasmicButtonPowerUpPrimary__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <button
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.button, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"navbarListButtonTextParent2"}
        data-plasmic-override={overrides.navbarListButtonTextParent2}
        hasGap={true}
        className={classNames(defaultcss.all, sty.navbarListButtonTextParent2)}
      >
        <BoostIcon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(defaultcss.all, sty.svg)}
          role={"img"}
        />

        <div
          data-plasmic-name={"navbarListButtonText2"}
          data-plasmic-override={overrides.navbarListButtonText2}
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.navbarListButtonText2
          )}
        >
          {"Power up"}
        </div>
      </p.Stack>
    </button>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "navbarListButtonTextParent2", "svg", "navbarListButtonText2"],
  navbarListButtonTextParent2: [
    "navbarListButtonTextParent2",
    "svg",
    "navbarListButtonText2"
  ],
  svg: ["svg"],
  navbarListButtonText2: ["navbarListButtonText2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "button";
  navbarListButtonTextParent2: "div";
  svg: "svg";
  navbarListButtonText2: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicButtonPowerUpPrimary__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicButtonPowerUpPrimary__VariantsArgs;
    args?: PlasmicButtonPowerUpPrimary__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicButtonPowerUpPrimary__Fetches;
  } & Omit<PlasmicButtonPowerUpPrimary__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicButtonPowerUpPrimary__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicButtonPowerUpPrimary__ArgProps,
      internalVariantPropNames: PlasmicButtonPowerUpPrimary__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicButtonPowerUpPrimary__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicButtonPowerUpPrimary";
  } else {
    func.displayName = `PlasmicButtonPowerUpPrimary.${nodeName}`;
  }
  return func;
}

export const PlasmicButtonPowerUpPrimary = Object.assign(
  // Top-level PlasmicButtonPowerUpPrimary renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbarListButtonTextParent2: makeNodeComponent(
      "navbarListButtonTextParent2"
    ),
    svg: makeNodeComponent("svg"),
    navbarListButtonText2: makeNodeComponent("navbarListButtonText2"),

    // Metadata about props expected for PlasmicButtonPowerUpPrimary
    internalVariantProps: PlasmicButtonPowerUpPrimary__VariantProps,
    internalArgProps: PlasmicButtonPowerUpPrimary__ArgProps
  }
);

export default PlasmicButtonPowerUpPrimary;
/* prettier-ignore-end */
