// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: _8h_FsYt50dxoo
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavbarLogo from "../../NavbarLogo"; // plasmic-import: kyLUbmyv_OS8Zz/component
import NavLink from "../../NavLink"; // plasmic-import: XqQQfEEDIGeiz/component
import NavbarSave from "../../NavbarSave"; // plasmic-import: _VghiGnQc_t1aT/component
import NavbarBrief from "../../NavbarBrief"; // plasmic-import: gY-azC_pqF0jjM/component
import UserAvatar from "../../UserAvatar"; // plasmic-import: kWaJrwe3c90GY1/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: biX3aS42hiG0fF/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicNavbarPrimary.module.css"; // plasmic-import: _8h_FsYt50dxoo/css

export type PlasmicNavbarPrimary__VariantMembers = {
  color: "color";
  user: "seller" | "buyer";
  state: "loggedIn" | "loggedOut";
};

export type PlasmicNavbarPrimary__VariantsArgs = {
  color?: SingleBooleanChoiceArg<"color">;
  user?: SingleChoiceArg<"seller" | "buyer">;
  state?: SingleChoiceArg<"loggedIn" | "loggedOut">;
};

type VariantPropType = keyof PlasmicNavbarPrimary__VariantsArgs;
export const PlasmicNavbarPrimary__VariantProps = new Array<VariantPropType>(
  "color",
  "user",
  "state"
);

export type PlasmicNavbarPrimary__ArgsType = {};
type ArgPropType = keyof PlasmicNavbarPrimary__ArgsType;
export const PlasmicNavbarPrimary__ArgProps = new Array<ArgPropType>();

export type PlasmicNavbarPrimary__OverridesType = {
  root?: p.Flex<"div">;
  navbarLogo?: p.Flex<typeof NavbarLogo>;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  img?: p.Flex<"img">;
  navbarSave?: p.Flex<typeof NavbarSave>;
  navbarBrief?: p.Flex<typeof NavbarBrief>;
  userAvatar?: p.Flex<typeof UserAvatar>;
};

export interface DefaultNavbarPrimaryProps {
  color?: SingleBooleanChoiceArg<"color">;
  user?: SingleChoiceArg<"seller" | "buyer">;
  state?: SingleChoiceArg<"loggedIn" | "loggedOut">;
  className?: string;
}

function PlasmicNavbarPrimary__RenderFunc(props: {
  variants: PlasmicNavbarPrimary__VariantsArgs;
  args: PlasmicNavbarPrimary__ArgsType;
  overrides: PlasmicNavbarPrimary__OverridesType;
  dataFetches?: PlasmicNavbarPrimary__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__color]: hasVariant(variants, "color", "color"),
        [sty.root__user_buyer]: hasVariant(variants, "user", "buyer")
      })}
    >
      <div
        className={classNames(defaultcss.all, sty.column__rRjG, {
          [sty.column__color__rRjGuHlvq]: hasVariant(variants, "color", "color")
        })}
      >
        {(hasVariant(variants, "color", "color") ? false : true) ? (
          <div
            className={classNames(defaultcss.all, sty.freeBox__dsRtY, {
              [sty.freeBox__color__dsRtYuHlvq]: hasVariant(
                variants,
                "color",
                "color"
              )
            })}
          >
            <NavbarLogo
              data-plasmic-name={"navbarLogo"}
              data-plasmic-override={overrides.navbarLogo}
              className={classNames("__wab_instance", sty.navbarLogo, {
                [sty.navbarLogo__color]: hasVariant(variants, "color", "color")
              })}
              destination={"/" as const}
            />
          </div>
        ) : null}
        {(hasVariant(variants, "color", "color") ? true : false) ? (
          <div
            className={classNames(defaultcss.all, sty.freeBox__trH7F, {
              [sty.freeBox__color__trH7FuHlvq]: hasVariant(
                variants,
                "color",
                "color"
              )
            })}
          >
            {(hasVariant(variants, "color", "color") ? true : false) ? (
              <p.PlasmicLink
                data-plasmic-name={"link"}
                data-plasmic-override={overrides.link}
                className={classNames(defaultcss.all, sty.link, {
                  [sty.link__color]: hasVariant(variants, "color", "color")
                })}
                component={Link}
                platform={"nextjs"}
              >
                {(hasVariant(variants, "color", "color") ? true : false) ? (
                  <img
                    data-plasmic-name={"img"}
                    data-plasmic-override={overrides.img}
                    alt={""}
                    className={classNames(defaultcss.img, sty.img, {
                      [sty.img__color]: hasVariant(variants, "color", "color")
                    })}
                    role={"img"}
                    src={
                      "/plasmic/copy_of_market_v_2/images/intrepidPrimaryBsvg.svg"
                    }
                  />
                ) : null}
              </p.PlasmicLink>
            ) : null}
          </div>
        ) : null}
      </div>

      {(hasVariant(globalVariants, "screen", "mobile") ? false : true) ? (
        <div className={classNames(defaultcss.all, sty.column__d9KhQ)}>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.freeBox__kwP6, {
              [sty.freeBox__color__kwP6UHlvq]: hasVariant(
                variants,
                "color",
                "color"
              )
            })}
          >
            {(hasVariant(globalVariants, "screen", "mobile") ? false : true) ? (
              <NavLink
                className={classNames("__wab_instance", sty.navLink__eaLMu, {
                  [sty.navLink__color__eaLMuuHlvq]: hasVariant(
                    variants,
                    "color",
                    "color"
                  )
                })}
                color={
                  hasVariant(variants, "color", "color")
                    ? ("light" as const)
                    : undefined
                }
                linkText={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__bhOCj
                    )}
                  >
                    {"Design"}
                  </div>
                }
              />
            ) : null}

            <NavLink
              className={classNames("__wab_instance", sty.navLink__jMrgh, {
                [sty.navLink__color__jMrghuHlvq]: hasVariant(
                  variants,
                  "color",
                  "color"
                )
              })}
              color={
                hasVariant(variants, "color", "color")
                  ? ("light" as const)
                  : undefined
              }
              linkText={
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__tb0Yr
                  )}
                >
                  {"Web"}
                </div>
              }
            />

            {(hasVariant(globalVariants, "screen", "mobile") ? false : true) ? (
              <NavLink
                className={classNames("__wab_instance", sty.navLink__sZkKi, {
                  [sty.navLink__color__sZkKIuHlvq]: hasVariant(
                    variants,
                    "color",
                    "color"
                  )
                })}
                color={
                  hasVariant(variants, "color", "color")
                    ? ("light" as const)
                    : undefined
                }
                linkText={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__brKyC
                    )}
                  >
                    {"Mobile"}
                  </div>
                }
              />
            ) : null}

            <NavLink
              className={classNames("__wab_instance", sty.navLink__pkVwu, {
                [sty.navLink__color__pkVwUuHlvq]: hasVariant(
                  variants,
                  "color",
                  "color"
                )
              })}
              color={
                hasVariant(variants, "color", "color")
                  ? ("light" as const)
                  : undefined
              }
              linkText={
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__uyZa2
                  )}
                >
                  {"No code"}
                </div>
              }
            />
          </p.Stack>
        </div>
      ) : null}

      <div className={classNames(defaultcss.all, sty.column__g7GRv)}>
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.freeBox__h6Gvv, {
            [sty.freeBox__color__h6GvvuHlvq]: hasVariant(
              variants,
              "color",
              "color"
            )
          })}
        >
          {(hasVariant(globalVariants, "screen", "mobile") ? false : true) ? (
            <NavLink
              className={classNames("__wab_instance", sty.navLink__qMgWj, {
                [sty.navLink__color__qMgWjuHlvq]: hasVariant(
                  variants,
                  "color",
                  "color"
                )
              })}
              color={
                hasVariant(variants, "color", "color")
                  ? ("light" as const)
                  : undefined
              }
              destination={"/partner/pricing" as const}
              linkText={
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__p15WQ,
                    {
                      [sty.freeBox__color__p15WQuHlvq]: hasVariant(
                        variants,
                        "color",
                        "color"
                      )
                    }
                  )}
                >
                  {"Become a seller"}
                </div>
              }
            />
          ) : null}
          {(hasVariant(globalVariants, "screen", "mobile") ? false : true) ? (
            <NavbarSave
              data-plasmic-name={"navbarSave"}
              data-plasmic-override={overrides.navbarSave}
              className={classNames("__wab_instance", sty.navbarSave, {
                [sty.navbarSave__color]: hasVariant(variants, "color", "color")
              })}
              light={
                hasVariant(variants, "color", "color")
                  ? ("light" as const)
                  : undefined
              }
            />
          ) : null}
          {(hasVariant(globalVariants, "screen", "mobile") ? false : true) ? (
            <NavbarBrief
              data-plasmic-name={"navbarBrief"}
              data-plasmic-override={overrides.navbarBrief}
              className={classNames("__wab_instance", sty.navbarBrief, {
                [sty.navbarBrief__color]: hasVariant(variants, "color", "color")
              })}
              light={
                hasVariant(variants, "color", "color")
                  ? ("light" as const)
                  : undefined
              }
            />
          ) : null}

          <UserAvatar
            data-plasmic-name={"userAvatar"}
            data-plasmic-override={overrides.userAvatar}
            className={classNames("__wab_instance", sty.userAvatar)}
            size={"_40" as const}
          />
        </p.Stack>
      </div>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbarLogo",
    "link",
    "img",
    "navbarSave",
    "navbarBrief",
    "userAvatar"
  ],
  navbarLogo: ["navbarLogo"],
  link: ["link", "img"],
  img: ["img"],
  navbarSave: ["navbarSave"],
  navbarBrief: ["navbarBrief"],
  userAvatar: ["userAvatar"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbarLogo: typeof NavbarLogo;
  link: "a";
  img: "img";
  navbarSave: typeof NavbarSave;
  navbarBrief: typeof NavbarBrief;
  userAvatar: typeof UserAvatar;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavbarPrimary__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavbarPrimary__VariantsArgs;
    args?: PlasmicNavbarPrimary__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicNavbarPrimary__Fetches;
  } & Omit<PlasmicNavbarPrimary__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNavbarPrimary__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNavbarPrimary__ArgProps,
      internalVariantPropNames: PlasmicNavbarPrimary__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicNavbarPrimary__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavbarPrimary";
  } else {
    func.displayName = `PlasmicNavbarPrimary.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbarPrimary = Object.assign(
  // Top-level PlasmicNavbarPrimary renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbarLogo: makeNodeComponent("navbarLogo"),
    link: makeNodeComponent("link"),
    img: makeNodeComponent("img"),
    navbarSave: makeNodeComponent("navbarSave"),
    navbarBrief: makeNodeComponent("navbarBrief"),
    userAvatar: makeNodeComponent("userAvatar"),

    // Metadata about props expected for PlasmicNavbarPrimary
    internalVariantProps: PlasmicNavbarPrimary__VariantProps,
    internalArgProps: PlasmicNavbarPrimary__ArgProps
  }
);

export default PlasmicNavbarPrimary;
/* prettier-ignore-end */
