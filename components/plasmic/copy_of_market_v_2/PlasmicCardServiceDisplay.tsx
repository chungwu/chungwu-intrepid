// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: 3r1WiULCCTnt4U2
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ImagePrimary from "../../ImagePrimary"; // plasmic-import: r4bT63FKybDWVF/component
import UserAvatar from "../../UserAvatar"; // plasmic-import: kWaJrwe3c90GY1/component
import TagBadgeVerification from "../../TagBadgeVerification"; // plasmic-import: VGML93vWMU9W43k/component
import TagMemberD from "../../TagMemberD"; // plasmic-import: EwwHW0Pp6J--_CI/component
import RatingDisplayDetail from "../../RatingDisplayDetail"; // plasmic-import: EZFFldQYBrJIX/component
import TagBadge from "../../TagBadge"; // plasmic-import: eBACR7k11POl/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicCardServiceDisplay.module.css"; // plasmic-import: 3r1WiULCCTnt4U2/css

import ViewIcon from "./icons/PlasmicIcon__View"; // plasmic-import: I6EK4zmpxF59ShL/icon
import HeartFillIcon from "./icons/PlasmicIcon__HeartFill"; // plasmic-import: BXMci0FAqLD75cK/icon
import BookmarkIcon from "./icons/PlasmicIcon__Bookmark"; // plasmic-import: jLuEpvSpry_1edd/icon

export type PlasmicCardServiceDisplay__VariantMembers = {
  size: "_360X270" | "_270X270" | "_360X360";
  description: "description";
  price: "price";
  boost: "boost";
  userStats: "userStats";
  rating: "rating";
  membership: "membership";
  verification: "verification";
  username: "username";
  avatar: "avatar";
};

export type PlasmicCardServiceDisplay__VariantsArgs = {
  size?: SingleChoiceArg<"_360X270" | "_270X270" | "_360X360">;
  description?: SingleBooleanChoiceArg<"description">;
  price?: SingleBooleanChoiceArg<"price">;
  boost?: SingleBooleanChoiceArg<"boost">;
  userStats?: SingleBooleanChoiceArg<"userStats">;
  rating?: SingleBooleanChoiceArg<"rating">;
  membership?: SingleBooleanChoiceArg<"membership">;
  verification?: SingleBooleanChoiceArg<"verification">;
  username?: SingleBooleanChoiceArg<"username">;
  avatar?: SingleBooleanChoiceArg<"avatar">;
};

type VariantPropType = keyof PlasmicCardServiceDisplay__VariantsArgs;
export const PlasmicCardServiceDisplay__VariantProps =
  new Array<VariantPropType>(
    "size",
    "description",
    "price",
    "boost",
    "userStats",
    "rating",
    "membership",
    "verification",
    "username",
    "avatar"
  );

export type PlasmicCardServiceDisplay__ArgsType = {
  _360X270?: React.ReactNode;
  _270X270?: React.ReactNode;
};

type ArgPropType = keyof PlasmicCardServiceDisplay__ArgsType;
export const PlasmicCardServiceDisplay__ArgProps = new Array<ArgPropType>(
  "_360X270",
  "_270X270"
);

export type PlasmicCardServiceDisplay__OverridesType = {
  parent?: p.Flex<"div">;
  display?: p.Flex<typeof ImagePrimary>;
  _360X1882?: p.Flex<"img">;
  image360X1882?: p.Flex<"img">;
  userInfoParent?: p.Flex<"div">;
  userMemberInfoParentMax250Px?: p.Flex<"div">;
  userAvatarParentLink?: p.Flex<"a"> & Partial<LinkProps>;
  userAvatar?: p.Flex<typeof UserAvatar>;
  usernameParentLink?: p.Flex<"a"> & Partial<LinkProps>;
  isVerification?: p.Flex<"div">;
  tagBadgeVerification?: p.Flex<typeof TagBadgeVerification>;
  userMemberLevelParent?: p.Flex<"div">;
  tagMemberD?: p.Flex<typeof TagMemberD>;
  ratingDisplayDetail?: p.Flex<typeof RatingDisplayDetail>;
  reviewLinkA?: p.Flex<"a"> & Partial<LinkProps>;
  reviewLinkB?: p.Flex<"a"> & Partial<LinkProps>;
  title86CharMax?: p.Flex<"div">;
  priceUserStatsParent?: p.Flex<"div">;
  priceSponsorParent?: p.Flex<"div">;
  price?: p.Flex<"div">;
  currencyParent?: p.Flex<"div">;
  currency?: p.Flex<"div">;
  priceValueParent?: p.Flex<"div">;
  priceValue?: p.Flex<"div">;
  boostedParent?: p.Flex<"div">;
  boostedDisplay?: p.Flex<typeof TagBadge>;
  userStatsParent?: p.Flex<"div">;
  viewButtonCount?: p.Flex<"div">;
  viewButton?: p.Flex<"button">;
  viewDisplay?: p.Flex<"svg">;
  viewNumberValueParent?: p.Flex<"div">;
  viewNumberIncrement?: p.Flex<"div">;
  heartButtonCount?: p.Flex<"div">;
  heartButton?: p.Flex<"button">;
  heartDisplay?: p.Flex<"svg">;
  heartNumberValueParent?: p.Flex<"div">;
  heartNumberIncrement?: p.Flex<"div">;
  bookmarkButtonCount?: p.Flex<"div">;
  bookmarkButton?: p.Flex<"button">;
  bookmarkDisplay?: p.Flex<"svg">;
  bookmarkNumberValueParent?: p.Flex<"div">;
  bookmarkNumberIncrement?: p.Flex<"div">;
};

export interface DefaultCardServiceDisplayProps {
  _360X270?: React.ReactNode;
  _270X270?: React.ReactNode;
  size?: SingleChoiceArg<"_360X270" | "_270X270" | "_360X360">;
  description?: SingleBooleanChoiceArg<"description">;
  price?: SingleBooleanChoiceArg<"price">;
  boost?: SingleBooleanChoiceArg<"boost">;
  userStats?: SingleBooleanChoiceArg<"userStats">;
  rating?: SingleBooleanChoiceArg<"rating">;
  membership?: SingleBooleanChoiceArg<"membership">;
  verification?: SingleBooleanChoiceArg<"verification">;
  username?: SingleBooleanChoiceArg<"username">;
  avatar?: SingleBooleanChoiceArg<"avatar">;
  className?: string;
}

function PlasmicCardServiceDisplay__RenderFunc(props: {
  variants: PlasmicCardServiceDisplay__VariantsArgs;
  args: PlasmicCardServiceDisplay__ArgsType;
  overrides: PlasmicCardServiceDisplay__OverridesType;
  dataFetches?: PlasmicCardServiceDisplay__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"parent"}
      data-plasmic-override={overrides.parent}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.parent, {
        [sty.parent__description]: hasVariant(
          variants,
          "description",
          "description"
        ),
        [sty.parent__price]: hasVariant(variants, "price", "price"),
        [sty.parent__size__270X270]: hasVariant(variants, "size", "_270X270"),
        [sty.parent__size__360X270]: hasVariant(variants, "size", "_360X270"),
        [sty.parent__size__360X360]: hasVariant(variants, "size", "_360X360")
      })}
    >
      <ImagePrimary
        data-plasmic-name={"display"}
        data-plasmic-override={overrides.display}
        _11={
          hasVariant(variants, "size", "_360X360")
            ? ("_360X360" as const)
            : hasVariant(variants, "size", "_270X270")
            ? ("_270X270" as const)
            : undefined
        }
        _270X270={
          <React.Fragment>
            {false ? (
              <img
                alt={""}
                className={classNames(defaultcss.img, sty.img___3Dtsn)}
                role={"img"}
                src={
                  "https://craftypixels.com/placeholder-image/40x40/f8f8f8/333333" as const
                }
              />
            ) : null}
            {p.renderPlasmicSlot({
              defaultContents: (
                <img
                  alt={""}
                  className={classNames(defaultcss.img, sty.img__bWjE8)}
                  role={"img"}
                  src={
                    "https://craftypixels.com/placeholder-image/270x270/f8f8f8/333333" as const
                  }
                />
              ),

              value: args._270X270
            })}
          </React.Fragment>
        }
        _360X188={
          <React.Fragment>
            {false ? (
              <img
                alt={""}
                className={classNames(defaultcss.img, sty.img__uoEsb)}
                role={"img"}
                src={
                  "https://craftypixels.com/placeholder-image/40x40/f8f8f8/333333" as const
                }
              />
            ) : null}

            <img
              data-plasmic-name={"image360X1882"}
              data-plasmic-override={overrides.image360X1882}
              alt={""}
              className={classNames(defaultcss.img, sty.image360X1882)}
              role={"img"}
              src={
                "https://craftypixels.com/placeholder-image/360x188/f8f8f8/333333" as const
              }
            />
          </React.Fragment>
        }
        _360X270={
          <React.Fragment>
            {false ? (
              <img
                alt={""}
                className={classNames(defaultcss.img, sty.img__j9Qyp)}
                role={"img"}
                src={
                  "https://craftypixels.com/placeholder-image/40x40/f8f8f8/333333" as const
                }
              />
            ) : null}
            {p.renderPlasmicSlot({
              defaultContents: (
                <img
                  alt={""}
                  className={classNames(defaultcss.img, sty.img__kbjyp)}
                  role={"img"}
                  src={
                    "https://craftypixels.com/placeholder-image/360x270/f8f8f8/333333" as const
                  }
                />
              ),

              value: args._360X270
            })}
          </React.Fragment>
        }
        _43={
          hasVariant(variants, "size", "_360X360")
            ? undefined
            : hasVariant(variants, "size", "_270X270")
            ? undefined
            : ("_360X270" as const)
        }
        image360X188={
          <React.Fragment>
            {false ? (
              <img
                alt={""}
                className={classNames(defaultcss.img, sty.img__gV6Gn)}
                role={"img"}
                src={
                  "https://craftypixels.com/placeholder-image/40x40/f8f8f8/333333" as const
                }
              />
            ) : null}

            <img
              data-plasmic-name={"_360X1882"}
              data-plasmic-override={overrides._360X1882}
              alt={""}
              className={classNames(defaultcss.img, sty._360X1882)}
              role={"img"}
              src={
                "https://craftypixels.com/placeholder-image/360x188/f8f8f8/333333" as const
              }
            />
          </React.Fragment>
        }
      />

      <p.Stack
        as={"div"}
        data-plasmic-name={"userInfoParent"}
        data-plasmic-override={overrides.userInfoParent}
        hasGap={true}
        className={classNames(defaultcss.all, sty.userInfoParent, {
          [sty.userInfoParent__size__270X270]: hasVariant(
            variants,
            "size",
            "_270X270"
          ),
          [sty.userInfoParent__size__360X270]: hasVariant(
            variants,
            "size",
            "_360X270"
          )
        })}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"userMemberInfoParentMax250Px"}
          data-plasmic-override={overrides.userMemberInfoParentMax250Px}
          hasGap={true}
          className={classNames(
            defaultcss.all,
            sty.userMemberInfoParentMax250Px,
            {
              [sty.userMemberInfoParentMax250Px__size__270X270]: hasVariant(
                variants,
                "size",
                "_270X270"
              )
            }
          )}
        >
          <p.PlasmicLink
            data-plasmic-name={"userAvatarParentLink"}
            data-plasmic-override={overrides.userAvatarParentLink}
            className={classNames(defaultcss.all, sty.userAvatarParentLink, {
              [sty.userAvatarParentLink__avatar]: hasVariant(
                variants,
                "avatar",
                "avatar"
              )
            })}
            component={Link}
            platform={"nextjs"}
          >
            <UserAvatar
              data-plasmic-name={"userAvatar"}
              data-plasmic-override={overrides.userAvatar}
              size={"_24" as const}
            />
          </p.PlasmicLink>

          <p.PlasmicLink
            data-plasmic-name={"usernameParentLink"}
            data-plasmic-override={overrides.usernameParentLink}
            className={classNames(defaultcss.all, sty.usernameParentLink, {
              [sty.usernameParentLink__username]: hasVariant(
                variants,
                "username",
                "username"
              )
            })}
            component={Link}
            platform={"nextjs"}
          >
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox__ebnu1
              )}
            >
              {"Username"}
            </div>
          </p.PlasmicLink>

          <div
            data-plasmic-name={"isVerification"}
            data-plasmic-override={overrides.isVerification}
            className={classNames(defaultcss.all, sty.isVerification, {
              [sty.isVerification__verification]: hasVariant(
                variants,
                "verification",
                "verification"
              )
            })}
          >
            <TagBadgeVerification
              data-plasmic-name={"tagBadgeVerification"}
              data-plasmic-override={overrides.tagBadgeVerification}
              className={classNames("__wab_instance", sty.tagBadgeVerification)}
              size={"_16" as const}
            />
          </div>

          <div
            data-plasmic-name={"userMemberLevelParent"}
            data-plasmic-override={overrides.userMemberLevelParent}
            className={classNames(defaultcss.all, sty.userMemberLevelParent, {
              [sty.userMemberLevelParent__membership]: hasVariant(
                variants,
                "membership",
                "membership"
              )
            })}
          >
            <TagMemberD
              data-plasmic-name={"tagMemberD"}
              data-plasmic-override={overrides.tagMemberD}
              className={classNames("__wab_instance", sty.tagMemberD, {
                [sty.tagMemberD__membership]: hasVariant(
                  variants,
                  "membership",
                  "membership"
                ),
                [sty.tagMemberD__size__360X360]: hasVariant(
                  variants,
                  "size",
                  "_360X360"
                )
              })}
            />
          </div>
        </p.Stack>

        <RatingDisplayDetail
          data-plasmic-name={"ratingDisplayDetail"}
          data-plasmic-override={overrides.ratingDisplayDetail}
          className={classNames("__wab_instance", sty.ratingDisplayDetail, {
            [sty.ratingDisplayDetail__rating]: hasVariant(
              variants,
              "rating",
              "rating"
            ),
            [sty.ratingDisplayDetail__size__270X270]: hasVariant(
              variants,
              "size",
              "_270X270"
            )
          })}
          size={
            hasVariant(variants, "size", "_270X270")
              ? ("_14" as const)
              : ("_16" as const)
          }
          slot={
            <p.PlasmicLink
              data-plasmic-name={"reviewLinkB"}
              data-plasmic-override={overrides.reviewLinkB}
              className={classNames(defaultcss.all, sty.reviewLinkB)}
              component={Link}
              platform={"nextjs"}
            >
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.freeBox__kHgHa,
                  {
                    [sty.freeBox__size__270X270__kHgHaqs19T]: hasVariant(
                      variants,
                      "size",
                      "_270X270"
                    )
                  }
                )}
              >
                {"(1000)"}
              </div>
            </p.PlasmicLink>
          }
        >
          <p.PlasmicLink
            data-plasmic-name={"reviewLinkA"}
            data-plasmic-override={overrides.reviewLinkA}
            className={classNames(defaultcss.all, sty.reviewLinkA)}
            component={Link}
            platform={"nextjs"}
          >
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox__y6DdZ,
                {
                  [sty.freeBox__size__270X270__y6DdZqs19T]: hasVariant(
                    variants,
                    "size",
                    "_270X270"
                  )
                }
              )}
            >
              {"4.67"}
            </div>
          </p.PlasmicLink>
        </RatingDisplayDetail>
      </p.Stack>

      <div
        data-plasmic-name={"title86CharMax"}
        data-plasmic-override={overrides.title86CharMax}
        className={classNames(defaultcss.all, sty.title86CharMax, {
          [sty.title86CharMax__description]: hasVariant(
            variants,
            "description",
            "description"
          ),
          [sty.title86CharMax__size__270X270]: hasVariant(
            variants,
            "size",
            "_270X270"
          ),
          [sty.title86CharMax__size__360X270]: hasVariant(
            variants,
            "size",
            "_360X270"
          )
        })}
      >
        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.freeBox__tQzbl,
            {
              [sty.freeBox__description__tQzbLcTktb]: hasVariant(
                variants,
                "description",
                "description"
              ),
              [sty.freeBox__size__270X270__tQzbLqs19T]: hasVariant(
                variants,
                "size",
                "_270X270"
              ),
              [sty.freeBox__size__360X270__tQzblmg6Mx]: hasVariant(
                variants,
                "size",
                "_360X270"
              )
            }
          )}
        >
          {
            "One morning, when Gregor Samsa woke from troubled dreams, he found himself transforme."
          }
        </div>
      </div>

      <p.Stack
        as={"div"}
        data-plasmic-name={"priceUserStatsParent"}
        data-plasmic-override={overrides.priceUserStatsParent}
        hasGap={true}
        className={classNames(defaultcss.all, sty.priceUserStatsParent, {
          [sty.priceUserStatsParent__size__270X270]: hasVariant(
            variants,
            "size",
            "_270X270"
          ),
          [sty.priceUserStatsParent__size__360X270]: hasVariant(
            variants,
            "size",
            "_360X270"
          )
        })}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"priceSponsorParent"}
          data-plasmic-override={overrides.priceSponsorParent}
          hasGap={true}
          className={classNames(defaultcss.all, sty.priceSponsorParent, {
            [sty.priceSponsorParent__size__270X270]: hasVariant(
              variants,
              "size",
              "_270X270"
            )
          })}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"price"}
            data-plasmic-override={overrides.price}
            hasGap={true}
            className={classNames(defaultcss.all, sty.price, {
              [sty.price__boost]: hasVariant(variants, "boost", "boost"),
              [sty.price__price]: hasVariant(variants, "price", "price")
            })}
          >
            <div
              data-plasmic-name={"currencyParent"}
              data-plasmic-override={overrides.currencyParent}
              className={classNames(defaultcss.all, sty.currencyParent)}
            >
              <div
                data-plasmic-name={"currency"}
                data-plasmic-override={overrides.currency}
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.currency,
                  {
                    [sty.currency__size__270X270]: hasVariant(
                      variants,
                      "size",
                      "_270X270"
                    )
                  }
                )}
              >
                {"$"}
              </div>
            </div>

            <div
              data-plasmic-name={"priceValueParent"}
              data-plasmic-override={overrides.priceValueParent}
              className={classNames(defaultcss.all, sty.priceValueParent)}
            >
              <div
                data-plasmic-name={"priceValue"}
                data-plasmic-override={overrides.priceValue}
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.priceValue,
                  {
                    [sty.priceValue__price]: hasVariant(
                      variants,
                      "price",
                      "price"
                    ),
                    [sty.priceValue__size__270X270]: hasVariant(
                      variants,
                      "size",
                      "_270X270"
                    )
                  }
                )}
              >
                {"100,000"}
              </div>
            </div>
          </p.Stack>

          <div
            data-plasmic-name={"boostedParent"}
            data-plasmic-override={overrides.boostedParent}
            className={classNames(defaultcss.all, sty.boostedParent, {
              [sty.boostedParent__boost]: hasVariant(variants, "boost", "boost")
            })}
          >
            <TagBadge
              data-plasmic-name={"boostedDisplay"}
              data-plasmic-override={overrides.boostedDisplay}
              size={"_16Px" as const}
              text10Px={
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__djivc
                  )}
                >
                  {"Boosted"}
                </div>
              }
              text8Px={
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__rcGbw
                  )}
                >
                  {"boosted"}
                </div>
              }
              type={["secondary", "ghost"]}
            />
          </div>
        </p.Stack>

        {(hasVariant(variants, "size", "_270X270") ? false : true) ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"userStatsParent"}
            data-plasmic-override={overrides.userStatsParent}
            hasGap={true}
            className={classNames(defaultcss.all, sty.userStatsParent, {
              [sty.userStatsParent__size__270X270]: hasVariant(
                variants,
                "size",
                "_270X270"
              ),
              [sty.userStatsParent__userStats]: hasVariant(
                variants,
                "userStats",
                "userStats"
              )
            })}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"viewButtonCount"}
              data-plasmic-override={overrides.viewButtonCount}
              hasGap={true}
              className={classNames(defaultcss.all, sty.viewButtonCount)}
            >
              <button
                data-plasmic-name={"viewButton"}
                data-plasmic-override={overrides.viewButton}
                className={classNames(defaultcss.button, sty.viewButton)}
              >
                <ViewIcon
                  data-plasmic-name={"viewDisplay"}
                  data-plasmic-override={overrides.viewDisplay}
                  className={classNames(defaultcss.all, sty.viewDisplay)}
                  role={"img"}
                />
              </button>

              <div
                data-plasmic-name={"viewNumberValueParent"}
                data-plasmic-override={overrides.viewNumberValueParent}
                className={classNames(
                  defaultcss.all,
                  sty.viewNumberValueParent
                )}
              >
                <div
                  data-plasmic-name={"viewNumberIncrement"}
                  data-plasmic-override={overrides.viewNumberIncrement}
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.viewNumberIncrement
                  )}
                >
                  {"1000"}
                </div>
              </div>
            </p.Stack>

            <p.Stack
              as={"div"}
              data-plasmic-name={"heartButtonCount"}
              data-plasmic-override={overrides.heartButtonCount}
              hasGap={true}
              className={classNames(defaultcss.all, sty.heartButtonCount)}
            >
              <button
                data-plasmic-name={"heartButton"}
                data-plasmic-override={overrides.heartButton}
                className={classNames(defaultcss.button, sty.heartButton)}
              >
                <HeartFillIcon
                  data-plasmic-name={"heartDisplay"}
                  data-plasmic-override={overrides.heartDisplay}
                  className={classNames(defaultcss.all, sty.heartDisplay)}
                  role={"img"}
                />
              </button>

              <div
                data-plasmic-name={"heartNumberValueParent"}
                data-plasmic-override={overrides.heartNumberValueParent}
                className={classNames(
                  defaultcss.all,
                  sty.heartNumberValueParent
                )}
              >
                <div
                  data-plasmic-name={"heartNumberIncrement"}
                  data-plasmic-override={overrides.heartNumberIncrement}
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.heartNumberIncrement
                  )}
                >
                  {"1000"}
                </div>
              </div>
            </p.Stack>

            <p.Stack
              as={"div"}
              data-plasmic-name={"bookmarkButtonCount"}
              data-plasmic-override={overrides.bookmarkButtonCount}
              hasGap={true}
              className={classNames(defaultcss.all, sty.bookmarkButtonCount)}
            >
              <button
                data-plasmic-name={"bookmarkButton"}
                data-plasmic-override={overrides.bookmarkButton}
                className={classNames(defaultcss.button, sty.bookmarkButton)}
              >
                <BookmarkIcon
                  data-plasmic-name={"bookmarkDisplay"}
                  data-plasmic-override={overrides.bookmarkDisplay}
                  className={classNames(defaultcss.all, sty.bookmarkDisplay)}
                  role={"img"}
                />
              </button>

              <div
                data-plasmic-name={"bookmarkNumberValueParent"}
                data-plasmic-override={overrides.bookmarkNumberValueParent}
                className={classNames(
                  defaultcss.all,
                  sty.bookmarkNumberValueParent
                )}
              >
                <div
                  data-plasmic-name={"bookmarkNumberIncrement"}
                  data-plasmic-override={overrides.bookmarkNumberIncrement}
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.bookmarkNumberIncrement
                  )}
                >
                  {"1000"}
                </div>
              </div>
            </p.Stack>
          </p.Stack>
        ) : null}
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  parent: [
    "parent",
    "display",
    "_360X1882",
    "image360X1882",
    "userInfoParent",
    "userMemberInfoParentMax250Px",
    "userAvatarParentLink",
    "userAvatar",
    "usernameParentLink",
    "isVerification",
    "tagBadgeVerification",
    "userMemberLevelParent",
    "tagMemberD",
    "ratingDisplayDetail",
    "reviewLinkA",
    "reviewLinkB",
    "title86CharMax",
    "priceUserStatsParent",
    "priceSponsorParent",
    "price",
    "currencyParent",
    "currency",
    "priceValueParent",
    "priceValue",
    "boostedParent",
    "boostedDisplay",
    "userStatsParent",
    "viewButtonCount",
    "viewButton",
    "viewDisplay",
    "viewNumberValueParent",
    "viewNumberIncrement",
    "heartButtonCount",
    "heartButton",
    "heartDisplay",
    "heartNumberValueParent",
    "heartNumberIncrement",
    "bookmarkButtonCount",
    "bookmarkButton",
    "bookmarkDisplay",
    "bookmarkNumberValueParent",
    "bookmarkNumberIncrement"
  ],
  display: ["display", "_360X1882", "image360X1882"],
  _360X1882: ["_360X1882"],
  image360X1882: ["image360X1882"],
  userInfoParent: [
    "userInfoParent",
    "userMemberInfoParentMax250Px",
    "userAvatarParentLink",
    "userAvatar",
    "usernameParentLink",
    "isVerification",
    "tagBadgeVerification",
    "userMemberLevelParent",
    "tagMemberD",
    "ratingDisplayDetail",
    "reviewLinkA",
    "reviewLinkB"
  ],
  userMemberInfoParentMax250Px: [
    "userMemberInfoParentMax250Px",
    "userAvatarParentLink",
    "userAvatar",
    "usernameParentLink",
    "isVerification",
    "tagBadgeVerification",
    "userMemberLevelParent",
    "tagMemberD"
  ],
  userAvatarParentLink: ["userAvatarParentLink", "userAvatar"],
  userAvatar: ["userAvatar"],
  usernameParentLink: ["usernameParentLink"],
  isVerification: ["isVerification", "tagBadgeVerification"],
  tagBadgeVerification: ["tagBadgeVerification"],
  userMemberLevelParent: ["userMemberLevelParent", "tagMemberD"],
  tagMemberD: ["tagMemberD"],
  ratingDisplayDetail: ["ratingDisplayDetail", "reviewLinkA", "reviewLinkB"],
  reviewLinkA: ["reviewLinkA"],
  reviewLinkB: ["reviewLinkB"],
  title86CharMax: ["title86CharMax"],
  priceUserStatsParent: [
    "priceUserStatsParent",
    "priceSponsorParent",
    "price",
    "currencyParent",
    "currency",
    "priceValueParent",
    "priceValue",
    "boostedParent",
    "boostedDisplay",
    "userStatsParent",
    "viewButtonCount",
    "viewButton",
    "viewDisplay",
    "viewNumberValueParent",
    "viewNumberIncrement",
    "heartButtonCount",
    "heartButton",
    "heartDisplay",
    "heartNumberValueParent",
    "heartNumberIncrement",
    "bookmarkButtonCount",
    "bookmarkButton",
    "bookmarkDisplay",
    "bookmarkNumberValueParent",
    "bookmarkNumberIncrement"
  ],
  priceSponsorParent: [
    "priceSponsorParent",
    "price",
    "currencyParent",
    "currency",
    "priceValueParent",
    "priceValue",
    "boostedParent",
    "boostedDisplay"
  ],
  price: [
    "price",
    "currencyParent",
    "currency",
    "priceValueParent",
    "priceValue"
  ],
  currencyParent: ["currencyParent", "currency"],
  currency: ["currency"],
  priceValueParent: ["priceValueParent", "priceValue"],
  priceValue: ["priceValue"],
  boostedParent: ["boostedParent", "boostedDisplay"],
  boostedDisplay: ["boostedDisplay"],
  userStatsParent: [
    "userStatsParent",
    "viewButtonCount",
    "viewButton",
    "viewDisplay",
    "viewNumberValueParent",
    "viewNumberIncrement",
    "heartButtonCount",
    "heartButton",
    "heartDisplay",
    "heartNumberValueParent",
    "heartNumberIncrement",
    "bookmarkButtonCount",
    "bookmarkButton",
    "bookmarkDisplay",
    "bookmarkNumberValueParent",
    "bookmarkNumberIncrement"
  ],
  viewButtonCount: [
    "viewButtonCount",
    "viewButton",
    "viewDisplay",
    "viewNumberValueParent",
    "viewNumberIncrement"
  ],
  viewButton: ["viewButton", "viewDisplay"],
  viewDisplay: ["viewDisplay"],
  viewNumberValueParent: ["viewNumberValueParent", "viewNumberIncrement"],
  viewNumberIncrement: ["viewNumberIncrement"],
  heartButtonCount: [
    "heartButtonCount",
    "heartButton",
    "heartDisplay",
    "heartNumberValueParent",
    "heartNumberIncrement"
  ],
  heartButton: ["heartButton", "heartDisplay"],
  heartDisplay: ["heartDisplay"],
  heartNumberValueParent: ["heartNumberValueParent", "heartNumberIncrement"],
  heartNumberIncrement: ["heartNumberIncrement"],
  bookmarkButtonCount: [
    "bookmarkButtonCount",
    "bookmarkButton",
    "bookmarkDisplay",
    "bookmarkNumberValueParent",
    "bookmarkNumberIncrement"
  ],
  bookmarkButton: ["bookmarkButton", "bookmarkDisplay"],
  bookmarkDisplay: ["bookmarkDisplay"],
  bookmarkNumberValueParent: [
    "bookmarkNumberValueParent",
    "bookmarkNumberIncrement"
  ],
  bookmarkNumberIncrement: ["bookmarkNumberIncrement"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  parent: "div";
  display: typeof ImagePrimary;
  _360X1882: "img";
  image360X1882: "img";
  userInfoParent: "div";
  userMemberInfoParentMax250Px: "div";
  userAvatarParentLink: "a";
  userAvatar: typeof UserAvatar;
  usernameParentLink: "a";
  isVerification: "div";
  tagBadgeVerification: typeof TagBadgeVerification;
  userMemberLevelParent: "div";
  tagMemberD: typeof TagMemberD;
  ratingDisplayDetail: typeof RatingDisplayDetail;
  reviewLinkA: "a";
  reviewLinkB: "a";
  title86CharMax: "div";
  priceUserStatsParent: "div";
  priceSponsorParent: "div";
  price: "div";
  currencyParent: "div";
  currency: "div";
  priceValueParent: "div";
  priceValue: "div";
  boostedParent: "div";
  boostedDisplay: typeof TagBadge;
  userStatsParent: "div";
  viewButtonCount: "div";
  viewButton: "button";
  viewDisplay: "svg";
  viewNumberValueParent: "div";
  viewNumberIncrement: "div";
  heartButtonCount: "div";
  heartButton: "button";
  heartDisplay: "svg";
  heartNumberValueParent: "div";
  heartNumberIncrement: "div";
  bookmarkButtonCount: "div";
  bookmarkButton: "button";
  bookmarkDisplay: "svg";
  bookmarkNumberValueParent: "div";
  bookmarkNumberIncrement: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCardServiceDisplay__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCardServiceDisplay__VariantsArgs;
    args?: PlasmicCardServiceDisplay__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicCardServiceDisplay__Fetches;
  } & Omit<PlasmicCardServiceDisplay__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCardServiceDisplay__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCardServiceDisplay__ArgProps,
      internalVariantPropNames: PlasmicCardServiceDisplay__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicCardServiceDisplay__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "parent") {
    func.displayName = "PlasmicCardServiceDisplay";
  } else {
    func.displayName = `PlasmicCardServiceDisplay.${nodeName}`;
  }
  return func;
}

export const PlasmicCardServiceDisplay = Object.assign(
  // Top-level PlasmicCardServiceDisplay renders the root element
  makeNodeComponent("parent"),
  {
    // Helper components rendering sub-elements
    display: makeNodeComponent("display"),
    _360X1882: makeNodeComponent("_360X1882"),
    image360X1882: makeNodeComponent("image360X1882"),
    userInfoParent: makeNodeComponent("userInfoParent"),
    userMemberInfoParentMax250Px: makeNodeComponent(
      "userMemberInfoParentMax250Px"
    ),
    userAvatarParentLink: makeNodeComponent("userAvatarParentLink"),
    userAvatar: makeNodeComponent("userAvatar"),
    usernameParentLink: makeNodeComponent("usernameParentLink"),
    isVerification: makeNodeComponent("isVerification"),
    tagBadgeVerification: makeNodeComponent("tagBadgeVerification"),
    userMemberLevelParent: makeNodeComponent("userMemberLevelParent"),
    tagMemberD: makeNodeComponent("tagMemberD"),
    ratingDisplayDetail: makeNodeComponent("ratingDisplayDetail"),
    reviewLinkA: makeNodeComponent("reviewLinkA"),
    reviewLinkB: makeNodeComponent("reviewLinkB"),
    title86CharMax: makeNodeComponent("title86CharMax"),
    priceUserStatsParent: makeNodeComponent("priceUserStatsParent"),
    priceSponsorParent: makeNodeComponent("priceSponsorParent"),
    price: makeNodeComponent("price"),
    currencyParent: makeNodeComponent("currencyParent"),
    currency: makeNodeComponent("currency"),
    priceValueParent: makeNodeComponent("priceValueParent"),
    priceValue: makeNodeComponent("priceValue"),
    boostedParent: makeNodeComponent("boostedParent"),
    boostedDisplay: makeNodeComponent("boostedDisplay"),
    userStatsParent: makeNodeComponent("userStatsParent"),
    viewButtonCount: makeNodeComponent("viewButtonCount"),
    viewButton: makeNodeComponent("viewButton"),
    viewDisplay: makeNodeComponent("viewDisplay"),
    viewNumberValueParent: makeNodeComponent("viewNumberValueParent"),
    viewNumberIncrement: makeNodeComponent("viewNumberIncrement"),
    heartButtonCount: makeNodeComponent("heartButtonCount"),
    heartButton: makeNodeComponent("heartButton"),
    heartDisplay: makeNodeComponent("heartDisplay"),
    heartNumberValueParent: makeNodeComponent("heartNumberValueParent"),
    heartNumberIncrement: makeNodeComponent("heartNumberIncrement"),
    bookmarkButtonCount: makeNodeComponent("bookmarkButtonCount"),
    bookmarkButton: makeNodeComponent("bookmarkButton"),
    bookmarkDisplay: makeNodeComponent("bookmarkDisplay"),
    bookmarkNumberValueParent: makeNodeComponent("bookmarkNumberValueParent"),
    bookmarkNumberIncrement: makeNodeComponent("bookmarkNumberIncrement"),

    // Metadata about props expected for PlasmicCardServiceDisplay
    internalVariantProps: PlasmicCardServiceDisplay__VariantProps,
    internalArgProps: PlasmicCardServiceDisplay__ArgProps
  }
);

export default PlasmicCardServiceDisplay;
/* prettier-ignore-end */
