// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: PQxLo6qCBgFFXu
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ChipCategoryHeader from "../../ChipCategoryHeader"; // plasmic-import: Mx4HQhNc2W5WKP/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: biX3aS42hiG0fF/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicSectionMemberFindByServiceCategory.module.css"; // plasmic-import: PQxLo6qCBgFFXu/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: y_i7pZjQHgUSuCB/icon
import Icon127Icon from "./icons/PlasmicIcon__Icon127"; // plasmic-import: usKPEUBkvHlIzNr/icon
import BlockchainsvgIcon from "./icons/PlasmicIcon__Blockchainsvg"; // plasmic-import: zaNu6bUeEexOjAn/icon
import Icon16Icon from "./icons/PlasmicIcon__Icon16"; // plasmic-import: t5rYOtGzbv1Z9T4/icon
import Icon35Icon from "./icons/PlasmicIcon__Icon35"; // plasmic-import: Jk-MbYS8gUmeMvh/icon
import Icon36Icon from "./icons/PlasmicIcon__Icon36"; // plasmic-import: 4tQPPvW75GOynsi/icon
import Icon37Icon from "./icons/PlasmicIcon__Icon37"; // plasmic-import: KRJlD3kyZGrhzMM/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: iVmuVn4S4sBnInD/icon
import Icon39Icon from "./icons/PlasmicIcon__Icon39"; // plasmic-import: D_kqp6QIlnjw1Y6/icon

export type PlasmicSectionMemberFindByServiceCategory__VariantMembers = {};

export type PlasmicSectionMemberFindByServiceCategory__VariantsArgs = {};
type VariantPropType =
  keyof PlasmicSectionMemberFindByServiceCategory__VariantsArgs;
export const PlasmicSectionMemberFindByServiceCategory__VariantProps =
  new Array<VariantPropType>();

export type PlasmicSectionMemberFindByServiceCategory__ArgsType = {};
type ArgPropType = keyof PlasmicSectionMemberFindByServiceCategory__ArgsType;
export const PlasmicSectionMemberFindByServiceCategory__ArgProps =
  new Array<ArgPropType>();

export type PlasmicSectionMemberFindByServiceCategory__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultSectionMemberFindByServiceCategoryProps {
  className?: string;
}

function PlasmicSectionMemberFindByServiceCategory__RenderFunc(props: {
  variants: PlasmicSectionMemberFindByServiceCategory__VariantsArgs;
  args: PlasmicSectionMemberFindByServiceCategory__ArgsType;
  overrides: PlasmicSectionMemberFindByServiceCategory__OverridesType;
  dataFetches?: PlasmicSectionMemberFindByServiceCategory__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div
        className={classNames(
          defaultcss.all,
          defaultcss.__wab_text,
          sty.freeBox__s8YI8
        )}
      >
        {hasVariant(globalVariants, "screen", "desktop")
          ? "Find by service"
          : "Shop by service category"}
      </div>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.freeBox__c192S)}
      >
        <ChipCategoryHeader
          className={classNames(
            "__wab_instance",
            sty.chipCategoryHeader__ir63G
          )}
          color={"bgLightB" as const}
          size={
            hasVariant(globalVariants, "screen", "mobile")
              ? ("_180" as const)
              : hasVariant(globalVariants, "screen", "desktop")
              ? ("_270" as const)
              : ("_270" as const)
          }
          slot={
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox__gaNsC
              )}
            >
              {hasVariant(globalVariants, "screen", "desktop")
                ? "No code"
                : "Software development"}
            </div>
          }
        >
          <p.PlasmicIcon
            PlasmicIconType={
              hasVariant(globalVariants, "screen", "desktop")
                ? Icon127Icon
                : IconIcon
            }
            className={classNames(defaultcss.all, sty.svg__nyl1P)}
            role={"img"}
          />
        </ChipCategoryHeader>

        <ChipCategoryHeader
          className={classNames(
            "__wab_instance",
            sty.chipCategoryHeader__l41Ju
          )}
          color={"bgLightB" as const}
          size={
            hasVariant(globalVariants, "screen", "mobile")
              ? ("_180" as const)
              : hasVariant(globalVariants, "screen", "desktop")
              ? ("_270" as const)
              : ("_270" as const)
          }
          slot={
            hasVariant(globalVariants, "screen", "desktop")
              ? "Blockchain"
              : "blockchain development"
          }
        >
          <BlockchainsvgIcon
            className={classNames(defaultcss.all, sty.svg___3GskY)}
            role={"img"}
          />
        </ChipCategoryHeader>

        <ChipCategoryHeader
          className={classNames(
            "__wab_instance",
            sty.chipCategoryHeader__zkAzp
          )}
          color={"bgLightB" as const}
          size={
            hasVariant(globalVariants, "screen", "mobile")
              ? ("_180" as const)
              : hasVariant(globalVariants, "screen", "desktop")
              ? ("_270" as const)
              : ("_270" as const)
          }
          slot={
            hasVariant(globalVariants, "screen", "desktop")
              ? "UX design"
              : "UX design & prototypes"
          }
        >
          <Icon16Icon
            className={classNames(defaultcss.all, sty.svg__kmmYs)}
            role={"img"}
          />
        </ChipCategoryHeader>

        <ChipCategoryHeader
          className={classNames(
            "__wab_instance",
            sty.chipCategoryHeader__aLo5A
          )}
          color={"bgLightB" as const}
          size={
            hasVariant(globalVariants, "screen", "mobile")
              ? ("_180" as const)
              : hasVariant(globalVariants, "screen", "desktop")
              ? ("_270" as const)
              : ("_270" as const)
          }
          slot={
            hasVariant(globalVariants, "screen", "desktop")
              ? "Mobile apps"
              : "Mobile app development"
          }
        >
          <Icon35Icon
            className={classNames(defaultcss.all, sty.svg__tRjJg)}
            role={"img"}
          />
        </ChipCategoryHeader>

        <ChipCategoryHeader
          className={classNames(
            "__wab_instance",
            sty.chipCategoryHeader__a47Se
          )}
          color={"bgLightB" as const}
          size={
            hasVariant(globalVariants, "screen", "mobile")
              ? ("_180" as const)
              : hasVariant(globalVariants, "screen", "desktop")
              ? ("_270" as const)
              : ("_270" as const)
          }
          slot={"Web development"}
        >
          <Icon36Icon
            className={classNames(defaultcss.all, sty.svg__x6Iua)}
            role={"img"}
          />
        </ChipCategoryHeader>

        <ChipCategoryHeader
          className={classNames(
            "__wab_instance",
            sty.chipCategoryHeader__odf0L
          )}
          color={"bgLightB" as const}
          size={
            hasVariant(globalVariants, "screen", "mobile")
              ? ("_180" as const)
              : hasVariant(globalVariants, "screen", "desktop")
              ? ("_270" as const)
              : ("_270" as const)
          }
          slot={"Digital marketing"}
        >
          <Icon37Icon
            className={classNames(defaultcss.all, sty.svg__psfo5)}
            role={"img"}
          />
        </ChipCategoryHeader>

        <ChipCategoryHeader
          className={classNames(
            "__wab_instance",
            sty.chipCategoryHeader__d9CHk
          )}
          color={"bgLightB" as const}
          size={
            hasVariant(globalVariants, "screen", "mobile")
              ? ("_180" as const)
              : hasVariant(globalVariants, "screen", "desktop")
              ? ("_270" as const)
              : ("_270" as const)
          }
          slot={
            hasVariant(globalVariants, "screen", "desktop")
              ? "Gaming"
              : "Game development"
          }
        >
          <Icon38Icon
            className={classNames(defaultcss.all, sty.svg__krcSc)}
            role={"img"}
          />
        </ChipCategoryHeader>

        <ChipCategoryHeader
          className={classNames(
            "__wab_instance",
            sty.chipCategoryHeader__kMxn9
          )}
          color={"bgLightB" as const}
          size={
            hasVariant(globalVariants, "screen", "mobile")
              ? ("_180" as const)
              : hasVariant(globalVariants, "screen", "desktop")
              ? ("_270" as const)
              : ("_270" as const)
          }
          slot={
            hasVariant(globalVariants, "screen", "desktop")
              ? "View all categories"
              : "View all service categories"
          }
        >
          <p.PlasmicIcon
            PlasmicIconType={
              hasVariant(globalVariants, "screen", "desktop")
                ? IconIcon
                : Icon39Icon
            }
            className={classNames(defaultcss.all, sty.svg__zsAez)}
            role={"img"}
          />
        </ChipCategoryHeader>
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSectionMemberFindByServiceCategory__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSectionMemberFindByServiceCategory__VariantsArgs;
    args?: PlasmicSectionMemberFindByServiceCategory__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicSectionMemberFindByServiceCategory__Fetches;
  } & Omit< // Specify variants directly as props
    PlasmicSectionMemberFindByServiceCategory__VariantsArgs,
    ReservedPropsType
  > &
    // Specify args directly as props
    Omit<
      PlasmicSectionMemberFindByServiceCategory__ArgsType,
      ReservedPropsType
    > &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSectionMemberFindByServiceCategory__ArgProps,
      internalVariantPropNames:
        PlasmicSectionMemberFindByServiceCategory__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicSectionMemberFindByServiceCategory__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSectionMemberFindByServiceCategory";
  } else {
    func.displayName = `PlasmicSectionMemberFindByServiceCategory.${nodeName}`;
  }
  return func;
}

export const PlasmicSectionMemberFindByServiceCategory = Object.assign(
  // Top-level PlasmicSectionMemberFindByServiceCategory renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicSectionMemberFindByServiceCategory
    internalVariantProps:
      PlasmicSectionMemberFindByServiceCategory__VariantProps,
    internalArgProps: PlasmicSectionMemberFindByServiceCategory__ArgProps
  }
);

export default PlasmicSectionMemberFindByServiceCategory;
/* prettier-ignore-end */
