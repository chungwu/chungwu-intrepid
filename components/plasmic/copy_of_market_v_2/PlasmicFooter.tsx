// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: XqBb4f5-6U5-Wf
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import LogoHeader from "../../LogoHeader"; // plasmic-import: KYZQ9ThnFfyK_/component
import FooterLink from "../../FooterLink"; // plasmic-import: 4YhZYxEP2nxyNW/component
import FooterSocialLink from "../../FooterSocialLink"; // plasmic-import: dlOB9wdpVUBY-S/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: biX3aS42hiG0fF/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicFooter.module.css"; // plasmic-import: XqBb4f5-6U5-Wf/css

import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: FygICV-AHdTJMVV/icon
import Icon9Icon from "./icons/PlasmicIcon__Icon9"; // plasmic-import: 8JkTs80xGan8E0E/icon
import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: U5dRxKhcuoP_OPH/icon
import Icon12Icon from "./icons/PlasmicIcon__Icon12"; // plasmic-import: 1YeDdEONj9QeOtM/icon
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: kBWqdDZE_vCRG-s/icon

export type PlasmicFooter__VariantMembers = {};

export type PlasmicFooter__VariantsArgs = {};
type VariantPropType = keyof PlasmicFooter__VariantsArgs;
export const PlasmicFooter__VariantProps = new Array<VariantPropType>();

export type PlasmicFooter__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot22?: React.ReactNode;
};

type ArgPropType = keyof PlasmicFooter__ArgsType;
export const PlasmicFooter__ArgProps = new Array<ArgPropType>(
  "children",
  "slot",
  "slot2",
  "slot22"
);

export type PlasmicFooter__OverridesType = {
  root?: p.Flex<"div">;
  logoHeader?: p.Flex<typeof LogoHeader>;
  social?: p.Flex<"div">;
  social2?: p.Flex<"div">;
};

export interface DefaultFooterProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot22?: React.ReactNode;
  className?: string;
}

function PlasmicFooter__RenderFunc(props: {
  variants: PlasmicFooter__VariantsArgs;
  args: PlasmicFooter__ArgsType;
  overrides: PlasmicFooter__OverridesType;
  dataFetches?: PlasmicFooter__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.freeBox__uKs9S)}
      >
        <LogoHeader
          data-plasmic-name={"logoHeader"}
          data-plasmic-override={overrides.logoHeader}
          className={classNames("__wab_instance", sty.logoHeader)}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <img
                alt={""}
                className={classNames(defaultcss.img, sty.img___73Cv0)}
                role={"img"}
                src={
                  "/plasmic/copy_of_market_v_2/images/intrepidLogo2021V2Darksvg.svg"
                }
              />
            ),

            value: args.children
          })}
        </LogoHeader>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.freeBox___1Fn)}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.freeBox__dCeYa)}
          >
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox___8RXq1
              )}
            >
              {"Company"}
            </div>

            <FooterLink
              className={classNames("__wab_instance", sty.footerLink__mvvto)}
              color={"dark" as const}
              slot={p.renderPlasmicSlot({
                defaultContents: "About us",
                value: args.slot
              })}
            />

            <FooterLink
              className={classNames("__wab_instance", sty.footerLink__iakHc)}
              color={"dark" as const}
              slot={p.renderPlasmicSlot({
                defaultContents: "Find services",
                value: args.slot2
              })}
            />

            <FooterLink
              className={classNames("__wab_instance", sty.footerLink__wrwu0)}
              color={"dark" as const}
              slot={p.renderPlasmicSlot({
                defaultContents: "Sell services",
                value: args.slot22
              })}
            />
          </p.Stack>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.freeBox__vnqEb)}
          >
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox__f0YtV
              )}
            >
              {"News & Insights"}
            </div>

            <FooterLink
              className={classNames("__wab_instance", sty.footerLink__di0Gd)}
              color={"dark" as const}
              slot={"Magazine"}
            />

            <FooterLink
              className={classNames("__wab_instance", sty.footerLink___0ImiW)}
              color={"dark" as const}
              slot={"Newsletter"}
            />

            <FooterLink
              className={classNames("__wab_instance", sty.footerLink__sban1)}
              color={"dark" as const}
              slot={"Help center"}
            />
          </p.Stack>

          {(hasVariant(globalVariants, "screen", "mobile") ? false : true) ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"social"}
              data-plasmic-override={overrides.social}
              hasGap={true}
              className={classNames(defaultcss.all, sty.social)}
            >
              <FooterSocialLink
                className={classNames(
                  "__wab_instance",
                  sty.footerSocialLink___79L5K
                )}
                color={"dark" as const}
              />

              <FooterSocialLink
                className={classNames(
                  "__wab_instance",
                  sty.footerSocialLink___8Fz5Y
                )}
                color={"dark" as const}
              >
                <Icon9Icon
                  className={classNames(defaultcss.all, sty.svg__ynqbj)}
                  role={"img"}
                />
              </FooterSocialLink>

              <FooterSocialLink
                className={classNames(
                  "__wab_instance",
                  sty.footerSocialLink__zWAC
                )}
                color={"dark" as const}
              >
                <Icon10Icon
                  className={classNames(defaultcss.all, sty.svg__lkfTo)}
                  role={"img"}
                />
              </FooterSocialLink>

              <FooterSocialLink
                className={classNames(
                  "__wab_instance",
                  sty.footerSocialLink__zcI6S
                )}
                color={"dark" as const}
              >
                <Icon12Icon
                  className={classNames(defaultcss.all, sty.svg__drdS)}
                  role={"img"}
                />
              </FooterSocialLink>

              <FooterSocialLink
                className={classNames(
                  "__wab_instance",
                  sty.footerSocialLink__w2Ig3
                )}
                color={"dark" as const}
              >
                <Icon11Icon
                  className={classNames(defaultcss.all, sty.svg__rbTeB)}
                  role={"img"}
                />
              </FooterSocialLink>
            </p.Stack>
          ) : null}

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.freeBox__dgIcx)}
          >
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox___65VS
              )}
            >
              {"Community"}
            </div>

            <FooterLink
              className={classNames("__wab_instance", sty.footerLink___7HdAj)}
              color={"dark" as const}
              slot={"Events"}
            />

            <FooterLink
              className={classNames("__wab_instance", sty.footerLink__pSc2S)}
              color={"dark" as const}
              slot={"Partners"}
            />

            <FooterLink
              className={classNames("__wab_instance", sty.footerLink__cnjwr)}
              color={"dark" as const}
              slot={"Members"}
            />
          </p.Stack>
        </p.Stack>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.freeBox__u79Yw)}
        >
          {(hasVariant(globalVariants, "screen", "mobile") ? true : false) ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"social2"}
              data-plasmic-override={overrides.social2}
              hasGap={true}
              className={classNames(defaultcss.all, sty.social2)}
            >
              <FooterSocialLink
                className={classNames(
                  "__wab_instance",
                  sty.footerSocialLink__vk040
                )}
                color={
                  hasVariant(globalVariants, "screen", "mobile")
                    ? ("dark" as const)
                    : undefined
                }
              />

              <FooterSocialLink
                className={classNames(
                  "__wab_instance",
                  sty.footerSocialLink___3XpSx
                )}
                color={
                  hasVariant(globalVariants, "screen", "mobile")
                    ? ("dark" as const)
                    : undefined
                }
              >
                <p.PlasmicIcon
                  PlasmicIconType={
                    hasVariant(globalVariants, "screen", "mobile")
                      ? Icon9Icon
                      : Icon8Icon
                  }
                  className={classNames(defaultcss.all, sty.svg__qoXTl)}
                  role={"img"}
                />
              </FooterSocialLink>

              <FooterSocialLink
                className={classNames(
                  "__wab_instance",
                  sty.footerSocialLink__gxEmv
                )}
                color={
                  hasVariant(globalVariants, "screen", "mobile")
                    ? ("dark" as const)
                    : undefined
                }
              >
                <p.PlasmicIcon
                  PlasmicIconType={
                    hasVariant(globalVariants, "screen", "mobile")
                      ? Icon10Icon
                      : Icon8Icon
                  }
                  className={classNames(defaultcss.all, sty.svg__fk9Xy)}
                  role={"img"}
                />
              </FooterSocialLink>

              <FooterSocialLink
                className={classNames(
                  "__wab_instance",
                  sty.footerSocialLink__adJ0Z
                )}
                color={
                  hasVariant(globalVariants, "screen", "mobile")
                    ? ("dark" as const)
                    : undefined
                }
              >
                <p.PlasmicIcon
                  PlasmicIconType={
                    hasVariant(globalVariants, "screen", "mobile")
                      ? Icon12Icon
                      : Icon8Icon
                  }
                  className={classNames(defaultcss.all, sty.svg___6W4CR)}
                  role={"img"}
                />
              </FooterSocialLink>

              <FooterSocialLink
                className={classNames(
                  "__wab_instance",
                  sty.footerSocialLink__qDzM
                )}
                color={
                  hasVariant(globalVariants, "screen", "mobile")
                    ? ("dark" as const)
                    : undefined
                }
              >
                <p.PlasmicIcon
                  PlasmicIconType={
                    hasVariant(globalVariants, "screen", "mobile")
                      ? Icon11Icon
                      : Icon8Icon
                  }
                  className={classNames(defaultcss.all, sty.svg__tPh8O)}
                  role={"img"}
                />
              </FooterSocialLink>
            </p.Stack>
          ) : null}

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.freeBox__eMuCx)}
          >
            <FooterLink
              className={classNames("__wab_instance", sty.footerLink___0JSq0)}
              color={"dark" as const}
              slot={"Privacy"}
            />

            <FooterLink
              className={classNames("__wab_instance", sty.footerLink__jKWhU)}
              color={"dark" as const}
              slot={"Terms"}
            />
          </p.Stack>

          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox___8KP1Q
            )}
          >
            {"© Intrepid Financial Technologies, Inc "}
          </div>
        </p.Stack>
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "logoHeader", "social", "social2"],
  logoHeader: ["logoHeader"],
  social: ["social"],
  social2: ["social2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  logoHeader: typeof LogoHeader;
  social: "div";
  social2: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFooter__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFooter__VariantsArgs;
    args?: PlasmicFooter__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicFooter__Fetches;
  } & Omit<PlasmicFooter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFooter__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFooter__ArgProps,
      internalVariantPropNames: PlasmicFooter__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicFooter__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFooter";
  } else {
    func.displayName = `PlasmicFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicFooter = Object.assign(
  // Top-level PlasmicFooter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    logoHeader: makeNodeComponent("logoHeader"),
    social: makeNodeComponent("social"),
    social2: makeNodeComponent("social2"),

    // Metadata about props expected for PlasmicFooter
    internalVariantProps: PlasmicFooter__VariantProps,
    internalArgProps: PlasmicFooter__ArgProps
  }
);

export default PlasmicFooter;
/* prettier-ignore-end */
