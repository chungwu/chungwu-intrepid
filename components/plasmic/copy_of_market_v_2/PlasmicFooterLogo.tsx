// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: 4JBJfXjMYuMDYI
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicFooterLogo.module.css"; // plasmic-import: 4JBJfXjMYuMDYI/css

export type PlasmicFooterLogo__VariantMembers = {
  light: "light";
  size: "_16" | "_24" | "_32";
};

export type PlasmicFooterLogo__VariantsArgs = {
  light?: SingleBooleanChoiceArg<"light">;
  size?: SingleChoiceArg<"_16" | "_24" | "_32">;
};

type VariantPropType = keyof PlasmicFooterLogo__VariantsArgs;
export const PlasmicFooterLogo__VariantProps = new Array<VariantPropType>(
  "light",
  "size"
);

export type PlasmicFooterLogo__ArgsType = {
  destination?: string | PageHref;
};

type ArgPropType = keyof PlasmicFooterLogo__ArgsType;
export const PlasmicFooterLogo__ArgProps = new Array<ArgPropType>(
  "destination"
);

export type PlasmicFooterLogo__OverridesType = {
  footerlogoLink?: p.Flex<"a"> & Partial<LinkProps>;
  img?: p.Flex<"img">;
};

export interface DefaultFooterLogoProps {
  destination?: string | PageHref;
  light?: SingleBooleanChoiceArg<"light">;
  size?: SingleChoiceArg<"_16" | "_24" | "_32">;
  className?: string;
}

function PlasmicFooterLogo__RenderFunc(props: {
  variants: PlasmicFooterLogo__VariantsArgs;
  args: PlasmicFooterLogo__ArgsType;
  overrides: PlasmicFooterLogo__OverridesType;
  dataFetches?: PlasmicFooterLogo__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.PlasmicLink
      data-plasmic-name={"footerlogoLink"}
      data-plasmic-override={overrides.footerlogoLink}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        defaultcss.all,
        projectcss.root_reset,
        sty.footerlogoLink
      )}
      component={Link}
      href={args.destination}
      platform={"nextjs"}
    >
      <img
        data-plasmic-name={"img"}
        data-plasmic-override={overrides.img}
        alt={""}
        className={classNames(defaultcss.img, sty.img, {
          [sty.img__light]: hasVariant(variants, "light", "light"),
          [sty.img__size__16]: hasVariant(variants, "size", "_16"),
          [sty.img__size__24]: hasVariant(variants, "size", "_24"),
          [sty.img__size__32]: hasVariant(variants, "size", "_32")
        })}
        role={"img"}
        src={
          hasVariant(variants, "light", "light")
            ? "/plasmic/copy_of_market_v_2/images/intrepidLogo2021V2Lightsvg.svg"
            : "/plasmic/copy_of_market_v_2/images/intrepidLogo2021V2Darksvg.svg"
        }
      />
    </p.PlasmicLink>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  footerlogoLink: ["footerlogoLink", "img"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  footerlogoLink: "a";
  img: "img";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFooterLogo__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFooterLogo__VariantsArgs;
    args?: PlasmicFooterLogo__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicFooterLogo__Fetches;
  } & Omit<PlasmicFooterLogo__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFooterLogo__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFooterLogo__ArgProps,
      internalVariantPropNames: PlasmicFooterLogo__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicFooterLogo__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "footerlogoLink") {
    func.displayName = "PlasmicFooterLogo";
  } else {
    func.displayName = `PlasmicFooterLogo.${nodeName}`;
  }
  return func;
}

export const PlasmicFooterLogo = Object.assign(
  // Top-level PlasmicFooterLogo renders the root element
  makeNodeComponent("footerlogoLink"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicFooterLogo
    internalVariantProps: PlasmicFooterLogo__VariantProps,
    internalArgProps: PlasmicFooterLogo__ArgProps
  }
);

export default PlasmicFooterLogo;
/* prettier-ignore-end */
