// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: OhGbZHxA0i-KBE
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import IconStripeLogo from "../../IconStripeLogo"; // plasmic-import: 9qvamr3j2pv4L-/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicButtonStripeConnect.module.css"; // plasmic-import: OhGbZHxA0i-KBE/css

import LinkAIcon from "./icons/PlasmicIcon__LinkA"; // plasmic-import: ez3tra0b2EH7tNq/icon

export type PlasmicButtonStripeConnect__VariantMembers = {
  icon: "icon";
  logo: "logo";
  width: "_180" | "_270" | "_360";
};

export type PlasmicButtonStripeConnect__VariantsArgs = {
  icon?: SingleBooleanChoiceArg<"icon">;
  logo?: SingleBooleanChoiceArg<"logo">;
  width?: SingleChoiceArg<"_180" | "_270" | "_360">;
};

type VariantPropType = keyof PlasmicButtonStripeConnect__VariantsArgs;
export const PlasmicButtonStripeConnect__VariantProps =
  new Array<VariantPropType>("icon", "logo", "width");

export type PlasmicButtonStripeConnect__ArgsType = {
  text?: React.ReactNode;
  id?: string;
};

type ArgPropType = keyof PlasmicButtonStripeConnect__ArgsType;
export const PlasmicButtonStripeConnect__ArgProps = new Array<ArgPropType>(
  "text",
  "id"
);

export type PlasmicButtonStripeConnect__OverridesType = {
  root?: p.Flex<"button">;
  freeBox?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
  textParent?: p.Flex<"div">;
  textBg?: p.Flex<"div">;
  iconStripeLogo?: p.Flex<typeof IconStripeLogo>;
};

export interface DefaultButtonStripeConnectProps {
  text?: React.ReactNode;
  id?: string;
  icon?: SingleBooleanChoiceArg<"icon">;
  logo?: SingleBooleanChoiceArg<"logo">;
  width?: SingleChoiceArg<"_180" | "_270" | "_360">;
  className?: string;
}

function PlasmicButtonStripeConnect__RenderFunc(props: {
  variants: PlasmicButtonStripeConnect__VariantsArgs;
  args: PlasmicButtonStripeConnect__ArgsType;
  overrides: PlasmicButtonStripeConnect__OverridesType;
  dataFetches?: PlasmicButtonStripeConnect__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover
  };

  return (
    <button
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        defaultcss.button,
        projectcss.root_reset,
        sty.root,
        "stripe-connect" as const,
        {
          [sty.root__width__180]: hasVariant(variants, "width", "_180"),
          [sty.root__width__270]: hasVariant(variants, "width", "_270"),
          [sty.root__width__360]: hasVariant(variants, "width", "_360")
        }
      )}
      id={args.id}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      {(hasVariant(variants, "icon", "icon") ? false : true) ? (
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(defaultcss.all, sty.freeBox, {
            [sty.freeBox__icon]: hasVariant(variants, "icon", "icon")
          })}
        >
          <LinkAIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(defaultcss.all, sty.svg)}
            role={"img"}
          />
        </div>
      ) : null}

      <p.Stack
        as={"div"}
        data-plasmic-name={"textParent"}
        data-plasmic-override={overrides.textParent}
        hasGap={true}
        className={classNames(defaultcss.all, sty.textParent, {
          [sty.textParent__width__270]: hasVariant(variants, "width", "_270")
        })}
      >
        <div
          data-plasmic-name={"textBg"}
          data-plasmic-override={overrides.textBg}
          className={classNames(defaultcss.all, sty.textBg)}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Connect with",
            value: args.text,
            className: classNames(sty.slotText, {
              [sty.slotText__width__180]: hasVariant(variants, "width", "_180"),
              [sty.slotText__width__360]: hasVariant(variants, "width", "_360")
            })
          })}
        </div>
      </p.Stack>

      {(hasVariant(variants, "logo", "logo") ? false : true) ? (
        <IconStripeLogo
          data-plasmic-name={"iconStripeLogo"}
          data-plasmic-override={overrides.iconStripeLogo}
          className={classNames("__wab_instance", sty.iconStripeLogo, {
            [sty.iconStripeLogo__logo]: hasVariant(variants, "logo", "logo"),
            [sty.iconStripeLogo__width__180]: hasVariant(
              variants,
              "width",
              "_180"
            ),
            [sty.iconStripeLogo__width__270]: hasVariant(
              variants,
              "width",
              "_270"
            )
          })}
          color={triggers.hover_root ? ("white" as const) : ("burple" as const)}
          size={
            hasVariant(variants, "width", "_180") ? ("_32" as const) : undefined
          }
        />
      ) : null}
    </button>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "svg", "textParent", "textBg", "iconStripeLogo"],
  freeBox: ["freeBox", "svg"],
  svg: ["svg"],
  textParent: ["textParent", "textBg"],
  textBg: ["textBg"],
  iconStripeLogo: ["iconStripeLogo"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "button";
  freeBox: "div";
  svg: "svg";
  textParent: "div";
  textBg: "div";
  iconStripeLogo: typeof IconStripeLogo;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicButtonStripeConnect__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicButtonStripeConnect__VariantsArgs;
    args?: PlasmicButtonStripeConnect__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicButtonStripeConnect__Fetches;
  } & Omit<PlasmicButtonStripeConnect__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicButtonStripeConnect__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicButtonStripeConnect__ArgProps,
      internalVariantPropNames: PlasmicButtonStripeConnect__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicButtonStripeConnect__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicButtonStripeConnect";
  } else {
    func.displayName = `PlasmicButtonStripeConnect.${nodeName}`;
  }
  return func;
}

export const PlasmicButtonStripeConnect = Object.assign(
  // Top-level PlasmicButtonStripeConnect renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    svg: makeNodeComponent("svg"),
    textParent: makeNodeComponent("textParent"),
    textBg: makeNodeComponent("textBg"),
    iconStripeLogo: makeNodeComponent("iconStripeLogo"),

    // Metadata about props expected for PlasmicButtonStripeConnect
    internalVariantProps: PlasmicButtonStripeConnect__VariantProps,
    internalArgProps: PlasmicButtonStripeConnect__ArgProps
  }
);

export default PlasmicButtonStripeConnect;
/* prettier-ignore-end */
