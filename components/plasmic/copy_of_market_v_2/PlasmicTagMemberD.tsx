// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: EwwHW0Pp6J--_CI
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicTagMemberD.module.css"; // plasmic-import: EwwHW0Pp6J--_CI/css

export type PlasmicTagMemberD__VariantMembers = {
  inset: "inset";
};

export type PlasmicTagMemberD__VariantsArgs = {
  inset?: SingleBooleanChoiceArg<"inset">;
};

type VariantPropType = keyof PlasmicTagMemberD__VariantsArgs;
export const PlasmicTagMemberD__VariantProps = new Array<VariantPropType>(
  "inset"
);

export type PlasmicTagMemberD__ArgsType = {};
type ArgPropType = keyof PlasmicTagMemberD__ArgsType;
export const PlasmicTagMemberD__ArgProps = new Array<ArgPropType>();

export type PlasmicTagMemberD__OverridesType = {
  parent?: p.Flex<"div">;
  text?: p.Flex<"div">;
};

export interface DefaultTagMemberDProps {
  inset?: SingleBooleanChoiceArg<"inset">;
  className?: string;
}

function PlasmicTagMemberD__RenderFunc(props: {
  variants: PlasmicTagMemberD__VariantsArgs;
  args: PlasmicTagMemberD__ArgsType;
  overrides: PlasmicTagMemberD__OverridesType;
  dataFetches?: PlasmicTagMemberD__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"parent"}
      data-plasmic-override={overrides.parent}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.parent, {
        [sty.parent__inset]: hasVariant(variants, "inset", "inset")
      })}
    >
      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(defaultcss.all, defaultcss.__wab_text, sty.text, {
          [sty.text__inset]: hasVariant(variants, "inset", "inset")
        })}
      >
        {"creator"}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  parent: ["parent", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  parent: "div";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTagMemberD__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTagMemberD__VariantsArgs;
    args?: PlasmicTagMemberD__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicTagMemberD__Fetches;
  } & Omit<PlasmicTagMemberD__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTagMemberD__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTagMemberD__ArgProps,
      internalVariantPropNames: PlasmicTagMemberD__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicTagMemberD__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "parent") {
    func.displayName = "PlasmicTagMemberD";
  } else {
    func.displayName = `PlasmicTagMemberD.${nodeName}`;
  }
  return func;
}

export const PlasmicTagMemberD = Object.assign(
  // Top-level PlasmicTagMemberD renders the root element
  makeNodeComponent("parent"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicTagMemberD
    internalVariantProps: PlasmicTagMemberD__VariantProps,
    internalArgProps: PlasmicTagMemberD__ArgProps
  }
);

export default PlasmicTagMemberD;
/* prettier-ignore-end */
