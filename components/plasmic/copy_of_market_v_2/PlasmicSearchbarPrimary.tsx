// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: i9y9X99bmAqsmFE
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicSearchbarPrimary.module.css"; // plasmic-import: i9y9X99bmAqsmFE/css

import Icon174Icon from "./icons/PlasmicIcon__Icon174"; // plasmic-import: wXnmReOHUfGmI5a/icon

export type PlasmicSearchbarPrimary__VariantMembers = {
  type: "primary" | "secondary";
  width: "_720" | "_540" | "_360" | "_270" | "_180";
  height: "_36" | "_40";
};

export type PlasmicSearchbarPrimary__VariantsArgs = {
  type?: SingleChoiceArg<"primary" | "secondary">;
  width?: SingleChoiceArg<"_720" | "_540" | "_360" | "_270" | "_180">;
  height?: SingleChoiceArg<"_36" | "_40">;
};

type VariantPropType = keyof PlasmicSearchbarPrimary__VariantsArgs;
export const PlasmicSearchbarPrimary__VariantProps = new Array<VariantPropType>(
  "type",
  "width",
  "height"
);

export type PlasmicSearchbarPrimary__ArgsType = {};
type ArgPropType = keyof PlasmicSearchbarPrimary__ArgsType;
export const PlasmicSearchbarPrimary__ArgProps = new Array<ArgPropType>();

export type PlasmicSearchbarPrimary__OverridesType = {
  root?: p.Flex<"div">;
  parent?: p.Flex<"div">;
  searchSvgbg?: p.Flex<"div">;
  searchSvg?: p.Flex<"svg">;
  textboxParent?: p.Flex<"div">;
  textbox?: p.Flex<"input">;
};

export interface DefaultSearchbarPrimaryProps {
  type?: SingleChoiceArg<"primary" | "secondary">;
  width?: SingleChoiceArg<"_720" | "_540" | "_360" | "_270" | "_180">;
  height?: SingleChoiceArg<"_36" | "_40">;
  className?: string;
}

function PlasmicSearchbarPrimary__RenderFunc(props: {
  variants: PlasmicSearchbarPrimary__VariantsArgs;
  args: PlasmicSearchbarPrimary__ArgsType;
  overrides: PlasmicSearchbarPrimary__OverridesType;
  dataFetches?: PlasmicSearchbarPrimary__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__height__36]: hasVariant(variants, "height", "_36"),
        [sty.root__height__40]: hasVariant(variants, "height", "_40"),
        [sty.root__width__180]: hasVariant(variants, "width", "_180"),
        [sty.root__width__270]: hasVariant(variants, "width", "_270"),
        [sty.root__width__360]: hasVariant(variants, "width", "_360")
      })}
    >
      <div
        data-plasmic-name={"parent"}
        data-plasmic-override={overrides.parent}
        className={classNames(defaultcss.all, sty.parent, {
          [sty.parent__height__36]: hasVariant(variants, "height", "_36"),
          [sty.parent__height__40]: hasVariant(variants, "height", "_40"),
          [sty.parent__type_secondary]: hasVariant(
            variants,
            "type",
            "secondary"
          ),
          [sty.parent__width__180]: hasVariant(variants, "width", "_180"),
          [sty.parent__width__270]: hasVariant(variants, "width", "_270"),
          [sty.parent__width__360]: hasVariant(variants, "width", "_360"),
          [sty.parent__width__360_height__36]:
            hasVariant(variants, "width", "_360") &&
            hasVariant(variants, "height", "_36"),
          [sty.parent__width__360_height__40]:
            hasVariant(variants, "width", "_360") &&
            hasVariant(variants, "height", "_40"),
          [sty.parent__width__540]: hasVariant(variants, "width", "_540"),
          [sty.parent__width__720]: hasVariant(variants, "width", "_720")
        })}
      >
        <div
          data-plasmic-name={"searchSvgbg"}
          data-plasmic-override={overrides.searchSvgbg}
          className={classNames(defaultcss.all, sty.searchSvgbg, {
            [sty.searchSvgbg__height__36]: hasVariant(
              variants,
              "height",
              "_36"
            ),
            [sty.searchSvgbg__height__40]: hasVariant(
              variants,
              "height",
              "_40"
            ),
            [sty.searchSvgbg__type_secondary]: hasVariant(
              variants,
              "type",
              "secondary"
            ),
            [sty.searchSvgbg__width__180]: hasVariant(
              variants,
              "width",
              "_180"
            ),
            [sty.searchSvgbg__width__270]: hasVariant(
              variants,
              "width",
              "_270"
            ),
            [sty.searchSvgbg__width__360]: hasVariant(variants, "width", "_360")
          })}
        >
          <Icon174Icon
            data-plasmic-name={"searchSvg"}
            data-plasmic-override={overrides.searchSvg}
            className={classNames(defaultcss.all, sty.searchSvg, {
              [sty.searchSvg__height__36]: hasVariant(
                variants,
                "height",
                "_36"
              ),
              [sty.searchSvg__height__40]: hasVariant(variants, "height", "_40")
            })}
            role={"img"}
          />
        </div>

        <div
          data-plasmic-name={"textboxParent"}
          data-plasmic-override={overrides.textboxParent}
          className={classNames(defaultcss.all, sty.textboxParent, {
            [sty.textboxParent__type_primary]: hasVariant(
              variants,
              "type",
              "primary"
            ),
            [sty.textboxParent__type_secondary]: hasVariant(
              variants,
              "type",
              "secondary"
            ),
            [sty.textboxParent__width__180]: hasVariant(
              variants,
              "width",
              "_180"
            ),
            [sty.textboxParent__width__270]: hasVariant(
              variants,
              "width",
              "_270"
            ),
            [sty.textboxParent__width__360]: hasVariant(
              variants,
              "width",
              "_360"
            )
          })}
        >
          <input
            data-plasmic-name={"textbox"}
            data-plasmic-override={overrides.textbox}
            className={classNames(defaultcss.input, sty.textbox, {
              [sty.textbox__type_secondary]: hasVariant(
                variants,
                "type",
                "secondary"
              )
            })}
            placeholder={"" as const}
            size={1 as const}
            type={"text" as const}
            value={"Search..." as const}
          />
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "parent",
    "searchSvgbg",
    "searchSvg",
    "textboxParent",
    "textbox"
  ],
  parent: ["parent", "searchSvgbg", "searchSvg", "textboxParent", "textbox"],
  searchSvgbg: ["searchSvgbg", "searchSvg"],
  searchSvg: ["searchSvg"],
  textboxParent: ["textboxParent", "textbox"],
  textbox: ["textbox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  parent: "div";
  searchSvgbg: "div";
  searchSvg: "svg";
  textboxParent: "div";
  textbox: "input";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSearchbarPrimary__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSearchbarPrimary__VariantsArgs;
    args?: PlasmicSearchbarPrimary__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicSearchbarPrimary__Fetches;
  } & Omit<PlasmicSearchbarPrimary__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSearchbarPrimary__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSearchbarPrimary__ArgProps,
      internalVariantPropNames: PlasmicSearchbarPrimary__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicSearchbarPrimary__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSearchbarPrimary";
  } else {
    func.displayName = `PlasmicSearchbarPrimary.${nodeName}`;
  }
  return func;
}

export const PlasmicSearchbarPrimary = Object.assign(
  // Top-level PlasmicSearchbarPrimary renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    parent: makeNodeComponent("parent"),
    searchSvgbg: makeNodeComponent("searchSvgbg"),
    searchSvg: makeNodeComponent("searchSvg"),
    textboxParent: makeNodeComponent("textboxParent"),
    textbox: makeNodeComponent("textbox"),

    // Metadata about props expected for PlasmicSearchbarPrimary
    internalVariantProps: PlasmicSearchbarPrimary__VariantProps,
    internalArgProps: PlasmicSearchbarPrimary__ArgProps
  }
);

export default PlasmicSearchbarPrimary;
/* prettier-ignore-end */
