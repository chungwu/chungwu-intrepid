// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: 84TJaHIjHEsbz7
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ElementRadioPrimary from "../../ElementRadioPrimary"; // plasmic-import: LCJ0Mh3XlqeJy94/component
import ImagePrimary from "../../ImagePrimary"; // plasmic-import: r4bT63FKybDWVF/component
import IconPrimary from "../../IconPrimary"; // plasmic-import: leoxU5GkcMHMK8X/component
import DisplayIconText from "../../DisplayIconText"; // plasmic-import: dGXJHGwICf5B1Az/component
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: gpNjXfbD_ZdpPU/component
import ButtonLinkPrimary from "../../ButtonLinkPrimary"; // plasmic-import: tSiOWgKlHR05p7/component
import TagBadge from "../../TagBadge"; // plasmic-import: eBACR7k11POl/component
import SwitchPrimary from "../../SwitchPrimary"; // plasmic-import: NI4mgAsheQjrPj/component
import ButtonCircleDelete from "../../ButtonCircleDelete"; // plasmic-import: ADEYruGVISG4-wd/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: biX3aS42hiG0fF/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicTableListingAdminRecord.module.css"; // plasmic-import: 84TJaHIjHEsbz7/css

import Icon171Icon from "./icons/PlasmicIcon__Icon171"; // plasmic-import: L1T0WWEIfF6hPBd/icon
import EditIcon from "./icons/PlasmicIcon__Edit"; // plasmic-import: 2kVsVk5n6kvHzNc/icon
import PlusBoldIcon from "./icons/PlasmicIcon__PlusBold"; // plasmic-import: lhSEEajPJGZatfD/icon
import CircleCheckedIcon from "./icons/PlasmicIcon__CircleChecked"; // plasmic-import: Rx_TV1hYzOOAuX3/icon
import CircleStopIcon from "./icons/PlasmicIcon__CircleStop"; // plasmic-import: oQEvgfPNs2AgmgC/icon
import BoostIcon from "./icons/PlasmicIcon__Boost"; // plasmic-import: zTeN8PzxWbg23t7/icon

export type PlasmicTableListingAdminRecord__VariantMembers = {
  status: "inProgress" | "listed" | "unlisted";
  toDo: "finish" | "activate" | "boost";
  term: "monthly" | "annual";
};

export type PlasmicTableListingAdminRecord__VariantsArgs = {
  status?: SingleChoiceArg<"inProgress" | "listed" | "unlisted">;
  toDo?: SingleChoiceArg<"finish" | "activate" | "boost">;
  term?: SingleChoiceArg<"monthly" | "annual">;
};

type VariantPropType = keyof PlasmicTableListingAdminRecord__VariantsArgs;
export const PlasmicTableListingAdminRecord__VariantProps =
  new Array<VariantPropType>("status", "toDo", "term");

export type PlasmicTableListingAdminRecord__ArgsType = {
  destination?: string | PageHref;
};

type ArgPropType = keyof PlasmicTableListingAdminRecord__ArgsType;
export const PlasmicTableListingAdminRecord__ArgProps = new Array<ArgPropType>(
  "destination"
);

export type PlasmicTableListingAdminRecord__OverridesType = {
  root?: p.Flex<"div">;
  listingSelectImageCaptionEditParent?: p.Flex<"div">;
  elementRadioPrimary?: p.Flex<typeof ElementRadioPrimary>;
  imageCaptionParent?: p.Flex<"div">;
  imageLinkManageListging?: p.Flex<"a"> & Partial<LinkProps>;
  imagePrimary?: p.Flex<typeof ImagePrimary>;
  img?: p.Flex<"img">;
  _70X404?: p.Flex<"img">;
  serviceListingTitleParent?: p.Flex<"div">;
  serviceListingTitle?: p.Flex<"a"> & Partial<LinkProps>;
  buttonEditListing?: p.Flex<"a"> & Partial<LinkProps>;
  svgIcon22?: p.Flex<"svg">;
  editIcon?: p.Flex<"svg">;
  statusParent?: p.Flex<"div">;
  status?: p.Flex<typeof DisplayIconText>;
  svgIcon23?: p.Flex<"svg">;
  toDoParent?: p.Flex<"div">;
  toDo?: p.Flex<typeof ButtonPrimary>;
  svg?: p.Flex<"svg">;
  buttonLinkPrimary?: p.Flex<typeof ButtonLinkPrimary>;
  modifiedDateTimeParent?: p.Flex<"div">;
  categoryParent?: p.Flex<"div">;
  category?: p.Flex<typeof TagBadge>;
  priceParent?: p.Flex<"div">;
  currencyParent?: p.Flex<"div">;
  valueServicePrice?: p.Flex<"div">;
  termParent?: p.Flex<"div">;
  termSubscription?: p.Flex<typeof TagBadge>;
  expirationDateTimeParent?: p.Flex<"div">;
  autoRenewParent?: p.Flex<"div">;
  autoRenew?: p.Flex<typeof SwitchPrimary>;
  archiveListing?: p.Flex<typeof ButtonCircleDelete>;
};

export interface DefaultTableListingAdminRecordProps {
  destination?: string | PageHref;
  status?: SingleChoiceArg<"inProgress" | "listed" | "unlisted">;
  toDo?: SingleChoiceArg<"finish" | "activate" | "boost">;
  term?: SingleChoiceArg<"monthly" | "annual">;
  className?: string;
}

function PlasmicTableListingAdminRecord__RenderFunc(props: {
  variants: PlasmicTableListingAdminRecord__VariantsArgs;
  args: PlasmicTableListingAdminRecord__ArgsType;
  overrides: PlasmicTableListingAdminRecord__OverridesType;
  dataFetches?: PlasmicTableListingAdminRecord__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__toDo_finish]: hasVariant(variants, "toDo", "finish")
      })}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"listingSelectImageCaptionEditParent"}
        data-plasmic-override={overrides.listingSelectImageCaptionEditParent}
        hasGap={true}
        className={classNames(
          defaultcss.all,
          sty.listingSelectImageCaptionEditParent,
          {
            [sty.listingSelectImageCaptionEditParent__term_annual]: hasVariant(
              variants,
              "term",
              "annual"
            )
          }
        )}
      >
        <ElementRadioPrimary
          data-plasmic-name={"elementRadioPrimary"}
          data-plasmic-override={overrides.elementRadioPrimary}
          className={classNames("__wab_instance", sty.elementRadioPrimary)}
          size={"_14Px" as const}
        />

        <p.Stack
          as={"div"}
          data-plasmic-name={"imageCaptionParent"}
          data-plasmic-override={overrides.imageCaptionParent}
          hasGap={true}
          className={classNames(defaultcss.all, sty.imageCaptionParent, {
            [sty.imageCaptionParent__term_annual]: hasVariant(
              variants,
              "term",
              "annual"
            )
          })}
        >
          <p.PlasmicLink
            data-plasmic-name={"imageLinkManageListging"}
            data-plasmic-override={overrides.imageLinkManageListging}
            className={classNames(defaultcss.all, sty.imageLinkManageListging)}
            component={Link}
            href={args.destination}
            platform={"nextjs"}
          >
            <ImagePrimary
              data-plasmic-name={"imagePrimary"}
              data-plasmic-override={overrides.imagePrimary}
              image360X188={
                <img
                  data-plasmic-name={"img"}
                  data-plasmic-override={overrides.img}
                  alt={""}
                  className={classNames(defaultcss.img, sty.img)}
                  role={"img"}
                  src={
                    "https://craftypixels.com/placeholder-image/40x40/f6f6f6/999999" as const
                  }
                />
              }
              misc={"thumbnail70X40" as const}
              thumbnail70X40={
                <img
                  data-plasmic-name={"_70X404"}
                  data-plasmic-override={overrides._70X404}
                  alt={"" as const}
                  className={classNames(defaultcss.img, sty._70X404)}
                  role={"img"}
                  src={
                    "https://craftypixels.com/placeholder-image/70x40/f8f8f8/333333" as const
                  }
                />
              }
            />
          </p.PlasmicLink>

          <p.Stack
            as={"div"}
            data-plasmic-name={"serviceListingTitleParent"}
            data-plasmic-override={overrides.serviceListingTitleParent}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              sty.serviceListingTitleParent,
              {
                [sty.serviceListingTitleParent__term_annual]: hasVariant(
                  variants,
                  "term",
                  "annual"
                )
              }
            )}
          >
            <p.PlasmicLink
              data-plasmic-name={"serviceListingTitle"}
              data-plasmic-override={overrides.serviceListingTitle}
              className={classNames(defaultcss.all, sty.serviceListingTitle, {
                [sty.serviceListingTitle__term_annual]: hasVariant(
                  variants,
                  "term",
                  "annual"
                )
              })}
              component={Link}
              href={args.destination}
              platform={"nextjs"}
            >
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.freeBox__vGvYe,
                  {
                    [sty.freeBox__term_annual__vGvYeJ0Y32]: hasVariant(
                      variants,
                      "term",
                      "annual"
                    )
                  }
                )}
              >
                {"Service title"}
              </div>
            </p.PlasmicLink>
          </p.Stack>

          <p.PlasmicLink
            data-plasmic-name={"buttonEditListing"}
            data-plasmic-override={overrides.buttonEditListing}
            className={classNames(defaultcss.all, sty.buttonEditListing, {
              [sty.buttonEditListing__term_annual]: hasVariant(
                variants,
                "term",
                "annual"
              )
            })}
            component={Link}
            href={args.destination}
            platform={"nextjs"}
            title={"Click to edit this listing" as const}
          >
            <IconPrimary
              className={classNames("__wab_instance", sty.iconPrimary__vRVhi)}
              size={"_16Px" as const}
              svgIcon14Px={
                <EditIcon
                  data-plasmic-name={"svgIcon22"}
                  data-plasmic-override={overrides.svgIcon22}
                  className={classNames(defaultcss.all, sty.svgIcon22)}
                  role={"img"}
                />
              }
              svgIcon16Px={
                <EditIcon
                  data-plasmic-name={"editIcon"}
                  data-plasmic-override={overrides.editIcon}
                  className={classNames(defaultcss.all, sty.editIcon, {
                    [sty.editIcon__term_annual]: hasVariant(
                      variants,
                      "term",
                      "annual"
                    )
                  })}
                  role={"img"}
                />
              }
            />
          </p.PlasmicLink>
        </p.Stack>
      </p.Stack>

      {(hasVariant(globalVariants, "screen", "mobile") ? true : true) ? (
        <div
          data-plasmic-name={"statusParent"}
          data-plasmic-override={overrides.statusParent}
          className={classNames(defaultcss.all, sty.statusParent)}
        >
          <DisplayIconText
            data-plasmic-name={"status"}
            data-plasmic-override={overrides.status}
            className={classNames("__wab_instance", sty.status)}
            elementIcon={
              <IconPrimary
                className={classNames("__wab_instance", sty.iconPrimary__wlXuz)}
                svgIcon={
                  <p.PlasmicIcon
                    data-plasmic-name={"svgIcon23"}
                    data-plasmic-override={overrides.svgIcon23}
                    PlasmicIconType={
                      hasVariant(variants, "status", "unlisted")
                        ? CircleStopIcon
                        : hasVariant(variants, "status", "listed")
                        ? CircleCheckedIcon
                        : PlusBoldIcon
                    }
                    className={classNames(defaultcss.all, sty.svgIcon23, {
                      [sty.svgIcon23__status_inProgress]: hasVariant(
                        variants,
                        "status",
                        "inProgress"
                      ),
                      [sty.svgIcon23__status_listed]: hasVariant(
                        variants,
                        "status",
                        "listed"
                      ),
                      [sty.svgIcon23__status_unlisted]: hasVariant(
                        variants,
                        "status",
                        "unlisted"
                      )
                    })}
                    role={"img"}
                  />
                }
              />
            }
            text={
              hasVariant(variants, "status", "unlisted")
                ? "Un-listed"
                : hasVariant(variants, "status", "listed")
                ? "Listed"
                : "Status"
            }
          />
        </div>
      ) : null}
      {(hasVariant(globalVariants, "screen", "mobile") ? true : true) ? (
        <div
          data-plasmic-name={"toDoParent"}
          data-plasmic-override={overrides.toDoParent}
          className={classNames(defaultcss.all, sty.toDoParent, {
            [sty.toDoParent__toDo_finish]: hasVariant(
              variants,
              "toDo",
              "finish"
            )
          })}
        >
          {(hasVariant(variants, "toDo", "finish") ? true : true) ? (
            <ButtonPrimary
              data-plasmic-name={"toDo"}
              data-plasmic-override={overrides.toDo}
              className={classNames("__wab_instance", sty.toDo, {
                [sty.toDo__toDo_activate]: hasVariant(
                  variants,
                  "toDo",
                  "activate"
                ),
                [sty.toDo__toDo_boost]: hasVariant(variants, "toDo", "boost"),
                [sty.toDo__toDo_finish]: hasVariant(variants, "toDo", "finish")
              })}
              color={
                hasVariant(variants, "toDo", "boost")
                  ? ("brand" as const)
                  : hasVariant(variants, "toDo", "activate")
                  ? ("brand" as const)
                  : hasVariant(variants, "toDo", "finish")
                  ? ("success" as const)
                  : undefined
              }
              size={"_90" as const}
              svgIcon={
                <p.PlasmicIcon
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  PlasmicIconType={
                    hasVariant(variants, "toDo", "boost")
                      ? BoostIcon
                      : PlusBoldIcon
                  }
                  className={classNames(defaultcss.all, sty.svg, {
                    [sty.svg__toDo_boost]: hasVariant(variants, "toDo", "boost")
                  })}
                  role={"img"}
                />
              }
              type={
                hasVariant(variants, "toDo", "boost")
                  ? ("icon" as const)
                  : ("ghost" as const)
              }
            >
              {hasVariant(variants, "toDo", "boost")
                ? "Boost"
                : hasVariant(variants, "toDo", "activate")
                ? "Activate"
                : hasVariant(variants, "toDo", "finish")
                ? "Finish"
                : "Button"}
            </ButtonPrimary>
          ) : null}
          {(hasVariant(variants, "toDo", "finish") ? true : false) ? (
            <ButtonLinkPrimary
              data-plasmic-name={"buttonLinkPrimary"}
              data-plasmic-override={overrides.buttonLinkPrimary}
              className={classNames("__wab_instance", sty.buttonLinkPrimary, {
                [sty.buttonLinkPrimary__toDo_finish]: hasVariant(
                  variants,
                  "toDo",
                  "finish"
                )
              })}
              color={
                hasVariant(variants, "toDo", "finish")
                  ? ("green" as const)
                  : undefined
              }
              text={
                hasVariant(variants, "toDo", "finish") ? "Finish" : "Hyper Link"
              }
              type={
                hasVariant(variants, "toDo", "finish")
                  ? ("ghost" as const)
                  : undefined
              }
            />
          ) : null}
        </div>
      ) : null}
      {(hasVariant(globalVariants, "screen", "mobile") ? true : true) ? (
        <div
          data-plasmic-name={"modifiedDateTimeParent"}
          data-plasmic-override={overrides.modifiedDateTimeParent}
          className={classNames(defaultcss.all, sty.modifiedDateTimeParent)}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox__ipGJ
            )}
          >
            {"00/00/00"}
          </div>
        </div>
      ) : null}
      {(hasVariant(globalVariants, "screen", "mobile") ? true : true) ? (
        <div
          data-plasmic-name={"categoryParent"}
          data-plasmic-override={overrides.categoryParent}
          className={classNames(defaultcss.all, sty.categoryParent)}
        >
          <TagBadge
            data-plasmic-name={"category"}
            data-plasmic-override={overrides.category}
            className={classNames("__wab_instance", sty.category)}
            textBase10Px={
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.freeBox__vCw7N
                )}
              >
                {"Category"}
              </div>
            }
            type={["outline"]}
          />
        </div>
      ) : null}
      {(hasVariant(globalVariants, "screen", "mobile") ? true : true) ? (
        <div
          data-plasmic-name={"priceParent"}
          data-plasmic-override={overrides.priceParent}
          className={classNames(defaultcss.all, sty.priceParent)}
        >
          <div
            data-plasmic-name={"currencyParent"}
            data-plasmic-override={overrides.currencyParent}
            className={classNames(defaultcss.all, sty.currencyParent)}
          >
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox__lT25
              )}
            >
              {"$"}
            </div>
          </div>

          <div
            data-plasmic-name={"valueServicePrice"}
            data-plasmic-override={overrides.valueServicePrice}
            className={classNames(defaultcss.all, sty.valueServicePrice)}
          >
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox__u8L4Q
              )}
            >
              {"00,000"}
            </div>
          </div>
        </div>
      ) : null}
      {(hasVariant(globalVariants, "screen", "mobile") ? true : true) ? (
        <div
          data-plasmic-name={"termParent"}
          data-plasmic-override={overrides.termParent}
          className={classNames(defaultcss.all, sty.termParent)}
        >
          <TagBadge
            data-plasmic-name={"termSubscription"}
            data-plasmic-override={overrides.termSubscription}
            className={classNames("__wab_instance", sty.termSubscription, {
              [sty.termSubscription__term_annual]: hasVariant(
                variants,
                "term",
                "annual"
              ),
              [sty.termSubscription__term_monthly]: hasVariant(
                variants,
                "term",
                "monthly"
              )
            })}
            textBase10Px={
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.freeBox__hohZn,
                  {
                    [sty.freeBox__term_annual__hohZnj0Y32]: hasVariant(
                      variants,
                      "term",
                      "annual"
                    ),
                    [sty.freeBox__term_monthly__hohZn8FgH5]: hasVariant(
                      variants,
                      "term",
                      "monthly"
                    )
                  }
                )}
              >
                {hasVariant(variants, "term", "annual")
                  ? "Annual"
                  : hasVariant(variants, "term", "monthly")
                  ? "Monthly"
                  : "Term"}
              </div>
            }
            type={
              hasVariant(variants, "term", "annual")
                ? []
                : hasVariant(variants, "term", "monthly")
                ? []
                : []
            }
          />
        </div>
      ) : null}
      {(hasVariant(globalVariants, "screen", "mobile") ? true : true) ? (
        <div
          data-plasmic-name={"expirationDateTimeParent"}
          data-plasmic-override={overrides.expirationDateTimeParent}
          className={classNames(defaultcss.all, sty.expirationDateTimeParent)}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox__rw5T2
            )}
          >
            {"00/00/00"}
          </div>
        </div>
      ) : null}
      {(hasVariant(globalVariants, "screen", "mobile") ? true : true) ? (
        <div
          data-plasmic-name={"autoRenewParent"}
          data-plasmic-override={overrides.autoRenewParent}
          className={classNames(defaultcss.all, sty.autoRenewParent)}
        >
          <SwitchPrimary
            data-plasmic-name={"autoRenew"}
            data-plasmic-override={overrides.autoRenew}
            className={classNames("__wab_instance", sty.autoRenew, {
              [sty.autoRenew__term_annual]: hasVariant(
                variants,
                "term",
                "annual"
              )
            })}
          />
        </div>
      ) : null}
      {(hasVariant(globalVariants, "screen", "mobile") ? true : true) ? (
        <div className={classNames(defaultcss.all, sty.freeBox__cwCrv)}>
          <ButtonCircleDelete
            data-plasmic-name={"archiveListing"}
            data-plasmic-override={overrides.archiveListing}
            className={classNames("__wab_instance", sty.archiveListing, {
              [sty.archiveListing__term_annual]: hasVariant(
                variants,
                "term",
                "annual"
              )
            })}
            size={"_24Px" as const}
          />
        </div>
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "listingSelectImageCaptionEditParent",
    "elementRadioPrimary",
    "imageCaptionParent",
    "imageLinkManageListging",
    "imagePrimary",
    "img",
    "_70X404",
    "serviceListingTitleParent",
    "serviceListingTitle",
    "buttonEditListing",
    "svgIcon22",
    "editIcon",
    "statusParent",
    "status",
    "svgIcon23",
    "toDoParent",
    "toDo",
    "svg",
    "buttonLinkPrimary",
    "modifiedDateTimeParent",
    "categoryParent",
    "category",
    "priceParent",
    "currencyParent",
    "valueServicePrice",
    "termParent",
    "termSubscription",
    "expirationDateTimeParent",
    "autoRenewParent",
    "autoRenew",
    "archiveListing"
  ],
  listingSelectImageCaptionEditParent: [
    "listingSelectImageCaptionEditParent",
    "elementRadioPrimary",
    "imageCaptionParent",
    "imageLinkManageListging",
    "imagePrimary",
    "img",
    "_70X404",
    "serviceListingTitleParent",
    "serviceListingTitle",
    "buttonEditListing",
    "svgIcon22",
    "editIcon"
  ],
  elementRadioPrimary: ["elementRadioPrimary"],
  imageCaptionParent: [
    "imageCaptionParent",
    "imageLinkManageListging",
    "imagePrimary",
    "img",
    "_70X404",
    "serviceListingTitleParent",
    "serviceListingTitle",
    "buttonEditListing",
    "svgIcon22",
    "editIcon"
  ],
  imageLinkManageListging: [
    "imageLinkManageListging",
    "imagePrimary",
    "img",
    "_70X404"
  ],
  imagePrimary: ["imagePrimary", "img", "_70X404"],
  img: ["img"],
  _70X404: ["_70X404"],
  serviceListingTitleParent: [
    "serviceListingTitleParent",
    "serviceListingTitle"
  ],
  serviceListingTitle: ["serviceListingTitle"],
  buttonEditListing: ["buttonEditListing", "svgIcon22", "editIcon"],
  svgIcon22: ["svgIcon22"],
  editIcon: ["editIcon"],
  statusParent: ["statusParent", "status", "svgIcon23"],
  status: ["status", "svgIcon23"],
  svgIcon23: ["svgIcon23"],
  toDoParent: ["toDoParent", "toDo", "svg", "buttonLinkPrimary"],
  toDo: ["toDo", "svg"],
  svg: ["svg"],
  buttonLinkPrimary: ["buttonLinkPrimary"],
  modifiedDateTimeParent: ["modifiedDateTimeParent"],
  categoryParent: ["categoryParent", "category"],
  category: ["category"],
  priceParent: ["priceParent", "currencyParent", "valueServicePrice"],
  currencyParent: ["currencyParent"],
  valueServicePrice: ["valueServicePrice"],
  termParent: ["termParent", "termSubscription"],
  termSubscription: ["termSubscription"],
  expirationDateTimeParent: ["expirationDateTimeParent"],
  autoRenewParent: ["autoRenewParent", "autoRenew"],
  autoRenew: ["autoRenew"],
  archiveListing: ["archiveListing"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  listingSelectImageCaptionEditParent: "div";
  elementRadioPrimary: typeof ElementRadioPrimary;
  imageCaptionParent: "div";
  imageLinkManageListging: "a";
  imagePrimary: typeof ImagePrimary;
  img: "img";
  _70X404: "img";
  serviceListingTitleParent: "div";
  serviceListingTitle: "a";
  buttonEditListing: "a";
  svgIcon22: "svg";
  editIcon: "svg";
  statusParent: "div";
  status: typeof DisplayIconText;
  svgIcon23: "svg";
  toDoParent: "div";
  toDo: typeof ButtonPrimary;
  svg: "svg";
  buttonLinkPrimary: typeof ButtonLinkPrimary;
  modifiedDateTimeParent: "div";
  categoryParent: "div";
  category: typeof TagBadge;
  priceParent: "div";
  currencyParent: "div";
  valueServicePrice: "div";
  termParent: "div";
  termSubscription: typeof TagBadge;
  expirationDateTimeParent: "div";
  autoRenewParent: "div";
  autoRenew: typeof SwitchPrimary;
  archiveListing: typeof ButtonCircleDelete;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTableListingAdminRecord__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTableListingAdminRecord__VariantsArgs;
    args?: PlasmicTableListingAdminRecord__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicTableListingAdminRecord__Fetches;
  } & Omit<PlasmicTableListingAdminRecord__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTableListingAdminRecord__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTableListingAdminRecord__ArgProps,
      internalVariantPropNames: PlasmicTableListingAdminRecord__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicTableListingAdminRecord__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTableListingAdminRecord";
  } else {
    func.displayName = `PlasmicTableListingAdminRecord.${nodeName}`;
  }
  return func;
}

export const PlasmicTableListingAdminRecord = Object.assign(
  // Top-level PlasmicTableListingAdminRecord renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    listingSelectImageCaptionEditParent: makeNodeComponent(
      "listingSelectImageCaptionEditParent"
    ),
    elementRadioPrimary: makeNodeComponent("elementRadioPrimary"),
    imageCaptionParent: makeNodeComponent("imageCaptionParent"),
    imageLinkManageListging: makeNodeComponent("imageLinkManageListging"),
    imagePrimary: makeNodeComponent("imagePrimary"),
    img: makeNodeComponent("img"),
    _70X404: makeNodeComponent("_70X404"),
    serviceListingTitleParent: makeNodeComponent("serviceListingTitleParent"),
    serviceListingTitle: makeNodeComponent("serviceListingTitle"),
    buttonEditListing: makeNodeComponent("buttonEditListing"),
    svgIcon22: makeNodeComponent("svgIcon22"),
    editIcon: makeNodeComponent("editIcon"),
    statusParent: makeNodeComponent("statusParent"),
    status: makeNodeComponent("status"),
    svgIcon23: makeNodeComponent("svgIcon23"),
    toDoParent: makeNodeComponent("toDoParent"),
    toDo: makeNodeComponent("toDo"),
    svg: makeNodeComponent("svg"),
    buttonLinkPrimary: makeNodeComponent("buttonLinkPrimary"),
    modifiedDateTimeParent: makeNodeComponent("modifiedDateTimeParent"),
    categoryParent: makeNodeComponent("categoryParent"),
    category: makeNodeComponent("category"),
    priceParent: makeNodeComponent("priceParent"),
    currencyParent: makeNodeComponent("currencyParent"),
    valueServicePrice: makeNodeComponent("valueServicePrice"),
    termParent: makeNodeComponent("termParent"),
    termSubscription: makeNodeComponent("termSubscription"),
    expirationDateTimeParent: makeNodeComponent("expirationDateTimeParent"),
    autoRenewParent: makeNodeComponent("autoRenewParent"),
    autoRenew: makeNodeComponent("autoRenew"),
    archiveListing: makeNodeComponent("archiveListing"),

    // Metadata about props expected for PlasmicTableListingAdminRecord
    internalVariantProps: PlasmicTableListingAdminRecord__VariantProps,
    internalArgProps: PlasmicTableListingAdminRecord__ArgProps
  }
);

export default PlasmicTableListingAdminRecord;
/* prettier-ignore-end */
