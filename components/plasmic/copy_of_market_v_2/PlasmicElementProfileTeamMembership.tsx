// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: KUQiSRtNSmfvTt
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import UserAvatar from "../../UserAvatar"; // plasmic-import: kWaJrwe3c90GY1/component
import AvatarGroupIncrement from "../../AvatarGroupIncrement"; // plasmic-import: _G7vIao-9ZOCHFa/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: biX3aS42hiG0fF/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicElementProfileTeamMembership.module.css"; // plasmic-import: KUQiSRtNSmfvTt/css

export type PlasmicElementProfileTeamMembership__VariantMembers = {};

export type PlasmicElementProfileTeamMembership__VariantsArgs = {};
type VariantPropType = keyof PlasmicElementProfileTeamMembership__VariantsArgs;
export const PlasmicElementProfileTeamMembership__VariantProps =
  new Array<VariantPropType>();

export type PlasmicElementProfileTeamMembership__ArgsType = {};
type ArgPropType = keyof PlasmicElementProfileTeamMembership__ArgsType;
export const PlasmicElementProfileTeamMembership__ArgProps =
  new Array<ArgPropType>();

export type PlasmicElementProfileTeamMembership__OverridesType = {
  root?: p.Flex<"div">;
  team?: p.Flex<"div">;
  teamMemberparent?: p.Flex<"div">;
  cardTeamMembership?: p.Flex<"div">;
  teamLink?: p.Flex<"a"> & Partial<LinkProps>;
  cardTeamMembership2?: p.Flex<"div">;
  teamLink2?: p.Flex<"a"> & Partial<LinkProps>;
  cardTeamMembership3?: p.Flex<"div">;
  teamLink3?: p.Flex<"a"> & Partial<LinkProps>;
};

export interface DefaultElementProfileTeamMembershipProps {
  className?: string;
}

function PlasmicElementProfileTeamMembership__RenderFunc(props: {
  variants: PlasmicElementProfileTeamMembership__VariantsArgs;
  args: PlasmicElementProfileTeamMembership__ArgsType;
  overrides: PlasmicElementProfileTeamMembership__OverridesType;
  dataFetches?: PlasmicElementProfileTeamMembership__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div
        data-plasmic-name={"team"}
        data-plasmic-override={overrides.team}
        className={classNames(defaultcss.all, sty.team)}
      >
        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.freeBox__frqjm
          )}
        >
          {hasVariant(globalVariants, "screen", "desktop") ? "Team" : "Teams"}
        </div>
      </div>

      <p.Stack
        as={"div"}
        data-plasmic-name={"teamMemberparent"}
        data-plasmic-override={overrides.teamMemberparent}
        hasGap={true}
        className={classNames(defaultcss.all, sty.teamMemberparent)}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"cardTeamMembership"}
          data-plasmic-override={overrides.cardTeamMembership}
          hasGap={true}
          className={classNames(defaultcss.all, sty.cardTeamMembership)}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.freeBox__cavt)}
          >
            <UserAvatar
              className={classNames("__wab_instance", sty.userAvatar__jecZh)}
              navUserAvatar48={
                <img
                  alt={""}
                  className={classNames(defaultcss.img, sty.img__gwPu2)}
                  role={"img"}
                  src={
                    "/plasmic/copy_of_market_v_2/images/fa289C7A182449412Dcfb44D3F2984B7Png.png"
                  }
                />
              }
              size={"_48" as const}
            />

            <p.PlasmicLink
              data-plasmic-name={"teamLink"}
              data-plasmic-override={overrides.teamLink}
              className={classNames(defaultcss.all, sty.teamLink)}
              component={Link}
              platform={"nextjs"}
            >
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.freeBox___7Dsv6
                )}
              >
                {"Craftwerk"}
              </div>
            </p.PlasmicLink>
          </p.Stack>

          <AvatarGroupIncrement
            className={classNames(
              "__wab_instance",
              sty.avatarGroupIncrement___4FNem
            )}
            number={"7"}
          />
        </p.Stack>

        <p.Stack
          as={"div"}
          data-plasmic-name={"cardTeamMembership2"}
          data-plasmic-override={overrides.cardTeamMembership2}
          hasGap={true}
          className={classNames(defaultcss.all, sty.cardTeamMembership2)}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.freeBox__jm8N8)}
          >
            <UserAvatar
              className={classNames("__wab_instance", sty.userAvatar__yBm7J)}
              navUserAvatar48={
                <img
                  alt={""}
                  className={classNames(defaultcss.img, sty.img__rgY3F)}
                  role={"img"}
                  src={
                    "/plasmic/copy_of_market_v_2/images/_466762084Bf3466293Fba47C63Ba55F7Jpg.jpeg"
                  }
                />
              }
              size={"_48" as const}
            />

            <p.PlasmicLink
              data-plasmic-name={"teamLink2"}
              data-plasmic-override={overrides.teamLink2}
              className={classNames(defaultcss.all, sty.teamLink2)}
              component={Link}
              platform={"nextjs"}
            >
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.freeBox__gyr5G
                )}
              >
                {"Zajno"}
              </div>
            </p.PlasmicLink>
          </p.Stack>

          <AvatarGroupIncrement
            className={classNames(
              "__wab_instance",
              sty.avatarGroupIncrement__enpmM
            )}
            number={"9"}
          />
        </p.Stack>

        <p.Stack
          as={"div"}
          data-plasmic-name={"cardTeamMembership3"}
          data-plasmic-override={overrides.cardTeamMembership3}
          hasGap={true}
          className={classNames(defaultcss.all, sty.cardTeamMembership3)}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.freeBox__v5DIb)}
          >
            <UserAvatar
              className={classNames("__wab_instance", sty.userAvatar__pPquH)}
              navUserAvatar48={
                <img
                  alt={""}
                  className={classNames(defaultcss.img, sty.img__pa60J)}
                  role={"img"}
                  src={
                    "/plasmic/copy_of_market_v_2/images/_479E0Aa76Edbad47C51F159Fd88E2Bfapng.png"
                  }
                />
              }
              size={"_48" as const}
            />

            <p.PlasmicLink
              data-plasmic-name={"teamLink3"}
              data-plasmic-override={overrides.teamLink3}
              className={classNames(defaultcss.all, sty.teamLink3)}
              component={Link}
              platform={"nextjs"}
            >
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.freeBox__is6Dr
                )}
              >
                {"Fire Art"}
              </div>
            </p.PlasmicLink>
          </p.Stack>

          <AvatarGroupIncrement
            className={classNames(
              "__wab_instance",
              sty.avatarGroupIncrement__t4HpQ
            )}
            number={"15"}
          />
        </p.Stack>
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "team",
    "teamMemberparent",
    "cardTeamMembership",
    "teamLink",
    "cardTeamMembership2",
    "teamLink2",
    "cardTeamMembership3",
    "teamLink3"
  ],
  team: ["team"],
  teamMemberparent: [
    "teamMemberparent",
    "cardTeamMembership",
    "teamLink",
    "cardTeamMembership2",
    "teamLink2",
    "cardTeamMembership3",
    "teamLink3"
  ],
  cardTeamMembership: ["cardTeamMembership", "teamLink"],
  teamLink: ["teamLink"],
  cardTeamMembership2: ["cardTeamMembership2", "teamLink2"],
  teamLink2: ["teamLink2"],
  cardTeamMembership3: ["cardTeamMembership3", "teamLink3"],
  teamLink3: ["teamLink3"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  team: "div";
  teamMemberparent: "div";
  cardTeamMembership: "div";
  teamLink: "a";
  cardTeamMembership2: "div";
  teamLink2: "a";
  cardTeamMembership3: "div";
  teamLink3: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicElementProfileTeamMembership__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicElementProfileTeamMembership__VariantsArgs;
    args?: PlasmicElementProfileTeamMembership__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicElementProfileTeamMembership__Fetches;
  } & Omit< // Specify variants directly as props
    PlasmicElementProfileTeamMembership__VariantsArgs,
    ReservedPropsType
  > &
    // Specify args directly as props
    Omit<PlasmicElementProfileTeamMembership__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicElementProfileTeamMembership__ArgProps,
      internalVariantPropNames:
        PlasmicElementProfileTeamMembership__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicElementProfileTeamMembership__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicElementProfileTeamMembership";
  } else {
    func.displayName = `PlasmicElementProfileTeamMembership.${nodeName}`;
  }
  return func;
}

export const PlasmicElementProfileTeamMembership = Object.assign(
  // Top-level PlasmicElementProfileTeamMembership renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    team: makeNodeComponent("team"),
    teamMemberparent: makeNodeComponent("teamMemberparent"),
    cardTeamMembership: makeNodeComponent("cardTeamMembership"),
    teamLink: makeNodeComponent("teamLink"),
    cardTeamMembership2: makeNodeComponent("cardTeamMembership2"),
    teamLink2: makeNodeComponent("teamLink2"),
    cardTeamMembership3: makeNodeComponent("cardTeamMembership3"),
    teamLink3: makeNodeComponent("teamLink3"),

    // Metadata about props expected for PlasmicElementProfileTeamMembership
    internalVariantProps: PlasmicElementProfileTeamMembership__VariantProps,
    internalArgProps: PlasmicElementProfileTeamMembership__ArgProps
  }
);

export default PlasmicElementProfileTeamMembership;
/* prettier-ignore-end */
