// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: EjWrDsbRE6oqLjO
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import PanelMemberHeaderButtonSettings from "../../PanelMemberHeaderButtonSettings"; // plasmic-import: -ZEKI7bkf6lSvE9/component
import PanelButtonHeader from "../../PanelButtonHeader"; // plasmic-import: 9I6cKBLOMWVCOTc/component
import PanelCommunityScores from "../../PanelCommunityScores"; // plasmic-import: EB58ZPxwAS2xlPF/component
import PanelMemberSectionMarket from "../../PanelMemberSectionMarket"; // plasmic-import: Eupm_g0xTXvTCBa/component
import PanelMemberSectionMember from "../../PanelMemberSectionMember"; // plasmic-import: 5cYP3DAN9gTD53K/component
import PanelMemberSectionAccount from "../../PanelMemberSectionAccount"; // plasmic-import: DT3IZo3T2FBSUKV/component
import PanelFooter from "../../PanelFooter"; // plasmic-import: Oj9pWcYj7eur42M/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicPanelMember.module.css"; // plasmic-import: EjWrDsbRE6oqLjO/css

export type PlasmicPanelMember__VariantMembers = {};

export type PlasmicPanelMember__VariantsArgs = {};
type VariantPropType = keyof PlasmicPanelMember__VariantsArgs;
export const PlasmicPanelMember__VariantProps = new Array<VariantPropType>();

export type PlasmicPanelMember__ArgsType = {};
type ArgPropType = keyof PlasmicPanelMember__ArgsType;
export const PlasmicPanelMember__ArgProps = new Array<ArgPropType>();

export type PlasmicPanelMember__OverridesType = {
  root?: p.Flex<"div">;
  parent?: p.Flex<"div">;
  headerPanelMainMember?: p.Flex<"div">;
  memberHeaderDisplay?: p.Flex<typeof PanelMemberHeaderButtonSettings>;
  memberButtonHeader?: p.Flex<typeof PanelButtonHeader>;
  memberCommunityScores?: p.Flex<typeof PanelCommunityScores>;
  memberMarket?: p.Flex<typeof PanelMemberSectionMarket>;
  panelMemberSectionMember?: p.Flex<typeof PanelMemberSectionMember>;
  panelMemberSectionAccount?: p.Flex<typeof PanelMemberSectionAccount>;
  panelFooter?: p.Flex<typeof PanelFooter>;
};

export interface DefaultPanelMemberProps {
  className?: string;
}

function PlasmicPanelMember__RenderFunc(props: {
  variants: PlasmicPanelMember__VariantsArgs;
  args: PlasmicPanelMember__ArgsType;
  overrides: PlasmicPanelMember__OverridesType;
  dataFetches?: PlasmicPanelMember__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"parent"}
        data-plasmic-override={overrides.parent}
        hasGap={true}
        className={classNames(defaultcss.all, sty.parent)}
      >
        <div
          data-plasmic-name={"headerPanelMainMember"}
          data-plasmic-override={overrides.headerPanelMainMember}
          className={classNames(defaultcss.all, sty.headerPanelMainMember)}
        >
          <PanelMemberHeaderButtonSettings
            data-plasmic-name={"memberHeaderDisplay"}
            data-plasmic-override={overrides.memberHeaderDisplay}
            className={classNames("__wab_instance", sty.memberHeaderDisplay)}
          />

          <PanelButtonHeader
            data-plasmic-name={"memberButtonHeader"}
            data-plasmic-override={overrides.memberButtonHeader}
            className={classNames("__wab_instance", sty.memberButtonHeader)}
            user={"member" as const}
          />
        </div>

        <PanelCommunityScores
          data-plasmic-name={"memberCommunityScores"}
          data-plasmic-override={overrides.memberCommunityScores}
          className={classNames("__wab_instance", sty.memberCommunityScores)}
          user={"member" as const}
        />

        <PanelMemberSectionMarket
          data-plasmic-name={"memberMarket"}
          data-plasmic-override={overrides.memberMarket}
          className={classNames("__wab_instance", sty.memberMarket)}
        />

        <PanelMemberSectionMember
          data-plasmic-name={"panelMemberSectionMember"}
          data-plasmic-override={overrides.panelMemberSectionMember}
          className={classNames("__wab_instance", sty.panelMemberSectionMember)}
        />

        <PanelMemberSectionAccount
          data-plasmic-name={"panelMemberSectionAccount"}
          data-plasmic-override={overrides.panelMemberSectionAccount}
          className={classNames(
            "__wab_instance",
            sty.panelMemberSectionAccount
          )}
        />

        <PanelFooter
          data-plasmic-name={"panelFooter"}
          data-plasmic-override={overrides.panelFooter}
          className={classNames("__wab_instance", sty.panelFooter)}
        />
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "parent",
    "headerPanelMainMember",
    "memberHeaderDisplay",
    "memberButtonHeader",
    "memberCommunityScores",
    "memberMarket",
    "panelMemberSectionMember",
    "panelMemberSectionAccount",
    "panelFooter"
  ],
  parent: [
    "parent",
    "headerPanelMainMember",
    "memberHeaderDisplay",
    "memberButtonHeader",
    "memberCommunityScores",
    "memberMarket",
    "panelMemberSectionMember",
    "panelMemberSectionAccount",
    "panelFooter"
  ],
  headerPanelMainMember: [
    "headerPanelMainMember",
    "memberHeaderDisplay",
    "memberButtonHeader"
  ],
  memberHeaderDisplay: ["memberHeaderDisplay"],
  memberButtonHeader: ["memberButtonHeader"],
  memberCommunityScores: ["memberCommunityScores"],
  memberMarket: ["memberMarket"],
  panelMemberSectionMember: ["panelMemberSectionMember"],
  panelMemberSectionAccount: ["panelMemberSectionAccount"],
  panelFooter: ["panelFooter"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  parent: "div";
  headerPanelMainMember: "div";
  memberHeaderDisplay: typeof PanelMemberHeaderButtonSettings;
  memberButtonHeader: typeof PanelButtonHeader;
  memberCommunityScores: typeof PanelCommunityScores;
  memberMarket: typeof PanelMemberSectionMarket;
  panelMemberSectionMember: typeof PanelMemberSectionMember;
  panelMemberSectionAccount: typeof PanelMemberSectionAccount;
  panelFooter: typeof PanelFooter;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPanelMember__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPanelMember__VariantsArgs;
    args?: PlasmicPanelMember__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicPanelMember__Fetches;
  } & Omit<PlasmicPanelMember__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPanelMember__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPanelMember__ArgProps,
      internalVariantPropNames: PlasmicPanelMember__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicPanelMember__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPanelMember";
  } else {
    func.displayName = `PlasmicPanelMember.${nodeName}`;
  }
  return func;
}

export const PlasmicPanelMember = Object.assign(
  // Top-level PlasmicPanelMember renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    parent: makeNodeComponent("parent"),
    headerPanelMainMember: makeNodeComponent("headerPanelMainMember"),
    memberHeaderDisplay: makeNodeComponent("memberHeaderDisplay"),
    memberButtonHeader: makeNodeComponent("memberButtonHeader"),
    memberCommunityScores: makeNodeComponent("memberCommunityScores"),
    memberMarket: makeNodeComponent("memberMarket"),
    panelMemberSectionMember: makeNodeComponent("panelMemberSectionMember"),
    panelMemberSectionAccount: makeNodeComponent("panelMemberSectionAccount"),
    panelFooter: makeNodeComponent("panelFooter"),

    // Metadata about props expected for PlasmicPanelMember
    internalVariantProps: PlasmicPanelMember__VariantProps,
    internalArgProps: PlasmicPanelMember__ArgProps
  }
);

export default PlasmicPanelMember;
/* prettier-ignore-end */
