// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: EB58ZPxwAS2xlPF
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import RatingDisplayDetail from "../../RatingDisplayDetail"; // plasmic-import: EZFFldQYBrJIX/component
import TagMemberD from "../../TagMemberD"; // plasmic-import: EwwHW0Pp6J--_CI/component
import TagPartnerD from "../../TagPartnerD"; // plasmic-import: oP3_LL4xXepZaZN/component
import BadgeVerification from "../../BadgeVerification"; // plasmic-import: _0UAhyxjhw8Dnc9/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicPanelCommunityScores.module.css"; // plasmic-import: EB58ZPxwAS2xlPF/css

export type PlasmicPanelCommunityScores__VariantMembers = {
  user: "member" | "partner";
};

export type PlasmicPanelCommunityScores__VariantsArgs = {
  user?: SingleChoiceArg<"member" | "partner">;
};

type VariantPropType = keyof PlasmicPanelCommunityScores__VariantsArgs;
export const PlasmicPanelCommunityScores__VariantProps =
  new Array<VariantPropType>("user");

export type PlasmicPanelCommunityScores__ArgsType = {};
type ArgPropType = keyof PlasmicPanelCommunityScores__ArgsType;
export const PlasmicPanelCommunityScores__ArgProps = new Array<ArgPropType>();

export type PlasmicPanelCommunityScores__OverridesType = {
  root?: p.Flex<"div">;
  headlineParent?: p.Flex<"div">;
  headlineCommunity?: p.Flex<"div">;
  elementUserbadges?: p.Flex<"div">;
  ratingDisplayDetail?: p.Flex<typeof RatingDisplayDetail>;
  tagMemberD?: p.Flex<typeof TagMemberD>;
  tagPartnerD?: p.Flex<typeof TagPartnerD>;
  badgeVerification?: p.Flex<typeof BadgeVerification>;
  elementUserSocialFollowingA?: p.Flex<"div">;
  followingParent2?: p.Flex<"div">;
  followersNumberCount?: p.Flex<"div">;
  followersParent2?: p.Flex<"div">;
  followingNumberCount?: p.Flex<"div">;
  elementMemberSubscriptionsLists?: p.Flex<"div">;
  memberSubscriptionCountParent?: p.Flex<"div">;
  memberSubscriptionNumberCount?: p.Flex<"div">;
  memberListsCountParent?: p.Flex<"div">;
  memberListNumberCount?: p.Flex<"div">;
  elementMemberFollowersTeams?: p.Flex<"div">;
  memberConnectionCountParent?: p.Flex<"div">;
  memberConnectionNumberCount?: p.Flex<"div">;
  memberFollowersCountParent?: p.Flex<"div">;
  memberfollowersNumberCount?: p.Flex<"div">;
  elementUserSocialFollowingB?: p.Flex<"div">;
  followingParent?: p.Flex<"div">;
  memberNumberCount?: p.Flex<"div">;
  followersParent?: p.Flex<"div">;
  partnerNumberCount?: p.Flex<"div">;
  elementPartnerSubscriberReviewsParent?: p.Flex<"div">;
  partnerSubscriberCountParent?: p.Flex<"div">;
  partnerSubscribersNumberCount?: p.Flex<"div">;
  partnerSubscribersText?: p.Flex<"div">;
  partnerTeamReviewCountParent?: p.Flex<"div">;
  partnerReviewsNumberCount?: p.Flex<"div">;
  partnerReviewsText?: p.Flex<"div">;
  elementUserFollowersTeams3?: p.Flex<"div">;
  partnerConnectionsCountParent?: p.Flex<"div">;
  partnerFollowingNumberCount?: p.Flex<"div">;
  partnerConnectionsText?: p.Flex<"div">;
  partnerFollowersCountParent?: p.Flex<"div">;
  partnerfollowersNumberCount?: p.Flex<"div">;
  partnerFollowersText?: p.Flex<"div">;
};

export interface DefaultPanelCommunityScoresProps {
  user?: SingleChoiceArg<"member" | "partner">;
  className?: string;
}

function PlasmicPanelCommunityScores__RenderFunc(props: {
  variants: PlasmicPanelCommunityScores__VariantsArgs;
  args: PlasmicPanelCommunityScores__ArgsType;
  overrides: PlasmicPanelCommunityScores__OverridesType;
  dataFetches?: PlasmicPanelCommunityScores__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__user_member]: hasVariant(variants, "user", "member"),
        [sty.root__user_partner]: hasVariant(variants, "user", "partner")
      })}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"headlineParent"}
        data-plasmic-override={overrides.headlineParent}
        hasGap={true}
        className={classNames(defaultcss.all, sty.headlineParent)}
      >
        <div
          data-plasmic-name={"headlineCommunity"}
          data-plasmic-override={overrides.headlineCommunity}
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.headlineCommunity,
            {
              [sty.headlineCommunity__user_member]: hasVariant(
                variants,
                "user",
                "member"
              ),
              [sty.headlineCommunity__user_partner]: hasVariant(
                variants,
                "user",
                "partner"
              )
            }
          )}
        >
          {"Community"}
        </div>

        <p.Stack
          as={"div"}
          data-plasmic-name={"elementUserbadges"}
          data-plasmic-override={overrides.elementUserbadges}
          hasGap={true}
          className={classNames(defaultcss.all, sty.elementUserbadges, {
            [sty.elementUserbadges__user_partner]: hasVariant(
              variants,
              "user",
              "partner"
            )
          })}
        >
          <RatingDisplayDetail
            data-plasmic-name={"ratingDisplayDetail"}
            data-plasmic-override={overrides.ratingDisplayDetail}
            className={classNames("__wab_instance", sty.ratingDisplayDetail)}
            size={"_16" as const}
          />

          {(hasVariant(variants, "user", "partner") ? false : true) ? (
            <TagMemberD
              data-plasmic-name={"tagMemberD"}
              data-plasmic-override={overrides.tagMemberD}
              className={classNames("__wab_instance", sty.tagMemberD, {
                [sty.tagMemberD__user_member]: hasVariant(
                  variants,
                  "user",
                  "member"
                ),
                [sty.tagMemberD__user_partner]: hasVariant(
                  variants,
                  "user",
                  "partner"
                )
              })}
            />
          ) : null}
          {(hasVariant(variants, "user", "partner") ? true : false) ? (
            <TagPartnerD
              data-plasmic-name={"tagPartnerD"}
              data-plasmic-override={overrides.tagPartnerD}
              className={classNames("__wab_instance", sty.tagPartnerD, {
                [sty.tagPartnerD__user_partner]: hasVariant(
                  variants,
                  "user",
                  "partner"
                )
              })}
            />
          ) : null}

          <BadgeVerification
            data-plasmic-name={"badgeVerification"}
            data-plasmic-override={overrides.badgeVerification}
            className={classNames("__wab_instance", sty.badgeVerification)}
          />
        </p.Stack>
      </p.Stack>

      {(
        hasVariant(variants, "user", "partner")
          ? false
          : hasVariant(variants, "user", "member")
          ? false
          : true
      ) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"elementUserSocialFollowingA"}
          data-plasmic-override={overrides.elementUserSocialFollowingA}
          hasGap={true}
          className={classNames(
            defaultcss.all,
            sty.elementUserSocialFollowingA,
            {
              [sty.elementUserSocialFollowingA__user_member]: hasVariant(
                variants,
                "user",
                "member"
              ),
              [sty.elementUserSocialFollowingA__user_partner]: hasVariant(
                variants,
                "user",
                "partner"
              )
            }
          )}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"followingParent2"}
            data-plasmic-override={overrides.followingParent2}
            hasGap={true}
            className={classNames(defaultcss.all, sty.followingParent2, {
              [sty.followingParent2__user_member]: hasVariant(
                variants,
                "user",
                "member"
              )
            })}
          >
            <div
              data-plasmic-name={"followersNumberCount"}
              data-plasmic-override={overrides.followersNumberCount}
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.followersNumberCount
              )}
            >
              {"-"}
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox__xMJyH
              )}
            >
              {"Followers"}
            </div>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"followersParent2"}
            data-plasmic-override={overrides.followersParent2}
            hasGap={true}
            className={classNames(defaultcss.all, sty.followersParent2)}
          >
            <div
              data-plasmic-name={"followingNumberCount"}
              data-plasmic-override={overrides.followingNumberCount}
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.followingNumberCount
              )}
            >
              {"-"}
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox__h0Lll,
                {
                  [sty.freeBox__user_member__h0Lllu1Eja]: hasVariant(
                    variants,
                    "user",
                    "member"
                  )
                }
              )}
            >
              {hasVariant(variants, "user", "member") ? "Teams" : "Following"}
            </div>
          </p.Stack>
        </p.Stack>
      ) : null}
      {(hasVariant(variants, "user", "member") ? true : false) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"elementMemberSubscriptionsLists"}
          data-plasmic-override={overrides.elementMemberSubscriptionsLists}
          hasGap={true}
          className={classNames(
            defaultcss.all,
            sty.elementMemberSubscriptionsLists,
            {
              [sty.elementMemberSubscriptionsLists__user_member]: hasVariant(
                variants,
                "user",
                "member"
              ),
              [sty.elementMemberSubscriptionsLists__user_partner]: hasVariant(
                variants,
                "user",
                "partner"
              )
            }
          )}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"memberSubscriptionCountParent"}
            data-plasmic-override={overrides.memberSubscriptionCountParent}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              sty.memberSubscriptionCountParent,
              {
                [sty.memberSubscriptionCountParent__user_member]: hasVariant(
                  variants,
                  "user",
                  "member"
                )
              }
            )}
          >
            <div
              data-plasmic-name={"memberSubscriptionNumberCount"}
              data-plasmic-override={overrides.memberSubscriptionNumberCount}
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.memberSubscriptionNumberCount,
                {
                  [sty.memberSubscriptionNumberCount__user_member]: hasVariant(
                    variants,
                    "user",
                    "member"
                  ),
                  [sty.memberSubscriptionNumberCount__user_partner]: hasVariant(
                    variants,
                    "user",
                    "partner"
                  )
                }
              )}
            >
              {hasVariant(variants, "user", "member") ? "#####" : "278"}
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox__womKz,
                {
                  [sty.freeBox__user_member__womKzU1Eja]: hasVariant(
                    variants,
                    "user",
                    "member"
                  )
                }
              )}
            >
              {hasVariant(variants, "user", "member")
                ? "Subscriptions"
                : "Members"}
            </div>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"memberListsCountParent"}
            data-plasmic-override={overrides.memberListsCountParent}
            hasGap={true}
            className={classNames(defaultcss.all, sty.memberListsCountParent, {
              [sty.memberListsCountParent__user_member]: hasVariant(
                variants,
                "user",
                "member"
              )
            })}
          >
            <div
              data-plasmic-name={"memberListNumberCount"}
              data-plasmic-override={overrides.memberListNumberCount}
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.memberListNumberCount,
                {
                  [sty.memberListNumberCount__user_member]: hasVariant(
                    variants,
                    "user",
                    "member"
                  )
                }
              )}
            >
              {hasVariant(variants, "user", "member") ? "#####" : "12"}
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox__kkjs1,
                {
                  [sty.freeBox__user_member__kkjs1U1Eja]: hasVariant(
                    variants,
                    "user",
                    "member"
                  )
                }
              )}
            >
              {hasVariant(variants, "user", "member") ? "Lists" : "Partners"}
            </div>
          </p.Stack>
        </p.Stack>
      ) : null}
      {(hasVariant(variants, "user", "member") ? true : false) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"elementMemberFollowersTeams"}
          data-plasmic-override={overrides.elementMemberFollowersTeams}
          hasGap={true}
          className={classNames(
            defaultcss.all,
            sty.elementMemberFollowersTeams,
            {
              [sty.elementMemberFollowersTeams__user_member]: hasVariant(
                variants,
                "user",
                "member"
              )
            }
          )}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"memberConnectionCountParent"}
            data-plasmic-override={overrides.memberConnectionCountParent}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              sty.memberConnectionCountParent,
              {
                [sty.memberConnectionCountParent__user_member]: hasVariant(
                  variants,
                  "user",
                  "member"
                )
              }
            )}
          >
            <div
              data-plasmic-name={"memberConnectionNumberCount"}
              data-plasmic-override={overrides.memberConnectionNumberCount}
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.memberConnectionNumberCount,
                {
                  [sty.memberConnectionNumberCount__user_member]: hasVariant(
                    variants,
                    "user",
                    "member"
                  )
                }
              )}
            >
              {hasVariant(variants, "user", "member") ? "#####" : "8"}
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox__amfEx,
                {
                  [sty.freeBox__user_member__amfExU1Eja]: hasVariant(
                    variants,
                    "user",
                    "member"
                  )
                }
              )}
            >
              {hasVariant(variants, "user", "member") ? "Teams" : "Connections"}
            </div>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"memberFollowersCountParent"}
            data-plasmic-override={overrides.memberFollowersCountParent}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              sty.memberFollowersCountParent,
              {
                [sty.memberFollowersCountParent__user_member]: hasVariant(
                  variants,
                  "user",
                  "member"
                )
              }
            )}
          >
            <div
              data-plasmic-name={"memberfollowersNumberCount"}
              data-plasmic-override={overrides.memberfollowersNumberCount}
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.memberfollowersNumberCount,
                {
                  [sty.memberfollowersNumberCount__user_member]: hasVariant(
                    variants,
                    "user",
                    "member"
                  )
                }
              )}
            >
              {hasVariant(variants, "user", "member") ? "#####" : "10k"}
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox__xcVVi,
                {
                  [sty.freeBox__user_member__xcVViU1Eja]: hasVariant(
                    variants,
                    "user",
                    "member"
                  )
                }
              )}
            >
              {"Followers"}
            </div>
          </p.Stack>
        </p.Stack>
      ) : null}
      {(
        hasVariant(variants, "user", "partner")
          ? false
          : hasVariant(variants, "user", "member")
          ? false
          : true
      ) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"elementUserSocialFollowingB"}
          data-plasmic-override={overrides.elementUserSocialFollowingB}
          hasGap={true}
          className={classNames(
            defaultcss.all,
            sty.elementUserSocialFollowingB,
            {
              [sty.elementUserSocialFollowingB__user_member]: hasVariant(
                variants,
                "user",
                "member"
              ),
              [sty.elementUserSocialFollowingB__user_partner]: hasVariant(
                variants,
                "user",
                "partner"
              )
            }
          )}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"followingParent"}
            data-plasmic-override={overrides.followingParent}
            hasGap={true}
            className={classNames(defaultcss.all, sty.followingParent)}
          >
            <div
              data-plasmic-name={"memberNumberCount"}
              data-plasmic-override={overrides.memberNumberCount}
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.memberNumberCount
              )}
            >
              {"-"}
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox__sf41,
                {
                  [sty.freeBox__user_member__sf41U1Eja]: hasVariant(
                    variants,
                    "user",
                    "member"
                  )
                }
              )}
            >
              {hasVariant(variants, "user", "member")
                ? "Subscriptions"
                : "Members"}
            </div>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"followersParent"}
            data-plasmic-override={overrides.followersParent}
            hasGap={true}
            className={classNames(defaultcss.all, sty.followersParent, {
              [sty.followersParent__user_member]: hasVariant(
                variants,
                "user",
                "member"
              ),
              [sty.followersParent__user_partner]: hasVariant(
                variants,
                "user",
                "partner"
              )
            })}
          >
            <div
              data-plasmic-name={"partnerNumberCount"}
              data-plasmic-override={overrides.partnerNumberCount}
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.partnerNumberCount
              )}
            >
              {"-"}
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox__kitBd,
                {
                  [sty.freeBox__user_member__kitBdU1Eja]: hasVariant(
                    variants,
                    "user",
                    "member"
                  )
                }
              )}
            >
              {hasVariant(variants, "user", "member") ? "Lists" : "Partners"}
            </div>
          </p.Stack>
        </p.Stack>
      ) : null}
      {(
        hasVariant(variants, "user", "partner")
          ? true
          : hasVariant(variants, "user", "member")
          ? false
          : false
      ) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"elementPartnerSubscriberReviewsParent"}
          data-plasmic-override={
            overrides.elementPartnerSubscriberReviewsParent
          }
          hasGap={true}
          className={classNames(
            defaultcss.all,
            sty.elementPartnerSubscriberReviewsParent,
            {
              [sty.elementPartnerSubscriberReviewsParent__user_member]:
                hasVariant(variants, "user", "member"),
              [sty.elementPartnerSubscriberReviewsParent__user_partner]:
                hasVariant(variants, "user", "partner")
            }
          )}
        >
          {(hasVariant(variants, "user", "member") ? false : true) ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"partnerSubscriberCountParent"}
              data-plasmic-override={overrides.partnerSubscriberCountParent}
              hasGap={true}
              className={classNames(
                defaultcss.all,
                sty.partnerSubscriberCountParent,
                {
                  [sty.partnerSubscriberCountParent__user_member]: hasVariant(
                    variants,
                    "user",
                    "member"
                  ),
                  [sty.partnerSubscriberCountParent__user_partner]: hasVariant(
                    variants,
                    "user",
                    "partner"
                  )
                }
              )}
            >
              <div
                data-plasmic-name={"partnerSubscribersNumberCount"}
                data-plasmic-override={overrides.partnerSubscribersNumberCount}
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.partnerSubscribersNumberCount,
                  {
                    [sty.partnerSubscribersNumberCount__user_member]:
                      hasVariant(variants, "user", "member"),
                    [sty.partnerSubscribersNumberCount__user_partner]:
                      hasVariant(variants, "user", "partner")
                  }
                )}
              >
                {hasVariant(variants, "user", "partner") ? "#####" : "-"}
              </div>

              <div
                data-plasmic-name={"partnerSubscribersText"}
                data-plasmic-override={overrides.partnerSubscribersText}
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.partnerSubscribersText,
                  {
                    [sty.partnerSubscribersText__user_member]: hasVariant(
                      variants,
                      "user",
                      "member"
                    ),
                    [sty.partnerSubscribersText__user_partner]: hasVariant(
                      variants,
                      "user",
                      "partner"
                    )
                  }
                )}
              >
                {hasVariant(variants, "user", "partner")
                  ? "Subscribers"
                  : "Followers"}
              </div>
            </p.Stack>
          ) : null}
          {(hasVariant(variants, "user", "member") ? false : true) ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"partnerTeamReviewCountParent"}
              data-plasmic-override={overrides.partnerTeamReviewCountParent}
              hasGap={true}
              className={classNames(
                defaultcss.all,
                sty.partnerTeamReviewCountParent,
                {
                  [sty.partnerTeamReviewCountParent__user_member]: hasVariant(
                    variants,
                    "user",
                    "member"
                  ),
                  [sty.partnerTeamReviewCountParent__user_partner]: hasVariant(
                    variants,
                    "user",
                    "partner"
                  )
                }
              )}
            >
              <div
                data-plasmic-name={"partnerReviewsNumberCount"}
                data-plasmic-override={overrides.partnerReviewsNumberCount}
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.partnerReviewsNumberCount,
                  {
                    [sty.partnerReviewsNumberCount__user_member]: hasVariant(
                      variants,
                      "user",
                      "member"
                    ),
                    [sty.partnerReviewsNumberCount__user_partner]: hasVariant(
                      variants,
                      "user",
                      "partner"
                    )
                  }
                )}
              >
                {hasVariant(variants, "user", "partner") ? "#####" : "-"}
              </div>

              <div
                data-plasmic-name={"partnerReviewsText"}
                data-plasmic-override={overrides.partnerReviewsText}
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.partnerReviewsText,
                  {
                    [sty.partnerReviewsText__user_member]: hasVariant(
                      variants,
                      "user",
                      "member"
                    ),
                    [sty.partnerReviewsText__user_partner]: hasVariant(
                      variants,
                      "user",
                      "partner"
                    )
                  }
                )}
              >
                {hasVariant(variants, "user", "partner")
                  ? "Reviews"
                  : hasVariant(variants, "user", "member")
                  ? "Teams"
                  : "Following"}
              </div>
            </p.Stack>
          ) : null}
        </p.Stack>
      ) : null}
      {(
        hasVariant(variants, "user", "partner")
          ? true
          : hasVariant(variants, "user", "member")
          ? false
          : false
      ) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"elementUserFollowersTeams3"}
          data-plasmic-override={overrides.elementUserFollowersTeams3}
          hasGap={true}
          className={classNames(
            defaultcss.all,
            sty.elementUserFollowersTeams3,
            {
              [sty.elementUserFollowersTeams3__user_member]: hasVariant(
                variants,
                "user",
                "member"
              ),
              [sty.elementUserFollowersTeams3__user_partner]: hasVariant(
                variants,
                "user",
                "partner"
              )
            }
          )}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"partnerConnectionsCountParent"}
            data-plasmic-override={overrides.partnerConnectionsCountParent}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              sty.partnerConnectionsCountParent,
              {
                [sty.partnerConnectionsCountParent__user_member]: hasVariant(
                  variants,
                  "user",
                  "member"
                ),
                [sty.partnerConnectionsCountParent__user_partner]: hasVariant(
                  variants,
                  "user",
                  "partner"
                )
              }
            )}
          >
            <div
              data-plasmic-name={"partnerFollowingNumberCount"}
              data-plasmic-override={overrides.partnerFollowingNumberCount}
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.partnerFollowingNumberCount,
                {
                  [sty.partnerFollowingNumberCount__user_member]: hasVariant(
                    variants,
                    "user",
                    "member"
                  ),
                  [sty.partnerFollowingNumberCount__user_partner]: hasVariant(
                    variants,
                    "user",
                    "partner"
                  )
                }
              )}
            >
              {hasVariant(variants, "user", "partner") ? "#####" : "-"}
            </div>

            <div
              data-plasmic-name={"partnerConnectionsText"}
              data-plasmic-override={overrides.partnerConnectionsText}
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.partnerConnectionsText,
                {
                  [sty.partnerConnectionsText__user_member]: hasVariant(
                    variants,
                    "user",
                    "member"
                  ),
                  [sty.partnerConnectionsText__user_partner]: hasVariant(
                    variants,
                    "user",
                    "partner"
                  )
                }
              )}
            >
              {hasVariant(variants, "user", "partner")
                ? "Members"
                : hasVariant(variants, "user", "member")
                ? "Teams"
                : "Members"}
            </div>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"partnerFollowersCountParent"}
            data-plasmic-override={overrides.partnerFollowersCountParent}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              sty.partnerFollowersCountParent,
              {
                [sty.partnerFollowersCountParent__user_member]: hasVariant(
                  variants,
                  "user",
                  "member"
                ),
                [sty.partnerFollowersCountParent__user_partner]: hasVariant(
                  variants,
                  "user",
                  "partner"
                )
              }
            )}
          >
            <div
              data-plasmic-name={"partnerfollowersNumberCount"}
              data-plasmic-override={overrides.partnerfollowersNumberCount}
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.partnerfollowersNumberCount,
                {
                  [sty.partnerfollowersNumberCount__user_member]: hasVariant(
                    variants,
                    "user",
                    "member"
                  ),
                  [sty.partnerfollowersNumberCount__user_partner]: hasVariant(
                    variants,
                    "user",
                    "partner"
                  )
                }
              )}
            >
              {hasVariant(variants, "user", "partner") ? "#####" : "-"}
            </div>

            <div
              data-plasmic-name={"partnerFollowersText"}
              data-plasmic-override={overrides.partnerFollowersText}
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.partnerFollowersText,
                {
                  [sty.partnerFollowersText__user_member]: hasVariant(
                    variants,
                    "user",
                    "member"
                  ),
                  [sty.partnerFollowersText__user_partner]: hasVariant(
                    variants,
                    "user",
                    "partner"
                  )
                }
              )}
            >
              {hasVariant(variants, "user", "partner")
                ? "Followers"
                : "Followers"}
            </div>
          </p.Stack>
        </p.Stack>
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "headlineParent",
    "headlineCommunity",
    "elementUserbadges",
    "ratingDisplayDetail",
    "tagMemberD",
    "tagPartnerD",
    "badgeVerification",
    "elementUserSocialFollowingA",
    "followingParent2",
    "followersNumberCount",
    "followersParent2",
    "followingNumberCount",
    "elementMemberSubscriptionsLists",
    "memberSubscriptionCountParent",
    "memberSubscriptionNumberCount",
    "memberListsCountParent",
    "memberListNumberCount",
    "elementMemberFollowersTeams",
    "memberConnectionCountParent",
    "memberConnectionNumberCount",
    "memberFollowersCountParent",
    "memberfollowersNumberCount",
    "elementUserSocialFollowingB",
    "followingParent",
    "memberNumberCount",
    "followersParent",
    "partnerNumberCount",
    "elementPartnerSubscriberReviewsParent",
    "partnerSubscriberCountParent",
    "partnerSubscribersNumberCount",
    "partnerSubscribersText",
    "partnerTeamReviewCountParent",
    "partnerReviewsNumberCount",
    "partnerReviewsText",
    "elementUserFollowersTeams3",
    "partnerConnectionsCountParent",
    "partnerFollowingNumberCount",
    "partnerConnectionsText",
    "partnerFollowersCountParent",
    "partnerfollowersNumberCount",
    "partnerFollowersText"
  ],
  headlineParent: [
    "headlineParent",
    "headlineCommunity",
    "elementUserbadges",
    "ratingDisplayDetail",
    "tagMemberD",
    "tagPartnerD",
    "badgeVerification"
  ],
  headlineCommunity: ["headlineCommunity"],
  elementUserbadges: [
    "elementUserbadges",
    "ratingDisplayDetail",
    "tagMemberD",
    "tagPartnerD",
    "badgeVerification"
  ],
  ratingDisplayDetail: ["ratingDisplayDetail"],
  tagMemberD: ["tagMemberD"],
  tagPartnerD: ["tagPartnerD"],
  badgeVerification: ["badgeVerification"],
  elementUserSocialFollowingA: [
    "elementUserSocialFollowingA",
    "followingParent2",
    "followersNumberCount",
    "followersParent2",
    "followingNumberCount"
  ],
  followingParent2: ["followingParent2", "followersNumberCount"],
  followersNumberCount: ["followersNumberCount"],
  followersParent2: ["followersParent2", "followingNumberCount"],
  followingNumberCount: ["followingNumberCount"],
  elementMemberSubscriptionsLists: [
    "elementMemberSubscriptionsLists",
    "memberSubscriptionCountParent",
    "memberSubscriptionNumberCount",
    "memberListsCountParent",
    "memberListNumberCount"
  ],
  memberSubscriptionCountParent: [
    "memberSubscriptionCountParent",
    "memberSubscriptionNumberCount"
  ],
  memberSubscriptionNumberCount: ["memberSubscriptionNumberCount"],
  memberListsCountParent: ["memberListsCountParent", "memberListNumberCount"],
  memberListNumberCount: ["memberListNumberCount"],
  elementMemberFollowersTeams: [
    "elementMemberFollowersTeams",
    "memberConnectionCountParent",
    "memberConnectionNumberCount",
    "memberFollowersCountParent",
    "memberfollowersNumberCount"
  ],
  memberConnectionCountParent: [
    "memberConnectionCountParent",
    "memberConnectionNumberCount"
  ],
  memberConnectionNumberCount: ["memberConnectionNumberCount"],
  memberFollowersCountParent: [
    "memberFollowersCountParent",
    "memberfollowersNumberCount"
  ],
  memberfollowersNumberCount: ["memberfollowersNumberCount"],
  elementUserSocialFollowingB: [
    "elementUserSocialFollowingB",
    "followingParent",
    "memberNumberCount",
    "followersParent",
    "partnerNumberCount"
  ],
  followingParent: ["followingParent", "memberNumberCount"],
  memberNumberCount: ["memberNumberCount"],
  followersParent: ["followersParent", "partnerNumberCount"],
  partnerNumberCount: ["partnerNumberCount"],
  elementPartnerSubscriberReviewsParent: [
    "elementPartnerSubscriberReviewsParent",
    "partnerSubscriberCountParent",
    "partnerSubscribersNumberCount",
    "partnerSubscribersText",
    "partnerTeamReviewCountParent",
    "partnerReviewsNumberCount",
    "partnerReviewsText"
  ],
  partnerSubscriberCountParent: [
    "partnerSubscriberCountParent",
    "partnerSubscribersNumberCount",
    "partnerSubscribersText"
  ],
  partnerSubscribersNumberCount: ["partnerSubscribersNumberCount"],
  partnerSubscribersText: ["partnerSubscribersText"],
  partnerTeamReviewCountParent: [
    "partnerTeamReviewCountParent",
    "partnerReviewsNumberCount",
    "partnerReviewsText"
  ],
  partnerReviewsNumberCount: ["partnerReviewsNumberCount"],
  partnerReviewsText: ["partnerReviewsText"],
  elementUserFollowersTeams3: [
    "elementUserFollowersTeams3",
    "partnerConnectionsCountParent",
    "partnerFollowingNumberCount",
    "partnerConnectionsText",
    "partnerFollowersCountParent",
    "partnerfollowersNumberCount",
    "partnerFollowersText"
  ],
  partnerConnectionsCountParent: [
    "partnerConnectionsCountParent",
    "partnerFollowingNumberCount",
    "partnerConnectionsText"
  ],
  partnerFollowingNumberCount: ["partnerFollowingNumberCount"],
  partnerConnectionsText: ["partnerConnectionsText"],
  partnerFollowersCountParent: [
    "partnerFollowersCountParent",
    "partnerfollowersNumberCount",
    "partnerFollowersText"
  ],
  partnerfollowersNumberCount: ["partnerfollowersNumberCount"],
  partnerFollowersText: ["partnerFollowersText"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  headlineParent: "div";
  headlineCommunity: "div";
  elementUserbadges: "div";
  ratingDisplayDetail: typeof RatingDisplayDetail;
  tagMemberD: typeof TagMemberD;
  tagPartnerD: typeof TagPartnerD;
  badgeVerification: typeof BadgeVerification;
  elementUserSocialFollowingA: "div";
  followingParent2: "div";
  followersNumberCount: "div";
  followersParent2: "div";
  followingNumberCount: "div";
  elementMemberSubscriptionsLists: "div";
  memberSubscriptionCountParent: "div";
  memberSubscriptionNumberCount: "div";
  memberListsCountParent: "div";
  memberListNumberCount: "div";
  elementMemberFollowersTeams: "div";
  memberConnectionCountParent: "div";
  memberConnectionNumberCount: "div";
  memberFollowersCountParent: "div";
  memberfollowersNumberCount: "div";
  elementUserSocialFollowingB: "div";
  followingParent: "div";
  memberNumberCount: "div";
  followersParent: "div";
  partnerNumberCount: "div";
  elementPartnerSubscriberReviewsParent: "div";
  partnerSubscriberCountParent: "div";
  partnerSubscribersNumberCount: "div";
  partnerSubscribersText: "div";
  partnerTeamReviewCountParent: "div";
  partnerReviewsNumberCount: "div";
  partnerReviewsText: "div";
  elementUserFollowersTeams3: "div";
  partnerConnectionsCountParent: "div";
  partnerFollowingNumberCount: "div";
  partnerConnectionsText: "div";
  partnerFollowersCountParent: "div";
  partnerfollowersNumberCount: "div";
  partnerFollowersText: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPanelCommunityScores__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPanelCommunityScores__VariantsArgs;
    args?: PlasmicPanelCommunityScores__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicPanelCommunityScores__Fetches;
  } & Omit<PlasmicPanelCommunityScores__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPanelCommunityScores__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPanelCommunityScores__ArgProps,
      internalVariantPropNames: PlasmicPanelCommunityScores__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicPanelCommunityScores__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPanelCommunityScores";
  } else {
    func.displayName = `PlasmicPanelCommunityScores.${nodeName}`;
  }
  return func;
}

export const PlasmicPanelCommunityScores = Object.assign(
  // Top-level PlasmicPanelCommunityScores renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headlineParent: makeNodeComponent("headlineParent"),
    headlineCommunity: makeNodeComponent("headlineCommunity"),
    elementUserbadges: makeNodeComponent("elementUserbadges"),
    ratingDisplayDetail: makeNodeComponent("ratingDisplayDetail"),
    tagMemberD: makeNodeComponent("tagMemberD"),
    tagPartnerD: makeNodeComponent("tagPartnerD"),
    badgeVerification: makeNodeComponent("badgeVerification"),
    elementUserSocialFollowingA: makeNodeComponent(
      "elementUserSocialFollowingA"
    ),
    followingParent2: makeNodeComponent("followingParent2"),
    followersNumberCount: makeNodeComponent("followersNumberCount"),
    followersParent2: makeNodeComponent("followersParent2"),
    followingNumberCount: makeNodeComponent("followingNumberCount"),
    elementMemberSubscriptionsLists: makeNodeComponent(
      "elementMemberSubscriptionsLists"
    ),
    memberSubscriptionCountParent: makeNodeComponent(
      "memberSubscriptionCountParent"
    ),
    memberSubscriptionNumberCount: makeNodeComponent(
      "memberSubscriptionNumberCount"
    ),
    memberListsCountParent: makeNodeComponent("memberListsCountParent"),
    memberListNumberCount: makeNodeComponent("memberListNumberCount"),
    elementMemberFollowersTeams: makeNodeComponent(
      "elementMemberFollowersTeams"
    ),
    memberConnectionCountParent: makeNodeComponent(
      "memberConnectionCountParent"
    ),
    memberConnectionNumberCount: makeNodeComponent(
      "memberConnectionNumberCount"
    ),
    memberFollowersCountParent: makeNodeComponent("memberFollowersCountParent"),
    memberfollowersNumberCount: makeNodeComponent("memberfollowersNumberCount"),
    elementUserSocialFollowingB: makeNodeComponent(
      "elementUserSocialFollowingB"
    ),
    followingParent: makeNodeComponent("followingParent"),
    memberNumberCount: makeNodeComponent("memberNumberCount"),
    followersParent: makeNodeComponent("followersParent"),
    partnerNumberCount: makeNodeComponent("partnerNumberCount"),
    elementPartnerSubscriberReviewsParent: makeNodeComponent(
      "elementPartnerSubscriberReviewsParent"
    ),
    partnerSubscriberCountParent: makeNodeComponent(
      "partnerSubscriberCountParent"
    ),
    partnerSubscribersNumberCount: makeNodeComponent(
      "partnerSubscribersNumberCount"
    ),
    partnerSubscribersText: makeNodeComponent("partnerSubscribersText"),
    partnerTeamReviewCountParent: makeNodeComponent(
      "partnerTeamReviewCountParent"
    ),
    partnerReviewsNumberCount: makeNodeComponent("partnerReviewsNumberCount"),
    partnerReviewsText: makeNodeComponent("partnerReviewsText"),
    elementUserFollowersTeams3: makeNodeComponent("elementUserFollowersTeams3"),
    partnerConnectionsCountParent: makeNodeComponent(
      "partnerConnectionsCountParent"
    ),
    partnerFollowingNumberCount: makeNodeComponent(
      "partnerFollowingNumberCount"
    ),
    partnerConnectionsText: makeNodeComponent("partnerConnectionsText"),
    partnerFollowersCountParent: makeNodeComponent(
      "partnerFollowersCountParent"
    ),
    partnerfollowersNumberCount: makeNodeComponent(
      "partnerfollowersNumberCount"
    ),
    partnerFollowersText: makeNodeComponent("partnerFollowersText"),

    // Metadata about props expected for PlasmicPanelCommunityScores
    internalVariantProps: PlasmicPanelCommunityScores__VariantProps,
    internalArgProps: PlasmicPanelCommunityScores__ArgProps
  }
);

export default PlasmicPanelCommunityScores;
/* prettier-ignore-end */
