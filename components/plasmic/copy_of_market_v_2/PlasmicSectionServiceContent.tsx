// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: NG21lYfED6DcwS
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import InputCardNumberField from "../../InputCardNumberField"; // plasmic-import: BOpGfj7CC1w-6t/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicSectionServiceContent.module.css"; // plasmic-import: NG21lYfED6DcwS/css

export type PlasmicSectionServiceContent__VariantMembers = {
  breadcrumbs: "breadcrumbs";
  serviceType:
    | "slidePresentation"
    | "designSystem"
    | "userResearch"
    | "prototype"
    | "wireframes"
    | "usabilityTesting"
    | "webSinglePage"
    | "webMultiplePage"
    | "webEcommerce"
    | "mobile"
    | "mobileCommerce";
};

export type PlasmicSectionServiceContent__VariantsArgs = {
  breadcrumbs?: SingleBooleanChoiceArg<"breadcrumbs">;
  serviceType?: SingleChoiceArg<
    | "slidePresentation"
    | "designSystem"
    | "userResearch"
    | "prototype"
    | "wireframes"
    | "usabilityTesting"
    | "webSinglePage"
    | "webMultiplePage"
    | "webEcommerce"
    | "mobile"
    | "mobileCommerce"
  >;
};

type VariantPropType = keyof PlasmicSectionServiceContent__VariantsArgs;
export const PlasmicSectionServiceContent__VariantProps =
  new Array<VariantPropType>("breadcrumbs", "serviceType");

export type PlasmicSectionServiceContent__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicSectionServiceContent__ArgsType;
export const PlasmicSectionServiceContent__ArgProps = new Array<ArgPropType>(
  "children"
);

export type PlasmicSectionServiceContent__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultSectionServiceContentProps {
  children?: React.ReactNode;
  breadcrumbs?: SingleBooleanChoiceArg<"breadcrumbs">;
  serviceType?: SingleChoiceArg<
    | "slidePresentation"
    | "designSystem"
    | "userResearch"
    | "prototype"
    | "wireframes"
    | "usabilityTesting"
    | "webSinglePage"
    | "webMultiplePage"
    | "webEcommerce"
    | "mobile"
    | "mobileCommerce"
  >;
  className?: string;
}

function PlasmicSectionServiceContent__RenderFunc(props: {
  variants: PlasmicSectionServiceContent__VariantsArgs;
  args: PlasmicSectionServiceContent__ArgsType;
  overrides: PlasmicSectionServiceContent__OverridesType;
  dataFetches?: PlasmicSectionServiceContent__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      {(hasVariant(variants, "breadcrumbs", "breadcrumbs") ? false : true)
        ? p.renderPlasmicSlot({
            defaultContents: hasVariant(
              variants,
              "serviceType",
              "webMultiplePage"
            )
              ? "Web | Application | Multi-page"
              : hasVariant(variants, "serviceType", "webSinglePage")
              ? "Web | Application | Single page"
              : hasVariant(variants, "serviceType", "usabilityTesting")
              ? "UX Design | Usability"
              : hasVariant(variants, "serviceType", "wireframes")
              ? "UX Design | Wireframes"
              : hasVariant(variants, "serviceType", "prototype")
              ? "UX Design | Prototype"
              : hasVariant(variants, "serviceType", "userResearch")
              ? "UX Design | User Research"
              : hasVariant(variants, "serviceType", "designSystem")
              ? "Brand Design | Design System"
              : hasVariant(variants, "serviceType", "slidePresentation")
              ? "Brand Design | Presentation"
              : hasVariant(variants, "serviceType", "mobileCommerce")
              ? "Mobile | Application | Ecommerce"
              : hasVariant(variants, "serviceType", "mobile")
              ? "Mobile | application"
              : hasVariant(variants, "serviceType", "webEcommerce")
              ? "Web | Application | Multi-page"
              : "Web | Application | Multi-Screen",
            value: args.children,
            className: classNames(sty.slotChildren, {
              [sty.slotChildren__breadcrumbs]: hasVariant(
                variants,
                "breadcrumbs",
                "breadcrumbs"
              ),
              [sty.slotChildren__serviceType_designSystem]: hasVariant(
                variants,
                "serviceType",
                "designSystem"
              ),
              [sty.slotChildren__serviceType_mobileCommerce]: hasVariant(
                variants,
                "serviceType",
                "mobileCommerce"
              ),
              [sty.slotChildren__serviceType_mobile]: hasVariant(
                variants,
                "serviceType",
                "mobile"
              ),
              [sty.slotChildren__serviceType_prototype]: hasVariant(
                variants,
                "serviceType",
                "prototype"
              ),
              [sty.slotChildren__serviceType_slidePresentation]: hasVariant(
                variants,
                "serviceType",
                "slidePresentation"
              ),
              [sty.slotChildren__serviceType_usabilityTesting]: hasVariant(
                variants,
                "serviceType",
                "usabilityTesting"
              ),
              [sty.slotChildren__serviceType_userResearch]: hasVariant(
                variants,
                "serviceType",
                "userResearch"
              ),
              [sty.slotChildren__serviceType_webEcommerce]: hasVariant(
                variants,
                "serviceType",
                "webEcommerce"
              ),
              [sty.slotChildren__serviceType_webMultiplePage]: hasVariant(
                variants,
                "serviceType",
                "webMultiplePage"
              ),
              [sty.slotChildren__serviceType_webSinglePage]: hasVariant(
                variants,
                "serviceType",
                "webSinglePage"
              ),
              [sty.slotChildren__serviceType_wireframes]: hasVariant(
                variants,
                "serviceType",
                "wireframes"
              )
            })
          })
        : null}

      <InputCardNumberField
        className={classNames(
          "__wab_instance",
          sty.inputCardNumberField__nFaid,
          {
            [sty.inputCardNumberField__serviceType_designSystem__nFaidQqXdS]:
              hasVariant(variants, "serviceType", "designSystem"),
            [sty.inputCardNumberField__serviceType_slidePresentation__nFaidMzIfY]:
              hasVariant(variants, "serviceType", "slidePresentation"),
            [sty.inputCardNumberField__serviceType_userResearch__nFaidbXsH9]:
              hasVariant(variants, "serviceType", "userResearch"),
            [sty.inputCardNumberField__serviceType_webMultiplePage__nFaidJm8Bd]:
              hasVariant(variants, "serviceType", "webMultiplePage"),
            [sty.inputCardNumberField__serviceType_wireframes__nFaidPleqZ]:
              hasVariant(variants, "serviceType", "wireframes")
          }
        )}
        description={"description" as const}
      >
        {hasVariant(variants, "serviceType", "webMultiplePage")
          ? "Screens"
          : hasVariant(variants, "serviceType", "webSinglePage")
          ? "Sections"
          : hasVariant(variants, "serviceType", "usabilityTesting")
          ? "Screens"
          : hasVariant(variants, "serviceType", "wireframes")
          ? "Screens"
          : hasVariant(variants, "serviceType", "prototype")
          ? "Screens"
          : hasVariant(variants, "serviceType", "userResearch")
          ? "Interviews"
          : hasVariant(variants, "serviceType", "designSystem")
          ? "Components"
          : hasVariant(variants, "serviceType", "slidePresentation")
          ? "Pages"
          : hasVariant(variants, "serviceType", "mobileCommerce")
          ? "Screens"
          : hasVariant(variants, "serviceType", "mobile")
          ? "Screens"
          : hasVariant(variants, "serviceType", "webEcommerce")
          ? "Screens"
          : "Content"}
      </InputCardNumberField>

      <InputCardNumberField
        className={classNames(
          "__wab_instance",
          sty.inputCardNumberField__t4HXh,
          {
            [sty.inputCardNumberField__serviceType_designSystem__t4HXhQqXdS]:
              hasVariant(variants, "serviceType", "designSystem"),
            [sty.inputCardNumberField__serviceType_slidePresentation__t4HXhMzIfY]:
              hasVariant(variants, "serviceType", "slidePresentation"),
            [sty.inputCardNumberField__serviceType_userResearch__t4HXhbXsH9]:
              hasVariant(variants, "serviceType", "userResearch"),
            [sty.inputCardNumberField__serviceType_webMultiplePage__t4HXhJm8Bd]:
              hasVariant(variants, "serviceType", "webMultiplePage"),
            [sty.inputCardNumberField__serviceType_wireframes__t4HXhPleqZ]:
              hasVariant(variants, "serviceType", "wireframes")
          }
        )}
        description={"description" as const}
      >
        {hasVariant(variants, "serviceType", "webMultiplePage")
          ? "Screens"
          : hasVariant(variants, "serviceType", "webSinglePage")
          ? "Sections"
          : hasVariant(variants, "serviceType", "usabilityTesting")
          ? "Screens"
          : hasVariant(variants, "serviceType", "wireframes")
          ? "Screens"
          : hasVariant(variants, "serviceType", "prototype")
          ? "Screens"
          : hasVariant(variants, "serviceType", "userResearch")
          ? "Interviews"
          : hasVariant(variants, "serviceType", "designSystem")
          ? "Components"
          : hasVariant(variants, "serviceType", "slidePresentation")
          ? "Pages"
          : hasVariant(variants, "serviceType", "mobileCommerce")
          ? "Screens"
          : hasVariant(variants, "serviceType", "mobile")
          ? "Screens"
          : hasVariant(variants, "serviceType", "webEcommerce")
          ? "Screens"
          : "Content"}
      </InputCardNumberField>

      <InputCardNumberField
        className={classNames(
          "__wab_instance",
          sty.inputCardNumberField__wEoS,
          {
            [sty.inputCardNumberField__serviceType_designSystem__wEoSQqXdS]:
              hasVariant(variants, "serviceType", "designSystem"),
            [sty.inputCardNumberField__serviceType_slidePresentation__wEoSMzIfY]:
              hasVariant(variants, "serviceType", "slidePresentation"),
            [sty.inputCardNumberField__serviceType_userResearch__wEoSbXsH9]:
              hasVariant(variants, "serviceType", "userResearch"),
            [sty.inputCardNumberField__serviceType_webMultiplePage__wEoSJm8Bd]:
              hasVariant(variants, "serviceType", "webMultiplePage"),
            [sty.inputCardNumberField__serviceType_wireframes__wEoSPleqZ]:
              hasVariant(variants, "serviceType", "wireframes")
          }
        )}
        description={"description" as const}
      >
        {hasVariant(variants, "serviceType", "webMultiplePage")
          ? "Screens"
          : hasVariant(variants, "serviceType", "webSinglePage")
          ? "Sections"
          : hasVariant(variants, "serviceType", "usabilityTesting")
          ? "Screens"
          : hasVariant(variants, "serviceType", "wireframes")
          ? "Screens"
          : hasVariant(variants, "serviceType", "prototype")
          ? "Screens"
          : hasVariant(variants, "serviceType", "userResearch")
          ? "Interviews"
          : hasVariant(variants, "serviceType", "designSystem")
          ? "Components"
          : hasVariant(variants, "serviceType", "slidePresentation")
          ? "Pages"
          : hasVariant(variants, "serviceType", "mobileCommerce")
          ? "Screens"
          : hasVariant(variants, "serviceType", "mobile")
          ? "Screens"
          : hasVariant(variants, "serviceType", "webEcommerce")
          ? "Screens"
          : "Content"}
      </InputCardNumberField>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSectionServiceContent__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSectionServiceContent__VariantsArgs;
    args?: PlasmicSectionServiceContent__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicSectionServiceContent__Fetches;
  } & Omit<PlasmicSectionServiceContent__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSectionServiceContent__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSectionServiceContent__ArgProps,
      internalVariantPropNames: PlasmicSectionServiceContent__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicSectionServiceContent__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSectionServiceContent";
  } else {
    func.displayName = `PlasmicSectionServiceContent.${nodeName}`;
  }
  return func;
}

export const PlasmicSectionServiceContent = Object.assign(
  // Top-level PlasmicSectionServiceContent renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicSectionServiceContent
    internalVariantProps: PlasmicSectionServiceContent__VariantProps,
    internalArgProps: PlasmicSectionServiceContent__ArgProps
  }
);

export default PlasmicSectionServiceContent;
/* prettier-ignore-end */
