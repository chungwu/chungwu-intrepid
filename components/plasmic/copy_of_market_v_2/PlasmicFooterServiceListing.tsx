// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: KdJma6zoTnjpLW
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TextLinkArrow from "../../TextLinkArrow"; // plasmic-import: owlfhtgWXRNTq-/component
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: gpNjXfbD_ZdpPU/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicFooterServiceListing.module.css"; // plasmic-import: KdJma6zoTnjpLW/css

import Icon120Icon from "./icons/PlasmicIcon__Icon120"; // plasmic-import: 6mJzZQ4CAbUEUWx/icon
import ChevronRightIcon from "./icons/PlasmicIcon__ChevronRight"; // plasmic-import: m28uAvImID5kjZn/icon
import PlusBoldIcon from "./icons/PlasmicIcon__PlusBold"; // plasmic-import: lhSEEajPJGZatfD/icon

export type PlasmicFooterServiceListing__VariantMembers = {};

export type PlasmicFooterServiceListing__VariantsArgs = {};
type VariantPropType = keyof PlasmicFooterServiceListing__VariantsArgs;
export const PlasmicFooterServiceListing__VariantProps =
  new Array<VariantPropType>();

export type PlasmicFooterServiceListing__ArgsType = {};
type ArgPropType = keyof PlasmicFooterServiceListing__ArgsType;
export const PlasmicFooterServiceListing__ArgProps = new Array<ArgPropType>();

export type PlasmicFooterServiceListing__OverridesType = {
  root?: p.Flex<"div">;
  textLinkArrow?: p.Flex<typeof TextLinkArrow>;
  svg?: p.Flex<"svg">;
  buttonPrimary?: p.Flex<typeof ButtonPrimary>;
};

export interface DefaultFooterServiceListingProps {
  className?: string;
}

function PlasmicFooterServiceListing__RenderFunc(props: {
  variants: PlasmicFooterServiceListing__VariantsArgs;
  args: PlasmicFooterServiceListing__ArgsType;
  overrides: PlasmicFooterServiceListing__OverridesType;
  dataFetches?: PlasmicFooterServiceListing__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <TextLinkArrow
        data-plasmic-name={"textLinkArrow"}
        data-plasmic-override={overrides.textLinkArrow}
        className={classNames("__wab_instance", sty.textLinkArrow)}
        color={"dark" as const}
        direction={"left" as const}
        svgLeft={
          <Icon120Icon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(defaultcss.all, sty.svg)}
            role={"img"}
          />
        }
      >
        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.freeBox__pl2Hv
          )}
        >
          {"Back"}
        </div>
      </TextLinkArrow>

      <ButtonPrimary
        data-plasmic-name={"buttonPrimary"}
        data-plasmic-override={overrides.buttonPrimary}
        className={classNames("__wab_instance", sty.buttonPrimary)}
        size={"_120" as const}
        type={"ghost" as const}
      >
        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.freeBox__hD3RD
          )}
        >
          {"Save & Exit"}
        </div>
      </ButtonPrimary>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "textLinkArrow", "svg", "buttonPrimary"],
  textLinkArrow: ["textLinkArrow", "svg"],
  svg: ["svg"],
  buttonPrimary: ["buttonPrimary"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  textLinkArrow: typeof TextLinkArrow;
  svg: "svg";
  buttonPrimary: typeof ButtonPrimary;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFooterServiceListing__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFooterServiceListing__VariantsArgs;
    args?: PlasmicFooterServiceListing__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicFooterServiceListing__Fetches;
  } & Omit<PlasmicFooterServiceListing__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFooterServiceListing__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFooterServiceListing__ArgProps,
      internalVariantPropNames: PlasmicFooterServiceListing__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicFooterServiceListing__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFooterServiceListing";
  } else {
    func.displayName = `PlasmicFooterServiceListing.${nodeName}`;
  }
  return func;
}

export const PlasmicFooterServiceListing = Object.assign(
  // Top-level PlasmicFooterServiceListing renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    textLinkArrow: makeNodeComponent("textLinkArrow"),
    svg: makeNodeComponent("svg"),
    buttonPrimary: makeNodeComponent("buttonPrimary"),

    // Metadata about props expected for PlasmicFooterServiceListing
    internalVariantProps: PlasmicFooterServiceListing__VariantProps,
    internalArgProps: PlasmicFooterServiceListing__ArgProps
  }
);

export default PlasmicFooterServiceListing;
/* prettier-ignore-end */
