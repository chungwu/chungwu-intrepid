// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: KqMA32pl1KsAHJ
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavbarInternal from "../../NavbarInternal"; // plasmic-import: nBfIHHqHvjUywN9/component
import NavbarMemberEdit from "../../NavbarMemberEdit"; // plasmic-import: MpfEfF3PxMa-4U/component
import CardHeaderTitleDisplay from "../../CardHeaderTitleDisplay"; // plasmic-import: fk5BRaqICb6MOmt/component
import CardHeaderTitlePrimary from "../../CardHeaderTitlePrimary"; // plasmic-import: qjG0g-Rmz0BeDH/component
import InputTextField from "../../InputTextField"; // plasmic-import: eRJarSvs8Cmudj/component
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: gpNjXfbD_ZdpPU/component
import ButtonLinkPrimary from "../../ButtonLinkPrimary"; // plasmic-import: tSiOWgKlHR05p7/component
import CardSocialConnectSwitch from "../../CardSocialConnectSwitch"; // plasmic-import: 9czIbo_1TSRssu/component
import SelectGroupDropdownPrimary from "../../SelectGroupDropdownPrimary"; // plasmic-import: LkR_9K5xfRnJSu/component
import InputTextForm from "../../InputTextForm"; // plasmic-import: xiZmrha0lhlIet/component
import SwitchTextGroupPrimary from "../../SwitchTextGroupPrimary"; // plasmic-import: _1lDuzbqoV4zJL/component
import CheckboxTextPrimary from "../../CheckboxTextPrimary"; // plasmic-import: zFzsipj3oueIlJt/component
import FooterB from "../../FooterB"; // plasmic-import: IZENTiSL4_zyK8/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicEditmembersettings.module.css"; // plasmic-import: KqMA32pl1KsAHJ/css

import PlusBoldIcon from "./icons/PlasmicIcon__PlusBold"; // plasmic-import: lhSEEajPJGZatfD/icon

export type PlasmicEditmembersettings__VariantMembers = {};

export type PlasmicEditmembersettings__VariantsArgs = {};
type VariantPropType = keyof PlasmicEditmembersettings__VariantsArgs;
export const PlasmicEditmembersettings__VariantProps =
  new Array<VariantPropType>();

export type PlasmicEditmembersettings__ArgsType = {};
type ArgPropType = keyof PlasmicEditmembersettings__ArgsType;
export const PlasmicEditmembersettings__ArgProps = new Array<ArgPropType>();

export type PlasmicEditmembersettings__OverridesType = {
  root?: p.Flex<"div">;
  navbarInternal?: p.Flex<typeof NavbarInternal>;
  navbarMemberEdit?: p.Flex<typeof NavbarMemberEdit>;
  sectionMemberSettingsEmail?: p.Flex<"section">;
  formMemberEditEmail?: p.Flex<"form">;
  inputTextField?: p.Flex<typeof InputTextField>;
  sectionMemberSettingsPasswordReset?: p.Flex<"section">;
  sectionMemberPasswordReset?: p.Flex<"section">;
  buttonLinkPrimary?: p.Flex<typeof ButtonLinkPrimary>;
  sectionMemberSettingsLoginConnections?: p.Flex<"section">;
  sectionMemberLoginConnections?: p.Flex<"section">;
  inputGroupMemberLoginSocial?: p.Flex<"div">;
  sectionMemberMobileNumber?: p.Flex<"section">;
  formMemberEditMobileNumber?: p.Flex<"form">;
  memberLocationGroup?: p.Flex<"div">;
  sectionMemberSettingsAddress?: p.Flex<"section">;
  formMemberEditAddress?: p.Flex<"form">;
  sectionMemberNotifications?: p.Flex<"div">;
  notificationPushEmail?: p.Flex<"div">;
  notificationActivity?: p.Flex<"div">;
  notificationNewsEvents?: p.Flex<"div">;
  sectionMemberSettingsDeleteAccount?: p.Flex<"div">;
  sectionMemberDeleteAccount?: p.Flex<"section">;
  footerB?: p.Flex<typeof FooterB>;
};

export interface DefaultEditmembersettingsProps {
  dataFetches: PlasmicEditmembersettings__Fetches;
}

function PlasmicEditmembersettings__RenderFunc(props: {
  variants: PlasmicEditmembersettings__VariantsArgs;
  args: PlasmicEditmembersettings__ArgsType;
  overrides: PlasmicEditmembersettings__OverridesType;
  dataFetches?: PlasmicEditmembersettings__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <React.Fragment>
      <Head>
        <title key="title">{""}</title>
        <meta key="og:title" property="og:title" content={""} />
        <meta
          key="description"
          name="description"
          property="og:description"
          content={""}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <NavbarInternal
            data-plasmic-name={"navbarInternal"}
            data-plasmic-override={overrides.navbarInternal}
            className={classNames("__wab_instance", sty.navbarInternal)}
          />

          <NavbarMemberEdit
            data-plasmic-name={"navbarMemberEdit"}
            data-plasmic-override={overrides.navbarMemberEdit}
            className={classNames("__wab_instance", sty.navbarMemberEdit)}
            navItems={[
              "notifications",
              "messages",
              "lists",
              "reviews",
              "wallet"
            ]}
            selected={"settings" as const}
          />

          <p.Stack
            as={"section"}
            data-plasmic-name={"sectionMemberSettingsEmail"}
            data-plasmic-override={overrides.sectionMemberSettingsEmail}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              sty.sectionMemberSettingsEmail
            )}
          >
            <CardHeaderTitleDisplay
              className={classNames(
                "__wab_instance",
                sty.cardHeaderTitleDisplay__oJ8Sb
              )}
              size={"_720" as const}
              slot={
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox___5Fyid
                  )}
                >
                  {"Manage your account"}
                </div>
              }
              textDisplay={"Settings"}
              textSubhead={"Maintain a safe and secure community experience  "}
            />

            <p.Stack
              as={"form"}
              data-plasmic-name={"formMemberEditEmail"}
              data-plasmic-override={overrides.formMemberEditEmail}
              hasGap={true}
              className={classNames(defaultcss.all, sty.formMemberEditEmail)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.freeBox___86LeR)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary__gJroh
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox___1In5
                      )}
                    >
                      {
                        "Enter a new email address to update the one you use to log in"
                      }
                    </div>
                  }
                >
                  {"Email"}
                </CardHeaderTitlePrimary>

                <InputTextField
                  data-plasmic-name={"inputTextField"}
                  data-plasmic-override={overrides.inputTextField}
                  className={classNames("__wab_instance", sty.inputTextField)}
                  size={"_540" as const}
                  type={"secondary" as const}
                />
              </p.Stack>

              <ButtonPrimary
                className={classNames(
                  "__wab_instance",
                  sty.buttonPrimary__mr9B
                )}
                size={"_140" as const}
                type={"primary" as const}
              >
                {"Update email"}
              </ButtonPrimary>
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"section"}
            data-plasmic-name={"sectionMemberSettingsPasswordReset"}
            data-plasmic-override={overrides.sectionMemberSettingsPasswordReset}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              sty.sectionMemberSettingsPasswordReset
            )}
          >
            <p.Stack
              as={"section"}
              data-plasmic-name={"sectionMemberPasswordReset"}
              data-plasmic-override={overrides.sectionMemberPasswordReset}
              hasGap={true}
              className={classNames(
                defaultcss.all,
                sty.sectionMemberPasswordReset
              )}
            >
              <CardHeaderTitlePrimary
                className={classNames(
                  "__wab_instance",
                  sty.cardHeaderTitlePrimary__yiEF
                )}
                slot={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__tbUio
                    )}
                  >
                    {
                      "click the button to reset your password and we will send you a verification link"
                    }
                  </div>
                }
              >
                {"Password reset"}
              </CardHeaderTitlePrimary>

              <ButtonLinkPrimary
                data-plasmic-name={"buttonLinkPrimary"}
                data-plasmic-override={overrides.buttonLinkPrimary}
                border={"border" as const}
                className={classNames("__wab_instance", sty.buttonLinkPrimary)}
                height={"_40" as const}
                text={"Send password reset link"}
                type={"ghost" as const}
                width={"_270" as const}
              />
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"section"}
            data-plasmic-name={"sectionMemberSettingsLoginConnections"}
            data-plasmic-override={
              overrides.sectionMemberSettingsLoginConnections
            }
            hasGap={true}
            className={classNames(
              defaultcss.all,
              sty.sectionMemberSettingsLoginConnections
            )}
          >
            <p.Stack
              as={"section"}
              data-plasmic-name={"sectionMemberLoginConnections"}
              data-plasmic-override={overrides.sectionMemberLoginConnections}
              hasGap={true}
              className={classNames(
                defaultcss.all,
                sty.sectionMemberLoginConnections
              )}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.freeBox__giO3N)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary__k2G7C
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox__ed4G3
                      )}
                    >
                      {"Connect your social accounts to log in to Intrepid."}
                    </div>
                  }
                >
                  {"Login connections"}
                </CardHeaderTitlePrimary>

                <div
                  data-plasmic-name={"inputGroupMemberLoginSocial"}
                  data-plasmic-override={overrides.inputGroupMemberLoginSocial}
                  className={classNames(
                    defaultcss.all,
                    sty.inputGroupMemberLoginSocial
                  )}
                >
                  <CardSocialConnectSwitch
                    className={classNames(
                      "__wab_instance",
                      sty.cardSocialConnectSwitch__s94CZ
                    )}
                    socialNetwork={"google" as const}
                    width={"_540" as const}
                  />

                  <CardSocialConnectSwitch
                    className={classNames(
                      "__wab_instance",
                      sty.cardSocialConnectSwitch__t95P7
                    )}
                    socialNetwork={"facebook" as const}
                    width={"_540" as const}
                  />

                  <CardSocialConnectSwitch
                    className={classNames(
                      "__wab_instance",
                      sty.cardSocialConnectSwitch__qDilm
                    )}
                    socialNetwork={"twitter" as const}
                    width={"_540" as const}
                  />

                  <CardSocialConnectSwitch
                    className={classNames(
                      "__wab_instance",
                      sty.cardSocialConnectSwitch___1SikG
                    )}
                    socialNetwork={"linkedin" as const}
                    width={"_540" as const}
                  />

                  <CardSocialConnectSwitch
                    className={classNames(
                      "__wab_instance",
                      sty.cardSocialConnectSwitch__wgu8X
                    )}
                    socialNetwork={"github" as const}
                    width={"_540" as const}
                  />
                </div>
              </p.Stack>
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"section"}
            data-plasmic-name={"sectionMemberMobileNumber"}
            data-plasmic-override={overrides.sectionMemberMobileNumber}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              sty.sectionMemberMobileNumber
            )}
          >
            <p.Stack
              as={"form"}
              data-plasmic-name={"formMemberEditMobileNumber"}
              data-plasmic-override={overrides.formMemberEditMobileNumber}
              hasGap={true}
              className={classNames(
                defaultcss.all,
                sty.formMemberEditMobileNumber
              )}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.freeBox__dgmFw)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary___0TFP
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox__x6GfF
                      )}
                    >
                      {"Membership perks and offers sent directly to you"}
                    </div>
                  }
                >
                  {"Mobile number"}
                </CardHeaderTitlePrimary>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"memberLocationGroup"}
                  data-plasmic-override={overrides.memberLocationGroup}
                  hasGap={true}
                  className={classNames(
                    defaultcss.all,
                    sty.memberLocationGroup
                  )}
                >
                  <SelectGroupDropdownPrimary
                    className={classNames(
                      "__wab_instance",
                      sty.selectGroupDropdownPrimary__vGlTy
                    )}
                    description={"description" as const}
                    width={"_144" as const}
                  >
                    {"Country"}
                  </SelectGroupDropdownPrimary>

                  <InputTextForm
                    className={classNames(
                      "__wab_instance",
                      sty.inputTextForm__hoUhp
                    )}
                    labelHeadline={"Number"}
                    subhead={"subhead" as const}
                    type={"primary" as const}
                    width={"_360" as const}
                  />
                </p.Stack>
              </p.Stack>

              <ButtonPrimary
                className={classNames(
                  "__wab_instance",
                  sty.buttonPrimary__eMcUs
                )}
                size={"_140" as const}
                type={"primary" as const}
              >
                {"Save mobile"}
              </ButtonPrimary>
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"section"}
            data-plasmic-name={"sectionMemberSettingsAddress"}
            data-plasmic-override={overrides.sectionMemberSettingsAddress}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              sty.sectionMemberSettingsAddress
            )}
          >
            <p.Stack
              as={"form"}
              data-plasmic-name={"formMemberEditAddress"}
              data-plasmic-override={overrides.formMemberEditAddress}
              hasGap={true}
              className={classNames(defaultcss.all, sty.formMemberEditAddress)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.freeBox__ur4WN)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary__kThF5
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox__ojnww
                      )}
                    >
                      {
                        "Add your address if you want to appear in search results for local businesses"
                      }
                    </div>
                  }
                >
                  {"Address"}
                </CardHeaderTitlePrimary>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.freeBox__ab95Z)}
                >
                  <InputTextForm
                    labelHeadline={"Address"}
                    subhead={"subhead" as const}
                    type={"primary" as const}
                    width={"_540" as const}
                  />

                  <InputTextForm
                    label={"label" as const}
                    labelHeadline={"Number"}
                    subhead={"subhead" as const}
                    type={"primary" as const}
                    width={"_540" as const}
                  />

                  <SelectGroupDropdownPrimary
                    className={classNames(
                      "__wab_instance",
                      sty.selectGroupDropdownPrimary__hwWi
                    )}
                    description={"description" as const}
                    width={"_360" as const}
                  >
                    {"Country"}
                  </SelectGroupDropdownPrimary>

                  <InputTextForm
                    className={classNames(
                      "__wab_instance",
                      sty.inputTextForm__jhjKr
                    )}
                    labelHeadline={
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.freeBox__pbUAk
                        )}
                      >
                        {"City"}
                      </div>
                    }
                    subhead={"subhead" as const}
                    type={"primary" as const}
                    width={"_360" as const}
                  />

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(defaultcss.all, sty.freeBox__o3Yc7)}
                  >
                    <InputTextForm
                      labelHeadline={"Province/State"}
                      subhead={"subhead" as const}
                      type={"primary" as const}
                      width={"_160" as const}
                    />

                    <InputTextForm
                      labelHeadline={
                        <div
                          className={classNames(
                            defaultcss.all,
                            defaultcss.__wab_text,
                            sty.freeBox__t5Cof
                          )}
                        >
                          {"Zip/Postal code"}
                        </div>
                      }
                      subhead={"subhead" as const}
                      type={"primary" as const}
                      width={"_160" as const}
                    />
                  </p.Stack>
                </p.Stack>
              </p.Stack>

              <ButtonPrimary
                className={classNames(
                  "__wab_instance",
                  sty.buttonPrimary__me6Z0
                )}
                size={"_140" as const}
                type={"primary" as const}
              >
                {"Save address"}
              </ButtonPrimary>
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"sectionMemberNotifications"}
            data-plasmic-override={overrides.sectionMemberNotifications}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              sty.sectionMemberNotifications
            )}
          >
            <CardHeaderTitleDisplay
              className={classNames(
                "__wab_instance",
                sty.cardHeaderTitleDisplay__eheMi
              )}
              headings={["title"]}
              size={"_720" as const}
              slot={
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__qq6I
                  )}
                >
                  {"Notifications"}
                </div>
              }
              textDisplay={"Profile edit"}
              textSubhead={"Get notified about activity on Intrepid"}
            />

            <p.Stack
              as={"div"}
              data-plasmic-name={"notificationPushEmail"}
              data-plasmic-override={overrides.notificationPushEmail}
              hasGap={true}
              className={classNames(defaultcss.all, sty.notificationPushEmail)}
            >
              <CardHeaderTitlePrimary
                className={classNames(
                  "__wab_instance",
                  sty.cardHeaderTitlePrimary__f0Ore
                )}
                slot={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__ykUGz
                    )}
                  >
                    {"Updates when you're away from the community."}
                  </div>
                }
              >
                {"Speak easy"}
              </CardHeaderTitlePrimary>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.freeBox___1XaWf)}
              >
                <SwitchTextGroupPrimary
                  className={classNames(
                    "__wab_instance",
                    sty.switchTextGroupPrimary___4R7Yi
                  )}
                  descriptionText={
                    "What's going on in the community - sent to your mobile"
                  }
                  textGroup={"Push notifications"}
                />

                <SwitchTextGroupPrimary
                  className={classNames(
                    "__wab_instance",
                    sty.switchTextGroupPrimary__iU7Gk
                  )}
                  descriptionText={
                    "What's going on in the community - sent to your inbox"
                  }
                  textGroup={"Email notifications"}
                />
              </p.Stack>
            </p.Stack>

            <p.Stack
              as={"div"}
              data-plasmic-name={"notificationActivity"}
              data-plasmic-override={overrides.notificationActivity}
              hasGap={true}
              className={classNames(defaultcss.all, sty.notificationActivity)}
            >
              <CardHeaderTitlePrimary
                className={classNames(
                  "__wab_instance",
                  sty.cardHeaderTitlePrimary__dwizC
                )}
                slot={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox___9SWGa
                    )}
                  >
                    {
                      "Get notifications from your interactions within the community."
                    }
                  </div>
                }
              >
                {"Heads up"}
              </CardHeaderTitlePrimary>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.freeBox__n5FvM)}
              >
                <CheckboxTextPrimary
                  className={classNames(
                    "__wab_instance",
                    sty.checkboxTextPrimary__kzvI5
                  )}
                  text={"_16" as const}
                >
                  {"New subscriber"}
                </CheckboxTextPrimary>

                <CheckboxTextPrimary
                  className={classNames(
                    "__wab_instance",
                    sty.checkboxTextPrimary__zsuWh
                  )}
                  text={"_16" as const}
                >
                  {"New tip"}
                </CheckboxTextPrimary>

                <CheckboxTextPrimary
                  className={classNames(
                    "__wab_instance",
                    sty.checkboxTextPrimary__iGlWe
                  )}
                  text={"_16" as const}
                >
                  {"New review"}
                </CheckboxTextPrimary>

                <CheckboxTextPrimary
                  className={classNames(
                    "__wab_instance",
                    sty.checkboxTextPrimary__qRbqU
                  )}
                  text={"_16" as const}
                >
                  {"New comment"}
                </CheckboxTextPrimary>

                <CheckboxTextPrimary
                  className={classNames(
                    "__wab_instance",
                    sty.checkboxTextPrimary__z7R
                  )}
                  text={"_16" as const}
                >
                  {"New follower"}
                </CheckboxTextPrimary>

                <CheckboxTextPrimary
                  className={classNames(
                    "__wab_instance",
                    sty.checkboxTextPrimary__nZyNb
                  )}
                  text={"_16" as const}
                >
                  {"New connection request"}
                </CheckboxTextPrimary>

                <CheckboxTextPrimary
                  className={classNames(
                    "__wab_instance",
                    sty.checkboxTextPrimary__lm9Qk
                  )}
                  text={"_16" as const}
                >
                  {"Added to list"}
                </CheckboxTextPrimary>

                <CheckboxTextPrimary
                  className={classNames(
                    "__wab_instance",
                    sty.checkboxTextPrimary__kuU
                  )}
                  text={"_16" as const}
                >
                  {"New reaction"}
                </CheckboxTextPrimary>
              </p.Stack>
            </p.Stack>

            <p.Stack
              as={"div"}
              data-plasmic-name={"notificationNewsEvents"}
              data-plasmic-override={overrides.notificationNewsEvents}
              hasGap={true}
              className={classNames(defaultcss.all, sty.notificationNewsEvents)}
            >
              <CardHeaderTitlePrimary
                className={classNames(
                  "__wab_instance",
                  sty.cardHeaderTitlePrimary__a63Qn
                )}
                slot={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__baZww
                    )}
                  >
                    {
                      "All the fun things going on in the community- be in the know."
                    }
                  </div>
                }
              >
                {"Happenings"}
              </CardHeaderTitlePrimary>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.freeBox__f4Q4E)}
              >
                <SwitchTextGroupPrimary
                  className={classNames(
                    "__wab_instance",
                    sty.switchTextGroupPrimary___4JmQc
                  )}
                  descriptionText={
                    "Our weekly newsletter packed with fun stuff"
                  }
                  textGroup={"Email newsletter"}
                />

                <SwitchTextGroupPrimary
                  className={classNames(
                    "__wab_instance",
                    sty.switchTextGroupPrimary__oQt5A
                  )}
                  descriptionText={"Meet members live and in person"}
                  textGroup={"Events and meetups"}
                />
              </p.Stack>
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"sectionMemberSettingsDeleteAccount"}
            data-plasmic-override={overrides.sectionMemberSettingsDeleteAccount}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              sty.sectionMemberSettingsDeleteAccount
            )}
          >
            <p.Stack
              as={"section"}
              data-plasmic-name={"sectionMemberDeleteAccount"}
              data-plasmic-override={overrides.sectionMemberDeleteAccount}
              hasGap={true}
              className={classNames(
                defaultcss.all,
                sty.sectionMemberDeleteAccount
              )}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.freeBox__txfYz)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary__ouT6
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox__hwOrU
                      )}
                    >
                      {
                        "Permanently remove your account and all of its contents from the Intrepid community. This action is not reversible, so please continue with caution."
                      }
                    </div>
                  }
                >
                  {"Delete account"}
                </CardHeaderTitlePrimary>
              </p.Stack>

              <ButtonPrimary
                className={classNames(
                  "__wab_instance",
                  sty.buttonPrimary___6FApX
                )}
                color={"caution" as const}
                size={"_140" as const}
                type={"ghost" as const}
              >
                {"Delete account"}
              </ButtonPrimary>
            </p.Stack>
          </p.Stack>

          <FooterB
            data-plasmic-name={"footerB"}
            data-plasmic-override={overrides.footerB}
            className={classNames("__wab_instance", sty.footerB)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbarInternal",
    "navbarMemberEdit",
    "sectionMemberSettingsEmail",
    "formMemberEditEmail",
    "inputTextField",
    "sectionMemberSettingsPasswordReset",
    "sectionMemberPasswordReset",
    "buttonLinkPrimary",
    "sectionMemberSettingsLoginConnections",
    "sectionMemberLoginConnections",
    "inputGroupMemberLoginSocial",
    "sectionMemberMobileNumber",
    "formMemberEditMobileNumber",
    "memberLocationGroup",
    "sectionMemberSettingsAddress",
    "formMemberEditAddress",
    "sectionMemberNotifications",
    "notificationPushEmail",
    "notificationActivity",
    "notificationNewsEvents",
    "sectionMemberSettingsDeleteAccount",
    "sectionMemberDeleteAccount",
    "footerB"
  ],
  navbarInternal: ["navbarInternal"],
  navbarMemberEdit: ["navbarMemberEdit"],
  sectionMemberSettingsEmail: [
    "sectionMemberSettingsEmail",
    "formMemberEditEmail",
    "inputTextField"
  ],
  formMemberEditEmail: ["formMemberEditEmail", "inputTextField"],
  inputTextField: ["inputTextField"],
  sectionMemberSettingsPasswordReset: [
    "sectionMemberSettingsPasswordReset",
    "sectionMemberPasswordReset",
    "buttonLinkPrimary"
  ],
  sectionMemberPasswordReset: [
    "sectionMemberPasswordReset",
    "buttonLinkPrimary"
  ],
  buttonLinkPrimary: ["buttonLinkPrimary"],
  sectionMemberSettingsLoginConnections: [
    "sectionMemberSettingsLoginConnections",
    "sectionMemberLoginConnections",
    "inputGroupMemberLoginSocial"
  ],
  sectionMemberLoginConnections: [
    "sectionMemberLoginConnections",
    "inputGroupMemberLoginSocial"
  ],
  inputGroupMemberLoginSocial: ["inputGroupMemberLoginSocial"],
  sectionMemberMobileNumber: [
    "sectionMemberMobileNumber",
    "formMemberEditMobileNumber",
    "memberLocationGroup"
  ],
  formMemberEditMobileNumber: [
    "formMemberEditMobileNumber",
    "memberLocationGroup"
  ],
  memberLocationGroup: ["memberLocationGroup"],
  sectionMemberSettingsAddress: [
    "sectionMemberSettingsAddress",
    "formMemberEditAddress"
  ],
  formMemberEditAddress: ["formMemberEditAddress"],
  sectionMemberNotifications: [
    "sectionMemberNotifications",
    "notificationPushEmail",
    "notificationActivity",
    "notificationNewsEvents"
  ],
  notificationPushEmail: ["notificationPushEmail"],
  notificationActivity: ["notificationActivity"],
  notificationNewsEvents: ["notificationNewsEvents"],
  sectionMemberSettingsDeleteAccount: [
    "sectionMemberSettingsDeleteAccount",
    "sectionMemberDeleteAccount"
  ],
  sectionMemberDeleteAccount: ["sectionMemberDeleteAccount"],
  footerB: ["footerB"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbarInternal: typeof NavbarInternal;
  navbarMemberEdit: typeof NavbarMemberEdit;
  sectionMemberSettingsEmail: "section";
  formMemberEditEmail: "form";
  inputTextField: typeof InputTextField;
  sectionMemberSettingsPasswordReset: "section";
  sectionMemberPasswordReset: "section";
  buttonLinkPrimary: typeof ButtonLinkPrimary;
  sectionMemberSettingsLoginConnections: "section";
  sectionMemberLoginConnections: "section";
  inputGroupMemberLoginSocial: "div";
  sectionMemberMobileNumber: "section";
  formMemberEditMobileNumber: "form";
  memberLocationGroup: "div";
  sectionMemberSettingsAddress: "section";
  formMemberEditAddress: "form";
  sectionMemberNotifications: "div";
  notificationPushEmail: "div";
  notificationActivity: "div";
  notificationNewsEvents: "div";
  sectionMemberSettingsDeleteAccount: "div";
  sectionMemberDeleteAccount: "section";
  footerB: typeof FooterB;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicEditmembersettings__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicEditmembersettings__VariantsArgs;
    args?: PlasmicEditmembersettings__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicEditmembersettings__Fetches;
  } & Omit<PlasmicEditmembersettings__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicEditmembersettings__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicEditmembersettings__ArgProps,
      internalVariantPropNames: PlasmicEditmembersettings__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicEditmembersettings__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEditmembersettings";
  } else {
    func.displayName = `PlasmicEditmembersettings.${nodeName}`;
  }
  return func;
}

export const PlasmicEditmembersettings = Object.assign(
  // Top-level PlasmicEditmembersettings renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbarInternal: makeNodeComponent("navbarInternal"),
    navbarMemberEdit: makeNodeComponent("navbarMemberEdit"),
    sectionMemberSettingsEmail: makeNodeComponent("sectionMemberSettingsEmail"),
    formMemberEditEmail: makeNodeComponent("formMemberEditEmail"),
    inputTextField: makeNodeComponent("inputTextField"),
    sectionMemberSettingsPasswordReset: makeNodeComponent(
      "sectionMemberSettingsPasswordReset"
    ),
    sectionMemberPasswordReset: makeNodeComponent("sectionMemberPasswordReset"),
    buttonLinkPrimary: makeNodeComponent("buttonLinkPrimary"),
    sectionMemberSettingsLoginConnections: makeNodeComponent(
      "sectionMemberSettingsLoginConnections"
    ),
    sectionMemberLoginConnections: makeNodeComponent(
      "sectionMemberLoginConnections"
    ),
    inputGroupMemberLoginSocial: makeNodeComponent(
      "inputGroupMemberLoginSocial"
    ),
    sectionMemberMobileNumber: makeNodeComponent("sectionMemberMobileNumber"),
    formMemberEditMobileNumber: makeNodeComponent("formMemberEditMobileNumber"),
    memberLocationGroup: makeNodeComponent("memberLocationGroup"),
    sectionMemberSettingsAddress: makeNodeComponent(
      "sectionMemberSettingsAddress"
    ),
    formMemberEditAddress: makeNodeComponent("formMemberEditAddress"),
    sectionMemberNotifications: makeNodeComponent("sectionMemberNotifications"),
    notificationPushEmail: makeNodeComponent("notificationPushEmail"),
    notificationActivity: makeNodeComponent("notificationActivity"),
    notificationNewsEvents: makeNodeComponent("notificationNewsEvents"),
    sectionMemberSettingsDeleteAccount: makeNodeComponent(
      "sectionMemberSettingsDeleteAccount"
    ),
    sectionMemberDeleteAccount: makeNodeComponent("sectionMemberDeleteAccount"),
    footerB: makeNodeComponent("footerB"),

    // Metadata about props expected for PlasmicEditmembersettings
    internalVariantProps: PlasmicEditmembersettings__VariantProps,
    internalArgProps: PlasmicEditmembersettings__ArgProps
  }
);

export default PlasmicEditmembersettings;
/* prettier-ignore-end */
