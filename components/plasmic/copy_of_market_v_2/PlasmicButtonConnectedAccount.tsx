// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: gtSe0S4gPoo40V
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicButtonConnectedAccount.module.css"; // plasmic-import: gtSe0S4gPoo40V/css

import PlusBoldIcon from "./icons/PlasmicIcon__PlusBold"; // plasmic-import: lhSEEajPJGZatfD/icon
import FacebookSquareFillIcon from "./icons/PlasmicIcon__FacebookSquareFill"; // plasmic-import: XQewwx4CP8adgPa/icon
import GooglesvgIcon from "./icons/PlasmicIcon__Googlesvg"; // plasmic-import: _7TNBtYC1Cgmp24/icon
import StripeLogoIcon from "./icons/PlasmicIcon__StripeLogo"; // plasmic-import: 2CmlYtCN9oVXYGA/icon
import PaypalIcon from "./icons/PlasmicIcon__Paypal"; // plasmic-import: 4pEaJvLDMWqV-Eg/icon
import XerosvgIcon from "./icons/PlasmicIcon__Xerosvg"; // plasmic-import: _UvTvshzBlJJ7uH/icon
import Icons8QuickbookssvgIcon from "./icons/PlasmicIcon__Icons8Quickbookssvg"; // plasmic-import: YRFKzaheXM2apD6/icon

export type PlasmicButtonConnectedAccount__VariantMembers = {
  company: "facebook" | "google" | "stripe" | "paypal" | "xero" | "quickbooks";
  originalSizes: "_320Px" | "_360X48";
  width: "_90" | "_120" | "_140" | "_160" | "_180" | "_270" | "_360";
  height: "_32" | "_40" | "_48";
};

export type PlasmicButtonConnectedAccount__VariantsArgs = {
  company?: SingleChoiceArg<
    "facebook" | "google" | "stripe" | "paypal" | "xero" | "quickbooks"
  >;
  originalSizes?: SingleChoiceArg<"_320Px" | "_360X48">;
  width?: SingleChoiceArg<
    "_90" | "_120" | "_140" | "_160" | "_180" | "_270" | "_360"
  >;
  height?: SingleChoiceArg<"_32" | "_40" | "_48">;
};

type VariantPropType = keyof PlasmicButtonConnectedAccount__VariantsArgs;
export const PlasmicButtonConnectedAccount__VariantProps =
  new Array<VariantPropType>("company", "originalSizes", "width", "height");

export type PlasmicButtonConnectedAccount__ArgsType = {
  id?: string;
};

type ArgPropType = keyof PlasmicButtonConnectedAccount__ArgsType;
export const PlasmicButtonConnectedAccount__ArgProps = new Array<ArgPropType>(
  "id"
);

export type PlasmicButtonConnectedAccount__OverridesType = {
  root?: p.Flex<"button">;
  iconTextParent?: p.Flex<"div">;
  svgParent?: p.Flex<"div">;
  svgBg?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
};

export interface DefaultButtonConnectedAccountProps {
  id?: string;
  company?: SingleChoiceArg<
    "facebook" | "google" | "stripe" | "paypal" | "xero" | "quickbooks"
  >;
  originalSizes?: SingleChoiceArg<"_320Px" | "_360X48">;
  width?: SingleChoiceArg<
    "_90" | "_120" | "_140" | "_160" | "_180" | "_270" | "_360"
  >;
  height?: SingleChoiceArg<"_32" | "_40" | "_48">;
  className?: string;
}

function PlasmicButtonConnectedAccount__RenderFunc(props: {
  variants: PlasmicButtonConnectedAccount__VariantsArgs;
  args: PlasmicButtonConnectedAccount__ArgsType;
  overrides: PlasmicButtonConnectedAccount__OverridesType;
  dataFetches?: PlasmicButtonConnectedAccount__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"button"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        defaultcss.button,
        projectcss.root_reset,
        sty.root,
        {
          [sty.root__company_facebook]: hasVariant(
            variants,
            "company",
            "facebook"
          ),
          [sty.root__company_facebook_width__90]:
            hasVariant(variants, "company", "facebook") &&
            hasVariant(variants, "width", "_90"),
          [sty.root__company_google]: hasVariant(variants, "company", "google"),
          [sty.root__company_paypal]: hasVariant(variants, "company", "paypal"),
          [sty.root__company_quickbooks]: hasVariant(
            variants,
            "company",
            "quickbooks"
          ),
          [sty.root__company_stripe]: hasVariant(variants, "company", "stripe"),
          [sty.root__company_xero]: hasVariant(variants, "company", "xero"),
          [sty.root__height__32]: hasVariant(variants, "height", "_32"),
          [sty.root__height__40]: hasVariant(variants, "height", "_40"),
          [sty.root__height__48]: hasVariant(variants, "height", "_48"),
          [sty.root__originalSizes__320Px]: hasVariant(
            variants,
            "originalSizes",
            "_320Px"
          ),
          [sty.root__originalSizes__360X48]: hasVariant(
            variants,
            "originalSizes",
            "_360X48"
          ),
          [sty.root__width__120]: hasVariant(variants, "width", "_120"),
          [sty.root__width__140]: hasVariant(variants, "width", "_140"),
          [sty.root__width__160]: hasVariant(variants, "width", "_160"),
          [sty.root__width__180]: hasVariant(variants, "width", "_180"),
          [sty.root__width__270]: hasVariant(variants, "width", "_270"),
          [sty.root__width__360]: hasVariant(variants, "width", "_360"),
          [sty.root__width__90]: hasVariant(variants, "width", "_90")
        }
      )}
      id={args.id}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"iconTextParent"}
        data-plasmic-override={overrides.iconTextParent}
        hasGap={true}
        className={classNames(defaultcss.all, sty.iconTextParent, {
          [sty.iconTextParent__width__120]: hasVariant(
            variants,
            "width",
            "_120"
          ),
          [sty.iconTextParent__width__140]: hasVariant(
            variants,
            "width",
            "_140"
          ),
          [sty.iconTextParent__width__160]: hasVariant(
            variants,
            "width",
            "_160"
          ),
          [sty.iconTextParent__width__180]: hasVariant(
            variants,
            "width",
            "_180"
          ),
          [sty.iconTextParent__width__270]: hasVariant(
            variants,
            "width",
            "_270"
          ),
          [sty.iconTextParent__width__360]: hasVariant(
            variants,
            "width",
            "_360"
          ),
          [sty.iconTextParent__width__90]: hasVariant(variants, "width", "_90")
        })}
      >
        <div
          data-plasmic-name={"svgParent"}
          data-plasmic-override={overrides.svgParent}
          className={classNames(defaultcss.all, sty.svgParent, {
            [sty.svgParent__width__120]: hasVariant(variants, "width", "_120"),
            [sty.svgParent__width__140]: hasVariant(variants, "width", "_140"),
            [sty.svgParent__width__160]: hasVariant(variants, "width", "_160"),
            [sty.svgParent__width__180]: hasVariant(variants, "width", "_180"),
            [sty.svgParent__width__270]: hasVariant(variants, "width", "_270"),
            [sty.svgParent__width__360]: hasVariant(variants, "width", "_360"),
            [sty.svgParent__width__90]: hasVariant(variants, "width", "_90")
          })}
        >
          <div
            data-plasmic-name={"svgBg"}
            data-plasmic-override={overrides.svgBg}
            className={classNames(defaultcss.all, sty.svgBg, {
              [sty.svgBg__width__360]: hasVariant(variants, "width", "_360"),
              [sty.svgBg__width__90]: hasVariant(variants, "width", "_90")
            })}
          >
            <p.PlasmicIcon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              PlasmicIconType={
                hasVariant(variants, "company", "quickbooks")
                  ? Icons8QuickbookssvgIcon
                  : hasVariant(variants, "company", "xero")
                  ? XerosvgIcon
                  : hasVariant(variants, "company", "paypal")
                  ? PaypalIcon
                  : hasVariant(variants, "company", "stripe")
                  ? StripeLogoIcon
                  : hasVariant(variants, "company", "google")
                  ? GooglesvgIcon
                  : hasVariant(variants, "company", "facebook")
                  ? FacebookSquareFillIcon
                  : PlusBoldIcon
              }
              className={classNames(defaultcss.all, sty.svg, {
                [sty.svg__company_facebook]: hasVariant(
                  variants,
                  "company",
                  "facebook"
                ),
                [sty.svg__company_google]: hasVariant(
                  variants,
                  "company",
                  "google"
                ),
                [sty.svg__company_paypal]: hasVariant(
                  variants,
                  "company",
                  "paypal"
                ),
                [sty.svg__company_quickbooks]: hasVariant(
                  variants,
                  "company",
                  "quickbooks"
                ),
                [sty.svg__company_stripe]: hasVariant(
                  variants,
                  "company",
                  "stripe"
                ),
                [sty.svg__company_xero]: hasVariant(
                  variants,
                  "company",
                  "xero"
                ),
                [sty.svg__width__120]: hasVariant(variants, "width", "_120"),
                [sty.svg__width__90]: hasVariant(variants, "width", "_90")
              })}
              role={"img"}
            />
          </div>
        </div>

        <div
          className={classNames(defaultcss.all, sty.freeBox__tm9P5, {
            [sty.freeBox__company_facebook__tm9P5NCdZ9]: hasVariant(
              variants,
              "company",
              "facebook"
            ),
            [sty.freeBox__company_google__tm9P5GtgJu]: hasVariant(
              variants,
              "company",
              "google"
            ),
            [sty.freeBox__company_paypal__tm9P5QtHy]: hasVariant(
              variants,
              "company",
              "paypal"
            ),
            [sty.freeBox__company_stripe__tm9P5Vu9E]: hasVariant(
              variants,
              "company",
              "stripe"
            ),
            [sty.freeBox__company_xero__tm9P5FH0Ct]: hasVariant(
              variants,
              "company",
              "xero"
            ),
            [sty.freeBox__originalSizes__320Px__tm9P54Uc60]: hasVariant(
              variants,
              "originalSizes",
              "_320Px"
            ),
            [sty.freeBox__width__120__tm9P5TaWEq]: hasVariant(
              variants,
              "width",
              "_120"
            ),
            [sty.freeBox__width__90__tm9P5Q9Wdd]: hasVariant(
              variants,
              "width",
              "_90"
            )
          })}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox__mUd20,
              {
                [sty.freeBox__company_facebook__mUd20NCdZ9]: hasVariant(
                  variants,
                  "company",
                  "facebook"
                ),
                [sty.freeBox__company_facebook_width__120__mUd20NCdZ9TaWEq]:
                  hasVariant(variants, "company", "facebook") &&
                  hasVariant(variants, "width", "_120"),
                [sty.freeBox__company_facebook_width__140__mUd20NCdZ9SzwF]:
                  hasVariant(variants, "company", "facebook") &&
                  hasVariant(variants, "width", "_140"),
                [sty.freeBox__company_facebook_width__160__mUd20NCdZ95HN]:
                  hasVariant(variants, "company", "facebook") &&
                  hasVariant(variants, "width", "_160"),
                [sty.freeBox__company_facebook_width__180__mUd20NCdZ9Ct8GE]:
                  hasVariant(variants, "company", "facebook") &&
                  hasVariant(variants, "width", "_180"),
                [sty.freeBox__company_facebook_width__270__mUd20NCdZ9A3Dq5]:
                  hasVariant(variants, "company", "facebook") &&
                  hasVariant(variants, "width", "_270"),
                [sty.freeBox__company_facebook_width__360__mUd20NCdZ9Yd0Z6]:
                  hasVariant(variants, "company", "facebook") &&
                  hasVariant(variants, "width", "_360"),
                [sty.freeBox__company_facebook_width__90__mUd20NCdZ9Q9Wdd]:
                  hasVariant(variants, "company", "facebook") &&
                  hasVariant(variants, "width", "_90"),
                [sty.freeBox__company_google__mUd20GtgJu]: hasVariant(
                  variants,
                  "company",
                  "google"
                ),
                [sty.freeBox__company_google_width__120__mUd20GtgJuTaWEq]:
                  hasVariant(variants, "company", "google") &&
                  hasVariant(variants, "width", "_120"),
                [sty.freeBox__company_google_width__140__mUd20GtgJuSzwF]:
                  hasVariant(variants, "company", "google") &&
                  hasVariant(variants, "width", "_140"),
                [sty.freeBox__company_google_width__160__mUd20GtgJu5HN]:
                  hasVariant(variants, "company", "google") &&
                  hasVariant(variants, "width", "_160"),
                [sty.freeBox__company_google_width__180__mUd20GtgJuCt8GE]:
                  hasVariant(variants, "company", "google") &&
                  hasVariant(variants, "width", "_180"),
                [sty.freeBox__company_google_width__270__mUd20GtgJuA3Dq5]:
                  hasVariant(variants, "company", "google") &&
                  hasVariant(variants, "width", "_270"),
                [sty.freeBox__company_google_width__90__mUd20GtgJuQ9Wdd]:
                  hasVariant(variants, "company", "google") &&
                  hasVariant(variants, "width", "_90"),
                [sty.freeBox__company_paypal__mUd20QtHy]: hasVariant(
                  variants,
                  "company",
                  "paypal"
                ),
                [sty.freeBox__company_paypal_width__120__mUd20QtHyTaWEq]:
                  hasVariant(variants, "company", "paypal") &&
                  hasVariant(variants, "width", "_120"),
                [sty.freeBox__company_paypal_width__140__mUd20QtHySzwF]:
                  hasVariant(variants, "company", "paypal") &&
                  hasVariant(variants, "width", "_140"),
                [sty.freeBox__company_paypal_width__160__mUd20QtHy5HN]:
                  hasVariant(variants, "company", "paypal") &&
                  hasVariant(variants, "width", "_160"),
                [sty.freeBox__company_paypal_width__180__mUd20QtHyCt8GE]:
                  hasVariant(variants, "company", "paypal") &&
                  hasVariant(variants, "width", "_180"),
                [sty.freeBox__company_paypal_width__270__mUd20QtHyA3Dq5]:
                  hasVariant(variants, "company", "paypal") &&
                  hasVariant(variants, "width", "_270"),
                [sty.freeBox__company_paypal_width__360__mUd20QtHyYd0Z6]:
                  hasVariant(variants, "company", "paypal") &&
                  hasVariant(variants, "width", "_360"),
                [sty.freeBox__company_quickbooks__mUd20GvfUc]: hasVariant(
                  variants,
                  "company",
                  "quickbooks"
                ),
                [sty.freeBox__company_quickbooks_width__120__mUd20GvfUcTaWEq]:
                  hasVariant(variants, "company", "quickbooks") &&
                  hasVariant(variants, "width", "_120"),
                [sty.freeBox__company_quickbooks_width__140__mUd20GvfUcSzwF]:
                  hasVariant(variants, "company", "quickbooks") &&
                  hasVariant(variants, "width", "_140"),
                [sty.freeBox__company_quickbooks_width__160__mUd20GvfUc5HN]:
                  hasVariant(variants, "company", "quickbooks") &&
                  hasVariant(variants, "width", "_160"),
                [sty.freeBox__company_quickbooks_width__180__mUd20GvfUcCt8GE]:
                  hasVariant(variants, "company", "quickbooks") &&
                  hasVariant(variants, "width", "_180"),
                [sty.freeBox__company_quickbooks_width__270__mUd20GvfUcA3Dq5]:
                  hasVariant(variants, "company", "quickbooks") &&
                  hasVariant(variants, "width", "_270"),
                [sty.freeBox__company_quickbooks_width__90__mUd20GvfUcQ9Wdd]:
                  hasVariant(variants, "company", "quickbooks") &&
                  hasVariant(variants, "width", "_90"),
                [sty.freeBox__company_stripe__mUd20Vu9E]: hasVariant(
                  variants,
                  "company",
                  "stripe"
                ),
                [sty.freeBox__company_stripe_width__120__mUd20Vu9ETaWEq]:
                  hasVariant(variants, "company", "stripe") &&
                  hasVariant(variants, "width", "_120"),
                [sty.freeBox__company_stripe_width__140__mUd20Vu9ESzwF]:
                  hasVariant(variants, "company", "stripe") &&
                  hasVariant(variants, "width", "_140"),
                [sty.freeBox__company_stripe_width__160__mUd20Vu9E5HN]:
                  hasVariant(variants, "company", "stripe") &&
                  hasVariant(variants, "width", "_160"),
                [sty.freeBox__company_stripe_width__270__mUd20Vu9EA3Dq5]:
                  hasVariant(variants, "company", "stripe") &&
                  hasVariant(variants, "width", "_270"),
                [sty.freeBox__company_stripe_width__90__mUd20Vu9EQ9Wdd]:
                  hasVariant(variants, "company", "stripe") &&
                  hasVariant(variants, "width", "_90"),
                [sty.freeBox__company_xero__mUd20FH0Ct]: hasVariant(
                  variants,
                  "company",
                  "xero"
                ),
                [sty.freeBox__company_xero_width__120__mUd20FH0CtTaWEq]:
                  hasVariant(variants, "company", "xero") &&
                  hasVariant(variants, "width", "_120"),
                [sty.freeBox__company_xero_width__140__mUd20FH0CtSzwF]:
                  hasVariant(variants, "company", "xero") &&
                  hasVariant(variants, "width", "_140"),
                [sty.freeBox__company_xero_width__160__mUd20FH0Ct5HN]:
                  hasVariant(variants, "company", "xero") &&
                  hasVariant(variants, "width", "_160"),
                [sty.freeBox__company_xero_width__180__mUd20FH0CtCt8GE]:
                  hasVariant(variants, "company", "xero") &&
                  hasVariant(variants, "width", "_180"),
                [sty.freeBox__company_xero_width__270__mUd20FH0CtA3Dq5]:
                  hasVariant(variants, "company", "xero") &&
                  hasVariant(variants, "width", "_270"),
                [sty.freeBox__company_xero_width__360__mUd20FH0CtYd0Z6]:
                  hasVariant(variants, "company", "xero") &&
                  hasVariant(variants, "width", "_360"),
                [sty.freeBox__width__120__mUd20TaWEq]: hasVariant(
                  variants,
                  "width",
                  "_120"
                ),
                [sty.freeBox__width__140__mUd20SzwF]: hasVariant(
                  variants,
                  "width",
                  "_140"
                ),
                [sty.freeBox__width__160__mUd205HN]: hasVariant(
                  variants,
                  "width",
                  "_160"
                ),
                [sty.freeBox__width__180__mUd20Ct8GE]: hasVariant(
                  variants,
                  "width",
                  "_180"
                ),
                [sty.freeBox__width__270__mUd20A3Dq5]: hasVariant(
                  variants,
                  "width",
                  "_270"
                ),
                [sty.freeBox__width__360__mUd20Yd0Z6]: hasVariant(
                  variants,
                  "width",
                  "_360"
                ),
                [sty.freeBox__width__360_company_google__mUd20Yd0Z6GtgJu]:
                  hasVariant(variants, "width", "_360") &&
                  hasVariant(variants, "company", "google"),
                [sty.freeBox__width__360_company_quickbooks__mUd20Yd0Z6GvfUc]:
                  hasVariant(variants, "width", "_360") &&
                  hasVariant(variants, "company", "quickbooks"),
                [sty.freeBox__width__360_company_stripe__mUd20Yd0Z6Vu9E]:
                  hasVariant(variants, "width", "_360") &&
                  hasVariant(variants, "company", "stripe"),
                [sty.freeBox__width__90__mUd20Q9Wdd]: hasVariant(
                  variants,
                  "width",
                  "_90"
                ),
                [sty.freeBox__width__90_company_paypal__mUd20Q9WddQtHy]:
                  hasVariant(variants, "width", "_90") &&
                  hasVariant(variants, "company", "paypal"),
                [sty.freeBox__width__90_company_xero__mUd20Q9WddFH0Ct]:
                  hasVariant(variants, "width", "_90") &&
                  hasVariant(variants, "company", "xero")
              }
            )}
          >
            {hasVariant(variants, "company", "facebook") &&
            hasVariant(variants, "width", "_180")
              ? "Sign in with Facebook"
              : hasVariant(variants, "company", "facebook") &&
                hasVariant(variants, "width", "_160")
              ? "Sign in with Facebook"
              : hasVariant(variants, "company", "facebook") &&
                hasVariant(variants, "width", "_140")
              ? "Sign in with Facebook"
              : hasVariant(variants, "company", "facebook") &&
                hasVariant(variants, "width", "_120")
              ? "Sign in with Facebook"
              : hasVariant(variants, "company", "facebook") &&
                hasVariant(variants, "width", "_90")
              ? "Sign in with Facebook"
              : hasVariant(variants, "company", "quickbooks")
              ? "Sign in with Quickbooks"
              : hasVariant(variants, "company", "xero")
              ? "Sign in with Xero"
              : hasVariant(variants, "company", "paypal")
              ? "Sign in with Paypal"
              : hasVariant(variants, "company", "stripe")
              ? "Sign in with Stripe"
              : hasVariant(variants, "company", "google")
              ? "Sign in with Google"
              : hasVariant(variants, "company", "facebook")
              ? "Sign in with Facebook"
              : "Sign in with..."}
          </div>
        </div>
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "iconTextParent", "svgParent", "svgBg", "svg"],
  iconTextParent: ["iconTextParent", "svgParent", "svgBg", "svg"],
  svgParent: ["svgParent", "svgBg", "svg"],
  svgBg: ["svgBg", "svg"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "button";
  iconTextParent: "div";
  svgParent: "div";
  svgBg: "div";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicButtonConnectedAccount__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicButtonConnectedAccount__VariantsArgs;
    args?: PlasmicButtonConnectedAccount__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicButtonConnectedAccount__Fetches;
  } & Omit<PlasmicButtonConnectedAccount__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicButtonConnectedAccount__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicButtonConnectedAccount__ArgProps,
      internalVariantPropNames: PlasmicButtonConnectedAccount__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicButtonConnectedAccount__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicButtonConnectedAccount";
  } else {
    func.displayName = `PlasmicButtonConnectedAccount.${nodeName}`;
  }
  return func;
}

export const PlasmicButtonConnectedAccount = Object.assign(
  // Top-level PlasmicButtonConnectedAccount renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    iconTextParent: makeNodeComponent("iconTextParent"),
    svgParent: makeNodeComponent("svgParent"),
    svgBg: makeNodeComponent("svgBg"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicButtonConnectedAccount
    internalVariantProps: PlasmicButtonConnectedAccount__VariantProps,
    internalArgProps: PlasmicButtonConnectedAccount__ArgProps
  }
);

export default PlasmicButtonConnectedAccount;
/* prettier-ignore-end */
