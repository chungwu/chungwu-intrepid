// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: Eupm_g0xTXvTCBa
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import MenuIconListItem from "../../MenuIconListItem"; // plasmic-import: A4cpU1IW2YGn9yX/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicPanelMemberSectionMarket.module.css"; // plasmic-import: Eupm_g0xTXvTCBa/css

import MarketIcon from "./icons/PlasmicIcon__Market"; // plasmic-import: lsoIitYGoKFU27_/icon
import RecommendationsIcon from "./icons/PlasmicIcon__Recommendations"; // plasmic-import: dRW5io906rWBI_v/icon
import BookmarkIcon from "./icons/PlasmicIcon__Bookmark"; // plasmic-import: jLuEpvSpry_1edd/icon
import OrdersIcon from "./icons/PlasmicIcon__Orders"; // plasmic-import: lkmMjceRvmz8Quq/icon
import CommentReviewBIcon from "./icons/PlasmicIcon__CommentReviewB"; // plasmic-import: aj70qLXx4-ZWjbL/icon
import CommentReviewIcon from "./icons/PlasmicIcon__CommentReview"; // plasmic-import: XV58WNulEaMmNoZ/icon

export type PlasmicPanelMemberSectionMarket__VariantMembers = {};

export type PlasmicPanelMemberSectionMarket__VariantsArgs = {};
type VariantPropType = keyof PlasmicPanelMemberSectionMarket__VariantsArgs;
export const PlasmicPanelMemberSectionMarket__VariantProps =
  new Array<VariantPropType>();

export type PlasmicPanelMemberSectionMarket__ArgsType = {};
type ArgPropType = keyof PlasmicPanelMemberSectionMarket__ArgsType;
export const PlasmicPanelMemberSectionMarket__ArgProps =
  new Array<ArgPropType>();

export type PlasmicPanelMemberSectionMarket__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultPanelMemberSectionMarketProps {
  className?: string;
}

function PlasmicPanelMemberSectionMarket__RenderFunc(props: {
  variants: PlasmicPanelMemberSectionMarket__VariantsArgs;
  args: PlasmicPanelMemberSectionMarket__ArgsType;
  overrides: PlasmicPanelMemberSectionMarket__OverridesType;
  dataFetches?: PlasmicPanelMemberSectionMarket__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.freeBox__grugs)}
      >
        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.freeBox___1JzSw
          )}
        >
          {"Market"}
        </div>
      </p.Stack>

      <MenuIconListItem
        className={classNames("__wab_instance", sty.menuIconListItem__yvorf)}
        navIcon={
          <div className={classNames(defaultcss.all, sty.freeBox__eyGw6)}>
            <MarketIcon
              className={classNames(defaultcss.all, sty.svg__xL41R)}
              role={"img"}
            />
          </div>
        }
        navText={"Home"}
      />

      <MenuIconListItem
        className={classNames("__wab_instance", sty.menuIconListItem__iPwDo)}
        navIcon={
          <div className={classNames(defaultcss.all, sty.freeBox__gBgx)}>
            <RecommendationsIcon
              className={classNames(defaultcss.all, sty.svg__h6ZhD)}
              role={"img"}
            />
          </div>
        }
        navText={"Recommendations"}
      />

      <MenuIconListItem
        className={classNames("__wab_instance", sty.menuIconListItem__mGfgs)}
        navIcon={
          <div className={classNames(defaultcss.all, sty.freeBox__qoWNt)}>
            <BookmarkIcon
              className={classNames(defaultcss.all, sty.svg__a80PZ)}
              role={"img"}
            />
          </div>
        }
        navText={"Bookmarks"}
      />

      <MenuIconListItem
        className={classNames("__wab_instance", sty.menuIconListItem__rb0Y)}
        navIcon={
          <div className={classNames(defaultcss.all, sty.freeBox___9WTcf)}>
            <OrdersIcon
              className={classNames(defaultcss.all, sty.svg__m5KVn)}
              role={"img"}
            />
          </div>
        }
        navText={"Orders"}
      />

      <MenuIconListItem
        className={classNames("__wab_instance", sty.menuIconListItem__q44Cu)}
        navIcon={
          <div className={classNames(defaultcss.all, sty.freeBox__eXkg3)}>
            <CommentReviewBIcon
              className={classNames(defaultcss.all, sty.svg__i2Y39)}
              role={"img"}
            />
          </div>
        }
        navText={"Reviews"}
      />

      <MenuIconListItem
        className={classNames("__wab_instance", sty.menuIconListItem__sb1SQ)}
        navIcon={
          <div className={classNames(defaultcss.all, sty.freeBox__mUr15)}>
            <CommentReviewIcon
              className={classNames(defaultcss.all, sty.svg__t4SzC)}
              role={"img"}
            />
          </div>
        }
        navText={"Messages"}
      />
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPanelMemberSectionMarket__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPanelMemberSectionMarket__VariantsArgs;
    args?: PlasmicPanelMemberSectionMarket__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicPanelMemberSectionMarket__Fetches;
  } & Omit<PlasmicPanelMemberSectionMarket__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPanelMemberSectionMarket__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPanelMemberSectionMarket__ArgProps,
      internalVariantPropNames: PlasmicPanelMemberSectionMarket__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicPanelMemberSectionMarket__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPanelMemberSectionMarket";
  } else {
    func.displayName = `PlasmicPanelMemberSectionMarket.${nodeName}`;
  }
  return func;
}

export const PlasmicPanelMemberSectionMarket = Object.assign(
  // Top-level PlasmicPanelMemberSectionMarket renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicPanelMemberSectionMarket
    internalVariantProps: PlasmicPanelMemberSectionMarket__VariantProps,
    internalArgProps: PlasmicPanelMemberSectionMarket__ArgProps
  }
);

export default PlasmicPanelMemberSectionMarket;
/* prettier-ignore-end */
