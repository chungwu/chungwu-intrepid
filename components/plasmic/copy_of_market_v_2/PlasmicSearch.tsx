// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: uYlFqStVq6PLKmw
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavbarInternal from "../../NavbarInternal"; // plasmic-import: nBfIHHqHvjUywN9/component
import CardHeaderTitleDisplay from "../../CardHeaderTitleDisplay"; // plasmic-import: fk5BRaqICb6MOmt/component
import SelectDropdownPrimary from "../../SelectDropdownPrimary"; // plasmic-import: v8d0bbfFjkOeuiJ/component
import SelectDropdownPrimary__Option from "../../SelectDropdownPrimary__Option"; // plasmic-import: AqtjodigdxHDQVL/component
import ChipSearchFilterButton from "../../ChipSearchFilterButton"; // plasmic-import: 3nlcq-i3fhWpnw8/component
import CardServiceDisplay from "../../CardServiceDisplay"; // plasmic-import: 3r1WiULCCTnt4U2/component
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: gpNjXfbD_ZdpPU/component
import FooterB from "../../FooterB"; // plasmic-import: IZENTiSL4_zyK8/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicSearch.module.css"; // plasmic-import: uYlFqStVq6PLKmw/css

import PlusBoldIcon from "./icons/PlasmicIcon__PlusBold"; // plasmic-import: lhSEEajPJGZatfD/icon

export type PlasmicSearch__VariantMembers = {};

export type PlasmicSearch__VariantsArgs = {};
type VariantPropType = keyof PlasmicSearch__VariantsArgs;
export const PlasmicSearch__VariantProps = new Array<VariantPropType>();

export type PlasmicSearch__ArgsType = {};
type ArgPropType = keyof PlasmicSearch__ArgsType;
export const PlasmicSearch__ArgProps = new Array<ArgPropType>();

export type PlasmicSearch__OverridesType = {
  root?: p.Flex<"div">;
  navbarInternal?: p.Flex<typeof NavbarInternal>;
  cardHeaderTitleDisplay?: p.Flex<typeof CardHeaderTitleDisplay>;
  buttonPrimary?: p.Flex<typeof ButtonPrimary>;
  footerB?: p.Flex<typeof FooterB>;
};

export interface DefaultSearchProps {
  dataFetches: PlasmicSearch__Fetches;
}

function PlasmicSearch__RenderFunc(props: {
  variants: PlasmicSearch__VariantsArgs;
  args: PlasmicSearch__ArgsType;
  overrides: PlasmicSearch__OverridesType;
  dataFetches?: PlasmicSearch__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <React.Fragment>
      <Head>
        <title key="title">{""}</title>
        <meta key="og:title" property="og:title" content={""} />
        <meta
          key="description"
          name="description"
          property="og:description"
          content={""}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <NavbarInternal
            data-plasmic-name={"navbarInternal"}
            data-plasmic-override={overrides.navbarInternal}
            className={classNames("__wab_instance", sty.navbarInternal)}
          />

          <div className={classNames(defaultcss.all, sty.freeBox__e3BIn)}>
            <CardHeaderTitleDisplay
              data-plasmic-name={"cardHeaderTitleDisplay"}
              data-plasmic-override={overrides.cardHeaderTitleDisplay}
              className={classNames(
                "__wab_instance",
                sty.cardHeaderTitleDisplay
              )}
              headings={[]}
              slot={
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__tSteK
                  )}
                >
                  {"Discover the community"}
                </div>
              }
              textDisplay={"Search"}
              textSubhead={
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox___1HzpT
                  )}
                >
                  {
                    "There's a service for everything. Find it below and make it happen."
                  }
                </div>
              }
            />
          </div>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.freeBox__jcs79)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.freeBox___6EhCy)}
            >
              <SelectDropdownPrimary
                className={classNames(
                  "__wab_instance",
                  sty.selectDropdownPrimary__diqh5
                )}
                placeholder={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__mBb1L
                    )}
                  >
                    {"Select"}
                  </div>
                }
                width={"_160" as const}
              />

              <SelectDropdownPrimary
                className={classNames(
                  "__wab_instance",
                  sty.selectDropdownPrimary__gOl8P
                )}
                placeholder={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__lz3Lc
                    )}
                  >
                    {"Select"}
                  </div>
                }
                width={"_160" as const}
              />

              <SelectDropdownPrimary
                className={classNames(
                  "__wab_instance",
                  sty.selectDropdownPrimary__n3G3
                )}
                placeholder={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__kMaBk
                    )}
                  >
                    {"Select"}
                  </div>
                }
                width={"_160" as const}
              />
            </p.Stack>

            <ChipSearchFilterButton
              className={classNames(
                "__wab_instance",
                sty.chipSearchFilterButton__g4R2U
              )}
            />

            <ChipSearchFilterButton
              className={classNames(
                "__wab_instance",
                sty.chipSearchFilterButton__vWpyu
              )}
            />

            <ChipSearchFilterButton
              className={classNames(
                "__wab_instance",
                sty.chipSearchFilterButton___2OfOl
              )}
            />

            <ChipSearchFilterButton
              className={classNames(
                "__wab_instance",
                sty.chipSearchFilterButton__nrlu
              )}
            />

            <ChipSearchFilterButton
              className={classNames(
                "__wab_instance",
                sty.chipSearchFilterButton__cVh9
              )}
            />

            <ChipSearchFilterButton
              className={classNames(
                "__wab_instance",
                sty.chipSearchFilterButton__oxUA
              )}
            />

            <ChipSearchFilterButton
              className={classNames(
                "__wab_instance",
                sty.chipSearchFilterButton__gr6Bp
              )}
            />

            <ChipSearchFilterButton
              className={classNames(
                "__wab_instance",
                sty.chipSearchFilterButton__knqkm
              )}
            />

            <ChipSearchFilterButton
              className={classNames(
                "__wab_instance",
                sty.chipSearchFilterButton__oJrm4
              )}
            />

            <ChipSearchFilterButton
              className={classNames(
                "__wab_instance",
                sty.chipSearchFilterButton__xkup
              )}
            />

            <ChipSearchFilterButton
              className={classNames(
                "__wab_instance",
                sty.chipSearchFilterButton__uOp0S
              )}
            />

            <ChipSearchFilterButton
              className={classNames(
                "__wab_instance",
                sty.chipSearchFilterButton__qj6Iu
              )}
            />

            <ChipSearchFilterButton
              className={classNames(
                "__wab_instance",
                sty.chipSearchFilterButton___6J5Qf
              )}
            />
          </p.Stack>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.freeBox__ydcw)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.freeBox__z3Co0)}
            >
              <CardServiceDisplay
                boost={"boost" as const}
                className={classNames(
                  "__wab_instance",
                  sty.cardServiceDisplay__yVdfv
                )}
                membership={"membership" as const}
                price={"price" as const}
                rating={"rating" as const}
                size={"_360X270" as const}
                userStats={"userStats" as const}
                verification={"verification" as const}
              />

              <CardServiceDisplay
                boost={"boost" as const}
                className={classNames(
                  "__wab_instance",
                  sty.cardServiceDisplay___2BNcL
                )}
                membership={"membership" as const}
                price={"price" as const}
                rating={"rating" as const}
                size={"_360X270" as const}
                userStats={"userStats" as const}
                verification={"verification" as const}
              />

              <CardServiceDisplay
                boost={"boost" as const}
                className={classNames(
                  "__wab_instance",
                  sty.cardServiceDisplay__pKb94
                )}
                membership={"membership" as const}
                price={"price" as const}
                rating={"rating" as const}
                size={"_360X270" as const}
                userStats={"userStats" as const}
                verification={"verification" as const}
              />

              <CardServiceDisplay
                boost={"boost" as const}
                className={classNames(
                  "__wab_instance",
                  sty.cardServiceDisplay__zx0Qx
                )}
                membership={"membership" as const}
                price={"price" as const}
                rating={"rating" as const}
                size={"_360X270" as const}
                userStats={"userStats" as const}
                verification={"verification" as const}
              />

              <CardServiceDisplay
                boost={"boost" as const}
                className={classNames(
                  "__wab_instance",
                  sty.cardServiceDisplay__mHkgs
                )}
                membership={"membership" as const}
                price={"price" as const}
                rating={"rating" as const}
                size={"_360X270" as const}
                userStats={"userStats" as const}
                verification={"verification" as const}
              />

              <CardServiceDisplay
                boost={"boost" as const}
                className={classNames(
                  "__wab_instance",
                  sty.cardServiceDisplay__jQu4
                )}
                membership={"membership" as const}
                price={"price" as const}
                rating={"rating" as const}
                size={"_360X270" as const}
                userStats={"userStats" as const}
                verification={"verification" as const}
              />

              <CardServiceDisplay
                boost={"boost" as const}
                className={classNames(
                  "__wab_instance",
                  sty.cardServiceDisplay__fcSze
                )}
                membership={"membership" as const}
                price={"price" as const}
                rating={"rating" as const}
                size={"_360X270" as const}
                userStats={"userStats" as const}
                verification={"verification" as const}
              />

              <CardServiceDisplay
                boost={"boost" as const}
                className={classNames(
                  "__wab_instance",
                  sty.cardServiceDisplay__gWf0Z
                )}
                membership={"membership" as const}
                price={"price" as const}
                rating={"rating" as const}
                size={"_360X270" as const}
                userStats={"userStats" as const}
                verification={"verification" as const}
              />

              <CardServiceDisplay
                boost={"boost" as const}
                className={classNames(
                  "__wab_instance",
                  sty.cardServiceDisplay__phKmg
                )}
                membership={"membership" as const}
                price={"price" as const}
                rating={"rating" as const}
                size={"_360X270" as const}
                userStats={"userStats" as const}
                verification={"verification" as const}
              />
            </p.Stack>

            <ButtonPrimary
              data-plasmic-name={"buttonPrimary"}
              data-plasmic-override={overrides.buttonPrimary}
              className={classNames("__wab_instance", sty.buttonPrimary)}
              size={"_270" as const}
              type={"ghost" as const}
            >
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.freeBox__h1M2
                )}
              >
                {"Load more"}
              </div>
            </ButtonPrimary>
          </p.Stack>

          <FooterB
            data-plasmic-name={"footerB"}
            data-plasmic-override={overrides.footerB}
            className={classNames("__wab_instance", sty.footerB)}
          />
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbarInternal",
    "cardHeaderTitleDisplay",
    "buttonPrimary",
    "footerB"
  ],
  navbarInternal: ["navbarInternal"],
  cardHeaderTitleDisplay: ["cardHeaderTitleDisplay"],
  buttonPrimary: ["buttonPrimary"],
  footerB: ["footerB"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbarInternal: typeof NavbarInternal;
  cardHeaderTitleDisplay: typeof CardHeaderTitleDisplay;
  buttonPrimary: typeof ButtonPrimary;
  footerB: typeof FooterB;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSearch__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSearch__VariantsArgs;
    args?: PlasmicSearch__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicSearch__Fetches;
  } & Omit<PlasmicSearch__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSearch__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSearch__ArgProps,
      internalVariantPropNames: PlasmicSearch__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicSearch__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSearch";
  } else {
    func.displayName = `PlasmicSearch.${nodeName}`;
  }
  return func;
}

export const PlasmicSearch = Object.assign(
  // Top-level PlasmicSearch renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbarInternal: makeNodeComponent("navbarInternal"),
    cardHeaderTitleDisplay: makeNodeComponent("cardHeaderTitleDisplay"),
    buttonPrimary: makeNodeComponent("buttonPrimary"),
    footerB: makeNodeComponent("footerB"),

    // Metadata about props expected for PlasmicSearch
    internalVariantProps: PlasmicSearch__VariantProps,
    internalArgProps: PlasmicSearch__ArgProps
  }
);

export default PlasmicSearch;
/* prettier-ignore-end */
