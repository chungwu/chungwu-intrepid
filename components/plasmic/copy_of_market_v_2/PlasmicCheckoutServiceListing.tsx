// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: QvB81mmF62BJiNV
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ElementCheckoutHeadlineTotal from "../../ElementCheckoutHeadlineTotal"; // plasmic-import: 4GIILk9cbIEAWje/component
import ElementCheckoutSubHeadlineTotal from "../../ElementCheckoutSubHeadlineTotal"; // plasmic-import: VsrEfR5DmXJHQSg/component
import ElementCheckoutListItemUnitInterval from "../../ElementCheckoutListItemUnitInterval"; // plasmic-import: 5EU0MwcRzuuFemQ/component
import InputTextForm from "../../InputTextForm"; // plasmic-import: xiZmrha0lhlIet/component
import ElementCheckoutPromotionPercentTotalValue from "../../ElementCheckoutPromotionPercentTotalValue"; // plasmic-import: GBa_tJKE4sY1Mwa/component
import ElementCheckoutTotalHeadline from "../../ElementCheckoutTotalHeadline"; // plasmic-import: A-mOL5rHt9WuLxg/component
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: gpNjXfbD_ZdpPU/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicCheckoutServiceListing.module.css"; // plasmic-import: QvB81mmF62BJiNV/css

import CellDividerIcon from "./icons/PlasmicIcon__CellDivider"; // plasmic-import: 0houBrn4b8rrzS3/icon
import PlusBoldIcon from "./icons/PlasmicIcon__PlusBold"; // plasmic-import: lhSEEajPJGZatfD/icon

export type PlasmicCheckoutServiceListing__VariantMembers = {};

export type PlasmicCheckoutServiceListing__VariantsArgs = {};
type VariantPropType = keyof PlasmicCheckoutServiceListing__VariantsArgs;
export const PlasmicCheckoutServiceListing__VariantProps =
  new Array<VariantPropType>();

export type PlasmicCheckoutServiceListing__ArgsType = {};
type ArgPropType = keyof PlasmicCheckoutServiceListing__ArgsType;
export const PlasmicCheckoutServiceListing__ArgProps = new Array<ArgPropType>();

export type PlasmicCheckoutServiceListing__OverridesType = {
  root?: p.Flex<"div">;
  checkoutHeadlineText?: p.Flex<"div">;
  checkoutSubTotalListItemBlock?: p.Flex<"div">;
  elementCheckoutHeadlineTotal?: p.Flex<typeof ElementCheckoutHeadlineTotal>;
  checkoutListItems?: p.Flex<"div">;
  elementCheckoutSubHeadlineTotal?: p.Flex<
    typeof ElementCheckoutSubHeadlineTotal
  >;
  elementCheckoutListItemUnitInterval?: p.Flex<
    typeof ElementCheckoutListItemUnitInterval
  >;
  placementHeadline?: p.Flex<"div">;
  checkoutPromotionInput?: p.Flex<"div">;
  inputCheckoutPromotion?: p.Flex<typeof InputTextForm>;
  elementCheckoutPromotionPercentTotalValue?: p.Flex<
    typeof ElementCheckoutPromotionPercentTotalValue
  >;
  checkoutTotalButtonBlock?: p.Flex<"div">;
  elementCheckoutTotalHeadline?: p.Flex<typeof ElementCheckoutTotalHeadline>;
  checkoutPlaceOrder?: p.Flex<typeof ButtonPrimary>;
};

export interface DefaultCheckoutServiceListingProps {
  className?: string;
}

function PlasmicCheckoutServiceListing__RenderFunc(props: {
  variants: PlasmicCheckoutServiceListing__VariantsArgs;
  args: PlasmicCheckoutServiceListing__ArgsType;
  overrides: PlasmicCheckoutServiceListing__OverridesType;
  dataFetches?: PlasmicCheckoutServiceListing__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div
        data-plasmic-name={"checkoutHeadlineText"}
        data-plasmic-override={overrides.checkoutHeadlineText}
        className={classNames(
          defaultcss.all,
          defaultcss.__wab_text,
          sty.checkoutHeadlineText
        )}
      >
        {"Checkout"}
      </div>

      <p.Stack
        as={"div"}
        data-plasmic-name={"checkoutSubTotalListItemBlock"}
        data-plasmic-override={overrides.checkoutSubTotalListItemBlock}
        hasGap={true}
        className={classNames(
          defaultcss.all,
          sty.checkoutSubTotalListItemBlock
        )}
      >
        <ElementCheckoutHeadlineTotal
          data-plasmic-name={"elementCheckoutHeadlineTotal"}
          data-plasmic-override={overrides.elementCheckoutHeadlineTotal}
          className={classNames(
            "__wab_instance",
            sty.elementCheckoutHeadlineTotal
          )}
        />

        <p.Stack
          as={"div"}
          data-plasmic-name={"checkoutListItems"}
          data-plasmic-override={overrides.checkoutListItems}
          hasGap={true}
          className={classNames(defaultcss.all, sty.checkoutListItems)}
        >
          <ElementCheckoutSubHeadlineTotal
            data-plasmic-name={"elementCheckoutSubHeadlineTotal"}
            data-plasmic-override={overrides.elementCheckoutSubHeadlineTotal}
            className={classNames(
              "__wab_instance",
              sty.elementCheckoutSubHeadlineTotal
            )}
          />

          <ElementCheckoutListItemUnitInterval
            data-plasmic-name={"elementCheckoutListItemUnitInterval"}
            data-plasmic-override={
              overrides.elementCheckoutListItemUnitInterval
            }
            className={classNames(
              "__wab_instance",
              sty.elementCheckoutListItemUnitInterval
            )}
          />

          <div
            data-plasmic-name={"placementHeadline"}
            data-plasmic-override={overrides.placementHeadline}
            className={classNames(defaultcss.all, sty.placementHeadline)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.freeBox__icMo1)}
            >
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.freeBox__c3Gly
                )}
              >
                {"Placement"}
              </div>
            </p.Stack>

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.freeBox__wYhEw)}
            >
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.freeBox___2CGG
                )}
              >
                {"$"}
              </div>

              <div className={classNames(defaultcss.all, sty.freeBox__ccQwJ)}>
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__gPau
                  )}
                >
                  {"0.00"}
                </div>
              </div>
            </p.Stack>
          </div>

          <div className={classNames(defaultcss.all, sty.freeBox__edOs8)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.freeBox___50Qgf)}
            >
              <div className={classNames(defaultcss.all, sty.freeBox___52VCl)}>
                <div className={classNames(defaultcss.all, sty.freeBox__ywRcq)}>
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__xXqF
                    )}
                  >
                    {"1"}
                  </div>
                </div>
              </div>

              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.freeBox__srMry
                )}
              >
                {"Priority"}
              </div>

              <div className={classNames(defaultcss.all, sty.freeBox__vUiGz)}>
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox___9Ztp2
                  )}
                >
                  {"x"}
                </div>
              </div>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.freeBox___785Yz)}
              >
                <div className={classNames(defaultcss.all, sty.freeBox__xLgkD)}>
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__rwiX
                    )}
                  >
                    {"Month"}
                  </div>
                </div>
              </p.Stack>
            </p.Stack>

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.freeBox___6HWyU)}
            >
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.freeBox__vh5Ta
                )}
              >
                {"$"}
              </div>

              <div className={classNames(defaultcss.all, sty.freeBox__nEqI1)}>
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__dtmpa
                  )}
                >
                  {"0.00"}
                </div>
              </div>
            </p.Stack>
          </div>
        </p.Stack>
      </p.Stack>

      <CellDividerIcon
        className={classNames(defaultcss.all, sty.svg__umNs9)}
        role={"img"}
      />

      <p.Stack
        as={"div"}
        data-plasmic-name={"checkoutPromotionInput"}
        data-plasmic-override={overrides.checkoutPromotionInput}
        hasGap={true}
        className={classNames(defaultcss.all, sty.checkoutPromotionInput)}
      >
        <InputTextForm
          data-plasmic-name={"inputCheckoutPromotion"}
          data-plasmic-override={overrides.inputCheckoutPromotion}
          className={classNames("__wab_instance", sty.inputCheckoutPromotion)}
          labelHeadline={
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox__onLVr
              )}
            >
              {"Promotion"}
            </div>
          }
          width={"_360" as const}
        />

        <ElementCheckoutPromotionPercentTotalValue
          data-plasmic-name={"elementCheckoutPromotionPercentTotalValue"}
          data-plasmic-override={
            overrides.elementCheckoutPromotionPercentTotalValue
          }
          className={classNames(
            "__wab_instance",
            sty.elementCheckoutPromotionPercentTotalValue
          )}
        />
      </p.Stack>

      <CellDividerIcon
        className={classNames(defaultcss.all, sty.svg__qdxGm)}
        role={"img"}
      />

      <p.Stack
        as={"div"}
        data-plasmic-name={"checkoutTotalButtonBlock"}
        data-plasmic-override={overrides.checkoutTotalButtonBlock}
        hasGap={true}
        className={classNames(defaultcss.all, sty.checkoutTotalButtonBlock)}
      >
        <ElementCheckoutTotalHeadline
          data-plasmic-name={"elementCheckoutTotalHeadline"}
          data-plasmic-override={overrides.elementCheckoutTotalHeadline}
          className={classNames(
            "__wab_instance",
            sty.elementCheckoutTotalHeadline
          )}
        />

        <ButtonPrimary
          data-plasmic-name={"checkoutPlaceOrder"}
          data-plasmic-override={overrides.checkoutPlaceOrder}
          className={classNames("__wab_instance", sty.checkoutPlaceOrder)}
          color={"brand" as const}
          size={"_360" as const}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox__siVd7
            )}
          >
            {"Place Order"}
          </div>
        </ButtonPrimary>
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "checkoutHeadlineText",
    "checkoutSubTotalListItemBlock",
    "elementCheckoutHeadlineTotal",
    "checkoutListItems",
    "elementCheckoutSubHeadlineTotal",
    "elementCheckoutListItemUnitInterval",
    "placementHeadline",
    "checkoutPromotionInput",
    "inputCheckoutPromotion",
    "elementCheckoutPromotionPercentTotalValue",
    "checkoutTotalButtonBlock",
    "elementCheckoutTotalHeadline",
    "checkoutPlaceOrder"
  ],
  checkoutHeadlineText: ["checkoutHeadlineText"],
  checkoutSubTotalListItemBlock: [
    "checkoutSubTotalListItemBlock",
    "elementCheckoutHeadlineTotal",
    "checkoutListItems",
    "elementCheckoutSubHeadlineTotal",
    "elementCheckoutListItemUnitInterval",
    "placementHeadline"
  ],
  elementCheckoutHeadlineTotal: ["elementCheckoutHeadlineTotal"],
  checkoutListItems: [
    "checkoutListItems",
    "elementCheckoutSubHeadlineTotal",
    "elementCheckoutListItemUnitInterval",
    "placementHeadline"
  ],
  elementCheckoutSubHeadlineTotal: ["elementCheckoutSubHeadlineTotal"],
  elementCheckoutListItemUnitInterval: ["elementCheckoutListItemUnitInterval"],
  placementHeadline: ["placementHeadline"],
  checkoutPromotionInput: [
    "checkoutPromotionInput",
    "inputCheckoutPromotion",
    "elementCheckoutPromotionPercentTotalValue"
  ],
  inputCheckoutPromotion: ["inputCheckoutPromotion"],
  elementCheckoutPromotionPercentTotalValue: [
    "elementCheckoutPromotionPercentTotalValue"
  ],
  checkoutTotalButtonBlock: [
    "checkoutTotalButtonBlock",
    "elementCheckoutTotalHeadline",
    "checkoutPlaceOrder"
  ],
  elementCheckoutTotalHeadline: ["elementCheckoutTotalHeadline"],
  checkoutPlaceOrder: ["checkoutPlaceOrder"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  checkoutHeadlineText: "div";
  checkoutSubTotalListItemBlock: "div";
  elementCheckoutHeadlineTotal: typeof ElementCheckoutHeadlineTotal;
  checkoutListItems: "div";
  elementCheckoutSubHeadlineTotal: typeof ElementCheckoutSubHeadlineTotal;
  elementCheckoutListItemUnitInterval: typeof ElementCheckoutListItemUnitInterval;
  placementHeadline: "div";
  checkoutPromotionInput: "div";
  inputCheckoutPromotion: typeof InputTextForm;
  elementCheckoutPromotionPercentTotalValue: typeof ElementCheckoutPromotionPercentTotalValue;
  checkoutTotalButtonBlock: "div";
  elementCheckoutTotalHeadline: typeof ElementCheckoutTotalHeadline;
  checkoutPlaceOrder: typeof ButtonPrimary;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCheckoutServiceListing__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCheckoutServiceListing__VariantsArgs;
    args?: PlasmicCheckoutServiceListing__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicCheckoutServiceListing__Fetches;
  } & Omit<PlasmicCheckoutServiceListing__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCheckoutServiceListing__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCheckoutServiceListing__ArgProps,
      internalVariantPropNames: PlasmicCheckoutServiceListing__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicCheckoutServiceListing__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCheckoutServiceListing";
  } else {
    func.displayName = `PlasmicCheckoutServiceListing.${nodeName}`;
  }
  return func;
}

export const PlasmicCheckoutServiceListing = Object.assign(
  // Top-level PlasmicCheckoutServiceListing renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    checkoutHeadlineText: makeNodeComponent("checkoutHeadlineText"),
    checkoutSubTotalListItemBlock: makeNodeComponent(
      "checkoutSubTotalListItemBlock"
    ),
    elementCheckoutHeadlineTotal: makeNodeComponent(
      "elementCheckoutHeadlineTotal"
    ),
    checkoutListItems: makeNodeComponent("checkoutListItems"),
    elementCheckoutSubHeadlineTotal: makeNodeComponent(
      "elementCheckoutSubHeadlineTotal"
    ),
    elementCheckoutListItemUnitInterval: makeNodeComponent(
      "elementCheckoutListItemUnitInterval"
    ),
    placementHeadline: makeNodeComponent("placementHeadline"),
    checkoutPromotionInput: makeNodeComponent("checkoutPromotionInput"),
    inputCheckoutPromotion: makeNodeComponent("inputCheckoutPromotion"),
    elementCheckoutPromotionPercentTotalValue: makeNodeComponent(
      "elementCheckoutPromotionPercentTotalValue"
    ),
    checkoutTotalButtonBlock: makeNodeComponent("checkoutTotalButtonBlock"),
    elementCheckoutTotalHeadline: makeNodeComponent(
      "elementCheckoutTotalHeadline"
    ),
    checkoutPlaceOrder: makeNodeComponent("checkoutPlaceOrder"),

    // Metadata about props expected for PlasmicCheckoutServiceListing
    internalVariantProps: PlasmicCheckoutServiceListing__VariantProps,
    internalArgProps: PlasmicCheckoutServiceListing__ArgProps
  }
);

export default PlasmicCheckoutServiceListing;
/* prettier-ignore-end */
