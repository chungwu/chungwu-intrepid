// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: R8TYWh0C3yKPgR
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavbarStatic from "../../NavbarStatic"; // plasmic-import: iqHLBhCUC4D_9I/component
import LogoHeader from "../../LogoHeader"; // plasmic-import: KYZQ9ThnFfyK_/component
import SectionLogIn from "../../SectionLogIn"; // plasmic-import: x0OVT7TfQVhffO/component
import FooterB from "../../FooterB"; // plasmic-import: IZENTiSL4_zyK8/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: biX3aS42hiG0fF/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicLogIn.module.css"; // plasmic-import: R8TYWh0C3yKPgR/css

export type PlasmicLogIn__VariantMembers = {};

export type PlasmicLogIn__VariantsArgs = {};
type VariantPropType = keyof PlasmicLogIn__VariantsArgs;
export const PlasmicLogIn__VariantProps = new Array<VariantPropType>();

export type PlasmicLogIn__ArgsType = {};
type ArgPropType = keyof PlasmicLogIn__ArgsType;
export const PlasmicLogIn__ArgProps = new Array<ArgPropType>();

export type PlasmicLogIn__OverridesType = {
  root?: p.Flex<"div">;
  navbarStatic?: p.Flex<typeof NavbarStatic>;
  logoHeader?: p.Flex<typeof LogoHeader>;
  sectionLogIn?: p.Flex<typeof SectionLogIn>;
  footerB?: p.Flex<typeof FooterB>;
};

export interface DefaultLogInProps {
  dataFetches: PlasmicLogIn__Fetches;
}

function PlasmicLogIn__RenderFunc(props: {
  variants: PlasmicLogIn__VariantsArgs;
  args: PlasmicLogIn__ArgsType;
  overrides: PlasmicLogIn__OverridesType;
  dataFetches?: PlasmicLogIn__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <React.Fragment>
      <Head>
        <title key="title">{"Log in | Intrepid Market"}</title>
        <meta
          key="og:title"
          property="og:title"
          content={"Log in | Intrepid Market"}
        />
        <meta
          key="description"
          name="description"
          property="og:description"
          content={""}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <NavbarStatic
            data-plasmic-name={"navbarStatic"}
            data-plasmic-override={overrides.navbarStatic}
            className={classNames("__wab_instance", sty.navbarStatic)}
          />

          {(
            hasVariant(globalVariants, "screen", "mobile")
              ? false
              : hasVariant(globalVariants, "screen", "desktop")
              ? false
              : true
          ) ? (
            <LogoHeader
              data-plasmic-name={"logoHeader"}
              data-plasmic-override={overrides.logoHeader}
              className={classNames("__wab_instance", sty.logoHeader)}
            />
          ) : null}
          {(hasVariant(globalVariants, "screen", "desktop") ? true : true) ? (
            <SectionLogIn
              data-plasmic-name={"sectionLogIn"}
              data-plasmic-override={overrides.sectionLogIn}
              className={classNames("__wab_instance", sty.sectionLogIn)}
            />
          ) : null}
          {(
            hasVariant(globalVariants, "screen", "mobile")
              ? true
              : hasVariant(globalVariants, "screen", "desktop")
              ? true
              : true
          ) ? (
            <FooterB
              data-plasmic-name={"footerB"}
              data-plasmic-override={overrides.footerB}
              className={classNames("__wab_instance", sty.footerB)}
            />
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "navbarStatic", "logoHeader", "sectionLogIn", "footerB"],
  navbarStatic: ["navbarStatic"],
  logoHeader: ["logoHeader"],
  sectionLogIn: ["sectionLogIn"],
  footerB: ["footerB"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbarStatic: typeof NavbarStatic;
  logoHeader: typeof LogoHeader;
  sectionLogIn: typeof SectionLogIn;
  footerB: typeof FooterB;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLogIn__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLogIn__VariantsArgs;
    args?: PlasmicLogIn__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicLogIn__Fetches;
  } & Omit<PlasmicLogIn__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLogIn__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicLogIn__ArgProps,
      internalVariantPropNames: PlasmicLogIn__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicLogIn__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLogIn";
  } else {
    func.displayName = `PlasmicLogIn.${nodeName}`;
  }
  return func;
}

export const PlasmicLogIn = Object.assign(
  // Top-level PlasmicLogIn renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbarStatic: makeNodeComponent("navbarStatic"),
    logoHeader: makeNodeComponent("logoHeader"),
    sectionLogIn: makeNodeComponent("sectionLogIn"),
    footerB: makeNodeComponent("footerB"),

    // Metadata about props expected for PlasmicLogIn
    internalVariantProps: PlasmicLogIn__VariantProps,
    internalArgProps: PlasmicLogIn__ArgProps
  }
);

export default PlasmicLogIn;
/* prettier-ignore-end */
