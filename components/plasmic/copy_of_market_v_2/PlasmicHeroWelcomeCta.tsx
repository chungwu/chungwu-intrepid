// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: fiFOLWCFmv_eSP
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: gpNjXfbD_ZdpPU/component
import ButtonUberStyle from "../../ButtonUberStyle"; // plasmic-import: j3h4OAmhhG-L4D/component
import InputEmailB from "../../InputEmailB"; // plasmic-import: kB5-PzQWm3FXBI/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: biX3aS42hiG0fF/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicHeroWelcomeCta.module.css"; // plasmic-import: fiFOLWCFmv_eSP/css

import PlusBoldIcon from "./icons/PlasmicIcon__PlusBold"; // plasmic-import: lhSEEajPJGZatfD/icon

export type PlasmicHeroWelcomeCta__VariantMembers = {
  size: "_360" | "_270" | "_720";
  persona: "member" | "partner";
  cta: "button" | "email";
};

export type PlasmicHeroWelcomeCta__VariantsArgs = {
  size?: SingleChoiceArg<"_360" | "_270" | "_720">;
  persona?: SingleChoiceArg<"member" | "partner">;
  cta?: SingleChoiceArg<"button" | "email">;
};

type VariantPropType = keyof PlasmicHeroWelcomeCta__VariantsArgs;
export const PlasmicHeroWelcomeCta__VariantProps = new Array<VariantPropType>(
  "size",
  "persona",
  "cta"
);

export type PlasmicHeroWelcomeCta__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicHeroWelcomeCta__ArgsType;
export const PlasmicHeroWelcomeCta__ArgProps = new Array<ArgPropType>(
  "children"
);

export type PlasmicHeroWelcomeCta__OverridesType = {
  root?: p.Flex<"div">;
  headlineSubhead?: p.Flex<"div">;
  buttonPrimary?: p.Flex<typeof ButtonPrimary>;
  buttonUberStyle?: p.Flex<typeof ButtonUberStyle>;
  inputEmailB?: p.Flex<typeof InputEmailB>;
};

export interface DefaultHeroWelcomeCtaProps {
  children?: React.ReactNode;
  size?: SingleChoiceArg<"_360" | "_270" | "_720">;
  persona?: SingleChoiceArg<"member" | "partner">;
  cta?: SingleChoiceArg<"button" | "email">;
  className?: string;
}

function PlasmicHeroWelcomeCta__RenderFunc(props: {
  variants: PlasmicHeroWelcomeCta__VariantsArgs;
  args: PlasmicHeroWelcomeCta__ArgsType;
  overrides: PlasmicHeroWelcomeCta__OverridesType;
  dataFetches?: PlasmicHeroWelcomeCta__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__cta_button]: hasVariant(variants, "cta", "button"),
        [sty.root__cta_email]: hasVariant(variants, "cta", "email"),
        [sty.root__persona_member]: hasVariant(variants, "persona", "member"),
        [sty.root__persona_partner]: hasVariant(variants, "persona", "partner"),
        [sty.root__persona_partner_size__720]:
          hasVariant(variants, "persona", "partner") &&
          hasVariant(variants, "size", "_720"),
        [sty.root__size__270]: hasVariant(variants, "size", "_270"),
        [sty.root__size__360]: hasVariant(variants, "size", "_360"),
        [sty.root__size__360_cta_email]:
          hasVariant(variants, "size", "_360") &&
          hasVariant(variants, "cta", "email"),
        [sty.root__size__720]: hasVariant(variants, "size", "_720"),
        [sty.root__size__720_persona_member]:
          hasVariant(variants, "size", "_720") &&
          hasVariant(variants, "persona", "member")
      })}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"headlineSubhead"}
        data-plasmic-override={overrides.headlineSubhead}
        hasGap={true}
        className={classNames(defaultcss.all, sty.headlineSubhead, {
          [sty.headlineSubhead__persona_partner]: hasVariant(
            variants,
            "persona",
            "partner"
          ),
          [sty.headlineSubhead__persona_partner_size__720]:
            hasVariant(variants, "persona", "partner") &&
            hasVariant(variants, "size", "_720"),
          [sty.headlineSubhead__size__270]: hasVariant(
            variants,
            "size",
            "_270"
          ),
          [sty.headlineSubhead__size__360]: hasVariant(
            variants,
            "size",
            "_360"
          ),
          [sty.headlineSubhead__size__720]: hasVariant(
            variants,
            "size",
            "_720"
          ),
          [sty.headlineSubhead__size__720_persona_member]:
            hasVariant(variants, "size", "_720") &&
            hasVariant(variants, "persona", "member")
        })}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.freeBox__n6BDo, {
            [sty.freeBox__persona_partner__n6BDonHNtj]: hasVariant(
              variants,
              "persona",
              "partner"
            ),
            [sty.freeBox__persona_partner_size__720__n6BDonHNtjHPZox]:
              hasVariant(variants, "persona", "partner") &&
              hasVariant(variants, "size", "_720"),
            [sty.freeBox__size__270__n6BDoB5Di]: hasVariant(
              variants,
              "size",
              "_270"
            ),
            [sty.freeBox__size__720__n6BDohPZox]: hasVariant(
              variants,
              "size",
              "_720"
            )
          })}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.freeBox__a86P5, {
              [sty.freeBox__size__270__a86P5B5Di]: hasVariant(
                variants,
                "size",
                "_270"
              ),
              [sty.freeBox__size__720__a86P5HPZox]: hasVariant(
                variants,
                "size",
                "_720"
              ),
              [sty.freeBox__size__720_persona_partner__a86P5HPZoxNHNtj]:
                hasVariant(variants, "size", "_720") &&
                hasVariant(variants, "persona", "partner")
            })}
          >
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox__vDs2R,
                {
                  [sty.freeBox__persona_member__vDs2RXfqWh]: hasVariant(
                    variants,
                    "persona",
                    "member"
                  ),
                  [sty.freeBox__persona_partner__vDs2RnHNtj]: hasVariant(
                    variants,
                    "persona",
                    "partner"
                  ),
                  [sty.freeBox__size__270__vDs2RB5Di]: hasVariant(
                    variants,
                    "size",
                    "_270"
                  ),
                  [sty.freeBox__size__720__vDs2RhPZox]: hasVariant(
                    variants,
                    "size",
                    "_720"
                  )
                }
              )}
            >
              {hasVariant(variants, "persona", "partner")
                ? "List."
                : hasVariant(variants, "persona", "member")
                ? "Start."
                : "List."}
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox__xVgAg,
                {
                  [sty.freeBox__cta_button__xVgAGxgDzA]: hasVariant(
                    variants,
                    "cta",
                    "button"
                  ),
                  [sty.freeBox__persona_member__xVgAgXfqWh]: hasVariant(
                    variants,
                    "persona",
                    "member"
                  ),
                  [sty.freeBox__persona_partner__xVgAGnHNtj]: hasVariant(
                    variants,
                    "persona",
                    "partner"
                  ),
                  [sty.freeBox__size__270__xVgAgB5Di]: hasVariant(
                    variants,
                    "size",
                    "_270"
                  ),
                  [sty.freeBox__size__720__xVgAGhPZox]: hasVariant(
                    variants,
                    "size",
                    "_720"
                  ),
                  [sty.freeBox__size__720_persona_member__xVgAGhPZoxXfqWh]:
                    hasVariant(variants, "size", "_720") &&
                    hasVariant(variants, "persona", "member")
                }
              )}
            >
              {hasVariant(variants, "persona", "partner")
                ? "Sell."
                : hasVariant(variants, "persona", "member")
                ? "Launch."
                : "Sell."}
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox__yj5Cd,
                {
                  [sty.freeBox__persona_member__yj5CdXfqWh]: hasVariant(
                    variants,
                    "persona",
                    "member"
                  ),
                  [sty.freeBox__persona_partner__yj5CdnHNtj]: hasVariant(
                    variants,
                    "persona",
                    "partner"
                  ),
                  [sty.freeBox__size__270__yj5CdB5Di]: hasVariant(
                    variants,
                    "size",
                    "_270"
                  ),
                  [sty.freeBox__size__720__yj5CdhPZox]: hasVariant(
                    variants,
                    "size",
                    "_720"
                  ),
                  [sty.freeBox__size__720_persona_member__yj5CdhPZoxXfqWh]:
                    hasVariant(variants, "size", "_720") &&
                    hasVariant(variants, "persona", "member")
                }
              )}
            >
              {hasVariant(variants, "persona", "partner") ? "Grow." : "Grow."}
            </div>
          </p.Stack>
        </p.Stack>

        <div
          className={classNames(defaultcss.all, sty.freeBox__pWhQv, {
            [sty.freeBox__persona_partner__pWhQvnHNtj]: hasVariant(
              variants,
              "persona",
              "partner"
            ),
            [sty.freeBox__persona_partner_size__720__pWhQvnHNtjHPZox]:
              hasVariant(variants, "persona", "partner") &&
              hasVariant(variants, "size", "_720"),
            [sty.freeBox__size__270__pWhQvB5Di]: hasVariant(
              variants,
              "size",
              "_270"
            ),
            [sty.freeBox__size__360__pWhQvMWvN]: hasVariant(
              variants,
              "size",
              "_360"
            ),
            [sty.freeBox__size__720__pWhQvhPZox]: hasVariant(
              variants,
              "size",
              "_720"
            ),
            [sty.freeBox__size__720_persona_member__pWhQvhPZoxXfqWh]:
              hasVariant(variants, "size", "_720") &&
              hasVariant(variants, "persona", "member")
          })}
        >
          <div
            className={classNames(defaultcss.all, sty.freeBox___6OAyv, {
              [sty.freeBox__persona_member___6OAyvXfqWh]: hasVariant(
                variants,
                "persona",
                "member"
              ),
              [sty.freeBox__persona_partner___6OAyvnHNtj]: hasVariant(
                variants,
                "persona",
                "partner"
              ),
              [sty.freeBox__persona_partner_size__270___6OAyvnHNtjB5Di]:
                hasVariant(variants, "persona", "partner") &&
                hasVariant(variants, "size", "_270"),
              [sty.freeBox__size__270___6OAyvB5Di]: hasVariant(
                variants,
                "size",
                "_270"
              ),
              [sty.freeBox__size__270_persona_member___6OAyvB5DiXfqWh]:
                hasVariant(variants, "size", "_270") &&
                hasVariant(variants, "persona", "member"),
              [sty.freeBox__size__360___6OAyvMWvN]: hasVariant(
                variants,
                "size",
                "_360"
              ),
              [sty.freeBox__size__720___6OAyvhPZox]: hasVariant(
                variants,
                "size",
                "_720"
              )
            })}
          >
            <div
              className={classNames(defaultcss.all, sty.freeBox__wRkGb, {
                [sty.freeBox__persona_member__wRkGbXfqWh]: hasVariant(
                  variants,
                  "persona",
                  "member"
                ),
                [sty.freeBox__persona_partner__wRkGBnHNtj]: hasVariant(
                  variants,
                  "persona",
                  "partner"
                ),
                [sty.freeBox__persona_partner_size__270__wRkGBnHNtjB5Di]:
                  hasVariant(variants, "persona", "partner") &&
                  hasVariant(variants, "size", "_270"),
                [sty.freeBox__size__270__wRkGbB5Di]: hasVariant(
                  variants,
                  "size",
                  "_270"
                ),
                [sty.freeBox__size__270_persona_member__wRkGbB5DiXfqWh]:
                  hasVariant(variants, "size", "_270") &&
                  hasVariant(variants, "persona", "member"),
                [sty.freeBox__size__360__wRkGbMWvN]: hasVariant(
                  variants,
                  "size",
                  "_360"
                ),
                [sty.freeBox__size__720__wRkGBhPZox]: hasVariant(
                  variants,
                  "size",
                  "_720"
                )
              })}
            >
              {p.renderPlasmicSlot({
                defaultContents: hasVariant(variants, "persona", "partner")
                  ? "Reach a global audience of entrepreneurs and startups selling your unique professional design and technology services."
                  : hasVariant(variants, "persona", "member")
                  ? "Find all the technology products and services you need to startup, launch, and grow your business."
                  : "The marketplace-community for international design and development agencies to sell professional design and technology services globally.",
                value: args.children,
                className: classNames(sty.slotChildren, {
                  [sty.slotChildren__persona_member]: hasVariant(
                    variants,
                    "persona",
                    "member"
                  ),
                  [sty.slotChildren__persona_partner]: hasVariant(
                    variants,
                    "persona",
                    "partner"
                  ),
                  [sty.slotChildren__persona_partner_size__270]:
                    hasVariant(variants, "persona", "partner") &&
                    hasVariant(variants, "size", "_270"),
                  [sty.slotChildren__persona_partner_size__720]:
                    hasVariant(variants, "persona", "partner") &&
                    hasVariant(variants, "size", "_720"),
                  [sty.slotChildren__size__270]: hasVariant(
                    variants,
                    "size",
                    "_270"
                  ),
                  [sty.slotChildren__size__270_persona_member]:
                    hasVariant(variants, "size", "_270") &&
                    hasVariant(variants, "persona", "member"),
                  [sty.slotChildren__size__360]: hasVariant(
                    variants,
                    "size",
                    "_360"
                  ),
                  [sty.slotChildren__size__360_persona_member]:
                    hasVariant(variants, "size", "_360") &&
                    hasVariant(variants, "persona", "member"),
                  [sty.slotChildren__size__360_persona_partner]:
                    hasVariant(variants, "size", "_360") &&
                    hasVariant(variants, "persona", "partner"),
                  [sty.slotChildren__size__720]: hasVariant(
                    variants,
                    "size",
                    "_720"
                  ),
                  [sty.slotChildren__size__720_persona_member]:
                    hasVariant(variants, "size", "_720") &&
                    hasVariant(variants, "persona", "member")
                })
              })}
            </div>
          </div>
        </div>
      </p.Stack>

      {(
        hasVariant(variants, "cta", "email")
          ? false
          : hasVariant(variants, "cta", "button")
          ? false
          : true
      ) ? (
        <ButtonPrimary
          data-plasmic-name={"buttonPrimary"}
          data-plasmic-override={overrides.buttonPrimary}
          className={classNames("__wab_instance", sty.buttonPrimary, {
            [sty.buttonPrimary__cta_button]: hasVariant(
              variants,
              "cta",
              "button"
            ),
            [sty.buttonPrimary__cta_email]: hasVariant(
              variants,
              "cta",
              "email"
            ),
            [sty.buttonPrimary__persona_member]: hasVariant(
              variants,
              "persona",
              "member"
            ),
            [sty.buttonPrimary__persona_partner]: hasVariant(
              variants,
              "persona",
              "partner"
            ),
            [sty.buttonPrimary__persona_partner_size__720]:
              hasVariant(variants, "persona", "partner") &&
              hasVariant(variants, "size", "_720"),
            [sty.buttonPrimary__size__720]: hasVariant(
              variants,
              "size",
              "_720"
            ),
            [sty.buttonPrimary__size__720_persona_member]:
              hasVariant(variants, "size", "_720") &&
              hasVariant(variants, "persona", "member")
          })}
          color={"brand" as const}
          size={
            hasVariant(variants, "size", "_720")
              ? ("_360" as const)
              : ("_140" as const)
          }
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox___8Ejjl,
              {
                [sty.freeBox__persona_member___8EjjlXfqWh]: hasVariant(
                  variants,
                  "persona",
                  "member"
                ),
                [sty.freeBox__persona_member_size__270___8EjjlXfqWhB5Di]:
                  hasVariant(variants, "persona", "member") &&
                  hasVariant(variants, "size", "_270"),
                [sty.freeBox__persona_partner_size__270___8EjjLnHNtjB5Di]:
                  hasVariant(variants, "persona", "partner") &&
                  hasVariant(variants, "size", "_270"),
                [sty.freeBox__persona_partner_size__360___8EjjLnHNtjMWvN]:
                  hasVariant(variants, "persona", "partner") &&
                  hasVariant(variants, "size", "_360"),
                [sty.freeBox__size__270___8EjjlB5Di]: hasVariant(
                  variants,
                  "size",
                  "_270"
                ),
                [sty.freeBox__size__360___8EjjlMWvN]: hasVariant(
                  variants,
                  "size",
                  "_360"
                ),
                [sty.freeBox__size__360_persona_member___8EjjlMWvNXfqWh]:
                  hasVariant(variants, "size", "_360") &&
                  hasVariant(variants, "persona", "member"),
                [sty.freeBox__size__720___8EjjLhPZox]: hasVariant(
                  variants,
                  "size",
                  "_720"
                ),
                [sty.freeBox__size__720_persona_member___8EjjLhPZoxXfqWh]:
                  hasVariant(variants, "size", "_720") &&
                  hasVariant(variants, "persona", "member"),
                [sty.freeBox__size__720_persona_partner___8EjjLhPZoxNHNtj]:
                  hasVariant(variants, "size", "_720") &&
                  hasVariant(variants, "persona", "partner")
              }
            )}
          >
            {hasVariant(variants, "size", "_720") &&
            hasVariant(variants, "persona", "member")
              ? "Request access"
              : hasVariant(variants, "persona", "member") &&
                hasVariant(variants, "size", "_270")
              ? "Request access"
              : hasVariant(variants, "size", "_360") &&
                hasVariant(variants, "persona", "member")
              ? "Request access"
              : hasVariant(variants, "persona", "member")
              ? "Apply to join"
              : hasVariant(globalVariants, "screen", "mobile")
              ? "Apply to partner"
              : "Apply to partner"}
          </div>
        </ButtonPrimary>
      ) : null}
      {(hasVariant(variants, "cta", "button") ? true : false) ? (
        <ButtonUberStyle
          data-plasmic-name={"buttonUberStyle"}
          data-plasmic-override={overrides.buttonUberStyle}
          className={classNames("__wab_instance", sty.buttonUberStyle, {
            [sty.buttonUberStyle__cta_button]: hasVariant(
              variants,
              "cta",
              "button"
            ),
            [sty.buttonUberStyle__persona_partner]: hasVariant(
              variants,
              "persona",
              "partner"
            )
          })}
          size={
            hasVariant(variants, "cta", "button")
              ? ("_140" as const)
              : undefined
          }
        />
      ) : null}
      {(hasVariant(variants, "cta", "email") ? true : false) ? (
        <InputEmailB
          data-plasmic-name={"inputEmailB"}
          data-plasmic-override={overrides.inputEmailB}
          className={classNames("__wab_instance", sty.inputEmailB, {
            [sty.inputEmailB__cta_email]: hasVariant(variants, "cta", "email"),
            [sty.inputEmailB__persona_partner]: hasVariant(
              variants,
              "persona",
              "partner"
            ),
            [sty.inputEmailB__size__270]: hasVariant(variants, "size", "_270")
          })}
          size={
            hasVariant(globalVariants, "screen", "desktop")
              ? ("_270" as const)
              : ("_360" as const)
          }
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox__gd,
              {
                [sty.freeBox__cta_email__gd72FyQ]: hasVariant(
                  variants,
                  "cta",
                  "email"
                )
              }
            )}
          >
            {
              "Free to join, no credit card required. By entering your email, you agree to receive marketing emails from Intrepid."
            }
          </div>
        </InputEmailB>
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "headlineSubhead",
    "buttonPrimary",
    "buttonUberStyle",
    "inputEmailB"
  ],
  headlineSubhead: ["headlineSubhead"],
  buttonPrimary: ["buttonPrimary"],
  buttonUberStyle: ["buttonUberStyle"],
  inputEmailB: ["inputEmailB"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  headlineSubhead: "div";
  buttonPrimary: typeof ButtonPrimary;
  buttonUberStyle: typeof ButtonUberStyle;
  inputEmailB: typeof InputEmailB;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHeroWelcomeCta__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHeroWelcomeCta__VariantsArgs;
    args?: PlasmicHeroWelcomeCta__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicHeroWelcomeCta__Fetches;
  } & Omit<PlasmicHeroWelcomeCta__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHeroWelcomeCta__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHeroWelcomeCta__ArgProps,
      internalVariantPropNames: PlasmicHeroWelcomeCta__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicHeroWelcomeCta__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeroWelcomeCta";
  } else {
    func.displayName = `PlasmicHeroWelcomeCta.${nodeName}`;
  }
  return func;
}

export const PlasmicHeroWelcomeCta = Object.assign(
  // Top-level PlasmicHeroWelcomeCta renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headlineSubhead: makeNodeComponent("headlineSubhead"),
    buttonPrimary: makeNodeComponent("buttonPrimary"),
    buttonUberStyle: makeNodeComponent("buttonUberStyle"),
    inputEmailB: makeNodeComponent("inputEmailB"),

    // Metadata about props expected for PlasmicHeroWelcomeCta
    internalVariantProps: PlasmicHeroWelcomeCta__VariantProps,
    internalArgProps: PlasmicHeroWelcomeCta__ArgProps
  }
);

export default PlasmicHeroWelcomeCta;
/* prettier-ignore-end */
