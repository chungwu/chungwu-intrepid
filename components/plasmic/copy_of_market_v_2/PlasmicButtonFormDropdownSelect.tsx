// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: 3Qqc2KbBe45URw
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicButtonFormDropdownSelect.module.css"; // plasmic-import: 3Qqc2KbBe45URw/css

import Icon96Icon from "./icons/PlasmicIcon__Icon96"; // plasmic-import: bC6DTgVYN3bioSf/icon

export type PlasmicButtonFormDropdownSelect__VariantMembers = {
  label: "label";
  description: "description";
  size:
    | "_90X24"
    | "_90X32"
    | "_90X36"
    | "_180X32"
    | "_180X36"
    | "_270X32"
    | "_270X36"
    | "_360X36"
    | "_360X40"
    | "_540X36"
    | "_540X40";
};

export type PlasmicButtonFormDropdownSelect__VariantsArgs = {
  label?: SingleBooleanChoiceArg<"label">;
  description?: SingleBooleanChoiceArg<"description">;
  size?: SingleChoiceArg<
    | "_90X24"
    | "_90X32"
    | "_90X36"
    | "_180X32"
    | "_180X36"
    | "_270X32"
    | "_270X36"
    | "_360X36"
    | "_360X40"
    | "_540X36"
    | "_540X40"
  >;
};

type VariantPropType = keyof PlasmicButtonFormDropdownSelect__VariantsArgs;
export const PlasmicButtonFormDropdownSelect__VariantProps =
  new Array<VariantPropType>("label", "description", "size");

export type PlasmicButtonFormDropdownSelect__ArgsType = {
  headlineLabelTitle?: React.ReactNode;
  dropdownTitle?: React.ReactNode;
  dropdownIcon?: React.ReactNode;
  children?: React.ReactNode;
  dropdownIcon12Pt?: React.ReactNode;
  slot?: React.ReactNode;
};

type ArgPropType = keyof PlasmicButtonFormDropdownSelect__ArgsType;
export const PlasmicButtonFormDropdownSelect__ArgProps = new Array<ArgPropType>(
  "headlineLabelTitle",
  "dropdownTitle",
  "dropdownIcon",
  "children",
  "dropdownIcon12Pt",
  "slot"
);

export type PlasmicButtonFormDropdownSelect__OverridesType = {
  root?: p.Flex<"div">;
  parent?: p.Flex<"div">;
  buttonDropDown?: p.Flex<"button">;
  iconParent?: p.Flex<"div">;
};

export interface DefaultButtonFormDropdownSelectProps {
  headlineLabelTitle?: React.ReactNode;
  dropdownTitle?: React.ReactNode;
  dropdownIcon?: React.ReactNode;
  children?: React.ReactNode;
  dropdownIcon12Pt?: React.ReactNode;
  slot?: React.ReactNode;
  label?: SingleBooleanChoiceArg<"label">;
  description?: SingleBooleanChoiceArg<"description">;
  size?: SingleChoiceArg<
    | "_90X24"
    | "_90X32"
    | "_90X36"
    | "_180X32"
    | "_180X36"
    | "_270X32"
    | "_270X36"
    | "_360X36"
    | "_360X40"
    | "_540X36"
    | "_540X40"
  >;
  className?: string;
}

function PlasmicButtonFormDropdownSelect__RenderFunc(props: {
  variants: PlasmicButtonFormDropdownSelect__VariantsArgs;
  args: PlasmicButtonFormDropdownSelect__ArgsType;
  overrides: PlasmicButtonFormDropdownSelect__OverridesType;
  dataFetches?: PlasmicButtonFormDropdownSelect__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__description]: hasVariant(
          variants,
          "description",
          "description"
        ),
        [sty.root__label]: hasVariant(variants, "label", "label"),
        [sty.root__size__180X32]: hasVariant(variants, "size", "_180X32"),
        [sty.root__size__270X32]: hasVariant(variants, "size", "_270X32"),
        [sty.root__size__360X40]: hasVariant(variants, "size", "_360X40"),
        [sty.root__size__540X40]: hasVariant(variants, "size", "_540X40"),
        [sty.root__size__90X24]: hasVariant(variants, "size", "_90X24")
      })}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"parent"}
        data-plasmic-override={overrides.parent}
        hasGap={true}
        className={classNames(defaultcss.all, sty.parent, {
          [sty.parent__description]: hasVariant(
            variants,
            "description",
            "description"
          ),
          [sty.parent__label]: hasVariant(variants, "label", "label"),
          [sty.parent__size__180X32]: hasVariant(variants, "size", "_180X32"),
          [sty.parent__size__180X36]: hasVariant(variants, "size", "_180X36"),
          [sty.parent__size__270X32]: hasVariant(variants, "size", "_270X32"),
          [sty.parent__size__270X36]: hasVariant(variants, "size", "_270X36"),
          [sty.parent__size__360X36]: hasVariant(variants, "size", "_360X36"),
          [sty.parent__size__360X40]: hasVariant(variants, "size", "_360X40"),
          [sty.parent__size__540X36]: hasVariant(variants, "size", "_540X36"),
          [sty.parent__size__540X40]: hasVariant(variants, "size", "_540X40"),
          [sty.parent__size__90X24]: hasVariant(variants, "size", "_90X24"),
          [sty.parent__size__90X32]: hasVariant(variants, "size", "_90X32"),
          [sty.parent__size__90X36]: hasVariant(variants, "size", "_90X36")
        })}
      >
        {(hasVariant(variants, "label", "label") ? false : true) ? (
          <div
            className={classNames(defaultcss.all, sty.freeBox__adeq8, {
              [sty.freeBox__label__adeq8Xxfc]: hasVariant(
                variants,
                "label",
                "label"
              ),
              [sty.freeBox__size__180X32__adeq8Qrtih]: hasVariant(
                variants,
                "size",
                "_180X32"
              ),
              [sty.freeBox__size__180X36__adeq8Ht5Uz]: hasVariant(
                variants,
                "size",
                "_180X36"
              ),
              [sty.freeBox__size__360X36__adeq8BOypb]: hasVariant(
                variants,
                "size",
                "_360X36"
              ),
              [sty.freeBox__size__360X40__adeq80Fg3T]: hasVariant(
                variants,
                "size",
                "_360X40"
              ),
              [sty.freeBox__size__540X36__adeq8Aav7L]: hasVariant(
                variants,
                "size",
                "_540X36"
              ),
              [sty.freeBox__size__540X40__adeq87JlI2]: hasVariant(
                variants,
                "size",
                "_540X40"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: "Label",
              value: args.headlineLabelTitle,
              className: classNames(sty.slotHeadlineLabelTitle, {
                [sty.slotHeadlineLabelTitle__label]: hasVariant(
                  variants,
                  "label",
                  "label"
                ),
                [sty.slotHeadlineLabelTitle__size__180X32]: hasVariant(
                  variants,
                  "size",
                  "_180X32"
                ),
                [sty.slotHeadlineLabelTitle__size__270X32]: hasVariant(
                  variants,
                  "size",
                  "_270X32"
                ),
                [sty.slotHeadlineLabelTitle__size__360X40]: hasVariant(
                  variants,
                  "size",
                  "_360X40"
                ),
                [sty.slotHeadlineLabelTitle__size__540X40]: hasVariant(
                  variants,
                  "size",
                  "_540X40"
                ),
                [sty.slotHeadlineLabelTitle__size__90X24]: hasVariant(
                  variants,
                  "size",
                  "_90X24"
                ),
                [sty.slotHeadlineLabelTitle__size__90X32]: hasVariant(
                  variants,
                  "size",
                  "_90X32"
                ),
                [sty.slotHeadlineLabelTitle__size__90X36]: hasVariant(
                  variants,
                  "size",
                  "_90X36"
                )
              })
            })}
          </div>
        ) : null}

        <p.Stack
          as={"button"}
          data-plasmic-name={"buttonDropDown"}
          data-plasmic-override={overrides.buttonDropDown}
          hasGap={true}
          className={classNames(defaultcss.button, sty.buttonDropDown, {
            [sty.buttonDropDown__size__180X32]: hasVariant(
              variants,
              "size",
              "_180X32"
            ),
            [sty.buttonDropDown__size__180X36]: hasVariant(
              variants,
              "size",
              "_180X36"
            ),
            [sty.buttonDropDown__size__270X32]: hasVariant(
              variants,
              "size",
              "_270X32"
            ),
            [sty.buttonDropDown__size__270X36]: hasVariant(
              variants,
              "size",
              "_270X36"
            ),
            [sty.buttonDropDown__size__360X36]: hasVariant(
              variants,
              "size",
              "_360X36"
            ),
            [sty.buttonDropDown__size__360X40]: hasVariant(
              variants,
              "size",
              "_360X40"
            ),
            [sty.buttonDropDown__size__540X36]: hasVariant(
              variants,
              "size",
              "_540X36"
            ),
            [sty.buttonDropDown__size__540X40]: hasVariant(
              variants,
              "size",
              "_540X40"
            ),
            [sty.buttonDropDown__size__90X24]: hasVariant(
              variants,
              "size",
              "_90X24"
            ),
            [sty.buttonDropDown__size__90X32]: hasVariant(
              variants,
              "size",
              "_90X32"
            ),
            [sty.buttonDropDown__size__90X36]: hasVariant(
              variants,
              "size",
              "_90X36"
            )
          })}
        >
          {true ? (
            <div className={classNames(defaultcss.all, sty.freeBox__h2LEc)}>
              {true
                ? p.renderPlasmicSlot({
                    defaultContents: (
                      <svg
                        className={classNames(defaultcss.all, sty.svg__rabry)}
                        role={"img"}
                      />
                    ),

                    value: args.slot
                  })
                : null}
              {p.renderPlasmicSlot({
                defaultContents: "Select",
                value: args.dropdownTitle,
                className: classNames(sty.slotDropdownTitle, {
                  [sty.slotDropdownTitle__size__180X32]: hasVariant(
                    variants,
                    "size",
                    "_180X32"
                  ),
                  [sty.slotDropdownTitle__size__270X32]: hasVariant(
                    variants,
                    "size",
                    "_270X32"
                  ),
                  [sty.slotDropdownTitle__size__360X40]: hasVariant(
                    variants,
                    "size",
                    "_360X40"
                  ),
                  [sty.slotDropdownTitle__size__540X40]: hasVariant(
                    variants,
                    "size",
                    "_540X40"
                  ),
                  [sty.slotDropdownTitle__size__90X24]: hasVariant(
                    variants,
                    "size",
                    "_90X24"
                  ),
                  [sty.slotDropdownTitle__size__90X32]: hasVariant(
                    variants,
                    "size",
                    "_90X32"
                  ),
                  [sty.slotDropdownTitle__size__90X36]: hasVariant(
                    variants,
                    "size",
                    "_90X36"
                  )
                })
              })}
            </div>
          ) : null}

          <div
            data-plasmic-name={"iconParent"}
            data-plasmic-override={overrides.iconParent}
            className={classNames(defaultcss.all, sty.iconParent, {
              [sty.iconParent__size__90X24]: hasVariant(
                variants,
                "size",
                "_90X24"
              ),
              [sty.iconParent__size__90X32]: hasVariant(
                variants,
                "size",
                "_90X32"
              ),
              [sty.iconParent__size__90X36]: hasVariant(
                variants,
                "size",
                "_90X36"
              )
            })}
          >
            {(hasVariant(variants, "size", "_90X24") ? false : true)
              ? p.renderPlasmicSlot({
                  defaultContents: (
                    <Icon96Icon
                      className={classNames(defaultcss.all, sty.svg__o4N1L)}
                      role={"img"}
                    />
                  ),

                  value: args.dropdownIcon,
                  className: classNames(sty.slotDropdownIcon, {
                    [sty.slotDropdownIcon__size__540X40]: hasVariant(
                      variants,
                      "size",
                      "_540X40"
                    ),
                    [sty.slotDropdownIcon__size__90X24]: hasVariant(
                      variants,
                      "size",
                      "_90X24"
                    )
                  })
                })
              : null}
            {(hasVariant(variants, "size", "_90X24") ? true : false)
              ? p.renderPlasmicSlot({
                  defaultContents: (
                    <Icon96Icon
                      className={classNames(defaultcss.all, sty.svg___3Kj6K)}
                      role={"img"}
                    />
                  ),

                  value: args.dropdownIcon12Pt,
                  className: classNames(sty.slotDropdownIcon12Pt, {
                    [sty.slotDropdownIcon12Pt__size__540X40]: hasVariant(
                      variants,
                      "size",
                      "_540X40"
                    ),
                    [sty.slotDropdownIcon12Pt__size__90X24]: hasVariant(
                      variants,
                      "size",
                      "_90X24"
                    )
                  })
                })
              : null}
          </div>
        </p.Stack>

        {(hasVariant(variants, "description", "description") ? false : true) ? (
          <div
            className={classNames(defaultcss.all, sty.freeBox__nC61, {
              [sty.freeBox__description__nC61Jlx61]: hasVariant(
                variants,
                "description",
                "description"
              ),
              [sty.freeBox__size__360X40__nC610Fg3T]: hasVariant(
                variants,
                "size",
                "_360X40"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: "Description",
              value: args.children,
              className: classNames(sty.slotChildren, {
                [sty.slotChildren__description]: hasVariant(
                  variants,
                  "description",
                  "description"
                ),
                [sty.slotChildren__size__180X32]: hasVariant(
                  variants,
                  "size",
                  "_180X32"
                ),
                [sty.slotChildren__size__270X32]: hasVariant(
                  variants,
                  "size",
                  "_270X32"
                ),
                [sty.slotChildren__size__360X40]: hasVariant(
                  variants,
                  "size",
                  "_360X40"
                ),
                [sty.slotChildren__size__540X40]: hasVariant(
                  variants,
                  "size",
                  "_540X40"
                ),
                [sty.slotChildren__size__90X24]: hasVariant(
                  variants,
                  "size",
                  "_90X24"
                ),
                [sty.slotChildren__size__90X32]: hasVariant(
                  variants,
                  "size",
                  "_90X32"
                ),
                [sty.slotChildren__size__90X36]: hasVariant(
                  variants,
                  "size",
                  "_90X36"
                )
              })
            })}
          </div>
        ) : null}
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "parent", "buttonDropDown", "iconParent"],
  parent: ["parent", "buttonDropDown", "iconParent"],
  buttonDropDown: ["buttonDropDown", "iconParent"],
  iconParent: ["iconParent"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  parent: "div";
  buttonDropDown: "button";
  iconParent: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicButtonFormDropdownSelect__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicButtonFormDropdownSelect__VariantsArgs;
    args?: PlasmicButtonFormDropdownSelect__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicButtonFormDropdownSelect__Fetches;
  } & Omit<PlasmicButtonFormDropdownSelect__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicButtonFormDropdownSelect__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicButtonFormDropdownSelect__ArgProps,
      internalVariantPropNames: PlasmicButtonFormDropdownSelect__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicButtonFormDropdownSelect__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicButtonFormDropdownSelect";
  } else {
    func.displayName = `PlasmicButtonFormDropdownSelect.${nodeName}`;
  }
  return func;
}

export const PlasmicButtonFormDropdownSelect = Object.assign(
  // Top-level PlasmicButtonFormDropdownSelect renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    parent: makeNodeComponent("parent"),
    buttonDropDown: makeNodeComponent("buttonDropDown"),
    iconParent: makeNodeComponent("iconParent"),

    // Metadata about props expected for PlasmicButtonFormDropdownSelect
    internalVariantProps: PlasmicButtonFormDropdownSelect__VariantProps,
    internalArgProps: PlasmicButtonFormDropdownSelect__ArgProps
  }
);

export default PlasmicButtonFormDropdownSelect;
/* prettier-ignore-end */
