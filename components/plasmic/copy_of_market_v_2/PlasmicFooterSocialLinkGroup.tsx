// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: j6v1kJ6rwo13FS
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import FooterSocialLink from "../../FooterSocialLink"; // plasmic-import: dlOB9wdpVUBY-S/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: biX3aS42hiG0fF/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicFooterSocialLinkGroup.module.css"; // plasmic-import: j6v1kJ6rwo13FS/css

import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: FygICV-AHdTJMVV/icon
import Icon9Icon from "./icons/PlasmicIcon__Icon9"; // plasmic-import: 8JkTs80xGan8E0E/icon
import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: U5dRxKhcuoP_OPH/icon
import Icon12Icon from "./icons/PlasmicIcon__Icon12"; // plasmic-import: 1YeDdEONj9QeOtM/icon
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: kBWqdDZE_vCRG-s/icon

export type PlasmicFooterSocialLinkGroup__VariantMembers = {
  color: "light" | "dark";
};

export type PlasmicFooterSocialLinkGroup__VariantsArgs = {
  color?: SingleChoiceArg<"light" | "dark">;
};

type VariantPropType = keyof PlasmicFooterSocialLinkGroup__VariantsArgs;
export const PlasmicFooterSocialLinkGroup__VariantProps =
  new Array<VariantPropType>("color");

export type PlasmicFooterSocialLinkGroup__ArgsType = {};
type ArgPropType = keyof PlasmicFooterSocialLinkGroup__ArgsType;
export const PlasmicFooterSocialLinkGroup__ArgProps = new Array<ArgPropType>();

export type PlasmicFooterSocialLinkGroup__OverridesType = {
  root?: p.Flex<"div">;
  facebook?: p.Flex<typeof FooterSocialLink>;
  instagram?: p.Flex<typeof FooterSocialLink>;
  linkedin?: p.Flex<typeof FooterSocialLink>;
  twitter?: p.Flex<typeof FooterSocialLink>;
  youtube?: p.Flex<typeof FooterSocialLink>;
};

export interface DefaultFooterSocialLinkGroupProps {
  color?: SingleChoiceArg<"light" | "dark">;
  className?: string;
}

function PlasmicFooterSocialLinkGroup__RenderFunc(props: {
  variants: PlasmicFooterSocialLinkGroup__VariantsArgs;
  args: PlasmicFooterSocialLinkGroup__ArgsType;
  overrides: PlasmicFooterSocialLinkGroup__OverridesType;
  dataFetches?: PlasmicFooterSocialLinkGroup__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <FooterSocialLink
        data-plasmic-name={"facebook"}
        data-plasmic-override={overrides.facebook}
        className={classNames("__wab_instance", sty.facebook, {
          [sty.facebook__color_dark]: hasVariant(variants, "color", "dark")
        })}
        color={
          hasVariant(variants, "color", "dark")
            ? ("light" as const)
            : ("dark" as const)
        }
        destination={"https://www.facebook.com/intrepidmarket" as const}
      />

      <FooterSocialLink
        data-plasmic-name={"instagram"}
        data-plasmic-override={overrides.instagram}
        className={classNames("__wab_instance", sty.instagram, {
          [sty.instagram__color_dark]: hasVariant(variants, "color", "dark")
        })}
        color={
          hasVariant(variants, "color", "dark")
            ? ("light" as const)
            : ("dark" as const)
        }
        destination={"https://www.instagram.com/intrepid.marketh" as const}
      >
        <Icon9Icon
          className={classNames(defaultcss.all, sty.svg__wXfir)}
          role={"img"}
        />
      </FooterSocialLink>

      <FooterSocialLink
        data-plasmic-name={"linkedin"}
        data-plasmic-override={overrides.linkedin}
        className={classNames("__wab_instance", sty.linkedin, {
          [sty.linkedin__color_dark]: hasVariant(variants, "color", "dark")
        })}
        color={
          hasVariant(variants, "color", "dark")
            ? ("light" as const)
            : ("dark" as const)
        }
        destination={
          "https://www.linkedin.com/company/intrepidtechnology" as const
        }
      >
        <Icon10Icon
          className={classNames(defaultcss.all, sty.svg__uIwVi)}
          role={"img"}
        />
      </FooterSocialLink>

      <FooterSocialLink
        data-plasmic-name={"twitter"}
        data-plasmic-override={overrides.twitter}
        className={classNames("__wab_instance", sty.twitter, {
          [sty.twitter__color_dark]: hasVariant(variants, "color", "dark")
        })}
        color={
          hasVariant(variants, "color", "dark")
            ? ("light" as const)
            : ("dark" as const)
        }
        destination={"https://twitter.com/intrepidmarket?lang=en" as const}
      >
        <Icon12Icon
          className={classNames(defaultcss.all, sty.svg__xyqvd)}
          role={"img"}
        />
      </FooterSocialLink>

      <FooterSocialLink
        data-plasmic-name={"youtube"}
        data-plasmic-override={overrides.youtube}
        className={classNames("__wab_instance", sty.youtube, {
          [sty.youtube__color_dark]: hasVariant(variants, "color", "dark")
        })}
        color={
          hasVariant(variants, "color", "dark")
            ? ("light" as const)
            : ("dark" as const)
        }
        destination={
          "https://www.youtube.com/channel/UCefe54paxJv4KnBfu89EgCQ/about" as const
        }
      >
        <Icon11Icon
          className={classNames(defaultcss.all, sty.svg__vyjSi, {
            [sty.svg__color_dark__vyjSihTwaa]: hasVariant(
              variants,
              "color",
              "dark"
            )
          })}
          role={"img"}
        />
      </FooterSocialLink>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "facebook", "instagram", "linkedin", "twitter", "youtube"],
  facebook: ["facebook"],
  instagram: ["instagram"],
  linkedin: ["linkedin"],
  twitter: ["twitter"],
  youtube: ["youtube"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  facebook: typeof FooterSocialLink;
  instagram: typeof FooterSocialLink;
  linkedin: typeof FooterSocialLink;
  twitter: typeof FooterSocialLink;
  youtube: typeof FooterSocialLink;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFooterSocialLinkGroup__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFooterSocialLinkGroup__VariantsArgs;
    args?: PlasmicFooterSocialLinkGroup__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicFooterSocialLinkGroup__Fetches;
  } & Omit<PlasmicFooterSocialLinkGroup__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFooterSocialLinkGroup__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFooterSocialLinkGroup__ArgProps,
      internalVariantPropNames: PlasmicFooterSocialLinkGroup__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicFooterSocialLinkGroup__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFooterSocialLinkGroup";
  } else {
    func.displayName = `PlasmicFooterSocialLinkGroup.${nodeName}`;
  }
  return func;
}

export const PlasmicFooterSocialLinkGroup = Object.assign(
  // Top-level PlasmicFooterSocialLinkGroup renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    facebook: makeNodeComponent("facebook"),
    instagram: makeNodeComponent("instagram"),
    linkedin: makeNodeComponent("linkedin"),
    twitter: makeNodeComponent("twitter"),
    youtube: makeNodeComponent("youtube"),

    // Metadata about props expected for PlasmicFooterSocialLinkGroup
    internalVariantProps: PlasmicFooterSocialLinkGroup__VariantProps,
    internalArgProps: PlasmicFooterSocialLinkGroup__ArgProps
  }
);

export default PlasmicFooterSocialLinkGroup;
/* prettier-ignore-end */
