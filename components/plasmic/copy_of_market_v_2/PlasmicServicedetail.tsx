// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: pkc73cggSiNuJb
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavbarPrimary from "../../NavbarPrimary"; // plasmic-import: _8h_FsYt50dxoo/component
import TagPartnerC from "../../TagPartnerC"; // plasmic-import: 56bYn7FhSoeBRIq/component
import ChipBadgeDisplay from "../../ChipBadgeDisplay"; // plasmic-import: SSFk1BeJq0HW6X/component
import Accordion from "../../Accordion"; // plasmic-import: 1ZJCGR7JIrafEd/component
import ServiceProcessCard from "../../ServiceProcessCard"; // plasmic-import: 1y8tRQlAIZcidK/component
import ServiceFeatureB from "../../ServiceFeatureB"; // plasmic-import: gguWVOD6YzvVuS/component
import ServiceFeatureCard from "../../ServiceFeatureCard"; // plasmic-import: ROhXrEmZhHUraZ/component
import UserAvatar from "../../UserAvatar"; // plasmic-import: kWaJrwe3c90GY1/component
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: gpNjXfbD_ZdpPU/component
import FooterB from "../../FooterB"; // plasmic-import: IZENTiSL4_zyK8/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: biX3aS42hiG0fF/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicServicedetail.module.css"; // plasmic-import: pkc73cggSiNuJb/css

import Icon54Icon from "./icons/PlasmicIcon__Icon54"; // plasmic-import: JLHmGfiYk6CYnUL/icon
import PlusBoldIcon from "./icons/PlasmicIcon__PlusBold"; // plasmic-import: lhSEEajPJGZatfD/icon
import Icon170Icon from "./icons/PlasmicIcon__Icon170"; // plasmic-import: 8dZnFQrWLcwMPnF/icon
import Icon114Icon from "./icons/PlasmicIcon__Icon114"; // plasmic-import: VfXaOZlZvq_xDZf/icon
import SectionDividerIcon from "./icons/PlasmicIcon__SectionDivider"; // plasmic-import: Q0kQ1Q6uwg9YSBx/icon
import Icon111Icon from "./icons/PlasmicIcon__Icon111"; // plasmic-import: bs7hcDR6K9Xgoi3/icon
import CellDividerIcon from "./icons/PlasmicIcon__CellDivider"; // plasmic-import: 0houBrn4b8rrzS3/icon
import BookmarkIcon from "./icons/PlasmicIcon__Bookmark"; // plasmic-import: jLuEpvSpry_1edd/icon
import ShareIcon from "./icons/PlasmicIcon__Share"; // plasmic-import: ilMZTPe8ajR4ESK/icon

export type PlasmicServicedetail__VariantMembers = {};

export type PlasmicServicedetail__VariantsArgs = {};
type VariantPropType = keyof PlasmicServicedetail__VariantsArgs;
export const PlasmicServicedetail__VariantProps = new Array<VariantPropType>();

export type PlasmicServicedetail__ArgsType = {};
type ArgPropType = keyof PlasmicServicedetail__ArgsType;
export const PlasmicServicedetail__ArgProps = new Array<ArgPropType>();

export type PlasmicServicedetail__OverridesType = {
  root?: p.Flex<"div">;
  navbarPrimary?: p.Flex<typeof NavbarPrimary>;
  serviceDetailCheckoutPageParent?: p.Flex<"div">;
  serviceDetailOverviewParent?: p.Flex<"div">;
  serviceHeadlineParent?: p.Flex<"div">;
  headline?: p.Flex<"div">;
  headlineNamePriceParent?: p.Flex<"div">;
  companyNamePriceParent2?: p.Flex<"div">;
  serviceCompanyName2?: p.Flex<"div">;
  companyVerificationBadgesParent3?: p.Flex<"div">;
  companyIsVerified3?: p.Flex<"div">;
  serviceImageBlock?: p.Flex<"div">;
  serviceImageHero?: p.Flex<"img">;
  serviceOverviewParent?: p.Flex<"div">;
  descriptionBlock?: p.Flex<"div">;
  serviceDescriptionOverview?: p.Flex<"div">;
  processBlock?: p.Flex<"div">;
  serviceProcessDescription?: p.Flex<"div">;
  featuresBlock?: p.Flex<"div">;
  serviceFeaturesOverview?: p.Flex<"div">;
  contentBlock?: p.Flex<"div">;
  methodBlock?: p.Flex<"div">;
  toolsBlock?: p.Flex<"div">;
  formatBlock?: p.Flex<"div">;
  requirementsBlock?: p.Flex<"div">;
  termsBlock?: p.Flex<"div">;
  serviceOrderParent?: p.Flex<"div">;
  serviceCheckoutHeader?: p.Flex<"div">;
  serviceDescriptionParent?: p.Flex<"div">;
  headlineNamePriceVerificationParent?: p.Flex<"div">;
  companyNamePriceParent?: p.Flex<"div">;
  servicePrice?: p.Flex<"div">;
  serviceCurrency?: p.Flex<"div">;
  serviceNameTitle?: p.Flex<"div">;
  serviceShortDescription?: p.Flex<"div">;
  companyDescriptionParent?: p.Flex<"div">;
  headlineCompanyParent?: p.Flex<"div">;
  serviceCompanyLogo?: p.Flex<"div">;
  userAvatar?: p.Flex<typeof UserAvatar>;
  navUserAvatar32?: p.Flex<"img">;
  companyNamePriceParent3?: p.Flex<"div">;
  serviceCompanyName3?: p.Flex<"div">;
  companyVerificationBadgesParent4?: p.Flex<"div">;
  companyIsVerified4?: p.Flex<"div">;
  companyShortDescription?: p.Flex<"div">;
  serviceCheckoutButtons?: p.Flex<"div">;
  save?: p.Flex<"button">;
  bookmark?: p.Flex<"svg">;
  share?: p.Flex<"button">;
  svgShare?: p.Flex<"svg">;
  footerB?: p.Flex<typeof FooterB>;
};

export interface DefaultServicedetailProps {
  dataFetches: PlasmicServicedetail__Fetches;
}

function PlasmicServicedetail__RenderFunc(props: {
  variants: PlasmicServicedetail__VariantsArgs;
  args: PlasmicServicedetail__ArgsType;
  overrides: PlasmicServicedetail__OverridesType;
  dataFetches?: PlasmicServicedetail__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <React.Fragment>
      <Head>
        <title key="title">{""}</title>
        <meta key="og:title" property="og:title" content={""} />
        <meta
          key="description"
          name="description"
          property="og:description"
          content={""}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <NavbarPrimary
            data-plasmic-name={"navbarPrimary"}
            data-plasmic-override={overrides.navbarPrimary}
            className={classNames("__wab_instance", sty.navbarPrimary)}
          />

          <p.Stack
            as={"div"}
            data-plasmic-name={"serviceDetailCheckoutPageParent"}
            data-plasmic-override={overrides.serviceDetailCheckoutPageParent}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              sty.serviceDetailCheckoutPageParent
            )}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"serviceDetailOverviewParent"}
              data-plasmic-override={overrides.serviceDetailOverviewParent}
              hasGap={true}
              className={classNames(
                defaultcss.all,
                sty.serviceDetailOverviewParent
              )}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"serviceHeadlineParent"}
                data-plasmic-override={overrides.serviceHeadlineParent}
                hasGap={true}
                className={classNames(
                  defaultcss.all,
                  sty.serviceHeadlineParent
                )}
              >
                <div
                  data-plasmic-name={"headline"}
                  data-plasmic-override={overrides.headline}
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.headline
                  )}
                >
                  {"Title of the service sold on this page"}
                </div>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"headlineNamePriceParent"}
                  data-plasmic-override={overrides.headlineNamePriceParent}
                  hasGap={true}
                  className={classNames(
                    defaultcss.all,
                    sty.headlineNamePriceParent
                  )}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"companyNamePriceParent2"}
                    data-plasmic-override={overrides.companyNamePriceParent2}
                    hasGap={true}
                    className={classNames(
                      defaultcss.all,
                      sty.companyNamePriceParent2
                    )}
                  >
                    <div
                      className={classNames(defaultcss.all, sty.freeBox__jtYm)}
                    >
                      <div
                        className={classNames(
                          defaultcss.all,
                          sty.freeBox__z5S0H
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            defaultcss.all,
                            sty.freeBox__rnNZz
                          )}
                        >
                          <div
                            data-plasmic-name={"serviceCompanyName2"}
                            data-plasmic-override={
                              overrides.serviceCompanyName2
                            }
                            className={classNames(
                              defaultcss.all,
                              sty.serviceCompanyName2
                            )}
                          >
                            <div
                              className={classNames(
                                defaultcss.all,
                                defaultcss.__wab_text,
                                sty.freeBox__p3Jkg
                              )}
                            >
                              {"Company name"}
                            </div>
                          </div>
                        </p.Stack>
                      </div>
                    </div>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"companyVerificationBadgesParent3"}
                    data-plasmic-override={
                      overrides.companyVerificationBadgesParent3
                    }
                    hasGap={true}
                    className={classNames(
                      defaultcss.all,
                      sty.companyVerificationBadgesParent3
                    )}
                  >
                    <TagPartnerC
                      className={classNames(
                        "__wab_instance",
                        sty.tagPartnerC__eeMwu
                      )}
                    />

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"companyIsVerified3"}
                      data-plasmic-override={overrides.companyIsVerified3}
                      hasGap={true}
                      className={classNames(
                        defaultcss.all,
                        sty.companyIsVerified3
                      )}
                    >
                      <Icon54Icon
                        className={classNames(defaultcss.all, sty.svg__ol1Pp)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.freeBox__bEvdo
                        )}
                      >
                        {"Verified"}
                      </div>
                    </p.Stack>
                  </p.Stack>
                </p.Stack>
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"serviceImageBlock"}
                data-plasmic-override={overrides.serviceImageBlock}
                hasGap={true}
                className={classNames(defaultcss.all, sty.serviceImageBlock)}
              >
                <img
                  data-plasmic-name={"serviceImageHero"}
                  data-plasmic-override={overrides.serviceImageHero}
                  alt={""}
                  className={classNames(defaultcss.img, sty.serviceImageHero)}
                  role={"img"}
                />

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.freeBox___1Fv72)}
                >
                  <img
                    alt={""}
                    className={classNames(defaultcss.img, sty.img__qUZmG)}
                    role={"img"}
                  />

                  <img
                    alt={""}
                    className={classNames(defaultcss.img, sty.img__cq2Mg)}
                    role={"img"}
                  />

                  <img
                    alt={""}
                    className={classNames(defaultcss.img, sty.img__vOshB)}
                    role={"img"}
                  />

                  <img
                    alt={""}
                    className={classNames(defaultcss.img, sty.img__meTYm)}
                    role={"img"}
                  />
                </p.Stack>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.freeBox__ckFcm)}
                >
                  <ChipBadgeDisplay
                    className={classNames(
                      "__wab_instance",
                      sty.chipBadgeDisplay__l8K7K
                    )}
                    color={"brand" as const}
                    type={"ghost" as const}
                  >
                    {"UX Design"}
                  </ChipBadgeDisplay>

                  <ChipBadgeDisplay
                    className={classNames(
                      "__wab_instance",
                      sty.chipBadgeDisplay__careo
                    )}
                    color={"brand" as const}
                    type={"ghost" as const}
                  >
                    {"Design system"}
                  </ChipBadgeDisplay>

                  <ChipBadgeDisplay
                    className={classNames(
                      "__wab_instance",
                      sty.chipBadgeDisplay__vPojr
                    )}
                    color={"brand" as const}
                    type={"ghost" as const}
                  >
                    {"Mobile app"}
                  </ChipBadgeDisplay>

                  <ChipBadgeDisplay
                    className={classNames(
                      "__wab_instance",
                      sty.chipBadgeDisplay__maFLd
                    )}
                    color={"brand" as const}
                    type={"ghost" as const}
                  >
                    {"Web app"}
                  </ChipBadgeDisplay>

                  <ChipBadgeDisplay
                    className={classNames(
                      "__wab_instance",
                      sty.chipBadgeDisplay__oBrs
                    )}
                    color={"brand" as const}
                    type={"ghost" as const}
                  >
                    {"E-commerce"}
                  </ChipBadgeDisplay>

                  <ChipBadgeDisplay
                    className={classNames(
                      "__wab_instance",
                      sty.chipBadgeDisplay__hnlJf
                    )}
                    color={"brand" as const}
                    type={"ghost" as const}
                  >
                    {"Fashion"}
                  </ChipBadgeDisplay>
                </p.Stack>

                <SectionDividerIcon
                  className={classNames(defaultcss.all, sty.svg__pTr21)}
                  role={"img"}
                />
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"serviceOverviewParent"}
                data-plasmic-override={overrides.serviceOverviewParent}
                hasGap={true}
                className={classNames(
                  defaultcss.all,
                  sty.serviceOverviewParent
                )}
              >
                <div
                  data-plasmic-name={"descriptionBlock"}
                  data-plasmic-override={overrides.descriptionBlock}
                  className={classNames(defaultcss.all, sty.descriptionBlock)}
                >
                  <Accordion
                    className={classNames(
                      "__wab_instance",
                      sty.accordion__nVSr
                    )}
                    size={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? ("_360" as const)
                        : undefined
                    }
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox__o4Ry
                      )}
                    >
                      {"Description"}
                    </div>
                  </Accordion>

                  {true ? (
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"serviceDescriptionOverview"}
                      data-plasmic-override={
                        overrides.serviceDescriptionOverview
                      }
                      hasGap={true}
                      className={classNames(
                        defaultcss.all,
                        sty.serviceDescriptionOverview
                      )}
                    >
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.freeBox___6BQku
                        )}
                      >
                        {
                          "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Dictum porttitor faucibus viverra eget nibh aliquam. Venenatis maecenas at diam amet. Ac odio vitae morbi fermentum, morbi odio leo volutpat. Fringilla habitant nibh placerat rhoncus, turpis. Urna ipsum purus nam sapien faucibus.\n\nSit egestas faucibus mauris, lorem. Massa ultrices netus velit tempor ligula nec egestas. Netus ullamcorper varius aliquam quam ut at. Ridiculus scelerisque nunc turpis mattis malesuada fringilla viverra nunc. Turpis."
                        }
                      </div>
                    </p.Stack>
                  ) : null}
                </div>

                <div
                  data-plasmic-name={"processBlock"}
                  data-plasmic-override={overrides.processBlock}
                  className={classNames(defaultcss.all, sty.processBlock)}
                >
                  <Accordion
                    className={classNames(
                      "__wab_instance",
                      sty.accordion__fVkDj
                    )}
                    size={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? ("_360" as const)
                        : undefined
                    }
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox__i4ZG5
                      )}
                    >
                      {"Process"}
                    </div>
                  </Accordion>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"serviceProcessDescription"}
                    data-plasmic-override={overrides.serviceProcessDescription}
                    hasGap={true}
                    className={classNames(
                      defaultcss.all,
                      sty.serviceProcessDescription
                    )}
                  >
                    <ServiceProcessCard
                      className={classNames(
                        "__wab_instance",
                        sty.serviceProcessCard__gJp4
                      )}
                    >
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.freeBox__k4Ust
                        )}
                      >
                        {
                          "Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commo"
                        }
                      </div>
                    </ServiceProcessCard>

                    <ServiceProcessCard
                      className={classNames(
                        "__wab_instance",
                        sty.serviceProcessCard__xiOd2
                      )}
                    />

                    <ServiceProcessCard
                      className={classNames(
                        "__wab_instance",
                        sty.serviceProcessCard___62Oo7
                      )}
                    />

                    <ServiceProcessCard
                      className={classNames(
                        "__wab_instance",
                        sty.serviceProcessCard___3ZeTe
                      )}
                    />

                    <ServiceProcessCard
                      className={classNames(
                        "__wab_instance",
                        sty.serviceProcessCard___1YR2F
                      )}
                    />

                    <ServiceProcessCard
                      className={classNames(
                        "__wab_instance",
                        sty.serviceProcessCard___8Uyqj
                      )}
                    />
                  </p.Stack>
                </div>

                <div
                  data-plasmic-name={"featuresBlock"}
                  data-plasmic-override={overrides.featuresBlock}
                  className={classNames(defaultcss.all, sty.featuresBlock)}
                >
                  <Accordion
                    className={classNames(
                      "__wab_instance",
                      sty.accordion__v1Xnh
                    )}
                    size={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? ("_360" as const)
                        : undefined
                    }
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox___376Zd
                      )}
                    >
                      {"Features"}
                    </div>
                  </Accordion>

                  <div
                    data-plasmic-name={"serviceFeaturesOverview"}
                    data-plasmic-override={overrides.serviceFeaturesOverview}
                    className={classNames(
                      defaultcss.all,
                      sty.serviceFeaturesOverview
                    )}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(defaultcss.all, sty.freeBox__d4213)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          defaultcss.all,
                          sty.freeBox__pfFm2
                        )}
                      >
                        <ServiceFeatureB
                          className={classNames(
                            "__wab_instance",
                            sty.serviceFeatureB__iOjeM
                          )}
                        />

                        <ServiceFeatureB
                          className={classNames(
                            "__wab_instance",
                            sty.serviceFeatureB___9M2Dr
                          )}
                        />

                        <ServiceFeatureB
                          className={classNames(
                            "__wab_instance",
                            sty.serviceFeatureB__kmQIc
                          )}
                        />

                        <ServiceFeatureB
                          className={classNames(
                            "__wab_instance",
                            sty.serviceFeatureB___2TwX5
                          )}
                        />

                        <ServiceFeatureB
                          className={classNames(
                            "__wab_instance",
                            sty.serviceFeatureB__fV437
                          )}
                        />

                        <ServiceFeatureB
                          className={classNames(
                            "__wab_instance",
                            sty.serviceFeatureB___3FVt3
                          )}
                        />

                        <ServiceFeatureB
                          className={classNames(
                            "__wab_instance",
                            sty.serviceFeatureB___8W2Fm
                          )}
                        />

                        <ServiceFeatureB
                          className={classNames(
                            "__wab_instance",
                            sty.serviceFeatureB__caK
                          )}
                        />
                      </p.Stack>
                    </p.Stack>
                  </div>
                </div>

                <div
                  data-plasmic-name={"contentBlock"}
                  data-plasmic-override={overrides.contentBlock}
                  className={classNames(defaultcss.all, sty.contentBlock)}
                >
                  <Accordion
                    className={classNames(
                      "__wab_instance",
                      sty.accordion__nH27
                    )}
                    size={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? ("_360" as const)
                        : undefined
                    }
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox__lrIpy
                      )}
                    >
                      {"Content"}
                    </div>
                  </Accordion>

                  <div
                    className={classNames(defaultcss.all, sty.freeBox__zSGqy)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(defaultcss.all, sty.freeBox__iPMj)}
                    >
                      <ServiceFeatureCard
                        className={classNames(
                          "__wab_instance",
                          sty.serviceFeatureCard__euKaa
                        )}
                      />

                      <ServiceFeatureCard
                        className={classNames(
                          "__wab_instance",
                          sty.serviceFeatureCard__rJemU
                        )}
                      />

                      <ServiceFeatureCard
                        className={classNames(
                          "__wab_instance",
                          sty.serviceFeatureCard__sEjiw
                        )}
                      />

                      <ServiceFeatureCard
                        className={classNames(
                          "__wab_instance",
                          sty.serviceFeatureCard___1BAhb
                        )}
                      />
                    </p.Stack>
                  </div>
                </div>

                <div
                  data-plasmic-name={"methodBlock"}
                  data-plasmic-override={overrides.methodBlock}
                  className={classNames(defaultcss.all, sty.methodBlock)}
                >
                  <Accordion
                    className={classNames(
                      "__wab_instance",
                      sty.accordion__bQi0
                    )}
                    size={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? ("_360" as const)
                        : undefined
                    }
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox__fxirE
                      )}
                    >
                      {"Method"}
                    </div>
                  </Accordion>

                  <div
                    className={classNames(defaultcss.all, sty.freeBox__if3Z7)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(defaultcss.all, sty.freeBox__n5ET)}
                    >
                      <ServiceFeatureCard
                        className={classNames(
                          "__wab_instance",
                          sty.serviceFeatureCard__fHz5N
                        )}
                      />

                      <ServiceFeatureCard
                        className={classNames(
                          "__wab_instance",
                          sty.serviceFeatureCard__kRIlW
                        )}
                      />

                      <ServiceFeatureCard
                        className={classNames(
                          "__wab_instance",
                          sty.serviceFeatureCard__iRue
                        )}
                      />

                      <ServiceFeatureCard
                        className={classNames(
                          "__wab_instance",
                          sty.serviceFeatureCard___2WpUh
                        )}
                      />
                    </p.Stack>
                  </div>
                </div>

                <div
                  data-plasmic-name={"toolsBlock"}
                  data-plasmic-override={overrides.toolsBlock}
                  className={classNames(defaultcss.all, sty.toolsBlock)}
                >
                  <Accordion
                    className={classNames(
                      "__wab_instance",
                      sty.accordion__zOhlJ
                    )}
                    size={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? ("_360" as const)
                        : undefined
                    }
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox__t9Wah
                      )}
                    >
                      {"Tools"}
                    </div>
                  </Accordion>

                  <div
                    className={classNames(defaultcss.all, sty.freeBox__kM8Gf)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(defaultcss.all, sty.freeBox__ngbFl)}
                    >
                      <ChipBadgeDisplay
                        className={classNames(
                          "__wab_instance",
                          sty.chipBadgeDisplay___4Fh69
                        )}
                      />

                      <ChipBadgeDisplay
                        className={classNames(
                          "__wab_instance",
                          sty.chipBadgeDisplay__gkLuY
                        )}
                      >
                        {"Design system"}
                      </ChipBadgeDisplay>

                      <ChipBadgeDisplay
                        className={classNames(
                          "__wab_instance",
                          sty.chipBadgeDisplay__fMrxQ
                        )}
                      >
                        {"Mobile app"}
                      </ChipBadgeDisplay>

                      <ChipBadgeDisplay
                        className={classNames(
                          "__wab_instance",
                          sty.chipBadgeDisplay__vLhsV
                        )}
                      >
                        {"Web app"}
                      </ChipBadgeDisplay>

                      <ChipBadgeDisplay
                        className={classNames(
                          "__wab_instance",
                          sty.chipBadgeDisplay__ps8Xg
                        )}
                      >
                        {"E-commerce"}
                      </ChipBadgeDisplay>
                    </p.Stack>
                  </div>
                </div>

                <div
                  data-plasmic-name={"formatBlock"}
                  data-plasmic-override={overrides.formatBlock}
                  className={classNames(defaultcss.all, sty.formatBlock)}
                >
                  <Accordion
                    className={classNames(
                      "__wab_instance",
                      sty.accordion__y6QK
                    )}
                    size={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? ("_360" as const)
                        : undefined
                    }
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox___2Zsi4
                      )}
                    >
                      {"Format"}
                    </div>
                  </Accordion>

                  <div
                    className={classNames(defaultcss.all, sty.freeBox__sBiUt)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(defaultcss.all, sty.freeBox__nr3U)}
                    >
                      <ChipBadgeDisplay
                        className={classNames(
                          "__wab_instance",
                          sty.chipBadgeDisplay__mBuac
                        )}
                      />

                      <ChipBadgeDisplay
                        className={classNames(
                          "__wab_instance",
                          sty.chipBadgeDisplay__yyy3Y
                        )}
                      >
                        {"Design system"}
                      </ChipBadgeDisplay>

                      <ChipBadgeDisplay
                        className={classNames(
                          "__wab_instance",
                          sty.chipBadgeDisplay__ku5Q4
                        )}
                      >
                        {"Mobile app"}
                      </ChipBadgeDisplay>

                      <ChipBadgeDisplay
                        className={classNames(
                          "__wab_instance",
                          sty.chipBadgeDisplay__lUyQs
                        )}
                      >
                        {"Web app"}
                      </ChipBadgeDisplay>

                      <ChipBadgeDisplay
                        className={classNames(
                          "__wab_instance",
                          sty.chipBadgeDisplay__hbHn
                        )}
                      >
                        {"E-commerce"}
                      </ChipBadgeDisplay>
                    </p.Stack>
                  </div>
                </div>

                <div
                  data-plasmic-name={"requirementsBlock"}
                  data-plasmic-override={overrides.requirementsBlock}
                  className={classNames(defaultcss.all, sty.requirementsBlock)}
                >
                  <Accordion
                    className={classNames(
                      "__wab_instance",
                      sty.accordion__j8EzM
                    )}
                    size={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? ("_360" as const)
                        : undefined
                    }
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox___07Lgy
                      )}
                    >
                      {"Requirements"}
                    </div>
                  </Accordion>

                  <div
                    className={classNames(defaultcss.all, sty.freeBox__ylO64)}
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox__c7Cg
                      )}
                    >
                      {
                        "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Dictum porttitor faucibus viverra eget nibh aliquam. Venenatis maecenas at diam amet. Ac odio vitae morbi fermentum, morbi odio leo volutpat. Fringilla habitant nibh placerat rhoncus, turpis. Urna ipsum purus nam sapien faucibus.\n\nSit egestas faucibus mauris, lorem. Massa ultrices netus velit tempor ligula nec egestas. Netus ullamcorper varius aliquam quam ut at. Ridiculus scelerisque nunc turpis mattis malesuada fringilla viverra nunc. Turpis."
                      }
                    </div>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(defaultcss.all, sty.freeBox__mOdLe)}
                    >
                      <ServiceFeatureCard
                        className={classNames(
                          "__wab_instance",
                          sty.serviceFeatureCard__caYnW
                        )}
                      />

                      <ServiceFeatureCard
                        className={classNames(
                          "__wab_instance",
                          sty.serviceFeatureCard__wn1To
                        )}
                      />

                      <ServiceFeatureCard
                        className={classNames(
                          "__wab_instance",
                          sty.serviceFeatureCard__z0BPv
                        )}
                      />

                      <ServiceFeatureCard
                        className={classNames(
                          "__wab_instance",
                          sty.serviceFeatureCard__dxK9L
                        )}
                      />
                    </p.Stack>
                  </div>
                </div>

                <div
                  data-plasmic-name={"termsBlock"}
                  data-plasmic-override={overrides.termsBlock}
                  className={classNames(defaultcss.all, sty.termsBlock)}
                >
                  <Accordion
                    className={classNames(
                      "__wab_instance",
                      sty.accordion__gnotz
                    )}
                    size={
                      hasVariant(globalVariants, "screen", "mobile")
                        ? ("_360" as const)
                        : undefined
                    }
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox__xfEHo
                      )}
                    >
                      {"Terms"}
                    </div>
                  </Accordion>

                  <div
                    className={classNames(defaultcss.all, sty.freeBox___9MUbX)}
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox___3Cc4
                      )}
                    >
                      {
                        "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Dictum porttitor faucibus viverra eget nibh aliquam. Venenatis maecenas at diam amet. Ac odio vitae morbi fermentum, morbi odio leo volutpat. Fringilla habitant nibh placerat rhoncus, turpis. Urna ipsum purus nam sapien faucibus.\n\nSit egestas faucibus mauris, lorem. Massa ultrices netus velit tempor ligula nec egestas. Netus ullamcorper varius aliquam quam ut at. Ridiculus scelerisque nunc turpis mattis malesuada fringilla viverra nunc. Turpis."
                      }
                    </div>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(defaultcss.all, sty.freeBox__mh062)}
                    >
                      <ServiceFeatureCard
                        className={classNames(
                          "__wab_instance",
                          sty.serviceFeatureCard__jIGl9
                        )}
                      />

                      <ServiceFeatureCard
                        className={classNames(
                          "__wab_instance",
                          sty.serviceFeatureCard__k36Oi
                        )}
                      />

                      <ServiceFeatureCard
                        className={classNames(
                          "__wab_instance",
                          sty.serviceFeatureCard__amyFh
                        )}
                      />

                      <ServiceFeatureCard
                        className={classNames(
                          "__wab_instance",
                          sty.serviceFeatureCard__uLqBc
                        )}
                      />
                    </p.Stack>
                  </div>
                </div>
              </p.Stack>
            </p.Stack>

            <p.Stack
              as={"div"}
              data-plasmic-name={"serviceOrderParent"}
              data-plasmic-override={overrides.serviceOrderParent}
              hasGap={true}
              className={classNames(defaultcss.all, sty.serviceOrderParent)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"serviceCheckoutHeader"}
                data-plasmic-override={overrides.serviceCheckoutHeader}
                hasGap={true}
                className={classNames(
                  defaultcss.all,
                  sty.serviceCheckoutHeader
                )}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"serviceDescriptionParent"}
                  data-plasmic-override={overrides.serviceDescriptionParent}
                  hasGap={true}
                  className={classNames(
                    defaultcss.all,
                    sty.serviceDescriptionParent
                  )}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"headlineNamePriceVerificationParent"}
                    data-plasmic-override={
                      overrides.headlineNamePriceVerificationParent
                    }
                    hasGap={true}
                    className={classNames(
                      defaultcss.all,
                      sty.headlineNamePriceVerificationParent
                    )}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"companyNamePriceParent"}
                      data-plasmic-override={overrides.companyNamePriceParent}
                      hasGap={true}
                      className={classNames(
                        defaultcss.all,
                        sty.companyNamePriceParent
                      )}
                    >
                      <div
                        data-plasmic-name={"servicePrice"}
                        data-plasmic-override={overrides.servicePrice}
                        className={classNames(defaultcss.all, sty.servicePrice)}
                      >
                        <div
                          data-plasmic-name={"serviceCurrency"}
                          data-plasmic-override={overrides.serviceCurrency}
                          className={classNames(
                            defaultcss.all,
                            defaultcss.__wab_text,
                            sty.serviceCurrency
                          )}
                        >
                          {"$"}
                        </div>

                        <div
                          className={classNames(
                            defaultcss.all,
                            defaultcss.__wab_text,
                            sty.freeBox__pqcwz
                          )}
                        >
                          {"10,000"}
                        </div>
                      </div>
                    </p.Stack>
                  </p.Stack>

                  <div
                    data-plasmic-name={"serviceNameTitle"}
                    data-plasmic-override={overrides.serviceNameTitle}
                    className={classNames(defaultcss.all, sty.serviceNameTitle)}
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox__pUbMd
                      )}
                    >
                      {"Service name"}
                    </div>
                  </div>

                  <div
                    data-plasmic-name={"serviceShortDescription"}
                    data-plasmic-override={overrides.serviceShortDescription}
                    className={classNames(
                      defaultcss.all,
                      sty.serviceShortDescription
                    )}
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox__torl0
                      )}
                    >
                      {
                        "Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, na"
                      }
                    </div>
                  </div>
                </p.Stack>
              </p.Stack>

              <CellDividerIcon
                className={classNames(defaultcss.all, sty.svg__xaDw)}
                role={"img"}
              />

              <p.Stack
                as={"div"}
                data-plasmic-name={"companyDescriptionParent"}
                data-plasmic-override={overrides.companyDescriptionParent}
                hasGap={true}
                className={classNames(
                  defaultcss.all,
                  sty.companyDescriptionParent
                )}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"headlineCompanyParent"}
                  data-plasmic-override={overrides.headlineCompanyParent}
                  hasGap={true}
                  className={classNames(
                    defaultcss.all,
                    sty.headlineCompanyParent
                  )}
                >
                  <div
                    data-plasmic-name={"serviceCompanyLogo"}
                    data-plasmic-override={overrides.serviceCompanyLogo}
                    className={classNames(
                      defaultcss.all,
                      sty.serviceCompanyLogo
                    )}
                  >
                    <UserAvatar
                      data-plasmic-name={"userAvatar"}
                      data-plasmic-override={overrides.userAvatar}
                      className={classNames("__wab_instance", sty.userAvatar)}
                      navUserAvatar32={
                        <img
                          data-plasmic-name={"navUserAvatar32"}
                          data-plasmic-override={overrides.navUserAvatar32}
                          alt={""}
                          className={classNames(
                            defaultcss.img,
                            sty.navUserAvatar32
                          )}
                          role={"img"}
                          src={"/plasmic/copy_of_market_v_2/images/image4.png"}
                        />
                      }
                      size={"_32" as const}
                    />
                  </div>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"companyNamePriceParent3"}
                    data-plasmic-override={overrides.companyNamePriceParent3}
                    hasGap={true}
                    className={classNames(
                      defaultcss.all,
                      sty.companyNamePriceParent3
                    )}
                  >
                    <div
                      className={classNames(defaultcss.all, sty.freeBox__nM0Ic)}
                    >
                      <div
                        className={classNames(
                          defaultcss.all,
                          sty.freeBox__lfU5M
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            defaultcss.all,
                            sty.freeBox__dHw4J
                          )}
                        >
                          <div
                            data-plasmic-name={"serviceCompanyName3"}
                            data-plasmic-override={
                              overrides.serviceCompanyName3
                            }
                            className={classNames(
                              defaultcss.all,
                              sty.serviceCompanyName3
                            )}
                          >
                            <div
                              className={classNames(
                                defaultcss.all,
                                defaultcss.__wab_text,
                                sty.freeBox__vjxQ5
                              )}
                            >
                              {"Company name"}
                            </div>
                          </div>
                        </p.Stack>
                      </div>
                    </div>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"companyVerificationBadgesParent4"}
                    data-plasmic-override={
                      overrides.companyVerificationBadgesParent4
                    }
                    hasGap={true}
                    className={classNames(
                      defaultcss.all,
                      sty.companyVerificationBadgesParent4
                    )}
                  >
                    <TagPartnerC
                      className={classNames(
                        "__wab_instance",
                        sty.tagPartnerC__xJf7K
                      )}
                    />

                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"companyIsVerified4"}
                      data-plasmic-override={overrides.companyIsVerified4}
                      hasGap={true}
                      className={classNames(
                        defaultcss.all,
                        sty.companyIsVerified4
                      )}
                    >
                      <Icon54Icon
                        className={classNames(defaultcss.all, sty.svg__lVXkH)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.freeBox___7P6Ku
                        )}
                      >
                        {"Verified"}
                      </div>
                    </p.Stack>
                  </p.Stack>
                </p.Stack>

                <div
                  data-plasmic-name={"companyShortDescription"}
                  data-plasmic-override={overrides.companyShortDescription}
                  className={classNames(
                    defaultcss.all,
                    sty.companyShortDescription
                  )}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox___1UJ9A
                    )}
                  >
                    {
                      "Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, na"
                    }
                  </div>
                </div>
              </p.Stack>

              <CellDividerIcon
                className={classNames(defaultcss.all, sty.svg__zmDb)}
                role={"img"}
              />

              <p.Stack
                as={"div"}
                data-plasmic-name={"serviceCheckoutButtons"}
                data-plasmic-override={overrides.serviceCheckoutButtons}
                hasGap={true}
                className={classNames(
                  defaultcss.all,
                  sty.serviceCheckoutButtons
                )}
              >
                <ButtonPrimary
                  className={classNames(
                    "__wab_instance",
                    sty.buttonPrimary__jg2Z0
                  )}
                  color={"brand" as const}
                  size={"_360" as const}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__u4Wef
                    )}
                  >
                    {"Order now"}
                  </div>
                </ButtonPrimary>

                <ButtonPrimary
                  className={classNames(
                    "__wab_instance",
                    sty.buttonPrimary__eFj5H
                  )}
                  size={"_360" as const}
                  type={"outline" as const}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__dm1Oy
                    )}
                  >
                    {"Add to brief"}
                  </div>
                </ButtonPrimary>

                <ButtonPrimary
                  className={classNames(
                    "__wab_instance",
                    sty.buttonPrimary__psfc1
                  )}
                  size={"_360" as const}
                  type={"ghost" as const}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox___8CtuF
                    )}
                  >
                    {"Request quote"}
                  </div>
                </ButtonPrimary>

                <p.Stack
                  as={"button"}
                  data-plasmic-name={"save"}
                  data-plasmic-override={overrides.save}
                  hasGap={true}
                  className={classNames(defaultcss.button, sty.save)}
                >
                  <BookmarkIcon
                    data-plasmic-name={"bookmark"}
                    data-plasmic-override={overrides.bookmark}
                    className={classNames(defaultcss.all, sty.bookmark)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__wmDkP
                    )}
                  >
                    {"Save"}
                  </div>
                </p.Stack>

                <p.Stack
                  as={"button"}
                  data-plasmic-name={"share"}
                  data-plasmic-override={overrides.share}
                  hasGap={true}
                  className={classNames(defaultcss.button, sty.share)}
                >
                  <ShareIcon
                    data-plasmic-name={"svgShare"}
                    data-plasmic-override={overrides.svgShare}
                    className={classNames(defaultcss.all, sty.svgShare)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__fZlfY
                    )}
                  >
                    {"Share"}
                  </div>
                </p.Stack>
              </p.Stack>
            </p.Stack>
          </p.Stack>

          <FooterB
            data-plasmic-name={"footerB"}
            data-plasmic-override={overrides.footerB}
            className={classNames("__wab_instance", sty.footerB)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbarPrimary",
    "serviceDetailCheckoutPageParent",
    "serviceDetailOverviewParent",
    "serviceHeadlineParent",
    "headline",
    "headlineNamePriceParent",
    "companyNamePriceParent2",
    "serviceCompanyName2",
    "companyVerificationBadgesParent3",
    "companyIsVerified3",
    "serviceImageBlock",
    "serviceImageHero",
    "serviceOverviewParent",
    "descriptionBlock",
    "serviceDescriptionOverview",
    "processBlock",
    "serviceProcessDescription",
    "featuresBlock",
    "serviceFeaturesOverview",
    "contentBlock",
    "methodBlock",
    "toolsBlock",
    "formatBlock",
    "requirementsBlock",
    "termsBlock",
    "serviceOrderParent",
    "serviceCheckoutHeader",
    "serviceDescriptionParent",
    "headlineNamePriceVerificationParent",
    "companyNamePriceParent",
    "servicePrice",
    "serviceCurrency",
    "serviceNameTitle",
    "serviceShortDescription",
    "companyDescriptionParent",
    "headlineCompanyParent",
    "serviceCompanyLogo",
    "userAvatar",
    "navUserAvatar32",
    "companyNamePriceParent3",
    "serviceCompanyName3",
    "companyVerificationBadgesParent4",
    "companyIsVerified4",
    "companyShortDescription",
    "serviceCheckoutButtons",
    "save",
    "bookmark",
    "share",
    "svgShare",
    "footerB"
  ],
  navbarPrimary: ["navbarPrimary"],
  serviceDetailCheckoutPageParent: [
    "serviceDetailCheckoutPageParent",
    "serviceDetailOverviewParent",
    "serviceHeadlineParent",
    "headline",
    "headlineNamePriceParent",
    "companyNamePriceParent2",
    "serviceCompanyName2",
    "companyVerificationBadgesParent3",
    "companyIsVerified3",
    "serviceImageBlock",
    "serviceImageHero",
    "serviceOverviewParent",
    "descriptionBlock",
    "serviceDescriptionOverview",
    "processBlock",
    "serviceProcessDescription",
    "featuresBlock",
    "serviceFeaturesOverview",
    "contentBlock",
    "methodBlock",
    "toolsBlock",
    "formatBlock",
    "requirementsBlock",
    "termsBlock",
    "serviceOrderParent",
    "serviceCheckoutHeader",
    "serviceDescriptionParent",
    "headlineNamePriceVerificationParent",
    "companyNamePriceParent",
    "servicePrice",
    "serviceCurrency",
    "serviceNameTitle",
    "serviceShortDescription",
    "companyDescriptionParent",
    "headlineCompanyParent",
    "serviceCompanyLogo",
    "userAvatar",
    "navUserAvatar32",
    "companyNamePriceParent3",
    "serviceCompanyName3",
    "companyVerificationBadgesParent4",
    "companyIsVerified4",
    "companyShortDescription",
    "serviceCheckoutButtons",
    "save",
    "bookmark",
    "share",
    "svgShare"
  ],
  serviceDetailOverviewParent: [
    "serviceDetailOverviewParent",
    "serviceHeadlineParent",
    "headline",
    "headlineNamePriceParent",
    "companyNamePriceParent2",
    "serviceCompanyName2",
    "companyVerificationBadgesParent3",
    "companyIsVerified3",
    "serviceImageBlock",
    "serviceImageHero",
    "serviceOverviewParent",
    "descriptionBlock",
    "serviceDescriptionOverview",
    "processBlock",
    "serviceProcessDescription",
    "featuresBlock",
    "serviceFeaturesOverview",
    "contentBlock",
    "methodBlock",
    "toolsBlock",
    "formatBlock",
    "requirementsBlock",
    "termsBlock"
  ],
  serviceHeadlineParent: [
    "serviceHeadlineParent",
    "headline",
    "headlineNamePriceParent",
    "companyNamePriceParent2",
    "serviceCompanyName2",
    "companyVerificationBadgesParent3",
    "companyIsVerified3"
  ],
  headline: ["headline"],
  headlineNamePriceParent: [
    "headlineNamePriceParent",
    "companyNamePriceParent2",
    "serviceCompanyName2",
    "companyVerificationBadgesParent3",
    "companyIsVerified3"
  ],
  companyNamePriceParent2: ["companyNamePriceParent2", "serviceCompanyName2"],
  serviceCompanyName2: ["serviceCompanyName2"],
  companyVerificationBadgesParent3: [
    "companyVerificationBadgesParent3",
    "companyIsVerified3"
  ],
  companyIsVerified3: ["companyIsVerified3"],
  serviceImageBlock: ["serviceImageBlock", "serviceImageHero"],
  serviceImageHero: ["serviceImageHero"],
  serviceOverviewParent: [
    "serviceOverviewParent",
    "descriptionBlock",
    "serviceDescriptionOverview",
    "processBlock",
    "serviceProcessDescription",
    "featuresBlock",
    "serviceFeaturesOverview",
    "contentBlock",
    "methodBlock",
    "toolsBlock",
    "formatBlock",
    "requirementsBlock",
    "termsBlock"
  ],
  descriptionBlock: ["descriptionBlock", "serviceDescriptionOverview"],
  serviceDescriptionOverview: ["serviceDescriptionOverview"],
  processBlock: ["processBlock", "serviceProcessDescription"],
  serviceProcessDescription: ["serviceProcessDescription"],
  featuresBlock: ["featuresBlock", "serviceFeaturesOverview"],
  serviceFeaturesOverview: ["serviceFeaturesOverview"],
  contentBlock: ["contentBlock"],
  methodBlock: ["methodBlock"],
  toolsBlock: ["toolsBlock"],
  formatBlock: ["formatBlock"],
  requirementsBlock: ["requirementsBlock"],
  termsBlock: ["termsBlock"],
  serviceOrderParent: [
    "serviceOrderParent",
    "serviceCheckoutHeader",
    "serviceDescriptionParent",
    "headlineNamePriceVerificationParent",
    "companyNamePriceParent",
    "servicePrice",
    "serviceCurrency",
    "serviceNameTitle",
    "serviceShortDescription",
    "companyDescriptionParent",
    "headlineCompanyParent",
    "serviceCompanyLogo",
    "userAvatar",
    "navUserAvatar32",
    "companyNamePriceParent3",
    "serviceCompanyName3",
    "companyVerificationBadgesParent4",
    "companyIsVerified4",
    "companyShortDescription",
    "serviceCheckoutButtons",
    "save",
    "bookmark",
    "share",
    "svgShare"
  ],
  serviceCheckoutHeader: [
    "serviceCheckoutHeader",
    "serviceDescriptionParent",
    "headlineNamePriceVerificationParent",
    "companyNamePriceParent",
    "servicePrice",
    "serviceCurrency",
    "serviceNameTitle",
    "serviceShortDescription"
  ],
  serviceDescriptionParent: [
    "serviceDescriptionParent",
    "headlineNamePriceVerificationParent",
    "companyNamePriceParent",
    "servicePrice",
    "serviceCurrency",
    "serviceNameTitle",
    "serviceShortDescription"
  ],
  headlineNamePriceVerificationParent: [
    "headlineNamePriceVerificationParent",
    "companyNamePriceParent",
    "servicePrice",
    "serviceCurrency"
  ],
  companyNamePriceParent: [
    "companyNamePriceParent",
    "servicePrice",
    "serviceCurrency"
  ],
  servicePrice: ["servicePrice", "serviceCurrency"],
  serviceCurrency: ["serviceCurrency"],
  serviceNameTitle: ["serviceNameTitle"],
  serviceShortDescription: ["serviceShortDescription"],
  companyDescriptionParent: [
    "companyDescriptionParent",
    "headlineCompanyParent",
    "serviceCompanyLogo",
    "userAvatar",
    "navUserAvatar32",
    "companyNamePriceParent3",
    "serviceCompanyName3",
    "companyVerificationBadgesParent4",
    "companyIsVerified4",
    "companyShortDescription"
  ],
  headlineCompanyParent: [
    "headlineCompanyParent",
    "serviceCompanyLogo",
    "userAvatar",
    "navUserAvatar32",
    "companyNamePriceParent3",
    "serviceCompanyName3",
    "companyVerificationBadgesParent4",
    "companyIsVerified4"
  ],
  serviceCompanyLogo: ["serviceCompanyLogo", "userAvatar", "navUserAvatar32"],
  userAvatar: ["userAvatar", "navUserAvatar32"],
  navUserAvatar32: ["navUserAvatar32"],
  companyNamePriceParent3: ["companyNamePriceParent3", "serviceCompanyName3"],
  serviceCompanyName3: ["serviceCompanyName3"],
  companyVerificationBadgesParent4: [
    "companyVerificationBadgesParent4",
    "companyIsVerified4"
  ],
  companyIsVerified4: ["companyIsVerified4"],
  companyShortDescription: ["companyShortDescription"],
  serviceCheckoutButtons: [
    "serviceCheckoutButtons",
    "save",
    "bookmark",
    "share",
    "svgShare"
  ],
  save: ["save", "bookmark"],
  bookmark: ["bookmark"],
  share: ["share", "svgShare"],
  svgShare: ["svgShare"],
  footerB: ["footerB"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbarPrimary: typeof NavbarPrimary;
  serviceDetailCheckoutPageParent: "div";
  serviceDetailOverviewParent: "div";
  serviceHeadlineParent: "div";
  headline: "div";
  headlineNamePriceParent: "div";
  companyNamePriceParent2: "div";
  serviceCompanyName2: "div";
  companyVerificationBadgesParent3: "div";
  companyIsVerified3: "div";
  serviceImageBlock: "div";
  serviceImageHero: "img";
  serviceOverviewParent: "div";
  descriptionBlock: "div";
  serviceDescriptionOverview: "div";
  processBlock: "div";
  serviceProcessDescription: "div";
  featuresBlock: "div";
  serviceFeaturesOverview: "div";
  contentBlock: "div";
  methodBlock: "div";
  toolsBlock: "div";
  formatBlock: "div";
  requirementsBlock: "div";
  termsBlock: "div";
  serviceOrderParent: "div";
  serviceCheckoutHeader: "div";
  serviceDescriptionParent: "div";
  headlineNamePriceVerificationParent: "div";
  companyNamePriceParent: "div";
  servicePrice: "div";
  serviceCurrency: "div";
  serviceNameTitle: "div";
  serviceShortDescription: "div";
  companyDescriptionParent: "div";
  headlineCompanyParent: "div";
  serviceCompanyLogo: "div";
  userAvatar: typeof UserAvatar;
  navUserAvatar32: "img";
  companyNamePriceParent3: "div";
  serviceCompanyName3: "div";
  companyVerificationBadgesParent4: "div";
  companyIsVerified4: "div";
  companyShortDescription: "div";
  serviceCheckoutButtons: "div";
  save: "button";
  bookmark: "svg";
  share: "button";
  svgShare: "svg";
  footerB: typeof FooterB;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicServicedetail__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicServicedetail__VariantsArgs;
    args?: PlasmicServicedetail__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicServicedetail__Fetches;
  } & Omit<PlasmicServicedetail__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicServicedetail__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicServicedetail__ArgProps,
      internalVariantPropNames: PlasmicServicedetail__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicServicedetail__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicServicedetail";
  } else {
    func.displayName = `PlasmicServicedetail.${nodeName}`;
  }
  return func;
}

export const PlasmicServicedetail = Object.assign(
  // Top-level PlasmicServicedetail renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbarPrimary: makeNodeComponent("navbarPrimary"),
    serviceDetailCheckoutPageParent: makeNodeComponent(
      "serviceDetailCheckoutPageParent"
    ),
    serviceDetailOverviewParent: makeNodeComponent(
      "serviceDetailOverviewParent"
    ),
    serviceHeadlineParent: makeNodeComponent("serviceHeadlineParent"),
    headline: makeNodeComponent("headline"),
    headlineNamePriceParent: makeNodeComponent("headlineNamePriceParent"),
    companyNamePriceParent2: makeNodeComponent("companyNamePriceParent2"),
    serviceCompanyName2: makeNodeComponent("serviceCompanyName2"),
    companyVerificationBadgesParent3: makeNodeComponent(
      "companyVerificationBadgesParent3"
    ),
    companyIsVerified3: makeNodeComponent("companyIsVerified3"),
    serviceImageBlock: makeNodeComponent("serviceImageBlock"),
    serviceImageHero: makeNodeComponent("serviceImageHero"),
    serviceOverviewParent: makeNodeComponent("serviceOverviewParent"),
    descriptionBlock: makeNodeComponent("descriptionBlock"),
    serviceDescriptionOverview: makeNodeComponent("serviceDescriptionOverview"),
    processBlock: makeNodeComponent("processBlock"),
    serviceProcessDescription: makeNodeComponent("serviceProcessDescription"),
    featuresBlock: makeNodeComponent("featuresBlock"),
    serviceFeaturesOverview: makeNodeComponent("serviceFeaturesOverview"),
    contentBlock: makeNodeComponent("contentBlock"),
    methodBlock: makeNodeComponent("methodBlock"),
    toolsBlock: makeNodeComponent("toolsBlock"),
    formatBlock: makeNodeComponent("formatBlock"),
    requirementsBlock: makeNodeComponent("requirementsBlock"),
    termsBlock: makeNodeComponent("termsBlock"),
    serviceOrderParent: makeNodeComponent("serviceOrderParent"),
    serviceCheckoutHeader: makeNodeComponent("serviceCheckoutHeader"),
    serviceDescriptionParent: makeNodeComponent("serviceDescriptionParent"),
    headlineNamePriceVerificationParent: makeNodeComponent(
      "headlineNamePriceVerificationParent"
    ),
    companyNamePriceParent: makeNodeComponent("companyNamePriceParent"),
    servicePrice: makeNodeComponent("servicePrice"),
    serviceCurrency: makeNodeComponent("serviceCurrency"),
    serviceNameTitle: makeNodeComponent("serviceNameTitle"),
    serviceShortDescription: makeNodeComponent("serviceShortDescription"),
    companyDescriptionParent: makeNodeComponent("companyDescriptionParent"),
    headlineCompanyParent: makeNodeComponent("headlineCompanyParent"),
    serviceCompanyLogo: makeNodeComponent("serviceCompanyLogo"),
    userAvatar: makeNodeComponent("userAvatar"),
    navUserAvatar32: makeNodeComponent("navUserAvatar32"),
    companyNamePriceParent3: makeNodeComponent("companyNamePriceParent3"),
    serviceCompanyName3: makeNodeComponent("serviceCompanyName3"),
    companyVerificationBadgesParent4: makeNodeComponent(
      "companyVerificationBadgesParent4"
    ),
    companyIsVerified4: makeNodeComponent("companyIsVerified4"),
    companyShortDescription: makeNodeComponent("companyShortDescription"),
    serviceCheckoutButtons: makeNodeComponent("serviceCheckoutButtons"),
    save: makeNodeComponent("save"),
    bookmark: makeNodeComponent("bookmark"),
    share: makeNodeComponent("share"),
    svgShare: makeNodeComponent("svgShare"),
    footerB: makeNodeComponent("footerB"),

    // Metadata about props expected for PlasmicServicedetail
    internalVariantProps: PlasmicServicedetail__VariantProps,
    internalArgProps: PlasmicServicedetail__ArgProps
  }
);

export default PlasmicServicedetail;
/* prettier-ignore-end */
