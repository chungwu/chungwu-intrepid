// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: EayliL28AU_4nQj
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicPanelButtonNewListing.module.css"; // plasmic-import: EayliL28AU_4nQj/css

import ListingIcon from "./icons/PlasmicIcon__Listing"; // plasmic-import: V-Z6DuZPre8UBS6/icon

export type PlasmicPanelButtonNewListing__VariantMembers = {};

export type PlasmicPanelButtonNewListing__VariantsArgs = {};
type VariantPropType = keyof PlasmicPanelButtonNewListing__VariantsArgs;
export const PlasmicPanelButtonNewListing__VariantProps =
  new Array<VariantPropType>();

export type PlasmicPanelButtonNewListing__ArgsType = {
  target?: string;
  trigger?: string;
  destination?: string | PageHref;
};

type ArgPropType = keyof PlasmicPanelButtonNewListing__ArgsType;
export const PlasmicPanelButtonNewListing__ArgProps = new Array<ArgPropType>(
  "target",
  "trigger",
  "destination"
);

export type PlasmicPanelButtonNewListing__OverridesType = {
  root?: p.Flex<"div">;
  newListing?: p.Flex<"a"> & Partial<LinkProps>;
  sideBarCardLink3?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
  freeBox?: p.Flex<"div">;
};

export interface DefaultPanelButtonNewListingProps {
  target?: string;
  trigger?: string;
  destination?: string | PageHref;
  className?: string;
}

function PlasmicPanelButtonNewListing__RenderFunc(props: {
  variants: PlasmicPanelButtonNewListing__VariantsArgs;
  args: PlasmicPanelButtonNewListing__ArgsType;
  overrides: PlasmicPanelButtonNewListing__OverridesType;
  dataFetches?: PlasmicPanelButtonNewListing__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.PlasmicLink
        data-plasmic-name={"newListing"}
        data-plasmic-override={overrides.newListing}
        className={classNames(defaultcss.all, sty.newListing)}
        component={Link}
        href={args.destination}
        platform={"nextjs"}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"sideBarCardLink3"}
          data-plasmic-override={overrides.sideBarCardLink3}
          hasGap={true}
          className={classNames(defaultcss.all, sty.sideBarCardLink3)}
        >
          <ListingIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(defaultcss.all, sty.svg)}
            role={"img"}
          />

          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox
            )}
          >
            {"New listing"}
          </div>
        </p.Stack>
      </p.PlasmicLink>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "newListing", "sideBarCardLink3", "svg", "freeBox"],
  newListing: ["newListing", "sideBarCardLink3", "svg", "freeBox"],
  sideBarCardLink3: ["sideBarCardLink3", "svg", "freeBox"],
  svg: ["svg"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  newListing: "a";
  sideBarCardLink3: "div";
  svg: "svg";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPanelButtonNewListing__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPanelButtonNewListing__VariantsArgs;
    args?: PlasmicPanelButtonNewListing__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicPanelButtonNewListing__Fetches;
  } & Omit<PlasmicPanelButtonNewListing__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPanelButtonNewListing__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPanelButtonNewListing__ArgProps,
      internalVariantPropNames: PlasmicPanelButtonNewListing__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicPanelButtonNewListing__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPanelButtonNewListing";
  } else {
    func.displayName = `PlasmicPanelButtonNewListing.${nodeName}`;
  }
  return func;
}

export const PlasmicPanelButtonNewListing = Object.assign(
  // Top-level PlasmicPanelButtonNewListing renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    newListing: makeNodeComponent("newListing"),
    sideBarCardLink3: makeNodeComponent("sideBarCardLink3"),
    svg: makeNodeComponent("svg"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicPanelButtonNewListing
    internalVariantProps: PlasmicPanelButtonNewListing__VariantProps,
    internalArgProps: PlasmicPanelButtonNewListing__ArgProps
  }
);

export default PlasmicPanelButtonNewListing;
/* prettier-ignore-end */
