// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: cfySDEV6eDVdN0
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavLink from "../../NavLink"; // plasmic-import: XqQQfEEDIGeiz/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicNavbarPartnerEdit.module.css"; // plasmic-import: cfySDEV6eDVdN0/css

export type PlasmicNavbarPartnerEdit__VariantMembers = {
  navItems:
    | "profile"
    | "membership"
    | "team"
    | "wallet"
    | "listings"
    | "projects"
    | "performance"
    | "reviews"
    | "messages"
    | "notifications"
    | "settings";
  selected:
    | "profile"
    | "membership"
    | "team"
    | "wallet"
    | "listings"
    | "projects"
    | "performance"
    | "reviews"
    | "messages"
    | "notifications"
    | "settings";
};

export type PlasmicNavbarPartnerEdit__VariantsArgs = {
  navItems?: MultiChoiceArg<
    | "profile"
    | "membership"
    | "team"
    | "wallet"
    | "listings"
    | "projects"
    | "performance"
    | "reviews"
    | "messages"
    | "notifications"
    | "settings"
  >;
  selected?: SingleChoiceArg<
    | "profile"
    | "membership"
    | "team"
    | "wallet"
    | "listings"
    | "projects"
    | "performance"
    | "reviews"
    | "messages"
    | "notifications"
    | "settings"
  >;
};

type VariantPropType = keyof PlasmicNavbarPartnerEdit__VariantsArgs;
export const PlasmicNavbarPartnerEdit__VariantProps =
  new Array<VariantPropType>("navItems", "selected");

export type PlasmicNavbarPartnerEdit__ArgsType = {};
type ArgPropType = keyof PlasmicNavbarPartnerEdit__ArgsType;
export const PlasmicNavbarPartnerEdit__ArgProps = new Array<ArgPropType>();

export type PlasmicNavbarPartnerEdit__OverridesType = {
  root?: p.Flex<"nav">;
};

export interface DefaultNavbarPartnerEditProps {
  navItems?: MultiChoiceArg<
    | "profile"
    | "membership"
    | "team"
    | "wallet"
    | "listings"
    | "projects"
    | "performance"
    | "reviews"
    | "messages"
    | "notifications"
    | "settings"
  >;
  selected?: SingleChoiceArg<
    | "profile"
    | "membership"
    | "team"
    | "wallet"
    | "listings"
    | "projects"
    | "performance"
    | "reviews"
    | "messages"
    | "notifications"
    | "settings"
  >;
  className?: string;
}

function PlasmicNavbarPartnerEdit__RenderFunc(props: {
  variants: PlasmicNavbarPartnerEdit__VariantsArgs;
  args: PlasmicNavbarPartnerEdit__ArgsType;
  overrides: PlasmicNavbarPartnerEdit__OverridesType;
  dataFetches?: PlasmicNavbarPartnerEdit__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"nav"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      {(hasVariant(variants, "navItems", "profile") ? true : true) ? (
        <NavLink
          className={classNames("__wab_instance", sty.navLink__zmDV, {
            [sty.navLink__navItems_membership__zmDVc2IYf]: hasVariant(
              variants,
              "navItems",
              "membership"
            ),
            [sty.navLink__navItems_profile__zmDVqb7DA]: hasVariant(
              variants,
              "navItems",
              "profile"
            ),
            [sty.navLink__selected_membership__zmDVYixEq]: hasVariant(
              variants,
              "selected",
              "membership"
            ),
            [sty.navLink__selected_profile__zmDVxlIwB]: hasVariant(
              variants,
              "selected",
              "profile"
            )
          })}
          linkText={"Profile"}
          state={
            hasVariant(variants, "selected", "profile")
              ? ("selected" as const)
              : undefined
          }
        />
      ) : null}
      {(hasVariant(variants, "navItems", "membership") ? true : true) ? (
        <NavLink
          className={classNames("__wab_instance", sty.navLink__q2LJk, {
            [sty.navLink__navItems_membership__q2LJkc2IYf]: hasVariant(
              variants,
              "navItems",
              "membership"
            ),
            [sty.navLink__navItems_team__q2LJkUAvA]: hasVariant(
              variants,
              "navItems",
              "team"
            ),
            [sty.navLink__selected_membership__q2LJkYixEq]: hasVariant(
              variants,
              "selected",
              "membership"
            ),
            [sty.navLink__selected_team__q2LJkYuOyK]: hasVariant(
              variants,
              "selected",
              "team"
            )
          })}
          linkText={"Membership"}
          state={
            hasVariant(variants, "selected", "membership")
              ? ("selected" as const)
              : undefined
          }
        />
      ) : null}
      {(hasVariant(variants, "navItems", "team") ? true : true) ? (
        <NavLink
          className={classNames("__wab_instance", sty.navLink__kJxLn, {
            [sty.navLink__navItems_team__kJxLnUAvA]: hasVariant(
              variants,
              "navItems",
              "team"
            ),
            [sty.navLink__navItems_wallet__kJxLNfmSqJ]: hasVariant(
              variants,
              "navItems",
              "wallet"
            ),
            [sty.navLink__selected_team__kJxLnyuOyK]: hasVariant(
              variants,
              "selected",
              "team"
            ),
            [sty.navLink__selected_wallet__kJxLNkWcKr]: hasVariant(
              variants,
              "selected",
              "wallet"
            )
          })}
          linkText={"Team"}
          state={
            hasVariant(variants, "selected", "team")
              ? ("selected" as const)
              : undefined
          }
        />
      ) : null}
      {(hasVariant(variants, "navItems", "wallet") ? true : true) ? (
        <NavLink
          className={classNames("__wab_instance", sty.navLink__wF8Le, {
            [sty.navLink__navItems_listings__wF8LEeCc71]: hasVariant(
              variants,
              "navItems",
              "listings"
            ),
            [sty.navLink__navItems_wallet__wF8LEfmSqJ]: hasVariant(
              variants,
              "navItems",
              "wallet"
            ),
            [sty.navLink__selected_listings__wF8LEbsNl]: hasVariant(
              variants,
              "selected",
              "listings"
            ),
            [sty.navLink__selected_wallet__wF8LEkWcKr]: hasVariant(
              variants,
              "selected",
              "wallet"
            )
          })}
          linkText={"Wallet"}
          state={
            hasVariant(variants, "selected", "wallet")
              ? ("selected" as const)
              : undefined
          }
        />
      ) : null}
      {(hasVariant(variants, "navItems", "listings") ? true : true) ? (
        <NavLink
          className={classNames("__wab_instance", sty.navLink___0K9Q, {
            [sty.navLink__navItems_listings___0K9QECc71]: hasVariant(
              variants,
              "navItems",
              "listings"
            ),
            [sty.navLink__navItems_projects___0K9QLYvYj]: hasVariant(
              variants,
              "navItems",
              "projects"
            ),
            [sty.navLink__selected_listings___0K9QBsNl]: hasVariant(
              variants,
              "selected",
              "listings"
            ),
            [sty.navLink__selected_projects___0K9QDui2A]: hasVariant(
              variants,
              "selected",
              "projects"
            )
          })}
          linkText={"Listings"}
          state={
            hasVariant(variants, "selected", "listings")
              ? ("selected" as const)
              : undefined
          }
        />
      ) : null}
      {(hasVariant(variants, "navItems", "projects") ? true : true) ? (
        <NavLink
          className={classNames("__wab_instance", sty.navLink__jH9D, {
            [sty.navLink__navItems_performance__jH9DkSq4]: hasVariant(
              variants,
              "navItems",
              "performance"
            ),
            [sty.navLink__navItems_projects__jH9DlYvYj]: hasVariant(
              variants,
              "navItems",
              "projects"
            ),
            [sty.navLink__selected_performance__jH9DdnJq5]: hasVariant(
              variants,
              "selected",
              "performance"
            ),
            [sty.navLink__selected_projects__jH9DDui2A]: hasVariant(
              variants,
              "selected",
              "projects"
            )
          })}
          linkText={"Projects"}
          state={
            hasVariant(variants, "selected", "projects")
              ? ("selected" as const)
              : undefined
          }
        />
      ) : null}
      {(hasVariant(variants, "navItems", "performance") ? true : true) ? (
        <NavLink
          className={classNames("__wab_instance", sty.navLink__yyYuj, {
            [sty.navLink__navItems_performance__yyYuJkSq4]: hasVariant(
              variants,
              "navItems",
              "performance"
            ),
            [sty.navLink__navItems_reviews__yyYuj77Hqm]: hasVariant(
              variants,
              "navItems",
              "reviews"
            ),
            [sty.navLink__selected_performance__yyYujdnJq5]: hasVariant(
              variants,
              "selected",
              "performance"
            )
          })}
          linkText={"Performance"}
          state={
            hasVariant(variants, "selected", "performance")
              ? ("selected" as const)
              : undefined
          }
        />
      ) : null}
      {(hasVariant(variants, "navItems", "reviews") ? true : true) ? (
        <NavLink
          className={classNames("__wab_instance", sty.navLink__tjV5C, {
            [sty.navLink__navItems_messages__tjV5CYc1Ju]: hasVariant(
              variants,
              "navItems",
              "messages"
            ),
            [sty.navLink__navItems_reviews__tjV5C77Hqm]: hasVariant(
              variants,
              "navItems",
              "reviews"
            ),
            [sty.navLink__selected_messages__tjV5Cq4SsS]: hasVariant(
              variants,
              "selected",
              "messages"
            ),
            [sty.navLink__selected_performance__tjV5CDnJq5]: hasVariant(
              variants,
              "selected",
              "performance"
            ),
            [sty.navLink__selected_reviews__tjV5CQj2GV]: hasVariant(
              variants,
              "selected",
              "reviews"
            )
          })}
          linkText={"Reviews"}
          state={
            hasVariant(variants, "selected", "reviews")
              ? ("selected" as const)
              : undefined
          }
        />
      ) : null}
      {(hasVariant(variants, "navItems", "messages") ? true : true) ? (
        <NavLink
          className={classNames("__wab_instance", sty.navLink__eLq6C, {
            [sty.navLink__navItems_messages__eLq6CYc1Ju]: hasVariant(
              variants,
              "navItems",
              "messages"
            ),
            [sty.navLink__navItems_notifications__eLq6Cs4Us9]: hasVariant(
              variants,
              "navItems",
              "notifications"
            ),
            [sty.navLink__selected_messages__eLq6Cq4SsS]: hasVariant(
              variants,
              "selected",
              "messages"
            ),
            [sty.navLink__selected_notifications__eLq6CpjgAa]: hasVariant(
              variants,
              "selected",
              "notifications"
            )
          })}
          linkText={"Messages"}
          state={
            hasVariant(variants, "selected", "messages")
              ? ("selected" as const)
              : undefined
          }
        />
      ) : null}
      {(hasVariant(variants, "navItems", "notifications") ? true : true) ? (
        <NavLink
          className={classNames("__wab_instance", sty.navLink__egCB, {
            [sty.navLink__navItems_notifications__egCBs4Us9]: hasVariant(
              variants,
              "navItems",
              "notifications"
            ),
            [sty.navLink__navItems_settings__egCBdC5Ik]: hasVariant(
              variants,
              "navItems",
              "settings"
            ),
            [sty.navLink__selected_notifications__egCBpjgAa]: hasVariant(
              variants,
              "selected",
              "notifications"
            ),
            [sty.navLink__selected_settings__egCBIC0]: hasVariant(
              variants,
              "selected",
              "settings"
            )
          })}
          linkText={"Notifications"}
          state={
            hasVariant(variants, "selected", "notifications")
              ? ("selected" as const)
              : undefined
          }
        />
      ) : null}
      {(hasVariant(variants, "navItems", "settings") ? true : true) ? (
        <NavLink
          className={classNames("__wab_instance", sty.navLink__mycjq, {
            [sty.navLink__navItems_settings__mycjQdC5Ik]: hasVariant(
              variants,
              "navItems",
              "settings"
            ),
            [sty.navLink__selected_settings__mycjqIC0]: hasVariant(
              variants,
              "selected",
              "settings"
            )
          })}
          linkText={"Settings"}
          state={
            hasVariant(variants, "selected", "settings")
              ? ("selected" as const)
              : undefined
          }
        />
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "nav";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavbarPartnerEdit__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavbarPartnerEdit__VariantsArgs;
    args?: PlasmicNavbarPartnerEdit__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicNavbarPartnerEdit__Fetches;
  } & Omit<PlasmicNavbarPartnerEdit__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNavbarPartnerEdit__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNavbarPartnerEdit__ArgProps,
      internalVariantPropNames: PlasmicNavbarPartnerEdit__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicNavbarPartnerEdit__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavbarPartnerEdit";
  } else {
    func.displayName = `PlasmicNavbarPartnerEdit.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbarPartnerEdit = Object.assign(
  // Top-level PlasmicNavbarPartnerEdit renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicNavbarPartnerEdit
    internalVariantProps: PlasmicNavbarPartnerEdit__VariantProps,
    internalArgProps: PlasmicNavbarPartnerEdit__ArgProps
  }
);

export default PlasmicNavbarPartnerEdit;
/* prettier-ignore-end */
