// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: KHzN_wfnhi3bQOu
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicElementAnalyticsPercentValueChange.module.css"; // plasmic-import: KHzN_wfnhi3bQOu/css

import OptionalFixedBrandColorIcon from "./icons/PlasmicIcon__OptionalFixedBrandColor"; // plasmic-import: HqXIfXOrfprzYd9/icon
import MinusBoldIcon from "./icons/PlasmicIcon__MinusBold"; // plasmic-import: oC2hfwFdlPk_vmi/icon
import PlusBoldIcon from "./icons/PlasmicIcon__PlusBold"; // plasmic-import: lhSEEajPJGZatfD/icon

export type PlasmicElementAnalyticsPercentValueChange__VariantMembers = {
  integer: "plus" | "minus" | "noChange";
};

export type PlasmicElementAnalyticsPercentValueChange__VariantsArgs = {
  integer?: SingleChoiceArg<"plus" | "minus" | "noChange">;
};

type VariantPropType =
  keyof PlasmicElementAnalyticsPercentValueChange__VariantsArgs;
export const PlasmicElementAnalyticsPercentValueChange__VariantProps =
  new Array<VariantPropType>("integer");

export type PlasmicElementAnalyticsPercentValueChange__ArgsType = {
  numberValueParent?: React.ReactNode;
  percentParent?: React.ReactNode;
  svgparent?: React.ReactNode;
  svgParentMinus?: React.ReactNode;
  svgParentPlus?: React.ReactNode;
  numberValueParentPlus?: React.ReactNode;
  percentParentPlus?: React.ReactNode;
  numberValueParentMinus?: React.ReactNode;
  percentParentMinus?: React.ReactNode;
  numberValueParentNoChange?: React.ReactNode;
  percentParentNoChange?: React.ReactNode;
};

type ArgPropType = keyof PlasmicElementAnalyticsPercentValueChange__ArgsType;
export const PlasmicElementAnalyticsPercentValueChange__ArgProps =
  new Array<ArgPropType>(
    "numberValueParent",
    "percentParent",
    "svgparent",
    "svgParentMinus",
    "svgParentPlus",
    "numberValueParentPlus",
    "percentParentPlus",
    "numberValueParentMinus",
    "percentParentMinus",
    "numberValueParentNoChange",
    "percentParentNoChange"
  );

export type PlasmicElementAnalyticsPercentValueChange__OverridesType = {
  parent?: p.Flex<"div">;
  svgparent?: p.Flex<"div">;
  numberValuePercentParent?: p.Flex<"div">;
  numberValueParent?: p.Flex<"div">;
  percentParent?: p.Flex<"div">;
};

export interface DefaultElementAnalyticsPercentValueChangeProps {
  numberValueParent?: React.ReactNode;
  percentParent?: React.ReactNode;
  svgparent?: React.ReactNode;
  svgParentMinus?: React.ReactNode;
  svgParentPlus?: React.ReactNode;
  numberValueParentPlus?: React.ReactNode;
  percentParentPlus?: React.ReactNode;
  numberValueParentMinus?: React.ReactNode;
  percentParentMinus?: React.ReactNode;
  numberValueParentNoChange?: React.ReactNode;
  percentParentNoChange?: React.ReactNode;
  integer?: SingleChoiceArg<"plus" | "minus" | "noChange">;
  className?: string;
}

function PlasmicElementAnalyticsPercentValueChange__RenderFunc(props: {
  variants: PlasmicElementAnalyticsPercentValueChange__VariantsArgs;
  args: PlasmicElementAnalyticsPercentValueChange__ArgsType;
  overrides: PlasmicElementAnalyticsPercentValueChange__OverridesType;
  dataFetches?: PlasmicElementAnalyticsPercentValueChange__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"parent"}
      data-plasmic-override={overrides.parent}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.parent)}
    >
      {(hasVariant(variants, "integer", "noChange") ? false : true) ? (
        <div
          data-plasmic-name={"svgparent"}
          data-plasmic-override={overrides.svgparent}
          className={classNames(defaultcss.all, sty.svgparent, {
            [sty.svgparent__integer_minus]: hasVariant(
              variants,
              "integer",
              "minus"
            ),
            [sty.svgparent__integer_noChange]: hasVariant(
              variants,
              "integer",
              "noChange"
            ),
            [sty.svgparent__integer_plus]: hasVariant(
              variants,
              "integer",
              "plus"
            )
          })}
        >
          {(
            hasVariant(variants, "integer", "minus")
              ? false
              : hasVariant(variants, "integer", "plus")
              ? false
              : true
          )
            ? p.renderPlasmicSlot({
                defaultContents: (
                  <OptionalFixedBrandColorIcon
                    className={classNames(defaultcss.all, sty.svg__m36Hc)}
                    role={"img"}
                  />
                ),

                value: args.svgparent
              })
            : null}
          {(hasVariant(variants, "integer", "minus") ? true : false)
            ? p.renderPlasmicSlot({
                defaultContents: (
                  <MinusBoldIcon
                    className={classNames(defaultcss.all, sty.svg__gLqzo)}
                    role={"img"}
                  />
                ),

                value: args.svgParentMinus
              })
            : null}
          {(
            hasVariant(variants, "integer", "minus")
              ? false
              : hasVariant(variants, "integer", "plus")
              ? true
              : false
          )
            ? p.renderPlasmicSlot({
                defaultContents: (
                  <PlusBoldIcon
                    className={classNames(defaultcss.all, sty.svg__igw8K)}
                    role={"img"}
                  />
                ),

                value: args.svgParentPlus
              })
            : null}
        </div>
      ) : null}

      <p.Stack
        as={"div"}
        data-plasmic-name={"numberValuePercentParent"}
        data-plasmic-override={overrides.numberValuePercentParent}
        hasGap={true}
        className={classNames(defaultcss.all, sty.numberValuePercentParent)}
      >
        <div
          data-plasmic-name={"numberValueParent"}
          data-plasmic-override={overrides.numberValueParent}
          className={classNames(defaultcss.all, sty.numberValueParent, {
            [sty.numberValueParent__integer_minus]: hasVariant(
              variants,
              "integer",
              "minus"
            ),
            [sty.numberValueParent__integer_noChange]: hasVariant(
              variants,
              "integer",
              "noChange"
            ),
            [sty.numberValueParent__integer_plus]: hasVariant(
              variants,
              "integer",
              "plus"
            )
          })}
        >
          {(
            hasVariant(variants, "integer", "noChange")
              ? false
              : hasVariant(variants, "integer", "minus")
              ? false
              : hasVariant(variants, "integer", "plus")
              ? false
              : true
          )
            ? p.renderPlasmicSlot({
                defaultContents: (
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__sx3OB
                    )}
                  >
                    {"XXXX.XX"}
                  </div>
                ),

                value: args.numberValueParent,
                className: classNames(sty.slotNumberValueParent, {
                  [sty.slotNumberValueParent__integer_minus]: hasVariant(
                    variants,
                    "integer",
                    "minus"
                  ),
                  [sty.slotNumberValueParent__integer_noChange]: hasVariant(
                    variants,
                    "integer",
                    "noChange"
                  ),
                  [sty.slotNumberValueParent__integer_plus]: hasVariant(
                    variants,
                    "integer",
                    "plus"
                  )
                })
              })
            : null}
          {(hasVariant(variants, "integer", "plus") ? true : false)
            ? p.renderPlasmicSlot({
                defaultContents: (
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__cgUhd
                    )}
                  >
                    {"XXXX.XX"}
                  </div>
                ),

                value: args.numberValueParentPlus,
                className: classNames(sty.slotNumberValueParentPlus, {
                  [sty.slotNumberValueParentPlus__integer_minus]: hasVariant(
                    variants,
                    "integer",
                    "minus"
                  ),
                  [sty.slotNumberValueParentPlus__integer_plus]: hasVariant(
                    variants,
                    "integer",
                    "plus"
                  )
                })
              })
            : null}
          {(
            hasVariant(variants, "integer", "minus")
              ? true
              : hasVariant(variants, "integer", "plus")
              ? false
              : false
          )
            ? p.renderPlasmicSlot({
                defaultContents: (
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__bc2VJ
                    )}
                  >
                    {"XXXX.XX"}
                  </div>
                ),

                value: args.numberValueParentMinus,
                className: classNames(sty.slotNumberValueParentMinus, {
                  [sty.slotNumberValueParentMinus__integer_minus]: hasVariant(
                    variants,
                    "integer",
                    "minus"
                  ),
                  [sty.slotNumberValueParentMinus__integer_plus]: hasVariant(
                    variants,
                    "integer",
                    "plus"
                  )
                })
              })
            : null}
          {(
            hasVariant(variants, "integer", "noChange")
              ? true
              : hasVariant(variants, "integer", "minus")
              ? false
              : hasVariant(variants, "integer", "plus")
              ? false
              : false
          )
            ? p.renderPlasmicSlot({
                defaultContents: (
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox___6IHuU
                    )}
                  >
                    {"-"}
                  </div>
                ),

                value: args.numberValueParentNoChange,
                className: classNames(sty.slotNumberValueParentNoChange, {
                  [sty.slotNumberValueParentNoChange__integer_minus]:
                    hasVariant(variants, "integer", "minus"),
                  [sty.slotNumberValueParentNoChange__integer_noChange]:
                    hasVariant(variants, "integer", "noChange"),
                  [sty.slotNumberValueParentNoChange__integer_plus]: hasVariant(
                    variants,
                    "integer",
                    "plus"
                  )
                })
              })
            : null}
        </div>

        <div
          data-plasmic-name={"percentParent"}
          data-plasmic-override={overrides.percentParent}
          className={classNames(defaultcss.all, sty.percentParent, {
            [sty.percentParent__integer_minus]: hasVariant(
              variants,
              "integer",
              "minus"
            ),
            [sty.percentParent__integer_noChange]: hasVariant(
              variants,
              "integer",
              "noChange"
            ),
            [sty.percentParent__integer_plus]: hasVariant(
              variants,
              "integer",
              "plus"
            )
          })}
        >
          {(
            hasVariant(variants, "integer", "noChange")
              ? false
              : hasVariant(variants, "integer", "minus")
              ? false
              : hasVariant(variants, "integer", "plus")
              ? false
              : true
          )
            ? p.renderPlasmicSlot({
                defaultContents: (
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__ffGzB
                    )}
                  >
                    {"%"}
                  </div>
                ),

                value: args.percentParent,
                className: classNames(sty.slotPercentParent, {
                  [sty.slotPercentParent__integer_minus]: hasVariant(
                    variants,
                    "integer",
                    "minus"
                  ),
                  [sty.slotPercentParent__integer_noChange]: hasVariant(
                    variants,
                    "integer",
                    "noChange"
                  ),
                  [sty.slotPercentParent__integer_plus]: hasVariant(
                    variants,
                    "integer",
                    "plus"
                  )
                })
              })
            : null}
          {(hasVariant(variants, "integer", "plus") ? true : false)
            ? p.renderPlasmicSlot({
                defaultContents: (
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__kSHce
                    )}
                  >
                    {"%"}
                  </div>
                ),

                value: args.percentParentPlus,
                className: classNames(sty.slotPercentParentPlus, {
                  [sty.slotPercentParentPlus__integer_minus]: hasVariant(
                    variants,
                    "integer",
                    "minus"
                  ),
                  [sty.slotPercentParentPlus__integer_plus]: hasVariant(
                    variants,
                    "integer",
                    "plus"
                  )
                })
              })
            : null}
          {(
            hasVariant(variants, "integer", "minus")
              ? true
              : hasVariant(variants, "integer", "plus")
              ? false
              : false
          )
            ? p.renderPlasmicSlot({
                defaultContents: (
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__kMvrz
                    )}
                  >
                    {"%"}
                  </div>
                ),

                value: args.percentParentMinus,
                className: classNames(sty.slotPercentParentMinus, {
                  [sty.slotPercentParentMinus__integer_minus]: hasVariant(
                    variants,
                    "integer",
                    "minus"
                  ),
                  [sty.slotPercentParentMinus__integer_plus]: hasVariant(
                    variants,
                    "integer",
                    "plus"
                  )
                })
              })
            : null}
          {(
            hasVariant(variants, "integer", "noChange")
              ? true
              : hasVariant(variants, "integer", "minus")
              ? false
              : hasVariant(variants, "integer", "plus")
              ? false
              : false
          )
            ? p.renderPlasmicSlot({
                defaultContents: (
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__pLwu1
                    )}
                  >
                    {"%"}
                  </div>
                ),

                value: args.percentParentNoChange,
                className: classNames(sty.slotPercentParentNoChange, {
                  [sty.slotPercentParentNoChange__integer_minus]: hasVariant(
                    variants,
                    "integer",
                    "minus"
                  ),
                  [sty.slotPercentParentNoChange__integer_noChange]: hasVariant(
                    variants,
                    "integer",
                    "noChange"
                  ),
                  [sty.slotPercentParentNoChange__integer_plus]: hasVariant(
                    variants,
                    "integer",
                    "plus"
                  )
                })
              })
            : null}
        </div>
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  parent: [
    "parent",
    "svgparent",
    "numberValuePercentParent",
    "numberValueParent",
    "percentParent"
  ],
  svgparent: ["svgparent"],
  numberValuePercentParent: [
    "numberValuePercentParent",
    "numberValueParent",
    "percentParent"
  ],
  numberValueParent: ["numberValueParent"],
  percentParent: ["percentParent"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  parent: "div";
  svgparent: "div";
  numberValuePercentParent: "div";
  numberValueParent: "div";
  percentParent: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicElementAnalyticsPercentValueChange__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicElementAnalyticsPercentValueChange__VariantsArgs;
    args?: PlasmicElementAnalyticsPercentValueChange__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicElementAnalyticsPercentValueChange__Fetches;
  } & Omit< // Specify variants directly as props
    PlasmicElementAnalyticsPercentValueChange__VariantsArgs,
    ReservedPropsType
  > &
    // Specify args directly as props
    Omit<
      PlasmicElementAnalyticsPercentValueChange__ArgsType,
      ReservedPropsType
    > &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicElementAnalyticsPercentValueChange__ArgProps,
      internalVariantPropNames:
        PlasmicElementAnalyticsPercentValueChange__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicElementAnalyticsPercentValueChange__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "parent") {
    func.displayName = "PlasmicElementAnalyticsPercentValueChange";
  } else {
    func.displayName = `PlasmicElementAnalyticsPercentValueChange.${nodeName}`;
  }
  return func;
}

export const PlasmicElementAnalyticsPercentValueChange = Object.assign(
  // Top-level PlasmicElementAnalyticsPercentValueChange renders the root element
  makeNodeComponent("parent"),
  {
    // Helper components rendering sub-elements
    svgparent: makeNodeComponent("svgparent"),
    numberValuePercentParent: makeNodeComponent("numberValuePercentParent"),
    numberValueParent: makeNodeComponent("numberValueParent"),
    percentParent: makeNodeComponent("percentParent"),

    // Metadata about props expected for PlasmicElementAnalyticsPercentValueChange
    internalVariantProps:
      PlasmicElementAnalyticsPercentValueChange__VariantProps,
    internalArgProps: PlasmicElementAnalyticsPercentValueChange__ArgProps
  }
);

export default PlasmicElementAnalyticsPercentValueChange;
/* prettier-ignore-end */
