// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: i9Sya5odEvFxPv3
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavbarInternal from "../../NavbarInternal"; // plasmic-import: nBfIHHqHvjUywN9/component
import NavbarPartnerEdit from "../../NavbarPartnerEdit"; // plasmic-import: cfySDEV6eDVdN0/component
import CardHeaderTitleDisplay from "../../CardHeaderTitleDisplay"; // plasmic-import: fk5BRaqICb6MOmt/component
import ButtonFormDropdownSelect from "../../ButtonFormDropdownSelect"; // plasmic-import: 3Qqc2KbBe45URw/component
import CardAnalyticsPrimary from "../../CardAnalyticsPrimary"; // plasmic-import: Po5fXX6mPHOvJph/component
import ElementAnalyticsPercentValueChange from "../../ElementAnalyticsPercentValueChange"; // plasmic-import: KHzN_wfnhi3bQOu/component
import FooterB from "../../FooterB"; // plasmic-import: IZENTiSL4_zyK8/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: biX3aS42hiG0fF/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicPartnerperformance.module.css"; // plasmic-import: i9Sya5odEvFxPv3/css

import Icon96Icon from "./icons/PlasmicIcon__Icon96"; // plasmic-import: bC6DTgVYN3bioSf/icon
import OptionalFixedBrandColorIcon from "./icons/PlasmicIcon__OptionalFixedBrandColor"; // plasmic-import: HqXIfXOrfprzYd9/icon
import StarRatingIcon from "./icons/PlasmicIcon__StarRating"; // plasmic-import: isktMfWta1VFGTc/icon
import MinusBoldIcon from "./icons/PlasmicIcon__MinusBold"; // plasmic-import: oC2hfwFdlPk_vmi/icon
import PlusBoldIcon from "./icons/PlasmicIcon__PlusBold"; // plasmic-import: lhSEEajPJGZatfD/icon
import Icon177Icon from "./icons/PlasmicIcon__Icon177"; // plasmic-import: NOfWrFOMKMx_mTF/icon
import WalletEarningsIcon from "./icons/PlasmicIcon__WalletEarnings"; // plasmic-import: 0j9c3K2zanlGHIW/icon
import BriefOrdersIcon from "./icons/PlasmicIcon__BriefOrders"; // plasmic-import: J1TFcrPZvPr-xcg/icon
import CommentReviewIcon from "./icons/PlasmicIcon__CommentReview"; // plasmic-import: XV58WNulEaMmNoZ/icon
import ListingIcon from "./icons/PlasmicIcon__Listing"; // plasmic-import: V-Z6DuZPre8UBS6/icon
import ViewIcon from "./icons/PlasmicIcon__View"; // plasmic-import: I6EK4zmpxF59ShL/icon
import ProfileViewIcon from "./icons/PlasmicIcon__ProfileView"; // plasmic-import: Ei5_-t1qSe--M2Z/icon
import ReactIcon from "./icons/PlasmicIcon__React"; // plasmic-import: TQSRNKr1oFuoW1N/icon
import BookmarkIcon from "./icons/PlasmicIcon__Bookmark"; // plasmic-import: jLuEpvSpry_1edd/icon
import ResponseIcon from "./icons/PlasmicIcon__Response"; // plasmic-import: X1Z6QP1kDtnueha/icon
import TeamPartnersIcon from "./icons/PlasmicIcon__TeamPartners"; // plasmic-import: Hf6TOd80Ag78cQq/icon
import MemberAddIcon from "./icons/PlasmicIcon__MemberAdd"; // plasmic-import: Y_y9zXduZNsZeWP/icon

export type PlasmicPartnerperformance__VariantMembers = {};

export type PlasmicPartnerperformance__VariantsArgs = {};
type VariantPropType = keyof PlasmicPartnerperformance__VariantsArgs;
export const PlasmicPartnerperformance__VariantProps =
  new Array<VariantPropType>();

export type PlasmicPartnerperformance__ArgsType = {};
type ArgPropType = keyof PlasmicPartnerperformance__ArgsType;
export const PlasmicPartnerperformance__ArgProps = new Array<ArgPropType>();

export type PlasmicPartnerperformance__OverridesType = {
  root?: p.Flex<"div">;
  navbarInternal?: p.Flex<typeof NavbarInternal>;
  navbarPartnerEdit?: p.Flex<typeof NavbarPartnerEdit>;
  sectionHeaderPartnerPerformance?: p.Flex<"div">;
  cardHeaderTitleDisplay?: p.Flex<typeof CardHeaderTitleDisplay>;
  partnerPerformanceAnalytics?: p.Flex<"section">;
  overview?: p.Flex<"header">;
  carousellPartnerOverview?: p.Flex<"section">;
  partnerRatings?: p.Flex<typeof CardAnalyticsPrimary>;
  partnerEarnings?: p.Flex<typeof CardAnalyticsPrimary>;
  currencyValue270?: p.Flex<"div">;
  partnerOrders?: p.Flex<typeof CardAnalyticsPrimary>;
  partnerReviews?: p.Flex<typeof CardAnalyticsPrimary>;
  listings?: p.Flex<"header">;
  groupPartnerListings?: p.Flex<"section">;
  partnerListings?: p.Flex<typeof CardAnalyticsPrimary>;
  partnerListingViews?: p.Flex<typeof CardAnalyticsPrimary>;
  partnerProfileViews?: p.Flex<typeof CardAnalyticsPrimary>;
  partnerReacts?: p.Flex<typeof CardAnalyticsPrimary>;
  partnerSaves?: p.Flex<typeof CardAnalyticsPrimary>;
  partnerResponseRate?: p.Flex<typeof CardAnalyticsPrimary>;
  numerationValue2702?: p.Flex<"div">;
  community?: p.Flex<"header">;
  carousellPartnerCommunity?: p.Flex<"section">;
  partnerSubscribers?: p.Flex<typeof CardAnalyticsPrimary>;
  partnerConnections?: p.Flex<typeof CardAnalyticsPrimary>;
  partnerFollowers?: p.Flex<typeof CardAnalyticsPrimary>;
  partnerFollowing?: p.Flex<typeof CardAnalyticsPrimary>;
  footerB?: p.Flex<typeof FooterB>;
};

export interface DefaultPartnerperformanceProps {
  dataFetches: PlasmicPartnerperformance__Fetches;
}

function PlasmicPartnerperformance__RenderFunc(props: {
  variants: PlasmicPartnerperformance__VariantsArgs;
  args: PlasmicPartnerperformance__ArgsType;
  overrides: PlasmicPartnerperformance__OverridesType;
  dataFetches?: PlasmicPartnerperformance__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <React.Fragment>
      <Head>
        <title key="title">{"Partner performance and analytics"}</title>
        <meta
          key="og:title"
          property="og:title"
          content={"Partner performance and analytics"}
        />
        <meta
          key="description"
          name="description"
          property="og:description"
          content={""}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <NavbarInternal
            data-plasmic-name={"navbarInternal"}
            data-plasmic-override={overrides.navbarInternal}
            className={classNames("__wab_instance", sty.navbarInternal)}
          />

          <NavbarPartnerEdit
            data-plasmic-name={"navbarPartnerEdit"}
            data-plasmic-override={overrides.navbarPartnerEdit}
            className={classNames("__wab_instance", sty.navbarPartnerEdit)}
          />

          <p.Stack
            as={"div"}
            data-plasmic-name={"sectionHeaderPartnerPerformance"}
            data-plasmic-override={overrides.sectionHeaderPartnerPerformance}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              sty.sectionHeaderPartnerPerformance
            )}
          >
            <CardHeaderTitleDisplay
              data-plasmic-name={"cardHeaderTitleDisplay"}
              data-plasmic-override={overrides.cardHeaderTitleDisplay}
              className={classNames(
                "__wab_instance",
                sty.cardHeaderTitleDisplay
              )}
              size={"_720" as const}
              slot={
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__suUw3
                  )}
                >
                  {"Analytics & metrics"}
                </div>
              }
              textDisplay={"Performance"}
              textSubhead={
                "Get an overview of your performance, what's working, and what you can improve to build your audience and earn more."
              }
            />
          </p.Stack>

          <p.Stack
            as={"section"}
            data-plasmic-name={"partnerPerformanceAnalytics"}
            data-plasmic-override={overrides.partnerPerformanceAnalytics}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              sty.partnerPerformanceAnalytics
            )}
          >
            <p.Stack
              as={"header"}
              data-plasmic-name={"overview"}
              data-plasmic-override={overrides.overview}
              hasGap={true}
              className={classNames(defaultcss.all, sty.overview)}
            >
              <div className={classNames(defaultcss.all, sty.freeBox___4EUqT)}>
                <h3
                  className={classNames(
                    defaultcss.h3,
                    defaultcss.__wab_text,
                    sty.h3__axqNu
                  )}
                >
                  {"Overview"}
                </h3>
              </div>

              <ButtonFormDropdownSelect
                className={classNames(
                  "__wab_instance",
                  sty.buttonFormDropdownSelect__q0Qfa
                )}
                description={"description" as const}
                dropdownIcon={
                  <Icon96Icon
                    className={classNames(defaultcss.all, sty.svg__yJfM)}
                    role={"img"}
                  />
                }
                dropdownTitle={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox___6VdKj
                    )}
                  >
                    {"30 days"}
                  </div>
                }
                headlineLabelTitle={"Date"}
                label={"label" as const}
                size={"_180X32" as const}
              />
            </p.Stack>

            <p.Stack
              as={"section"}
              data-plasmic-name={"carousellPartnerOverview"}
              data-plasmic-override={overrides.carousellPartnerOverview}
              hasGap={true}
              className={classNames(
                defaultcss.all,
                sty.carousellPartnerOverview
              )}
            >
              <CardAnalyticsPrimary
                data-plasmic-name={"partnerRatings"}
                data-plasmic-override={overrides.partnerRatings}
                cardTitle270={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__t19Vt
                    )}
                  >
                    {"Rating"}
                  </div>
                }
                className={classNames("__wab_instance", sty.partnerRatings)}
                currency={"currency" as const}
                numberValue270={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__mtg76
                    )}
                  >
                    {"4.6"}
                  </div>
                }
                numerationParent270={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__kvI1K
                    )}
                  >
                    {"%"}
                  </div>
                }
                size={"_270" as const}
                svgIconParent270={
                  <div
                    className={classNames(defaultcss.all, sty.freeBox___2Sdhg)}
                  >
                    <StarRatingIcon
                      className={classNames(defaultcss.all, sty.svg__iiVw8)}
                      role={"img"}
                    />
                  </div>
                }
                svgQuestion={
                  <div
                    className={classNames(defaultcss.all, sty.freeBox__yz7T2)}
                    title={"" as const}
                  >
                    <Icon177Icon
                      className={classNames(defaultcss.all, sty.svg___9VAb)}
                      role={"img"}
                    />
                  </div>
                }
                valueChangeParent={
                  <ElementAnalyticsPercentValueChange
                    integer={"plus" as const}
                    numberValueParentPlus={
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.freeBox___4IdPg
                        )}
                      >
                        {"5"}
                      </div>
                    }
                  />
                }
              />

              <CardAnalyticsPrimary
                data-plasmic-name={"partnerEarnings"}
                data-plasmic-override={overrides.partnerEarnings}
                cardTitle270={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__mJiBx
                    )}
                  >
                    {"Earnings"}
                  </div>
                }
                className={classNames("__wab_instance", sty.partnerEarnings)}
                currencyParent2702={
                  <div
                    data-plasmic-name={"currencyValue270"}
                    data-plasmic-override={overrides.currencyValue270}
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.currencyValue270
                    )}
                  >
                    {"$"}
                  </div>
                }
                numberValue270={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox___5G5L
                    )}
                  >
                    {"930"}
                  </div>
                }
                numeration={"numeration" as const}
                size={"_270" as const}
                svgIconParent270={
                  <div
                    className={classNames(defaultcss.all, sty.freeBox__uayyi)}
                  >
                    <WalletEarningsIcon
                      className={classNames(defaultcss.all, sty.svg__qiDqg)}
                      role={"img"}
                    />
                  </div>
                }
                svgQuestion={
                  <div
                    className={classNames(defaultcss.all, sty.freeBox___3Wcek)}
                  >
                    <Icon177Icon
                      className={classNames(defaultcss.all, sty.svg__foHni)}
                      role={"img"}
                    />
                  </div>
                }
                valueChangeParent={
                  <ElementAnalyticsPercentValueChange
                    integer={"minus" as const}
                    numberValueParentMinus={
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.freeBox__nD6ND
                        )}
                      >
                        {"65"}
                      </div>
                    }
                  />
                }
              />

              <CardAnalyticsPrimary
                data-plasmic-name={"partnerOrders"}
                data-plasmic-override={overrides.partnerOrders}
                cardTitle270={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__ixoTl
                    )}
                  >
                    {"Orders"}
                  </div>
                }
                className={classNames("__wab_instance", sty.partnerOrders)}
                currency={"currency" as const}
                numberValue270={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__yoXR
                    )}
                  >
                    {"100"}
                  </div>
                }
                numeration={"numeration" as const}
                size={"_270" as const}
                svgIconParent270={
                  <div
                    className={classNames(defaultcss.all, sty.freeBox__s5Sa)}
                  >
                    <BriefOrdersIcon
                      className={classNames(defaultcss.all, sty.svg__ncyx0)}
                      role={"img"}
                    />
                  </div>
                }
                valueChangeParent={
                  <ElementAnalyticsPercentValueChange
                    integer={"noChange" as const}
                  />
                }
              />

              <CardAnalyticsPrimary
                data-plasmic-name={"partnerReviews"}
                data-plasmic-override={overrides.partnerReviews}
                cardTitle270={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__r7F6
                    )}
                  >
                    {"Reviews"}
                  </div>
                }
                className={classNames("__wab_instance", sty.partnerReviews)}
                currency={"currency" as const}
                numberValue270={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__pwqm8
                    )}
                  >
                    {"12"}
                  </div>
                }
                numeration={"numeration" as const}
                size={"_270" as const}
                svgIconParent270={
                  <div
                    className={classNames(defaultcss.all, sty.freeBox__gSlQ5)}
                  >
                    <CommentReviewIcon
                      className={classNames(defaultcss.all, sty.svg__ae2V1)}
                      role={"img"}
                    />
                  </div>
                }
                valueChangeParent={
                  <ElementAnalyticsPercentValueChange
                    integer={"plus" as const}
                    numberValueParentMinus={
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.freeBox__aSx5B
                        )}
                      >
                        {"20"}
                      </div>
                    }
                    numberValueParentPlus={
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.freeBox__gKuPw
                        )}
                      >
                        {"20"}
                      </div>
                    }
                  />
                }
              />
            </p.Stack>

            <p.Stack
              as={"header"}
              data-plasmic-name={"listings"}
              data-plasmic-override={overrides.listings}
              hasGap={true}
              className={classNames(defaultcss.all, sty.listings)}
            >
              <div className={classNames(defaultcss.all, sty.freeBox___0T2W)}>
                <h3
                  className={classNames(
                    defaultcss.h3,
                    defaultcss.__wab_text,
                    sty.h3__hBXi
                  )}
                >
                  {"Listings"}
                </h3>
              </div>

              <ButtonFormDropdownSelect
                className={classNames(
                  "__wab_instance",
                  sty.buttonFormDropdownSelect__zuEwk
                )}
                description={"description" as const}
                dropdownIcon={
                  <Icon96Icon
                    className={classNames(defaultcss.all, sty.svg__cvUqT)}
                    role={"img"}
                  />
                }
                dropdownTitle={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__zwd5P
                    )}
                  >
                    {"30 days"}
                  </div>
                }
                headlineLabelTitle={"Date"}
                label={"label" as const}
                size={
                  hasVariant(globalVariants, "screen", "mobile")
                    ? ("_180X32" as const)
                    : ("_180X32" as const)
                }
              />
            </p.Stack>

            <p.Stack
              as={"section"}
              data-plasmic-name={"groupPartnerListings"}
              data-plasmic-override={overrides.groupPartnerListings}
              hasGap={true}
              className={classNames(defaultcss.all, sty.groupPartnerListings)}
            >
              <CardAnalyticsPrimary
                data-plasmic-name={"partnerListings"}
                data-plasmic-override={overrides.partnerListings}
                cardTitle270={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__qfw57
                    )}
                  >
                    {"Listings"}
                  </div>
                }
                className={classNames("__wab_instance", sty.partnerListings)}
                currency={"currency" as const}
                numberValue270={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__alKYo
                    )}
                  >
                    {"12"}
                  </div>
                }
                numeration={"numeration" as const}
                size={"_270" as const}
                svgIconParent270={
                  <div
                    className={classNames(defaultcss.all, sty.freeBox__pjdTc)}
                  >
                    <ListingIcon
                      className={classNames(defaultcss.all, sty.svg__g89Qt)}
                      role={"img"}
                    />
                  </div>
                }
                valueChangeParent={
                  <ElementAnalyticsPercentValueChange
                    integer={"noChange" as const}
                  />
                }
              />

              <CardAnalyticsPrimary
                data-plasmic-name={"partnerListingViews"}
                data-plasmic-override={overrides.partnerListingViews}
                cardTitle270={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__pa9QZ
                    )}
                  >
                    {"Listing views"}
                  </div>
                }
                className={classNames(
                  "__wab_instance",
                  sty.partnerListingViews
                )}
                currency={"currency" as const}
                numberValue270={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__cdPik
                    )}
                  >
                    {"1"}
                  </div>
                }
                numerationParent270={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__cTsM
                    )}
                  >
                    {"K"}
                  </div>
                }
                size={"_270" as const}
                svgIconParent270={
                  <div
                    className={classNames(defaultcss.all, sty.freeBox__jhwD4)}
                  >
                    <ViewIcon
                      className={classNames(defaultcss.all, sty.svg__hwJDd)}
                      role={"img"}
                    />
                  </div>
                }
                valueChangeParent={
                  <ElementAnalyticsPercentValueChange
                    integer={"plus" as const}
                    numberValueParentPlus={
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.freeBox___5D01L
                        )}
                      >
                        {"32.45"}
                      </div>
                    }
                  />
                }
              />

              <CardAnalyticsPrimary
                data-plasmic-name={"partnerProfileViews"}
                data-plasmic-override={overrides.partnerProfileViews}
                cardTitle270={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__y5Hsf
                    )}
                  >
                    {"Profile views"}
                  </div>
                }
                className={classNames(
                  "__wab_instance",
                  sty.partnerProfileViews
                )}
                currency={"currency" as const}
                numberValue270={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__dTzYd
                    )}
                  >
                    {"2"}
                  </div>
                }
                numerationParent270={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__m7T01
                    )}
                  >
                    {"K"}
                  </div>
                }
                size={"_270" as const}
                svgIconParent270={
                  <div
                    className={classNames(defaultcss.all, sty.freeBox__hp5Jk)}
                  >
                    <ProfileViewIcon
                      className={classNames(defaultcss.all, sty.svg__rsgrR)}
                      role={"img"}
                    />
                  </div>
                }
                valueChangeParent={
                  <ElementAnalyticsPercentValueChange
                    integer={"plus" as const}
                    numberValueParentPlus={
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.freeBox__kJQhQ
                        )}
                      >
                        {"124.56"}
                      </div>
                    }
                  />
                }
              />

              <CardAnalyticsPrimary
                data-plasmic-name={"partnerReacts"}
                data-plasmic-override={overrides.partnerReacts}
                cardTitle270={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__l3Lq9
                    )}
                  >
                    {"Reacts"}
                  </div>
                }
                className={classNames("__wab_instance", sty.partnerReacts)}
                currency={"currency" as const}
                numberValue270={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__jb2Oi
                    )}
                  >
                    {"3"}
                  </div>
                }
                numerationParent270={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__nVdv
                    )}
                  >
                    {"K"}
                  </div>
                }
                size={"_270" as const}
                svgIconParent270={
                  <div
                    className={classNames(defaultcss.all, sty.freeBox__feJkj)}
                  >
                    <ReactIcon
                      className={classNames(defaultcss.all, sty.svg__bOwA)}
                      role={"img"}
                    />
                  </div>
                }
                valueChangeParent={
                  <ElementAnalyticsPercentValueChange
                    integer={"plus" as const}
                    numberValueParentPlus={
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.freeBox__wcPI
                        )}
                      >
                        {"23.67"}
                      </div>
                    }
                  />
                }
              />

              <CardAnalyticsPrimary
                data-plasmic-name={"partnerSaves"}
                data-plasmic-override={overrides.partnerSaves}
                cardTitle270={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__wQqmA
                    )}
                  >
                    {"Lists"}
                  </div>
                }
                className={classNames("__wab_instance", sty.partnerSaves)}
                currency={"currency" as const}
                numberValue270={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__c4Fdg
                    )}
                  >
                    {"1"}
                  </div>
                }
                numerationParent270={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox___9G1HT
                    )}
                  >
                    {"K"}
                  </div>
                }
                size={"_270" as const}
                svgIconParent270={
                  <div
                    className={classNames(defaultcss.all, sty.freeBox__p8Lnm)}
                  >
                    <BookmarkIcon
                      className={classNames(defaultcss.all, sty.svg__mo3S3)}
                      role={"img"}
                    />
                  </div>
                }
                valueChangeParent={
                  <ElementAnalyticsPercentValueChange
                    integer={"plus" as const}
                    numberValueParentPlus={
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.freeBox__wr8Ii
                        )}
                      >
                        {"234.56"}
                      </div>
                    }
                  />
                }
              />

              <CardAnalyticsPrimary
                data-plasmic-name={"partnerResponseRate"}
                data-plasmic-override={overrides.partnerResponseRate}
                cardTitle270={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox___3KNp
                    )}
                  >
                    {"Response rate"}
                  </div>
                }
                className={classNames(
                  "__wab_instance",
                  sty.partnerResponseRate
                )}
                currency={"currency" as const}
                numberValue270={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__aixCn
                    )}
                  >
                    {"78.5"}
                  </div>
                }
                numerationParent270={
                  <div
                    data-plasmic-name={"numerationValue2702"}
                    data-plasmic-override={overrides.numerationValue2702}
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.numerationValue2702
                    )}
                  >
                    {"%"}
                  </div>
                }
                size={"_270" as const}
                svgIconParent270={
                  <div
                    className={classNames(defaultcss.all, sty.freeBox__xtDr)}
                  >
                    <ResponseIcon
                      className={classNames(defaultcss.all, sty.svg__q7KAl)}
                      role={"img"}
                    />
                  </div>
                }
                valueChangeParent={
                  <ElementAnalyticsPercentValueChange
                    integer={"plus" as const}
                    numberValueParentPlus={
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.freeBox__c8Tk
                        )}
                      >
                        {"12.5"}
                      </div>
                    }
                  />
                }
              />
            </p.Stack>

            <p.Stack
              as={"header"}
              data-plasmic-name={"community"}
              data-plasmic-override={overrides.community}
              hasGap={true}
              className={classNames(defaultcss.all, sty.community)}
            >
              <div className={classNames(defaultcss.all, sty.freeBox__gaMg8)}>
                <h3
                  className={classNames(
                    defaultcss.h3,
                    defaultcss.__wab_text,
                    sty.h3__dO3Th
                  )}
                >
                  {"Community"}
                </h3>
              </div>

              <ButtonFormDropdownSelect
                className={classNames(
                  "__wab_instance",
                  sty.buttonFormDropdownSelect__f7Yt
                )}
                description={"description" as const}
                dropdownIcon={
                  <Icon96Icon
                    className={classNames(defaultcss.all, sty.svg__n8Tr)}
                    role={"img"}
                  />
                }
                dropdownTitle={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__ydxpH
                    )}
                  >
                    {"30 days"}
                  </div>
                }
                headlineLabelTitle={"Date"}
                label={"label" as const}
                size={"_180X32" as const}
              />
            </p.Stack>

            <p.Stack
              as={"section"}
              data-plasmic-name={"carousellPartnerCommunity"}
              data-plasmic-override={overrides.carousellPartnerCommunity}
              hasGap={true}
              className={classNames(
                defaultcss.all,
                sty.carousellPartnerCommunity
              )}
            >
              <CardAnalyticsPrimary
                data-plasmic-name={"partnerSubscribers"}
                data-plasmic-override={overrides.partnerSubscribers}
                cardTitle270={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__igXez
                    )}
                  >
                    {"Subscribers"}
                  </div>
                }
                className={classNames("__wab_instance", sty.partnerSubscribers)}
                currency={"currency" as const}
                numberValue270={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__sfugq
                    )}
                  >
                    {"12"}
                  </div>
                }
                numeration={"numeration" as const}
                size={"_270" as const}
                svgIconParent270={
                  <div
                    className={classNames(defaultcss.all, sty.freeBox__kQ5Zk)}
                  >
                    <TeamPartnersIcon
                      className={classNames(defaultcss.all, sty.svg__aRzFu)}
                      role={"img"}
                    />
                  </div>
                }
                valueChangeParent={
                  <ElementAnalyticsPercentValueChange
                    integer={"noChange" as const}
                  />
                }
              />

              <CardAnalyticsPrimary
                data-plasmic-name={"partnerConnections"}
                data-plasmic-override={overrides.partnerConnections}
                cardTitle270={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__suvcj
                    )}
                  >
                    {"Connections"}
                  </div>
                }
                className={classNames("__wab_instance", sty.partnerConnections)}
                currency={"currency" as const}
                numberValue270={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__dcDxO
                    )}
                  >
                    {"12"}
                  </div>
                }
                numeration={"numeration" as const}
                size={"_270" as const}
                svgIconParent270={
                  <div
                    className={classNames(defaultcss.all, sty.freeBox__wZwqi)}
                  >
                    <MemberAddIcon
                      className={classNames(defaultcss.all, sty.svg___8GSdi)}
                      role={"img"}
                    />
                  </div>
                }
                valueChangeParent={
                  <ElementAnalyticsPercentValueChange
                    integer={"plus" as const}
                    numberValueParentPlus={
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.freeBox__n4EZ
                        )}
                      >
                        {"5"}
                      </div>
                    }
                  />
                }
              />

              <CardAnalyticsPrimary
                data-plasmic-name={"partnerFollowers"}
                data-plasmic-override={overrides.partnerFollowers}
                cardTitle270={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__q5AtG
                    )}
                  >
                    {"Followers"}
                  </div>
                }
                className={classNames("__wab_instance", sty.partnerFollowers)}
                currency={"currency" as const}
                numberValue270={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__bBfef
                    )}
                  >
                    {"12"}
                  </div>
                }
                numeration={"numeration" as const}
                size={"_270" as const}
                svgIconParent270={
                  <div
                    className={classNames(defaultcss.all, sty.freeBox__a7Hnt)}
                  >
                    <MemberAddIcon
                      className={classNames(defaultcss.all, sty.svg__dJIyG)}
                      role={"img"}
                    />
                  </div>
                }
                valueChangeParent={
                  <ElementAnalyticsPercentValueChange
                    integer={"plus" as const}
                    numberValueParentPlus={
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.freeBox__hlEdw
                        )}
                      >
                        {"5"}
                      </div>
                    }
                  />
                }
              />

              <CardAnalyticsPrimary
                data-plasmic-name={"partnerFollowing"}
                data-plasmic-override={overrides.partnerFollowing}
                cardTitle270={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__h49Te
                    )}
                  >
                    {"Following"}
                  </div>
                }
                className={classNames("__wab_instance", sty.partnerFollowing)}
                currency={"currency" as const}
                numberValue270={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__obIx5
                    )}
                  >
                    {"12"}
                  </div>
                }
                numeration={"numeration" as const}
                size={"_270" as const}
                svgIconParent270={
                  <div
                    className={classNames(defaultcss.all, sty.freeBox__p51Tn)}
                  >
                    <TeamPartnersIcon
                      className={classNames(defaultcss.all, sty.svg__ag45L)}
                      role={"img"}
                    />
                  </div>
                }
                valueChangeParent={
                  <ElementAnalyticsPercentValueChange
                    integer={"noChange" as const}
                  />
                }
              />
            </p.Stack>
          </p.Stack>

          <FooterB
            data-plasmic-name={"footerB"}
            data-plasmic-override={overrides.footerB}
            className={classNames("__wab_instance", sty.footerB)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbarInternal",
    "navbarPartnerEdit",
    "sectionHeaderPartnerPerformance",
    "cardHeaderTitleDisplay",
    "partnerPerformanceAnalytics",
    "overview",
    "carousellPartnerOverview",
    "partnerRatings",
    "partnerEarnings",
    "currencyValue270",
    "partnerOrders",
    "partnerReviews",
    "listings",
    "groupPartnerListings",
    "partnerListings",
    "partnerListingViews",
    "partnerProfileViews",
    "partnerReacts",
    "partnerSaves",
    "partnerResponseRate",
    "numerationValue2702",
    "community",
    "carousellPartnerCommunity",
    "partnerSubscribers",
    "partnerConnections",
    "partnerFollowers",
    "partnerFollowing",
    "footerB"
  ],
  navbarInternal: ["navbarInternal"],
  navbarPartnerEdit: ["navbarPartnerEdit"],
  sectionHeaderPartnerPerformance: [
    "sectionHeaderPartnerPerformance",
    "cardHeaderTitleDisplay"
  ],
  cardHeaderTitleDisplay: ["cardHeaderTitleDisplay"],
  partnerPerformanceAnalytics: [
    "partnerPerformanceAnalytics",
    "overview",
    "carousellPartnerOverview",
    "partnerRatings",
    "partnerEarnings",
    "currencyValue270",
    "partnerOrders",
    "partnerReviews",
    "listings",
    "groupPartnerListings",
    "partnerListings",
    "partnerListingViews",
    "partnerProfileViews",
    "partnerReacts",
    "partnerSaves",
    "partnerResponseRate",
    "numerationValue2702",
    "community",
    "carousellPartnerCommunity",
    "partnerSubscribers",
    "partnerConnections",
    "partnerFollowers",
    "partnerFollowing"
  ],
  overview: ["overview"],
  carousellPartnerOverview: [
    "carousellPartnerOverview",
    "partnerRatings",
    "partnerEarnings",
    "currencyValue270",
    "partnerOrders",
    "partnerReviews"
  ],
  partnerRatings: ["partnerRatings"],
  partnerEarnings: ["partnerEarnings", "currencyValue270"],
  currencyValue270: ["currencyValue270"],
  partnerOrders: ["partnerOrders"],
  partnerReviews: ["partnerReviews"],
  listings: ["listings"],
  groupPartnerListings: [
    "groupPartnerListings",
    "partnerListings",
    "partnerListingViews",
    "partnerProfileViews",
    "partnerReacts",
    "partnerSaves",
    "partnerResponseRate",
    "numerationValue2702"
  ],
  partnerListings: ["partnerListings"],
  partnerListingViews: ["partnerListingViews"],
  partnerProfileViews: ["partnerProfileViews"],
  partnerReacts: ["partnerReacts"],
  partnerSaves: ["partnerSaves"],
  partnerResponseRate: ["partnerResponseRate", "numerationValue2702"],
  numerationValue2702: ["numerationValue2702"],
  community: ["community"],
  carousellPartnerCommunity: [
    "carousellPartnerCommunity",
    "partnerSubscribers",
    "partnerConnections",
    "partnerFollowers",
    "partnerFollowing"
  ],
  partnerSubscribers: ["partnerSubscribers"],
  partnerConnections: ["partnerConnections"],
  partnerFollowers: ["partnerFollowers"],
  partnerFollowing: ["partnerFollowing"],
  footerB: ["footerB"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbarInternal: typeof NavbarInternal;
  navbarPartnerEdit: typeof NavbarPartnerEdit;
  sectionHeaderPartnerPerformance: "div";
  cardHeaderTitleDisplay: typeof CardHeaderTitleDisplay;
  partnerPerformanceAnalytics: "section";
  overview: "header";
  carousellPartnerOverview: "section";
  partnerRatings: typeof CardAnalyticsPrimary;
  partnerEarnings: typeof CardAnalyticsPrimary;
  currencyValue270: "div";
  partnerOrders: typeof CardAnalyticsPrimary;
  partnerReviews: typeof CardAnalyticsPrimary;
  listings: "header";
  groupPartnerListings: "section";
  partnerListings: typeof CardAnalyticsPrimary;
  partnerListingViews: typeof CardAnalyticsPrimary;
  partnerProfileViews: typeof CardAnalyticsPrimary;
  partnerReacts: typeof CardAnalyticsPrimary;
  partnerSaves: typeof CardAnalyticsPrimary;
  partnerResponseRate: typeof CardAnalyticsPrimary;
  numerationValue2702: "div";
  community: "header";
  carousellPartnerCommunity: "section";
  partnerSubscribers: typeof CardAnalyticsPrimary;
  partnerConnections: typeof CardAnalyticsPrimary;
  partnerFollowers: typeof CardAnalyticsPrimary;
  partnerFollowing: typeof CardAnalyticsPrimary;
  footerB: typeof FooterB;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPartnerperformance__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPartnerperformance__VariantsArgs;
    args?: PlasmicPartnerperformance__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicPartnerperformance__Fetches;
  } & Omit<PlasmicPartnerperformance__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPartnerperformance__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPartnerperformance__ArgProps,
      internalVariantPropNames: PlasmicPartnerperformance__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicPartnerperformance__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPartnerperformance";
  } else {
    func.displayName = `PlasmicPartnerperformance.${nodeName}`;
  }
  return func;
}

export const PlasmicPartnerperformance = Object.assign(
  // Top-level PlasmicPartnerperformance renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbarInternal: makeNodeComponent("navbarInternal"),
    navbarPartnerEdit: makeNodeComponent("navbarPartnerEdit"),
    sectionHeaderPartnerPerformance: makeNodeComponent(
      "sectionHeaderPartnerPerformance"
    ),
    cardHeaderTitleDisplay: makeNodeComponent("cardHeaderTitleDisplay"),
    partnerPerformanceAnalytics: makeNodeComponent(
      "partnerPerformanceAnalytics"
    ),
    overview: makeNodeComponent("overview"),
    carousellPartnerOverview: makeNodeComponent("carousellPartnerOverview"),
    partnerRatings: makeNodeComponent("partnerRatings"),
    partnerEarnings: makeNodeComponent("partnerEarnings"),
    currencyValue270: makeNodeComponent("currencyValue270"),
    partnerOrders: makeNodeComponent("partnerOrders"),
    partnerReviews: makeNodeComponent("partnerReviews"),
    listings: makeNodeComponent("listings"),
    groupPartnerListings: makeNodeComponent("groupPartnerListings"),
    partnerListings: makeNodeComponent("partnerListings"),
    partnerListingViews: makeNodeComponent("partnerListingViews"),
    partnerProfileViews: makeNodeComponent("partnerProfileViews"),
    partnerReacts: makeNodeComponent("partnerReacts"),
    partnerSaves: makeNodeComponent("partnerSaves"),
    partnerResponseRate: makeNodeComponent("partnerResponseRate"),
    numerationValue2702: makeNodeComponent("numerationValue2702"),
    community: makeNodeComponent("community"),
    carousellPartnerCommunity: makeNodeComponent("carousellPartnerCommunity"),
    partnerSubscribers: makeNodeComponent("partnerSubscribers"),
    partnerConnections: makeNodeComponent("partnerConnections"),
    partnerFollowers: makeNodeComponent("partnerFollowers"),
    partnerFollowing: makeNodeComponent("partnerFollowing"),
    footerB: makeNodeComponent("footerB"),

    // Metadata about props expected for PlasmicPartnerperformance
    internalVariantProps: PlasmicPartnerperformance__VariantProps,
    internalArgProps: PlasmicPartnerperformance__ArgProps
  }
);

export default PlasmicPartnerperformance;
/* prettier-ignore-end */
