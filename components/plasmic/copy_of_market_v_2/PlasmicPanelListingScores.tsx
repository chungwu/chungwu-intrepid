// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: XClO29Earz-pDCK
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicPanelListingScores.module.css"; // plasmic-import: XClO29Earz-pDCK/css

export type PlasmicPanelListingScores__VariantMembers = {};

export type PlasmicPanelListingScores__VariantsArgs = {};
type VariantPropType = keyof PlasmicPanelListingScores__VariantsArgs;
export const PlasmicPanelListingScores__VariantProps =
  new Array<VariantPropType>();

export type PlasmicPanelListingScores__ArgsType = {};
type ArgPropType = keyof PlasmicPanelListingScores__ArgsType;
export const PlasmicPanelListingScores__ArgProps = new Array<ArgPropType>();

export type PlasmicPanelListingScores__OverridesType = {
  root?: p.Flex<"div">;
  headline?: p.Flex<"div">;
  listingStatsParent?: p.Flex<"div">;
  elementListingCount?: p.Flex<"div">;
  listingNumberParent?: p.Flex<"div">;
  elementViewsCount?: p.Flex<"div">;
  viewsNumberParent?: p.Flex<"div">;
  elementReactsCount?: p.Flex<"div">;
  reactsNumberParent?: p.Flex<"div">;
  elementSavesCount?: p.Flex<"div">;
  savesNumberParent?: p.Flex<"div">;
};

export interface DefaultPanelListingScoresProps {
  className?: string;
}

function PlasmicPanelListingScores__RenderFunc(props: {
  variants: PlasmicPanelListingScores__VariantsArgs;
  args: PlasmicPanelListingScores__ArgsType;
  overrides: PlasmicPanelListingScores__OverridesType;
  dataFetches?: PlasmicPanelListingScores__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.freeBox__jboiI)}
      >
        <div
          data-plasmic-name={"headline"}
          data-plasmic-override={overrides.headline}
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.headline
          )}
        >
          {"Stats"}
        </div>
      </p.Stack>

      <p.Stack
        as={"div"}
        data-plasmic-name={"listingStatsParent"}
        data-plasmic-override={overrides.listingStatsParent}
        hasGap={true}
        className={classNames(defaultcss.all, sty.listingStatsParent)}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"elementListingCount"}
          data-plasmic-override={overrides.elementListingCount}
          hasGap={true}
          className={classNames(defaultcss.all, sty.elementListingCount)}
        >
          <div
            data-plasmic-name={"listingNumberParent"}
            data-plasmic-override={overrides.listingNumberParent}
            className={classNames(defaultcss.all, sty.listingNumberParent)}
          >
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox__ulKd8
              )}
            >
              {"XXXXX"}
            </div>
          </div>

          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox__lsVey
            )}
          >
            {"Listings"}
          </div>
        </p.Stack>

        <p.Stack
          as={"div"}
          data-plasmic-name={"elementViewsCount"}
          data-plasmic-override={overrides.elementViewsCount}
          hasGap={true}
          className={classNames(defaultcss.all, sty.elementViewsCount)}
        >
          <div
            data-plasmic-name={"viewsNumberParent"}
            data-plasmic-override={overrides.viewsNumberParent}
            className={classNames(defaultcss.all, sty.viewsNumberParent)}
          >
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox__mkZau
              )}
            >
              {"XXXXX"}
            </div>
          </div>

          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox__zGe
            )}
          >
            {"Views"}
          </div>
        </p.Stack>

        <p.Stack
          as={"div"}
          data-plasmic-name={"elementReactsCount"}
          data-plasmic-override={overrides.elementReactsCount}
          hasGap={true}
          className={classNames(defaultcss.all, sty.elementReactsCount)}
        >
          <div
            data-plasmic-name={"reactsNumberParent"}
            data-plasmic-override={overrides.reactsNumberParent}
            className={classNames(defaultcss.all, sty.reactsNumberParent)}
          >
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox__c5Oui
              )}
            >
              {"XXXXX"}
            </div>
          </div>

          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox__cgu5G
            )}
          >
            {"Reacts"}
          </div>
        </p.Stack>

        <p.Stack
          as={"div"}
          data-plasmic-name={"elementSavesCount"}
          data-plasmic-override={overrides.elementSavesCount}
          hasGap={true}
          className={classNames(defaultcss.all, sty.elementSavesCount)}
        >
          <div
            data-plasmic-name={"savesNumberParent"}
            data-plasmic-override={overrides.savesNumberParent}
            className={classNames(defaultcss.all, sty.savesNumberParent)}
          >
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox__cCc6G
              )}
            >
              {"XXXXX"}
            </div>
          </div>

          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox__lSEvW
            )}
          >
            {"Saves"}
          </div>
        </p.Stack>
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "headline",
    "listingStatsParent",
    "elementListingCount",
    "listingNumberParent",
    "elementViewsCount",
    "viewsNumberParent",
    "elementReactsCount",
    "reactsNumberParent",
    "elementSavesCount",
    "savesNumberParent"
  ],
  headline: ["headline"],
  listingStatsParent: [
    "listingStatsParent",
    "elementListingCount",
    "listingNumberParent",
    "elementViewsCount",
    "viewsNumberParent",
    "elementReactsCount",
    "reactsNumberParent",
    "elementSavesCount",
    "savesNumberParent"
  ],
  elementListingCount: ["elementListingCount", "listingNumberParent"],
  listingNumberParent: ["listingNumberParent"],
  elementViewsCount: ["elementViewsCount", "viewsNumberParent"],
  viewsNumberParent: ["viewsNumberParent"],
  elementReactsCount: ["elementReactsCount", "reactsNumberParent"],
  reactsNumberParent: ["reactsNumberParent"],
  elementSavesCount: ["elementSavesCount", "savesNumberParent"],
  savesNumberParent: ["savesNumberParent"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  headline: "div";
  listingStatsParent: "div";
  elementListingCount: "div";
  listingNumberParent: "div";
  elementViewsCount: "div";
  viewsNumberParent: "div";
  elementReactsCount: "div";
  reactsNumberParent: "div";
  elementSavesCount: "div";
  savesNumberParent: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPanelListingScores__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPanelListingScores__VariantsArgs;
    args?: PlasmicPanelListingScores__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicPanelListingScores__Fetches;
  } & Omit<PlasmicPanelListingScores__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPanelListingScores__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPanelListingScores__ArgProps,
      internalVariantPropNames: PlasmicPanelListingScores__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicPanelListingScores__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPanelListingScores";
  } else {
    func.displayName = `PlasmicPanelListingScores.${nodeName}`;
  }
  return func;
}

export const PlasmicPanelListingScores = Object.assign(
  // Top-level PlasmicPanelListingScores renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headline: makeNodeComponent("headline"),
    listingStatsParent: makeNodeComponent("listingStatsParent"),
    elementListingCount: makeNodeComponent("elementListingCount"),
    listingNumberParent: makeNodeComponent("listingNumberParent"),
    elementViewsCount: makeNodeComponent("elementViewsCount"),
    viewsNumberParent: makeNodeComponent("viewsNumberParent"),
    elementReactsCount: makeNodeComponent("elementReactsCount"),
    reactsNumberParent: makeNodeComponent("reactsNumberParent"),
    elementSavesCount: makeNodeComponent("elementSavesCount"),
    savesNumberParent: makeNodeComponent("savesNumberParent"),

    // Metadata about props expected for PlasmicPanelListingScores
    internalVariantProps: PlasmicPanelListingScores__VariantProps,
    internalArgProps: PlasmicPanelListingScores__ArgProps
  }
);

export default PlasmicPanelListingScores;
/* prettier-ignore-end */
