// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: 1YLOvKMBJewwix
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import SwitchPrimary from "../../SwitchPrimary"; // plasmic-import: NI4mgAsheQjrPj/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicSwitchTextPrimary.module.css"; // plasmic-import: 1YLOvKMBJewwix/css

export type PlasmicSwitchTextPrimary__VariantMembers = {
  state: "disabled" | "checked";
};

export type PlasmicSwitchTextPrimary__VariantsArgs = {
  state?: SingleChoiceArg<"disabled" | "checked">;
};

type VariantPropType = keyof PlasmicSwitchTextPrimary__VariantsArgs;
export const PlasmicSwitchTextPrimary__VariantProps =
  new Array<VariantPropType>("state");

export type PlasmicSwitchTextPrimary__ArgsType = {
  text?: React.ReactNode;
};

type ArgPropType = keyof PlasmicSwitchTextPrimary__ArgsType;
export const PlasmicSwitchTextPrimary__ArgProps = new Array<ArgPropType>(
  "text"
);

export type PlasmicSwitchTextPrimary__OverridesType = {
  root?: p.Flex<"div">;
  textParent?: p.Flex<"div">;
  textSlotParent?: p.Flex<"div">;
  switchPrimary?: p.Flex<typeof SwitchPrimary>;
};

export interface DefaultSwitchTextPrimaryProps {
  text?: React.ReactNode;
  state?: SingleChoiceArg<"disabled" | "checked">;
  className?: string;
}

function PlasmicSwitchTextPrimary__RenderFunc(props: {
  variants: PlasmicSwitchTextPrimary__VariantsArgs;
  args: PlasmicSwitchTextPrimary__ArgsType;
  overrides: PlasmicSwitchTextPrimary__OverridesType;
  dataFetches?: PlasmicSwitchTextPrimary__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__state_checked]: hasVariant(variants, "state", "checked"),
        [sty.root__state_disabled]: hasVariant(variants, "state", "disabled")
      })}
    >
      <div
        data-plasmic-name={"textParent"}
        data-plasmic-override={overrides.textParent}
        className={classNames(defaultcss.all, sty.textParent)}
      >
        <div
          data-plasmic-name={"textSlotParent"}
          data-plasmic-override={overrides.textSlotParent}
          className={classNames(defaultcss.all, sty.textSlotParent)}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Enter some text",
            value: args.text,
            className: classNames(sty.slotText)
          })}
        </div>
      </div>

      <SwitchPrimary
        data-plasmic-name={"switchPrimary"}
        data-plasmic-override={overrides.switchPrimary}
        _switch={
          hasVariant(variants, "state", "checked")
            ? ("_switch" as const)
            : undefined
        }
        className={classNames("__wab_instance", sty.switchPrimary, {
          [sty.switchPrimary__state_checked]: hasVariant(
            variants,
            "state",
            "checked"
          ),
          [sty.switchPrimary__state_disabled]: hasVariant(
            variants,
            "state",
            "disabled"
          )
        })}
        disabled={
          hasVariant(variants, "state", "disabled")
            ? ("closed" as const)
            : undefined
        }
      />
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "textParent", "textSlotParent", "switchPrimary"],
  textParent: ["textParent", "textSlotParent"],
  textSlotParent: ["textSlotParent"],
  switchPrimary: ["switchPrimary"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  textParent: "div";
  textSlotParent: "div";
  switchPrimary: typeof SwitchPrimary;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSwitchTextPrimary__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSwitchTextPrimary__VariantsArgs;
    args?: PlasmicSwitchTextPrimary__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicSwitchTextPrimary__Fetches;
  } & Omit<PlasmicSwitchTextPrimary__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSwitchTextPrimary__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSwitchTextPrimary__ArgProps,
      internalVariantPropNames: PlasmicSwitchTextPrimary__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicSwitchTextPrimary__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSwitchTextPrimary";
  } else {
    func.displayName = `PlasmicSwitchTextPrimary.${nodeName}`;
  }
  return func;
}

export const PlasmicSwitchTextPrimary = Object.assign(
  // Top-level PlasmicSwitchTextPrimary renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    textParent: makeNodeComponent("textParent"),
    textSlotParent: makeNodeComponent("textSlotParent"),
    switchPrimary: makeNodeComponent("switchPrimary"),

    // Metadata about props expected for PlasmicSwitchTextPrimary
    internalVariantProps: PlasmicSwitchTextPrimary__VariantProps,
    internalArgProps: PlasmicSwitchTextPrimary__ArgProps
  }
);

export default PlasmicSwitchTextPrimary;
/* prettier-ignore-end */
