// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: NTW6aK4CioPsO7y
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicTablePricingElementPercentValueBold.module.css"; // plasmic-import: NTW6aK4CioPsO7y/css

import Icon164Icon from "./icons/PlasmicIcon__Icon164"; // plasmic-import: w7nSyC5BjylkNp1/icon

export type PlasmicTablePricingElementPercentValueBold__VariantMembers = {};

export type PlasmicTablePricingElementPercentValueBold__VariantsArgs = {};
type VariantPropType =
  keyof PlasmicTablePricingElementPercentValueBold__VariantsArgs;
export const PlasmicTablePricingElementPercentValueBold__VariantProps =
  new Array<VariantPropType>();

export type PlasmicTablePricingElementPercentValueBold__ArgsType = {
  textValueProposition?: React.ReactNode;
  percent?: React.ReactNode;
  numberValue?: React.ReactNode;
  svgIcon?: React.ReactNode;
};

type ArgPropType = keyof PlasmicTablePricingElementPercentValueBold__ArgsType;
export const PlasmicTablePricingElementPercentValueBold__ArgProps =
  new Array<ArgPropType>(
    "textValueProposition",
    "percent",
    "numberValue",
    "svgIcon"
  );

export type PlasmicTablePricingElementPercentValueBold__OverridesType = {
  root?: p.Flex<"div">;
  svgIconParent?: p.Flex<"div">;
  numberValuePercentParent?: p.Flex<"div">;
  numberValueParent?: p.Flex<"div">;
  percentParent?: p.Flex<"div">;
  textValuePropositionParent?: p.Flex<"div">;
};

export interface DefaultTablePricingElementPercentValueBoldProps {
  textValueProposition?: React.ReactNode;
  percent?: React.ReactNode;
  numberValue?: React.ReactNode;
  svgIcon?: React.ReactNode;
  className?: string;
}

function PlasmicTablePricingElementPercentValueBold__RenderFunc(props: {
  variants: PlasmicTablePricingElementPercentValueBold__VariantsArgs;
  args: PlasmicTablePricingElementPercentValueBold__ArgsType;
  overrides: PlasmicTablePricingElementPercentValueBold__OverridesType;
  dataFetches?: PlasmicTablePricingElementPercentValueBold__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div
        data-plasmic-name={"svgIconParent"}
        data-plasmic-override={overrides.svgIconParent}
        className={classNames(defaultcss.all, sty.svgIconParent)}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <Icon164Icon
              className={classNames(defaultcss.all, sty.svg__kXwMz)}
              role={"img"}
            />
          ),

          value: args.svgIcon
        })}
      </div>

      <p.Stack
        as={"div"}
        data-plasmic-name={"numberValuePercentParent"}
        data-plasmic-override={overrides.numberValuePercentParent}
        hasGap={true}
        className={classNames(defaultcss.all, sty.numberValuePercentParent)}
      >
        <div
          data-plasmic-name={"numberValueParent"}
          data-plasmic-override={overrides.numberValueParent}
          className={classNames(defaultcss.all, sty.numberValueParent)}
        >
          {p.renderPlasmicSlot({
            defaultContents: "0",
            value: args.numberValue,
            className: classNames(sty.slotNumberValue)
          })}
        </div>

        <div
          data-plasmic-name={"percentParent"}
          data-plasmic-override={overrides.percentParent}
          className={classNames(defaultcss.all, sty.percentParent)}
        >
          {p.renderPlasmicSlot({
            defaultContents: "%",
            value: args.percent,
            className: classNames(sty.slotPercent)
          })}
        </div>
      </p.Stack>

      <div
        data-plasmic-name={"textValuePropositionParent"}
        data-plasmic-override={overrides.textValuePropositionParent}
        className={classNames(defaultcss.all, sty.textValuePropositionParent)}
      >
        {p.renderPlasmicSlot({
          defaultContents: "Payment processing fees",
          value: args.textValueProposition,
          className: classNames(sty.slotTextValueProposition)
        })}
      </div>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "svgIconParent",
    "numberValuePercentParent",
    "numberValueParent",
    "percentParent",
    "textValuePropositionParent"
  ],
  svgIconParent: ["svgIconParent"],
  numberValuePercentParent: [
    "numberValuePercentParent",
    "numberValueParent",
    "percentParent"
  ],
  numberValueParent: ["numberValueParent"],
  percentParent: ["percentParent"],
  textValuePropositionParent: ["textValuePropositionParent"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  svgIconParent: "div";
  numberValuePercentParent: "div";
  numberValueParent: "div";
  percentParent: "div";
  textValuePropositionParent: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTablePricingElementPercentValueBold__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTablePricingElementPercentValueBold__VariantsArgs;
    args?: PlasmicTablePricingElementPercentValueBold__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicTablePricingElementPercentValueBold__Fetches;
  } & Omit< // Specify variants directly as props
    PlasmicTablePricingElementPercentValueBold__VariantsArgs,
    ReservedPropsType
  > &
    // Specify args directly as props
    Omit<
      PlasmicTablePricingElementPercentValueBold__ArgsType,
      ReservedPropsType
    > &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames:
        PlasmicTablePricingElementPercentValueBold__ArgProps,
      internalVariantPropNames:
        PlasmicTablePricingElementPercentValueBold__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicTablePricingElementPercentValueBold__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTablePricingElementPercentValueBold";
  } else {
    func.displayName = `PlasmicTablePricingElementPercentValueBold.${nodeName}`;
  }
  return func;
}

export const PlasmicTablePricingElementPercentValueBold = Object.assign(
  // Top-level PlasmicTablePricingElementPercentValueBold renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svgIconParent: makeNodeComponent("svgIconParent"),
    numberValuePercentParent: makeNodeComponent("numberValuePercentParent"),
    numberValueParent: makeNodeComponent("numberValueParent"),
    percentParent: makeNodeComponent("percentParent"),
    textValuePropositionParent: makeNodeComponent("textValuePropositionParent"),

    // Metadata about props expected for PlasmicTablePricingElementPercentValueBold
    internalVariantProps:
      PlasmicTablePricingElementPercentValueBold__VariantProps,
    internalArgProps: PlasmicTablePricingElementPercentValueBold__ArgProps
  }
);

export default PlasmicTablePricingElementPercentValueBold;
/* prettier-ignore-end */
