// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: 33IkURIjYW6Bq
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import LogoHeader from "../../LogoHeader"; // plasmic-import: KYZQ9ThnFfyK_/component
import NavLink from "../../NavLink"; // plasmic-import: XqQQfEEDIGeiz/component
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: gpNjXfbD_ZdpPU/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: biX3aS42hiG0fF/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicNavbarCta.module.css"; // plasmic-import: 33IkURIjYW6Bq/css

import PlusBoldIcon from "./icons/PlasmicIcon__PlusBold"; // plasmic-import: lhSEEajPJGZatfD/icon

export type PlasmicNavbarCta__VariantMembers = {
  color: "color";
  persona: "partner" | "member";
};

export type PlasmicNavbarCta__VariantsArgs = {
  color?: SingleBooleanChoiceArg<"color">;
  persona?: SingleChoiceArg<"partner" | "member">;
};

type VariantPropType = keyof PlasmicNavbarCta__VariantsArgs;
export const PlasmicNavbarCta__VariantProps = new Array<VariantPropType>(
  "color",
  "persona"
);

export type PlasmicNavbarCta__ArgsType = {};
type ArgPropType = keyof PlasmicNavbarCta__ArgsType;
export const PlasmicNavbarCta__ArgProps = new Array<ArgPropType>();

export type PlasmicNavbarCta__OverridesType = {
  root?: p.Flex<"div">;
  columns?: p.Flex<"div">;
  logoHeader?: p.Flex<typeof LogoHeader>;
  buttonPrimary?: p.Flex<typeof ButtonPrimary>;
};

export interface DefaultNavbarCtaProps {
  color?: SingleBooleanChoiceArg<"color">;
  persona?: SingleChoiceArg<"partner" | "member">;
  className?: string;
}

function PlasmicNavbarCta__RenderFunc(props: {
  variants: PlasmicNavbarCta__VariantsArgs;
  args: PlasmicNavbarCta__ArgsType;
  overrides: PlasmicNavbarCta__OverridesType;
  dataFetches?: PlasmicNavbarCta__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__color]: hasVariant(variants, "color", "color"),
        [sty.root__color_persona_member]:
          hasVariant(variants, "color", "color") &&
          hasVariant(variants, "persona", "member"),
        [sty.root__color_persona_partner]:
          hasVariant(variants, "color", "color") &&
          hasVariant(variants, "persona", "partner"),
        [sty.root__persona_member]: hasVariant(variants, "persona", "member"),
        [sty.root__persona_partner]: hasVariant(variants, "persona", "partner")
      })}
    >
      <div
        data-plasmic-name={"columns"}
        data-plasmic-override={overrides.columns}
        className={classNames(defaultcss.all, sty.columns)}
      >
        <div className={classNames(defaultcss.all, sty.column__eNgJ5)}>
          <LogoHeader
            data-plasmic-name={"logoHeader"}
            data-plasmic-override={overrides.logoHeader}
            className={classNames("__wab_instance", sty.logoHeader, {
              [sty.logoHeader__persona_member]: hasVariant(
                variants,
                "persona",
                "member"
              )
            })}
          />
        </div>

        {(hasVariant(globalVariants, "screen", "mobile") ? false : false) ? (
          <div className={classNames(defaultcss.all, sty.column__aIn1J)}>
            {(
              hasVariant(globalVariants, "screen", "mobile") ? false : false
            ) ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.freeBox__jQ0A9, {
                  [sty.freeBox__color__jQ0A9MNxZ3]: hasVariant(
                    variants,
                    "color",
                    "color"
                  )
                })}
              >
                {false ? (
                  <NavLink
                    className={classNames(
                      "__wab_instance",
                      sty.navLink__nJhGs,
                      {
                        [sty.navLink__color__nJhGsmNxZ3]: hasVariant(
                          variants,
                          "color",
                          "color"
                        )
                      }
                    )}
                    color={
                      hasVariant(variants, "color", "color")
                        ? ("light" as const)
                        : undefined
                    }
                    linkText={
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.freeBox___8LyYi,
                          {
                            [sty.freeBox__color___8LyYiMNxZ3]: hasVariant(
                              variants,
                              "color",
                              "color"
                            )
                          }
                        )}
                      >
                        {"Design"}
                      </div>
                    }
                  />
                ) : null}
                {false ? (
                  <NavLink
                    className={classNames(
                      "__wab_instance",
                      sty.navLink__tLrTl,
                      {
                        [sty.navLink__color__tLrTlMNxZ3]: hasVariant(
                          variants,
                          "color",
                          "color"
                        ),
                        [sty.navLink__persona_member__tLrTlOqIqf]: hasVariant(
                          variants,
                          "persona",
                          "member"
                        ),
                        [sty.navLink__persona_partner__tLrTlUDhO]: hasVariant(
                          variants,
                          "persona",
                          "partner"
                        )
                      }
                    )}
                    color={
                      hasVariant(variants, "color", "color")
                        ? ("light" as const)
                        : undefined
                    }
                    linkText={
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.freeBox__fEM2
                        )}
                      >
                        {"Mobile"}
                      </div>
                    }
                  />
                ) : null}

                <NavLink
                  className={classNames("__wab_instance", sty.navLink__aZsaj, {
                    [sty.navLink__color__aZsajmNxZ3]: hasVariant(
                      variants,
                      "color",
                      "color"
                    )
                  })}
                  color={
                    hasVariant(variants, "color", "color")
                      ? ("light" as const)
                      : undefined
                  }
                  linkText={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox___5Tmcz
                      )}
                    >
                      {"Web"}
                    </div>
                  }
                />

                <NavLink
                  className={classNames("__wab_instance", sty.navLink__fr9Aq, {
                    [sty.navLink__color__fr9AqMNxZ3]: hasVariant(
                      variants,
                      "color",
                      "color"
                    )
                  })}
                  color={
                    hasVariant(variants, "color", "color")
                      ? ("light" as const)
                      : undefined
                  }
                  linkText={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox___3Owyn,
                        {
                          [sty.freeBox__color___3OwynmNxZ3]: hasVariant(
                            variants,
                            "color",
                            "color"
                          )
                        }
                      )}
                    >
                      {"No code"}
                    </div>
                  }
                />
              </p.Stack>
            ) : null}
          </div>
        ) : null}

        <div className={classNames(defaultcss.all, sty.column__bGqI)}>
          <ButtonPrimary
            data-plasmic-name={"buttonPrimary"}
            data-plasmic-override={overrides.buttonPrimary}
            className={classNames("__wab_instance", sty.buttonPrimary, {
              [sty.buttonPrimary__color]: hasVariant(
                variants,
                "color",
                "color"
              ),
              [sty.buttonPrimary__color_persona_partner]:
                hasVariant(variants, "color", "color") &&
                hasVariant(variants, "persona", "partner"),
              [sty.buttonPrimary__persona_member]: hasVariant(
                variants,
                "persona",
                "member"
              ),
              [sty.buttonPrimary__persona_member_color]:
                hasVariant(variants, "persona", "member") &&
                hasVariant(variants, "color", "color"),
              [sty.buttonPrimary__persona_partner]: hasVariant(
                variants,
                "persona",
                "partner"
              )
            })}
            color={
              hasVariant(variants, "persona", "member") &&
              hasVariant(globalVariants, "screen", "mobile")
                ? ("brand" as const)
                : hasVariant(variants, "persona", "partner") &&
                  hasVariant(globalVariants, "screen", "mobile")
                ? ("brand" as const)
                : hasVariant(variants, "color", "color")
                ? ("brand" as const)
                : hasVariant(globalVariants, "screen", "mobile")
                ? ("brand" as const)
                : hasVariant(globalVariants, "screen", "desktop")
                ? ("brand" as const)
                : ("brand" as const)
            }
            size={
              hasVariant(variants, "color", "color")
                ? ("_140" as const)
                : hasVariant(globalVariants, "screen", "desktop")
                ? ("_140" as const)
                : undefined
            }
          >
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox__z5B5T,
                {
                  [sty.freeBox__color__z5B5TmNxZ3]: hasVariant(
                    variants,
                    "color",
                    "color"
                  ),
                  [sty.freeBox__color_persona_member__z5B5TmNxZ3OqIqf]:
                    hasVariant(variants, "color", "color") &&
                    hasVariant(variants, "persona", "member"),
                  [sty.freeBox__color_persona_partner__z5B5TmNxZ3UDhO]:
                    hasVariant(variants, "color", "color") &&
                    hasVariant(variants, "persona", "partner"),
                  [sty.freeBox__persona_member__z5B5ToqIqf]: hasVariant(
                    variants,
                    "persona",
                    "member"
                  ),
                  [sty.freeBox__persona_partner__z5B5TuDhO]: hasVariant(
                    variants,
                    "persona",
                    "partner"
                  )
                }
              )}
            >
              {hasVariant(variants, "color", "color") &&
              hasVariant(variants, "persona", "member")
                ? "Request access"
                : hasVariant(variants, "persona", "member")
                ? "Request"
                : hasVariant(variants, "persona", "partner") &&
                  hasVariant(globalVariants, "screen", "mobile")
                ? "Apply"
                : hasVariant(variants, "persona", "partner")
                ? "Apply"
                : hasVariant(globalVariants, "screen", "mobile")
                ? "Request"
                : hasVariant(globalVariants, "screen", "desktop")
                ? "Request access"
                : "Request access"}
            </div>
          </ButtonPrimary>
        </div>
      </div>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "columns", "logoHeader", "buttonPrimary"],
  columns: ["columns", "logoHeader", "buttonPrimary"],
  logoHeader: ["logoHeader"],
  buttonPrimary: ["buttonPrimary"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  columns: "div";
  logoHeader: typeof LogoHeader;
  buttonPrimary: typeof ButtonPrimary;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavbarCta__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavbarCta__VariantsArgs;
    args?: PlasmicNavbarCta__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicNavbarCta__Fetches;
  } & Omit<PlasmicNavbarCta__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNavbarCta__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNavbarCta__ArgProps,
      internalVariantPropNames: PlasmicNavbarCta__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicNavbarCta__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavbarCta";
  } else {
    func.displayName = `PlasmicNavbarCta.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbarCta = Object.assign(
  // Top-level PlasmicNavbarCta renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    logoHeader: makeNodeComponent("logoHeader"),
    buttonPrimary: makeNodeComponent("buttonPrimary"),

    // Metadata about props expected for PlasmicNavbarCta
    internalVariantProps: PlasmicNavbarCta__VariantProps,
    internalArgProps: PlasmicNavbarCta__ArgProps
  }
);

export default PlasmicNavbarCta;
/* prettier-ignore-end */
