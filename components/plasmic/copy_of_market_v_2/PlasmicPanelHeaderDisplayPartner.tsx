// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: J-OiJsxT9rUuwMX
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavbarSwitch from "../../NavbarSwitch"; // plasmic-import: OecOEfFFIUzxZ0j/component
import UserAvatar from "../../UserAvatar"; // plasmic-import: kWaJrwe3c90GY1/component
import PanelPartnerHeaderButtonSettings from "../../PanelPartnerHeaderButtonSettings"; // plasmic-import: Vqc1rsknPOAtRV/component
import ButtonIconNotificationBell from "../../ButtonIconNotificationBell"; // plasmic-import: EsPgxjilKctrq8/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicPanelHeaderDisplayPartner.module.css"; // plasmic-import: J-OiJsxT9rUuwMX/css

export type PlasmicPanelHeaderDisplayPartner__VariantMembers = {};

export type PlasmicPanelHeaderDisplayPartner__VariantsArgs = {};
type VariantPropType = keyof PlasmicPanelHeaderDisplayPartner__VariantsArgs;
export const PlasmicPanelHeaderDisplayPartner__VariantProps =
  new Array<VariantPropType>();

export type PlasmicPanelHeaderDisplayPartner__ArgsType = {};
type ArgPropType = keyof PlasmicPanelHeaderDisplayPartner__ArgsType;
export const PlasmicPanelHeaderDisplayPartner__ArgProps =
  new Array<ArgPropType>();

export type PlasmicPanelHeaderDisplayPartner__OverridesType = {
  root?: p.Flex<"div">;
  elementPartnerSidebarHeader?: p.Flex<"div">;
  navbarSwitch?: p.Flex<typeof NavbarSwitch>;
  avatarPartnerUsernameDisplayNameParent?: p.Flex<"div">;
  partnerAvatarParent?: p.Flex<"div">;
  userAvatar?: p.Flex<typeof UserAvatar>;
  navUserAvatar1822?: p.Flex<"img">;
  navUserAvatar2422?: p.Flex<"img">;
  panelPartnerHeaderButtonSettings?: p.Flex<
    typeof PanelPartnerHeaderButtonSettings
  >;
  panelPartner?: p.Flex<typeof ButtonIconNotificationBell>;
};

export interface DefaultPanelHeaderDisplayPartnerProps {
  className?: string;
}

function PlasmicPanelHeaderDisplayPartner__RenderFunc(props: {
  variants: PlasmicPanelHeaderDisplayPartner__VariantsArgs;
  args: PlasmicPanelHeaderDisplayPartner__ArgsType;
  overrides: PlasmicPanelHeaderDisplayPartner__OverridesType;
  dataFetches?: PlasmicPanelHeaderDisplayPartner__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"elementPartnerSidebarHeader"}
        data-plasmic-override={overrides.elementPartnerSidebarHeader}
        hasGap={true}
        className={classNames(defaultcss.all, sty.elementPartnerSidebarHeader)}
      >
        <NavbarSwitch
          data-plasmic-name={"navbarSwitch"}
          data-plasmic-override={overrides.navbarSwitch}
          className={classNames("__wab_instance", sty.navbarSwitch)}
          close={"close" as const}
        />

        <p.Stack
          as={"div"}
          data-plasmic-name={"avatarPartnerUsernameDisplayNameParent"}
          data-plasmic-override={
            overrides.avatarPartnerUsernameDisplayNameParent
          }
          hasGap={true}
          className={classNames(
            defaultcss.all,
            sty.avatarPartnerUsernameDisplayNameParent
          )}
        >
          <div
            data-plasmic-name={"partnerAvatarParent"}
            data-plasmic-override={overrides.partnerAvatarParent}
            className={classNames(defaultcss.all, sty.partnerAvatarParent)}
          >
            <UserAvatar
              data-plasmic-name={"userAvatar"}
              data-plasmic-override={overrides.userAvatar}
              navUserAvatar16={
                <img
                  data-plasmic-name={"navUserAvatar1822"}
                  data-plasmic-override={overrides.navUserAvatar1822}
                  alt={""}
                  className={classNames(defaultcss.img, sty.navUserAvatar1822)}
                  role={"img"}
                  src={
                    "/plasmic/copy_of_market_v_2/images/collinHbs2014Jpg.jpeg"
                  }
                />
              }
              navUserAvatar24={
                <img
                  data-plasmic-name={"navUserAvatar2422"}
                  data-plasmic-override={overrides.navUserAvatar2422}
                  alt={""}
                  className={classNames(defaultcss.img, sty.navUserAvatar2422)}
                  role={"img"}
                  src={
                    "/plasmic/copy_of_market_v_2/images/collinHbs2014Jpg.jpeg"
                  }
                />
              }
              size={"_32" as const}
              verified={"verified" as const}
            />
          </div>

          <PanelPartnerHeaderButtonSettings
            data-plasmic-name={"panelPartnerHeaderButtonSettings"}
            data-plasmic-override={overrides.panelPartnerHeaderButtonSettings}
            className={classNames(
              "__wab_instance",
              sty.panelPartnerHeaderButtonSettings
            )}
            trigger={"side-barUserSettingsDropdown" as const}
          />

          <ButtonIconNotificationBell
            data-plasmic-name={"panelPartner"}
            data-plasmic-override={overrides.panelPartner}
            className={classNames("__wab_instance", sty.panelPartner)}
          />
        </p.Stack>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "elementPartnerSidebarHeader",
    "navbarSwitch",
    "avatarPartnerUsernameDisplayNameParent",
    "partnerAvatarParent",
    "userAvatar",
    "navUserAvatar1822",
    "navUserAvatar2422",
    "panelPartnerHeaderButtonSettings",
    "panelPartner"
  ],
  elementPartnerSidebarHeader: [
    "elementPartnerSidebarHeader",
    "navbarSwitch",
    "avatarPartnerUsernameDisplayNameParent",
    "partnerAvatarParent",
    "userAvatar",
    "navUserAvatar1822",
    "navUserAvatar2422",
    "panelPartnerHeaderButtonSettings",
    "panelPartner"
  ],
  navbarSwitch: ["navbarSwitch"],
  avatarPartnerUsernameDisplayNameParent: [
    "avatarPartnerUsernameDisplayNameParent",
    "partnerAvatarParent",
    "userAvatar",
    "navUserAvatar1822",
    "navUserAvatar2422",
    "panelPartnerHeaderButtonSettings",
    "panelPartner"
  ],
  partnerAvatarParent: [
    "partnerAvatarParent",
    "userAvatar",
    "navUserAvatar1822",
    "navUserAvatar2422"
  ],
  userAvatar: ["userAvatar", "navUserAvatar1822", "navUserAvatar2422"],
  navUserAvatar1822: ["navUserAvatar1822"],
  navUserAvatar2422: ["navUserAvatar2422"],
  panelPartnerHeaderButtonSettings: ["panelPartnerHeaderButtonSettings"],
  panelPartner: ["panelPartner"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  elementPartnerSidebarHeader: "div";
  navbarSwitch: typeof NavbarSwitch;
  avatarPartnerUsernameDisplayNameParent: "div";
  partnerAvatarParent: "div";
  userAvatar: typeof UserAvatar;
  navUserAvatar1822: "img";
  navUserAvatar2422: "img";
  panelPartnerHeaderButtonSettings: typeof PanelPartnerHeaderButtonSettings;
  panelPartner: typeof ButtonIconNotificationBell;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPanelHeaderDisplayPartner__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPanelHeaderDisplayPartner__VariantsArgs;
    args?: PlasmicPanelHeaderDisplayPartner__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicPanelHeaderDisplayPartner__Fetches;
  } & Omit<PlasmicPanelHeaderDisplayPartner__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPanelHeaderDisplayPartner__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPanelHeaderDisplayPartner__ArgProps,
      internalVariantPropNames: PlasmicPanelHeaderDisplayPartner__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicPanelHeaderDisplayPartner__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPanelHeaderDisplayPartner";
  } else {
    func.displayName = `PlasmicPanelHeaderDisplayPartner.${nodeName}`;
  }
  return func;
}

export const PlasmicPanelHeaderDisplayPartner = Object.assign(
  // Top-level PlasmicPanelHeaderDisplayPartner renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    elementPartnerSidebarHeader: makeNodeComponent(
      "elementPartnerSidebarHeader"
    ),
    navbarSwitch: makeNodeComponent("navbarSwitch"),
    avatarPartnerUsernameDisplayNameParent: makeNodeComponent(
      "avatarPartnerUsernameDisplayNameParent"
    ),
    partnerAvatarParent: makeNodeComponent("partnerAvatarParent"),
    userAvatar: makeNodeComponent("userAvatar"),
    navUserAvatar1822: makeNodeComponent("navUserAvatar1822"),
    navUserAvatar2422: makeNodeComponent("navUserAvatar2422"),
    panelPartnerHeaderButtonSettings: makeNodeComponent(
      "panelPartnerHeaderButtonSettings"
    ),
    panelPartner: makeNodeComponent("panelPartner"),

    // Metadata about props expected for PlasmicPanelHeaderDisplayPartner
    internalVariantProps: PlasmicPanelHeaderDisplayPartner__VariantProps,
    internalArgProps: PlasmicPanelHeaderDisplayPartner__ArgProps
  }
);

export default PlasmicPanelHeaderDisplayPartner;
/* prettier-ignore-end */
