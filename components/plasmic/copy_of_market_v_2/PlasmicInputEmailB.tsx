// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: kB5-PzQWm3FXBI
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: gpNjXfbD_ZdpPU/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: biX3aS42hiG0fF/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicInputEmailB.module.css"; // plasmic-import: kB5-PzQWm3FXBI/css

import PlusBoldIcon from "./icons/PlasmicIcon__PlusBold"; // plasmic-import: lhSEEajPJGZatfD/icon

export type PlasmicInputEmailB__VariantMembers = {
  description: "description";
  size: "_160" | "_270" | "_360" | "_540";
};

export type PlasmicInputEmailB__VariantsArgs = {
  description?: SingleBooleanChoiceArg<"description">;
  size?: SingleChoiceArg<"_160" | "_270" | "_360" | "_540">;
};

type VariantPropType = keyof PlasmicInputEmailB__VariantsArgs;
export const PlasmicInputEmailB__VariantProps = new Array<VariantPropType>(
  "description",
  "size"
);

export type PlasmicInputEmailB__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicInputEmailB__ArgsType;
export const PlasmicInputEmailB__ArgProps = new Array<ArgPropType>("children");

export type PlasmicInputEmailB__OverridesType = {
  root?: p.Flex<"div">;
  textbox?: p.Flex<"input">;
};

export interface DefaultInputEmailBProps {
  children?: React.ReactNode;
  description?: SingleBooleanChoiceArg<"description">;
  size?: SingleChoiceArg<"_160" | "_270" | "_360" | "_540">;
  className?: string;
}

function PlasmicInputEmailB__RenderFunc(props: {
  variants: PlasmicInputEmailB__VariantsArgs;
  args: PlasmicInputEmailB__ArgsType;
  overrides: PlasmicInputEmailB__OverridesType;
  dataFetches?: PlasmicInputEmailB__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__size__160]: hasVariant(variants, "size", "_160"),
        [sty.root__size__270]: hasVariant(variants, "size", "_270"),
        [sty.root__size__360]: hasVariant(variants, "size", "_360"),
        [sty.root__size__540]: hasVariant(variants, "size", "_540")
      })}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.freeBox__k5SkE, {
          [sty.freeBox__size__160__k5SkEAjecw]: hasVariant(
            variants,
            "size",
            "_160"
          ),
          [sty.freeBox__size__270__k5SkEkmoTo]: hasVariant(
            variants,
            "size",
            "_270"
          ),
          [sty.freeBox__size__360__k5SkEwbcgz]: hasVariant(
            variants,
            "size",
            "_360"
          ),
          [sty.freeBox__size__540__k5SkEdk2Hx]: hasVariant(
            variants,
            "size",
            "_540"
          )
        })}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.freeBox__ndOjo, {
            [sty.freeBox__size__360__ndOjOwbcgz]: hasVariant(
              variants,
              "size",
              "_360"
            )
          })}
        >
          <input
            data-plasmic-name={"textbox"}
            data-plasmic-override={overrides.textbox}
            className={classNames(defaultcss.input, sty.textbox, {
              [sty.textbox__size__160]: hasVariant(variants, "size", "_160"),
              [sty.textbox__size__270]: hasVariant(variants, "size", "_270"),
              [sty.textbox__size__360]: hasVariant(variants, "size", "_360"),
              [sty.textbox__size__540]: hasVariant(variants, "size", "_540")
            })}
            placeholder={"Enter your email address" as const}
            size={1 as const}
            type={"text" as const}
            value={"" as const}
          />

          {(
            hasVariant(variants, "size", "_270")
              ? false
              : hasVariant(variants, "size", "_160")
              ? false
              : true
          ) ? (
            <ButtonPrimary
              className={classNames(
                "__wab_instance",
                sty.buttonPrimary__bdWit,
                {
                  [sty.buttonPrimary__size__160__bdWitAjecw]: hasVariant(
                    variants,
                    "size",
                    "_160"
                  ),
                  [sty.buttonPrimary__size__270__bdWitkmoTo]: hasVariant(
                    variants,
                    "size",
                    "_270"
                  ),
                  [sty.buttonPrimary__size__360__bdWiTwbcgz]: hasVariant(
                    variants,
                    "size",
                    "_360"
                  ),
                  [sty.buttonPrimary__size__540__bdWiTdk2Hx]: hasVariant(
                    variants,
                    "size",
                    "_540"
                  )
                }
              )}
              color={"brand" as const}
              size={
                hasVariant(variants, "size", "_540")
                  ? ("_180" as const)
                  : ("_120" as const)
              }
            >
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.freeBox__lxE7X,
                  {
                    [sty.freeBox__size__360__lxE7Xwbcgz]: hasVariant(
                      variants,
                      "size",
                      "_360"
                    )
                  }
                )}
              >
                {hasVariant(globalVariants, "screen", "mobile")
                  ? "Join now"
                  : hasVariant(globalVariants, "screen", "desktop")
                  ? "Apply to join"
                  : "Click me"}
              </div>
            </ButtonPrimary>
          ) : null}
        </p.Stack>

        {(hasVariant(variants, "size", "_270") ? true : false) ? (
          <ButtonPrimary
            className={classNames("__wab_instance", sty.buttonPrimary___3Lh1C, {
              [sty.buttonPrimary__size__270___3Lh1CKmoTo]: hasVariant(
                variants,
                "size",
                "_270"
              ),
              [sty.buttonPrimary__size__360___3Lh1Cwbcgz]: hasVariant(
                variants,
                "size",
                "_360"
              )
            })}
            color={"brand" as const}
            size={"_120" as const}
          >
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox__jqjt,
                {
                  [sty.freeBox__size__360__jqjtWbcgz]: hasVariant(
                    variants,
                    "size",
                    "_360"
                  )
                }
              )}
            >
              {hasVariant(globalVariants, "screen", "desktop")
                ? "Apply to join"
                : "Click me"}
            </div>
          </ButtonPrimary>
        ) : null}
        {(
          hasVariant(variants, "size", "_270")
            ? false
            : hasVariant(variants, "size", "_160")
            ? true
            : false
        ) ? (
          <ButtonPrimary
            className={classNames("__wab_instance", sty.buttonPrimary__rkO3E, {
              [sty.buttonPrimary__size__160__rkO3EAjecw]: hasVariant(
                variants,
                "size",
                "_160"
              ),
              [sty.buttonPrimary__size__270__rkO3EkmoTo]: hasVariant(
                variants,
                "size",
                "_270"
              ),
              [sty.buttonPrimary__size__360__rkO3Ewbcgz]: hasVariant(
                variants,
                "size",
                "_360"
              )
            })}
            color={"brand" as const}
            size={"_120" as const}
          >
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox__nmy5N,
                {
                  [sty.freeBox__size__360__nmy5Nwbcgz]: hasVariant(
                    variants,
                    "size",
                    "_360"
                  )
                }
              )}
            >
              {hasVariant(globalVariants, "screen", "desktop")
                ? "Apply to join"
                : "Click me"}
            </div>
          </ButtonPrimary>
        ) : null}
        {(hasVariant(variants, "description", "description") ? false : true) ? (
          <div
            className={classNames(defaultcss.all, sty.freeBox__q0PtI, {
              [sty.freeBox__description__q0PtI5QxM]: hasVariant(
                variants,
                "description",
                "description"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents:
                "Free to join, no credit card required. By entering your email, you agree to receive marketing emails from Intrepid.",
              value: args.children,
              className: classNames(sty.slotChildren, {
                [sty.slotChildren__description]: hasVariant(
                  variants,
                  "description",
                  "description"
                ),
                [sty.slotChildren__size__160]: hasVariant(
                  variants,
                  "size",
                  "_160"
                ),
                [sty.slotChildren__size__270]: hasVariant(
                  variants,
                  "size",
                  "_270"
                ),
                [sty.slotChildren__size__360]: hasVariant(
                  variants,
                  "size",
                  "_360"
                ),
                [sty.slotChildren__size__540]: hasVariant(
                  variants,
                  "size",
                  "_540"
                )
              })
            })}
          </div>
        ) : null}
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "textbox"],
  textbox: ["textbox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  textbox: "input";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInputEmailB__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicInputEmailB__VariantsArgs;
    args?: PlasmicInputEmailB__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicInputEmailB__Fetches;
  } & Omit<PlasmicInputEmailB__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicInputEmailB__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicInputEmailB__ArgProps,
      internalVariantPropNames: PlasmicInputEmailB__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicInputEmailB__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInputEmailB";
  } else {
    func.displayName = `PlasmicInputEmailB.${nodeName}`;
  }
  return func;
}

export const PlasmicInputEmailB = Object.assign(
  // Top-level PlasmicInputEmailB renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    textbox: makeNodeComponent("textbox"),

    // Metadata about props expected for PlasmicInputEmailB
    internalVariantProps: PlasmicInputEmailB__VariantProps,
    internalArgProps: PlasmicInputEmailB__ArgProps
  }
);

export default PlasmicInputEmailB;
/* prettier-ignore-end */
