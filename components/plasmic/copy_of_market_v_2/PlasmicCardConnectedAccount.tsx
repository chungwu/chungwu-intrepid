// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: 40diCBROeAR9vl
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import IconPrimary from "../../IconPrimary"; // plasmic-import: leoxU5GkcMHMK8X/component
import ButtonCircleDelete from "../../ButtonCircleDelete"; // plasmic-import: ADEYruGVISG4-wd/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicCardConnectedAccount.module.css"; // plasmic-import: 40diCBROeAR9vl/css

import Icon171Icon from "./icons/PlasmicIcon__Icon171"; // plasmic-import: L1T0WWEIfF6hPBd/icon
import GooglesvgIcon from "./icons/PlasmicIcon__Googlesvg"; // plasmic-import: _7TNBtYC1Cgmp24/icon
import FacebookSquareFillIcon from "./icons/PlasmicIcon__FacebookSquareFill"; // plasmic-import: XQewwx4CP8adgPa/icon
import StripeLogoIcon from "./icons/PlasmicIcon__StripeLogo"; // plasmic-import: 2CmlYtCN9oVXYGA/icon
import PaypalIcon from "./icons/PlasmicIcon__Paypal"; // plasmic-import: 4pEaJvLDMWqV-Eg/icon
import XerosvgIcon from "./icons/PlasmicIcon__Xerosvg"; // plasmic-import: _UvTvshzBlJJ7uH/icon
import Icons8QuickbookssvgIcon from "./icons/PlasmicIcon__Icons8Quickbookssvg"; // plasmic-import: YRFKzaheXM2apD6/icon

export type PlasmicCardConnectedAccount__VariantMembers = {
  team: "team";
  companies:
    | "google"
    | "facebook"
    | "stripe"
    | "paypal"
    | "xero"
    | "quickbooks";
};

export type PlasmicCardConnectedAccount__VariantsArgs = {
  team?: SingleBooleanChoiceArg<"team">;
  companies?: SingleChoiceArg<
    "google" | "facebook" | "stripe" | "paypal" | "xero" | "quickbooks"
  >;
};

type VariantPropType = keyof PlasmicCardConnectedAccount__VariantsArgs;
export const PlasmicCardConnectedAccount__VariantProps =
  new Array<VariantPropType>("team", "companies");

export type PlasmicCardConnectedAccount__ArgsType = {
  username?: React.ReactNode;
  userLastName?: React.ReactNode;
  userFirstname?: React.ReactNode;
  timestampDate?: React.ReactNode;
};

type ArgPropType = keyof PlasmicCardConnectedAccount__ArgsType;
export const PlasmicCardConnectedAccount__ArgProps = new Array<ArgPropType>(
  "username",
  "userLastName",
  "userFirstname",
  "timestampDate"
);

export type PlasmicCardConnectedAccount__OverridesType = {
  parent?: p.Flex<"div">;
  cardParent?: p.Flex<"div">;
  iconTextGroup?: p.Flex<"div">;
  iconPrimary?: p.Flex<typeof IconPrimary>;
  svgIcon6?: p.Flex<"svg">;
  svgIcon8?: p.Flex<"svg">;
  accountInfoParent?: p.Flex<"div">;
  accountName?: p.Flex<"div">;
  usernameGroupParent?: p.Flex<"div">;
  connectedTimestampParent?: p.Flex<"div">;
  connectedTimestamp?: p.Flex<"div">;
  buttonCircleDelete?: p.Flex<typeof ButtonCircleDelete>;
};

export interface DefaultCardConnectedAccountProps {
  username?: React.ReactNode;
  userLastName?: React.ReactNode;
  userFirstname?: React.ReactNode;
  timestampDate?: React.ReactNode;
  team?: SingleBooleanChoiceArg<"team">;
  companies?: SingleChoiceArg<
    "google" | "facebook" | "stripe" | "paypal" | "xero" | "quickbooks"
  >;
  className?: string;
}

function PlasmicCardConnectedAccount__RenderFunc(props: {
  variants: PlasmicCardConnectedAccount__VariantsArgs;
  args: PlasmicCardConnectedAccount__ArgsType;
  overrides: PlasmicCardConnectedAccount__OverridesType;
  dataFetches?: PlasmicCardConnectedAccount__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"parent"}
      data-plasmic-override={overrides.parent}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.parent, {
        [sty.parent__companies_quickbooks]: hasVariant(
          variants,
          "companies",
          "quickbooks"
        )
      })}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"cardParent"}
        data-plasmic-override={overrides.cardParent}
        hasGap={true}
        className={classNames(defaultcss.all, sty.cardParent, {
          [sty.cardParent__companies_facebook]: hasVariant(
            variants,
            "companies",
            "facebook"
          ),
          [sty.cardParent__companies_google]: hasVariant(
            variants,
            "companies",
            "google"
          ),
          [sty.cardParent__companies_paypal]: hasVariant(
            variants,
            "companies",
            "paypal"
          ),
          [sty.cardParent__companies_quickbooks]: hasVariant(
            variants,
            "companies",
            "quickbooks"
          ),
          [sty.cardParent__companies_stripe]: hasVariant(
            variants,
            "companies",
            "stripe"
          ),
          [sty.cardParent__companies_xero]: hasVariant(
            variants,
            "companies",
            "xero"
          )
        })}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"iconTextGroup"}
          data-plasmic-override={overrides.iconTextGroup}
          hasGap={true}
          className={classNames(defaultcss.all, sty.iconTextGroup)}
        >
          <IconPrimary
            data-plasmic-name={"iconPrimary"}
            data-plasmic-override={overrides.iconPrimary}
            className={classNames("__wab_instance", sty.iconPrimary, {
              [sty.iconPrimary__companies_facebook]: hasVariant(
                variants,
                "companies",
                "facebook"
              ),
              [sty.iconPrimary__companies_google]: hasVariant(
                variants,
                "companies",
                "google"
              ),
              [sty.iconPrimary__companies_paypal]: hasVariant(
                variants,
                "companies",
                "paypal"
              ),
              [sty.iconPrimary__companies_quickbooks]: hasVariant(
                variants,
                "companies",
                "quickbooks"
              ),
              [sty.iconPrimary__companies_stripe]: hasVariant(
                variants,
                "companies",
                "stripe"
              ),
              [sty.iconPrimary__companies_xero]: hasVariant(
                variants,
                "companies",
                "xero"
              ),
              [sty.iconPrimary__team]: hasVariant(variants, "team", "team")
            })}
            size={
              hasVariant(variants, "companies", "quickbooks")
                ? ("_64Px" as const)
                : hasVariant(variants, "companies", "xero")
                ? ("_64Px" as const)
                : hasVariant(variants, "companies", "paypal")
                ? ("_64Px" as const)
                : hasVariant(variants, "companies", "stripe")
                ? ("_64Px" as const)
                : hasVariant(variants, "companies", "facebook")
                ? ("_64Px" as const)
                : hasVariant(variants, "companies", "google")
                ? ("_64Px" as const)
                : hasVariant(variants, "team", "team")
                ? ("_64Px" as const)
                : ("_64Px" as const)
            }
            svgIcon32Px={
              <p.PlasmicIcon
                data-plasmic-name={"svgIcon6"}
                data-plasmic-override={overrides.svgIcon6}
                PlasmicIconType={
                  hasVariant(variants, "companies", "quickbooks")
                    ? Icons8QuickbookssvgIcon
                    : hasVariant(variants, "companies", "xero")
                    ? XerosvgIcon
                    : hasVariant(variants, "companies", "paypal")
                    ? PaypalIcon
                    : hasVariant(variants, "companies", "stripe")
                    ? StripeLogoIcon
                    : hasVariant(variants, "companies", "facebook")
                    ? FacebookSquareFillIcon
                    : hasVariant(variants, "companies", "google")
                    ? GooglesvgIcon
                    : Icon171Icon
                }
                className={classNames(defaultcss.all, sty.svgIcon6, {
                  [sty.svgIcon6__companies_facebook]: hasVariant(
                    variants,
                    "companies",
                    "facebook"
                  ),
                  [sty.svgIcon6__companies_google]: hasVariant(
                    variants,
                    "companies",
                    "google"
                  ),
                  [sty.svgIcon6__companies_paypal]: hasVariant(
                    variants,
                    "companies",
                    "paypal"
                  ),
                  [sty.svgIcon6__companies_quickbooks]: hasVariant(
                    variants,
                    "companies",
                    "quickbooks"
                  ),
                  [sty.svgIcon6__companies_stripe]: hasVariant(
                    variants,
                    "companies",
                    "stripe"
                  ),
                  [sty.svgIcon6__companies_xero]: hasVariant(
                    variants,
                    "companies",
                    "xero"
                  ),
                  [sty.svgIcon6__team]: hasVariant(variants, "team", "team")
                })}
                role={"img"}
              />
            }
            svgIcon64Px={
              <p.PlasmicIcon
                data-plasmic-name={"svgIcon8"}
                data-plasmic-override={overrides.svgIcon8}
                PlasmicIconType={
                  hasVariant(variants, "companies", "quickbooks")
                    ? Icons8QuickbookssvgIcon
                    : hasVariant(variants, "companies", "xero")
                    ? XerosvgIcon
                    : hasVariant(variants, "companies", "paypal")
                    ? PaypalIcon
                    : hasVariant(variants, "companies", "stripe")
                    ? StripeLogoIcon
                    : hasVariant(variants, "companies", "facebook")
                    ? FacebookSquareFillIcon
                    : hasVariant(variants, "companies", "google")
                    ? GooglesvgIcon
                    : Icon171Icon
                }
                className={classNames(defaultcss.all, sty.svgIcon8, {
                  [sty.svgIcon8__companies_facebook]: hasVariant(
                    variants,
                    "companies",
                    "facebook"
                  ),
                  [sty.svgIcon8__companies_google]: hasVariant(
                    variants,
                    "companies",
                    "google"
                  ),
                  [sty.svgIcon8__companies_paypal]: hasVariant(
                    variants,
                    "companies",
                    "paypal"
                  ),
                  [sty.svgIcon8__companies_quickbooks]: hasVariant(
                    variants,
                    "companies",
                    "quickbooks"
                  ),
                  [sty.svgIcon8__companies_stripe]: hasVariant(
                    variants,
                    "companies",
                    "stripe"
                  ),
                  [sty.svgIcon8__companies_xero]: hasVariant(
                    variants,
                    "companies",
                    "xero"
                  )
                })}
                role={"img"}
              />
            }
          />

          <p.Stack
            as={"div"}
            data-plasmic-name={"accountInfoParent"}
            data-plasmic-override={overrides.accountInfoParent}
            hasGap={true}
            className={classNames(defaultcss.all, sty.accountInfoParent, {
              [sty.accountInfoParent__team]: hasVariant(
                variants,
                "team",
                "team"
              )
            })}
          >
            <div className={classNames(defaultcss.all, sty.freeBox__pqsA)}>
              <div
                data-plasmic-name={"accountName"}
                data-plasmic-override={overrides.accountName}
                className={classNames(defaultcss.all, sty.accountName)}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__oWvqo,
                    {
                      [sty.freeBox__companies_facebook__oWvqo87Vu9]: hasVariant(
                        variants,
                        "companies",
                        "facebook"
                      ),
                      [sty.freeBox__companies_google__oWvqoW2Ptk]: hasVariant(
                        variants,
                        "companies",
                        "google"
                      ),
                      [sty.freeBox__companies_paypal__oWvqosRo7G]: hasVariant(
                        variants,
                        "companies",
                        "paypal"
                      ),
                      [sty.freeBox__companies_quickbooks__oWvqoLp9W]:
                        hasVariant(variants, "companies", "quickbooks"),
                      [sty.freeBox__companies_stripe__oWvqonNAz]: hasVariant(
                        variants,
                        "companies",
                        "stripe"
                      ),
                      [sty.freeBox__companies_xero__oWvqoSsTrh]: hasVariant(
                        variants,
                        "companies",
                        "xero"
                      )
                    }
                  )}
                >
                  {hasVariant(variants, "companies", "quickbooks")
                    ? "Quickbooks"
                    : hasVariant(variants, "companies", "xero")
                    ? "Xero"
                    : hasVariant(variants, "companies", "paypal")
                    ? "Paypal"
                    : hasVariant(variants, "companies", "stripe")
                    ? "Stripe"
                    : hasVariant(variants, "companies", "facebook")
                    ? "Facebook"
                    : hasVariant(variants, "companies", "google")
                    ? "Google"
                    : "Connected Account Name"}
                </div>
              </div>
            </div>

            <p.Stack
              as={"div"}
              data-plasmic-name={"usernameGroupParent"}
              data-plasmic-override={overrides.usernameGroupParent}
              hasGap={true}
              className={classNames(defaultcss.all, sty.usernameGroupParent)}
            >
              {p.renderPlasmicSlot({
                defaultContents: hasVariant(variants, "team", "team")
                  ? "companyName"
                  : "userFirstName",
                value: args.userFirstname,
                className: classNames(sty.slotUserFirstname, {
                  [sty.slotUserFirstname__team]: hasVariant(
                    variants,
                    "team",
                    "team"
                  )
                })
              })}

              {(hasVariant(variants, "team", "team") ? false : true)
                ? p.renderPlasmicSlot({
                    defaultContents: "userLastName",
                    value: args.userLastName,
                    className: classNames(sty.slotUserLastName, {
                      [sty.slotUserLastName__team]: hasVariant(
                        variants,
                        "team",
                        "team"
                      )
                    })
                  })
                : null}
            </p.Stack>

            {p.renderPlasmicSlot({
              defaultContents: "username",
              value: args.username,
              className: classNames(sty.slotUsername)
            })}
          </p.Stack>
        </p.Stack>

        <p.Stack
          as={"div"}
          data-plasmic-name={"connectedTimestampParent"}
          data-plasmic-override={overrides.connectedTimestampParent}
          hasGap={true}
          className={classNames(defaultcss.all, sty.connectedTimestampParent)}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"connectedTimestamp"}
            data-plasmic-override={overrides.connectedTimestamp}
            hasGap={true}
            className={classNames(defaultcss.all, sty.connectedTimestamp)}
          >
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox__giYNy
              )}
            >
              {"Connected"}
            </div>

            {p.renderPlasmicSlot({
              defaultContents: "Timestamp",
              value: args.timestampDate,
              className: classNames(sty.slotTimestampDate)
            })}
          </p.Stack>

          <ButtonCircleDelete
            data-plasmic-name={"buttonCircleDelete"}
            data-plasmic-override={overrides.buttonCircleDelete}
            className={classNames("__wab_instance", sty.buttonCircleDelete, {
              [sty.buttonCircleDelete__companies_google]: hasVariant(
                variants,
                "companies",
                "google"
              )
            })}
            size={"_18Px" as const}
          />
        </p.Stack>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  parent: [
    "parent",
    "cardParent",
    "iconTextGroup",
    "iconPrimary",
    "svgIcon6",
    "svgIcon8",
    "accountInfoParent",
    "accountName",
    "usernameGroupParent",
    "connectedTimestampParent",
    "connectedTimestamp",
    "buttonCircleDelete"
  ],
  cardParent: [
    "cardParent",
    "iconTextGroup",
    "iconPrimary",
    "svgIcon6",
    "svgIcon8",
    "accountInfoParent",
    "accountName",
    "usernameGroupParent",
    "connectedTimestampParent",
    "connectedTimestamp",
    "buttonCircleDelete"
  ],
  iconTextGroup: [
    "iconTextGroup",
    "iconPrimary",
    "svgIcon6",
    "svgIcon8",
    "accountInfoParent",
    "accountName",
    "usernameGroupParent"
  ],
  iconPrimary: ["iconPrimary", "svgIcon6", "svgIcon8"],
  svgIcon6: ["svgIcon6"],
  svgIcon8: ["svgIcon8"],
  accountInfoParent: [
    "accountInfoParent",
    "accountName",
    "usernameGroupParent"
  ],
  accountName: ["accountName"],
  usernameGroupParent: ["usernameGroupParent"],
  connectedTimestampParent: [
    "connectedTimestampParent",
    "connectedTimestamp",
    "buttonCircleDelete"
  ],
  connectedTimestamp: ["connectedTimestamp"],
  buttonCircleDelete: ["buttonCircleDelete"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  parent: "div";
  cardParent: "div";
  iconTextGroup: "div";
  iconPrimary: typeof IconPrimary;
  svgIcon6: "svg";
  svgIcon8: "svg";
  accountInfoParent: "div";
  accountName: "div";
  usernameGroupParent: "div";
  connectedTimestampParent: "div";
  connectedTimestamp: "div";
  buttonCircleDelete: typeof ButtonCircleDelete;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCardConnectedAccount__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCardConnectedAccount__VariantsArgs;
    args?: PlasmicCardConnectedAccount__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicCardConnectedAccount__Fetches;
  } & Omit<PlasmicCardConnectedAccount__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCardConnectedAccount__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCardConnectedAccount__ArgProps,
      internalVariantPropNames: PlasmicCardConnectedAccount__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicCardConnectedAccount__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "parent") {
    func.displayName = "PlasmicCardConnectedAccount";
  } else {
    func.displayName = `PlasmicCardConnectedAccount.${nodeName}`;
  }
  return func;
}

export const PlasmicCardConnectedAccount = Object.assign(
  // Top-level PlasmicCardConnectedAccount renders the root element
  makeNodeComponent("parent"),
  {
    // Helper components rendering sub-elements
    cardParent: makeNodeComponent("cardParent"),
    iconTextGroup: makeNodeComponent("iconTextGroup"),
    iconPrimary: makeNodeComponent("iconPrimary"),
    svgIcon6: makeNodeComponent("svgIcon6"),
    svgIcon8: makeNodeComponent("svgIcon8"),
    accountInfoParent: makeNodeComponent("accountInfoParent"),
    accountName: makeNodeComponent("accountName"),
    usernameGroupParent: makeNodeComponent("usernameGroupParent"),
    connectedTimestampParent: makeNodeComponent("connectedTimestampParent"),
    connectedTimestamp: makeNodeComponent("connectedTimestamp"),
    buttonCircleDelete: makeNodeComponent("buttonCircleDelete"),

    // Metadata about props expected for PlasmicCardConnectedAccount
    internalVariantProps: PlasmicCardConnectedAccount__VariantProps,
    internalArgProps: PlasmicCardConnectedAccount__ArgProps
  }
);

export default PlasmicCardConnectedAccount;
/* prettier-ignore-end */
