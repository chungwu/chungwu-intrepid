// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: VybgtOSMy1KgXX
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavbarInternal from "../../NavbarInternal"; // plasmic-import: nBfIHHqHvjUywN9/component
import NavbarPartnerEdit from "../../NavbarPartnerEdit"; // plasmic-import: cfySDEV6eDVdN0/component
import CardHeaderTitleDisplay from "../../CardHeaderTitleDisplay"; // plasmic-import: fk5BRaqICb6MOmt/component
import CardHeaderTitlePrimary from "../../CardHeaderTitlePrimary"; // plasmic-import: qjG0g-Rmz0BeDH/component
import SearchbarPrimary from "../../SearchbarPrimary"; // plasmic-import: i9y9X99bmAqsmFE/component
import SelectDropdownPrimary from "../../SelectDropdownPrimary"; // plasmic-import: v8d0bbfFjkOeuiJ/component
import SelectDropdownPrimary__Option from "../../SelectDropdownPrimary__Option"; // plasmic-import: AqtjodigdxHDQVL/component
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: gpNjXfbD_ZdpPU/component
import TableListingAdminHeader from "../../TableListingAdminHeader"; // plasmic-import: AEcfdxG0mYS8vu/component
import TableListingAdminRecord from "../../TableListingAdminRecord"; // plasmic-import: 84TJaHIjHEsbz7/component
import FooterB from "../../FooterB"; // plasmic-import: IZENTiSL4_zyK8/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: biX3aS42hiG0fF/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicPartnermanagelistings.module.css"; // plasmic-import: VybgtOSMy1KgXX/css

import ListingIcon from "./icons/PlasmicIcon__Listing"; // plasmic-import: V-Z6DuZPre8UBS6/icon

export type PlasmicPartnermanagelistings__VariantMembers = {};

export type PlasmicPartnermanagelistings__VariantsArgs = {};
type VariantPropType = keyof PlasmicPartnermanagelistings__VariantsArgs;
export const PlasmicPartnermanagelistings__VariantProps =
  new Array<VariantPropType>();

export type PlasmicPartnermanagelistings__ArgsType = {};
type ArgPropType = keyof PlasmicPartnermanagelistings__ArgsType;
export const PlasmicPartnermanagelistings__ArgProps = new Array<ArgPropType>();

export type PlasmicPartnermanagelistings__OverridesType = {
  root?: p.Flex<"div">;
  navbarInternal?: p.Flex<typeof NavbarInternal>;
  navbarPartnerEdit?: p.Flex<typeof NavbarPartnerEdit>;
  sectionPartnerManageListingsHeader?: p.Flex<"section">;
  cardHeaderTitleDisplay?: p.Flex<typeof CardHeaderTitleDisplay>;
  sectionPartnerManageListings?: p.Flex<"div">;
  cardHeaderTitlePrimary?: p.Flex<typeof CardHeaderTitlePrimary>;
  listingManagementBlockParent?: p.Flex<"div">;
  listingTotalParent?: p.Flex<"div">;
  listingNumberParent?: p.Flex<"div">;
  listingNumber?: p.Flex<"div">;
  listingSearchFilterParent?: p.Flex<"div">;
  searchbarPrimary?: p.Flex<typeof SearchbarPrimary>;
  listingSearchFilterDropdownParent?: p.Flex<"div">;
  buttonPrimary?: p.Flex<typeof ButtonPrimary>;
  svg?: p.Flex<"svg">;
  listingManagementTableColumnParent?: p.Flex<"div">;
  tableListingAdminHeader?: p.Flex<typeof TableListingAdminHeader>;
  tableListingAdminRecord?: p.Flex<typeof TableListingAdminRecord>;
  footerB?: p.Flex<typeof FooterB>;
};

export interface DefaultPartnermanagelistingsProps {
  dataFetches: PlasmicPartnermanagelistings__Fetches;
}

function PlasmicPartnermanagelistings__RenderFunc(props: {
  variants: PlasmicPartnermanagelistings__VariantsArgs;
  args: PlasmicPartnermanagelistings__ArgsType;
  overrides: PlasmicPartnermanagelistings__OverridesType;
  dataFetches?: PlasmicPartnermanagelistings__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <React.Fragment>
      <Head>
        <title key="title">{""}</title>
        <meta key="og:title" property="og:title" content={""} />
        <meta
          key="description"
          name="description"
          property="og:description"
          content={""}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <NavbarInternal
            data-plasmic-name={"navbarInternal"}
            data-plasmic-override={overrides.navbarInternal}
            className={classNames("__wab_instance", sty.navbarInternal)}
          />

          <NavbarPartnerEdit
            data-plasmic-name={"navbarPartnerEdit"}
            data-plasmic-override={overrides.navbarPartnerEdit}
            className={classNames("__wab_instance", sty.navbarPartnerEdit)}
            navItems={["notifications", "reviews", "messages", "wallet"]}
            selected={"listings" as const}
          />

          <p.Stack
            as={"section"}
            data-plasmic-name={"sectionPartnerManageListingsHeader"}
            data-plasmic-override={overrides.sectionPartnerManageListingsHeader}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              sty.sectionPartnerManageListingsHeader
            )}
          >
            <CardHeaderTitleDisplay
              data-plasmic-name={"cardHeaderTitleDisplay"}
              data-plasmic-override={overrides.cardHeaderTitleDisplay}
              className={classNames(
                "__wab_instance",
                sty.cardHeaderTitleDisplay
              )}
              size={
                hasVariant(globalVariants, "screen", "mobile")
                  ? ("_360" as const)
                  : ("_720" as const)
              }
              slot={
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__bCsV
                  )}
                >
                  {"Manage your listings"}
                </div>
              }
              textDisplay={"Listings"}
              textSubhead={
                "Manage or edit your listings to increase your earnings"
              }
            />
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"sectionPartnerManageListings"}
            data-plasmic-override={overrides.sectionPartnerManageListings}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              sty.sectionPartnerManageListings
            )}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.freeBox__x9Rq1)}
            >
              <CardHeaderTitlePrimary
                data-plasmic-name={"cardHeaderTitlePrimary"}
                data-plasmic-override={overrides.cardHeaderTitlePrimary}
                className={classNames(
                  "__wab_instance",
                  sty.cardHeaderTitlePrimary
                )}
                slot={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__xfROm
                    )}
                  >
                    {"Listings status, price and terms"}
                  </div>
                }
              >
                {"Services"}
              </CardHeaderTitlePrimary>

              <p.Stack
                as={"div"}
                data-plasmic-name={"listingManagementBlockParent"}
                data-plasmic-override={overrides.listingManagementBlockParent}
                hasGap={true}
                className={classNames(
                  defaultcss.all,
                  sty.listingManagementBlockParent
                )}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"listingTotalParent"}
                  data-plasmic-override={overrides.listingTotalParent}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.listingTotalParent)}
                >
                  <div
                    data-plasmic-name={"listingNumberParent"}
                    data-plasmic-override={overrides.listingNumberParent}
                    className={classNames(
                      defaultcss.all,
                      sty.listingNumberParent
                    )}
                  >
                    <div
                      data-plasmic-name={"listingNumber"}
                      data-plasmic-override={overrides.listingNumber}
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.listingNumber
                      )}
                    >
                      {"3"}
                    </div>
                  </div>

                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__osNq6
                    )}
                  >
                    {"Listings"}
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.freeBox___4GEvD)}
                >
                  {(
                    hasVariant(globalVariants, "screen", "mobile") ? true : true
                  ) ? (
                    <div
                      data-plasmic-name={"listingSearchFilterParent"}
                      data-plasmic-override={
                        overrides.listingSearchFilterParent
                      }
                      className={classNames(
                        defaultcss.all,
                        sty.listingSearchFilterParent
                      )}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          defaultcss.all,
                          sty.freeBox__enjQy
                        )}
                      >
                        <SearchbarPrimary
                          data-plasmic-name={"searchbarPrimary"}
                          data-plasmic-override={overrides.searchbarPrimary}
                          className={classNames(
                            "__wab_instance",
                            sty.searchbarPrimary
                          )}
                          width={"_540" as const}
                        />

                        <p.Stack
                          as={"div"}
                          data-plasmic-name={
                            "listingSearchFilterDropdownParent"
                          }
                          data-plasmic-override={
                            overrides.listingSearchFilterDropdownParent
                          }
                          hasGap={true}
                          className={classNames(
                            defaultcss.all,
                            sty.listingSearchFilterDropdownParent
                          )}
                        >
                          <SelectDropdownPrimary
                            className={classNames(
                              "__wab_instance",
                              sty.selectDropdownPrimary___1Ig0E
                            )}
                            placeholder={"Status"}
                            width={"_160" as const}
                          />

                          <SelectDropdownPrimary
                            className={classNames(
                              "__wab_instance",
                              sty.selectDropdownPrimary__hk4Wu
                            )}
                            placeholder={"Content"}
                            width={"_160" as const}
                          />
                        </p.Stack>
                      </p.Stack>

                      <ButtonPrimary
                        data-plasmic-name={"buttonPrimary"}
                        data-plasmic-override={overrides.buttonPrimary}
                        className={classNames(
                          "__wab_instance",
                          sty.buttonPrimary
                        )}
                        color={"brand" as const}
                        size={"_140" as const}
                        svgIcon={
                          <ListingIcon
                            data-plasmic-name={"svg"}
                            data-plasmic-override={overrides.svg}
                            className={classNames(defaultcss.all, sty.svg)}
                            role={"img"}
                          />
                        }
                        type={"icon" as const}
                      >
                        {"New listing"}
                      </ButtonPrimary>
                    </div>
                  ) : null}

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"listingManagementTableColumnParent"}
                    data-plasmic-override={
                      overrides.listingManagementTableColumnParent
                    }
                    hasGap={true}
                    className={classNames(
                      defaultcss.all,
                      sty.listingManagementTableColumnParent
                    )}
                  >
                    <TableListingAdminHeader
                      data-plasmic-name={"tableListingAdminHeader"}
                      data-plasmic-override={overrides.tableListingAdminHeader}
                      className={classNames(
                        "__wab_instance",
                        sty.tableListingAdminHeader
                      )}
                    />

                    <TableListingAdminRecord
                      data-plasmic-name={"tableListingAdminRecord"}
                      data-plasmic-override={overrides.tableListingAdminRecord}
                      className={classNames(
                        "__wab_instance",
                        sty.tableListingAdminRecord
                      )}
                    />
                  </p.Stack>
                </p.Stack>
              </p.Stack>
            </p.Stack>
          </p.Stack>

          <FooterB
            data-plasmic-name={"footerB"}
            data-plasmic-override={overrides.footerB}
            className={classNames("__wab_instance", sty.footerB)}
          />
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbarInternal",
    "navbarPartnerEdit",
    "sectionPartnerManageListingsHeader",
    "cardHeaderTitleDisplay",
    "sectionPartnerManageListings",
    "cardHeaderTitlePrimary",
    "listingManagementBlockParent",
    "listingTotalParent",
    "listingNumberParent",
    "listingNumber",
    "listingSearchFilterParent",
    "searchbarPrimary",
    "listingSearchFilterDropdownParent",
    "buttonPrimary",
    "svg",
    "listingManagementTableColumnParent",
    "tableListingAdminHeader",
    "tableListingAdminRecord",
    "footerB"
  ],
  navbarInternal: ["navbarInternal"],
  navbarPartnerEdit: ["navbarPartnerEdit"],
  sectionPartnerManageListingsHeader: [
    "sectionPartnerManageListingsHeader",
    "cardHeaderTitleDisplay"
  ],
  cardHeaderTitleDisplay: ["cardHeaderTitleDisplay"],
  sectionPartnerManageListings: [
    "sectionPartnerManageListings",
    "cardHeaderTitlePrimary",
    "listingManagementBlockParent",
    "listingTotalParent",
    "listingNumberParent",
    "listingNumber",
    "listingSearchFilterParent",
    "searchbarPrimary",
    "listingSearchFilterDropdownParent",
    "buttonPrimary",
    "svg",
    "listingManagementTableColumnParent",
    "tableListingAdminHeader",
    "tableListingAdminRecord"
  ],
  cardHeaderTitlePrimary: ["cardHeaderTitlePrimary"],
  listingManagementBlockParent: [
    "listingManagementBlockParent",
    "listingTotalParent",
    "listingNumberParent",
    "listingNumber",
    "listingSearchFilterParent",
    "searchbarPrimary",
    "listingSearchFilterDropdownParent",
    "buttonPrimary",
    "svg",
    "listingManagementTableColumnParent",
    "tableListingAdminHeader",
    "tableListingAdminRecord"
  ],
  listingTotalParent: [
    "listingTotalParent",
    "listingNumberParent",
    "listingNumber"
  ],
  listingNumberParent: ["listingNumberParent", "listingNumber"],
  listingNumber: ["listingNumber"],
  listingSearchFilterParent: [
    "listingSearchFilterParent",
    "searchbarPrimary",
    "listingSearchFilterDropdownParent",
    "buttonPrimary",
    "svg"
  ],
  searchbarPrimary: ["searchbarPrimary"],
  listingSearchFilterDropdownParent: ["listingSearchFilterDropdownParent"],
  buttonPrimary: ["buttonPrimary", "svg"],
  svg: ["svg"],
  listingManagementTableColumnParent: [
    "listingManagementTableColumnParent",
    "tableListingAdminHeader",
    "tableListingAdminRecord"
  ],
  tableListingAdminHeader: ["tableListingAdminHeader"],
  tableListingAdminRecord: ["tableListingAdminRecord"],
  footerB: ["footerB"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbarInternal: typeof NavbarInternal;
  navbarPartnerEdit: typeof NavbarPartnerEdit;
  sectionPartnerManageListingsHeader: "section";
  cardHeaderTitleDisplay: typeof CardHeaderTitleDisplay;
  sectionPartnerManageListings: "div";
  cardHeaderTitlePrimary: typeof CardHeaderTitlePrimary;
  listingManagementBlockParent: "div";
  listingTotalParent: "div";
  listingNumberParent: "div";
  listingNumber: "div";
  listingSearchFilterParent: "div";
  searchbarPrimary: typeof SearchbarPrimary;
  listingSearchFilterDropdownParent: "div";
  buttonPrimary: typeof ButtonPrimary;
  svg: "svg";
  listingManagementTableColumnParent: "div";
  tableListingAdminHeader: typeof TableListingAdminHeader;
  tableListingAdminRecord: typeof TableListingAdminRecord;
  footerB: typeof FooterB;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPartnermanagelistings__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPartnermanagelistings__VariantsArgs;
    args?: PlasmicPartnermanagelistings__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicPartnermanagelistings__Fetches;
  } & Omit<PlasmicPartnermanagelistings__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPartnermanagelistings__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPartnermanagelistings__ArgProps,
      internalVariantPropNames: PlasmicPartnermanagelistings__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicPartnermanagelistings__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPartnermanagelistings";
  } else {
    func.displayName = `PlasmicPartnermanagelistings.${nodeName}`;
  }
  return func;
}

export const PlasmicPartnermanagelistings = Object.assign(
  // Top-level PlasmicPartnermanagelistings renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbarInternal: makeNodeComponent("navbarInternal"),
    navbarPartnerEdit: makeNodeComponent("navbarPartnerEdit"),
    sectionPartnerManageListingsHeader: makeNodeComponent(
      "sectionPartnerManageListingsHeader"
    ),
    cardHeaderTitleDisplay: makeNodeComponent("cardHeaderTitleDisplay"),
    sectionPartnerManageListings: makeNodeComponent(
      "sectionPartnerManageListings"
    ),
    cardHeaderTitlePrimary: makeNodeComponent("cardHeaderTitlePrimary"),
    listingManagementBlockParent: makeNodeComponent(
      "listingManagementBlockParent"
    ),
    listingTotalParent: makeNodeComponent("listingTotalParent"),
    listingNumberParent: makeNodeComponent("listingNumberParent"),
    listingNumber: makeNodeComponent("listingNumber"),
    listingSearchFilterParent: makeNodeComponent("listingSearchFilterParent"),
    searchbarPrimary: makeNodeComponent("searchbarPrimary"),
    listingSearchFilterDropdownParent: makeNodeComponent(
      "listingSearchFilterDropdownParent"
    ),
    buttonPrimary: makeNodeComponent("buttonPrimary"),
    svg: makeNodeComponent("svg"),
    listingManagementTableColumnParent: makeNodeComponent(
      "listingManagementTableColumnParent"
    ),
    tableListingAdminHeader: makeNodeComponent("tableListingAdminHeader"),
    tableListingAdminRecord: makeNodeComponent("tableListingAdminRecord"),
    footerB: makeNodeComponent("footerB"),

    // Metadata about props expected for PlasmicPartnermanagelistings
    internalVariantProps: PlasmicPartnermanagelistings__VariantProps,
    internalArgProps: PlasmicPartnermanagelistings__ArgProps
  }
);

export default PlasmicPartnermanagelistings;
/* prettier-ignore-end */
