// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: DkMO_1vRBXO1TM
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: gpNjXfbD_ZdpPU/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicInputFormCardBasic.module.css"; // plasmic-import: DkMO_1vRBXO1TM/css

import PlusBoldIcon from "./icons/PlasmicIcon__PlusBold"; // plasmic-import: lhSEEajPJGZatfD/icon

export type PlasmicInputFormCardBasic__VariantMembers = {
  description: "description";
  border: "border";
};

export type PlasmicInputFormCardBasic__VariantsArgs = {
  description?: SingleBooleanChoiceArg<"description">;
  border?: SingleBooleanChoiceArg<"border">;
};

type VariantPropType = keyof PlasmicInputFormCardBasic__VariantsArgs;
export const PlasmicInputFormCardBasic__VariantProps =
  new Array<VariantPropType>("description", "border");

export type PlasmicInputFormCardBasic__ArgsType = {
  headline?: React.ReactNode;
  subhead?: React.ReactNode;
  description2?: React.ReactNode;
  slot3?: React.ReactNode;
};

type ArgPropType = keyof PlasmicInputFormCardBasic__ArgsType;
export const PlasmicInputFormCardBasic__ArgProps = new Array<ArgPropType>(
  "headline",
  "subhead",
  "description2",
  "slot3"
);

export type PlasmicInputFormCardBasic__OverridesType = {
  root?: p.Flex<"div">;
  parent?: p.Flex<"div">;
  headlineCard?: p.Flex<"div">;
  headlineSubheadParent?: p.Flex<"div">;
  headline?: p.Flex<"div">;
  subheadParent?: p.Flex<"div">;
  descriptionCard?: p.Flex<"div">;
  descriptionParent?: p.Flex<"div">;
};

export interface DefaultInputFormCardBasicProps {
  headline?: React.ReactNode;
  subhead?: React.ReactNode;
  description2?: React.ReactNode;
  slot3?: React.ReactNode;
  description?: SingleBooleanChoiceArg<"description">;
  border?: SingleBooleanChoiceArg<"border">;
  className?: string;
}

function PlasmicInputFormCardBasic__RenderFunc(props: {
  variants: PlasmicInputFormCardBasic__VariantsArgs;
  args: PlasmicInputFormCardBasic__ArgsType;
  overrides: PlasmicInputFormCardBasic__OverridesType;
  dataFetches?: PlasmicInputFormCardBasic__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div
        data-plasmic-name={"parent"}
        data-plasmic-override={overrides.parent}
        className={classNames(defaultcss.all, sty.parent, {
          [sty.parent__border]: hasVariant(variants, "border", "border")
        })}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"headlineCard"}
          data-plasmic-override={overrides.headlineCard}
          hasGap={true}
          className={classNames(defaultcss.all, sty.headlineCard, {
            [sty.headlineCard__border]: hasVariant(variants, "border", "border")
          })}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"headlineSubheadParent"}
            data-plasmic-override={overrides.headlineSubheadParent}
            hasGap={true}
            className={classNames(defaultcss.all, sty.headlineSubheadParent)}
          >
            <div
              data-plasmic-name={"headline"}
              data-plasmic-override={overrides.headline}
              className={classNames(defaultcss.all, sty.headline)}
            >
              {p.renderPlasmicSlot({
                defaultContents: "Headline",
                value: args.headline,
                className: classNames(sty.slotHeadline)
              })}
            </div>

            <div
              data-plasmic-name={"subheadParent"}
              data-plasmic-override={overrides.subheadParent}
              className={classNames(defaultcss.all, sty.subheadParent)}
            >
              {p.renderPlasmicSlot({
                defaultContents: "Sub head",
                value: args.subhead,
                className: classNames(sty.slotSubhead)
              })}
            </div>
          </p.Stack>
        </p.Stack>

        <p.Stack
          as={"div"}
          data-plasmic-name={"descriptionCard"}
          data-plasmic-override={overrides.descriptionCard}
          hasGap={true}
          className={classNames(defaultcss.all, sty.descriptionCard, {
            [sty.descriptionCard__description]: hasVariant(
              variants,
              "description",
              "description"
            )
          })}
        >
          {true ? (
            <div
              data-plasmic-name={"descriptionParent"}
              data-plasmic-override={overrides.descriptionParent}
              className={classNames(defaultcss.all, sty.descriptionParent)}
            >
              {(
                hasVariant(variants, "description", "description")
                  ? false
                  : true
              )
                ? p.renderPlasmicSlot({
                    defaultContents: "Description",
                    value: args.description2,
                    className: classNames(sty.slotDescription2, {
                      [sty.slotDescription2__description]: hasVariant(
                        variants,
                        "description",
                        "description"
                      )
                    })
                  })
                : null}
            </div>
          ) : null}
          {p.renderPlasmicSlot({
            defaultContents: (
              <ButtonPrimary
                className={classNames(
                  "__wab_instance",
                  sty.buttonPrimary__ng5QW
                )}
                size={"_140" as const}
              >
                {"Delete account"}
              </ButtonPrimary>
            ),

            value: args.slot3
          })}
        </p.Stack>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "parent",
    "headlineCard",
    "headlineSubheadParent",
    "headline",
    "subheadParent",
    "descriptionCard",
    "descriptionParent"
  ],
  parent: [
    "parent",
    "headlineCard",
    "headlineSubheadParent",
    "headline",
    "subheadParent",
    "descriptionCard",
    "descriptionParent"
  ],
  headlineCard: [
    "headlineCard",
    "headlineSubheadParent",
    "headline",
    "subheadParent"
  ],
  headlineSubheadParent: ["headlineSubheadParent", "headline", "subheadParent"],
  headline: ["headline"],
  subheadParent: ["subheadParent"],
  descriptionCard: ["descriptionCard", "descriptionParent"],
  descriptionParent: ["descriptionParent"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  parent: "div";
  headlineCard: "div";
  headlineSubheadParent: "div";
  headline: "div";
  subheadParent: "div";
  descriptionCard: "div";
  descriptionParent: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInputFormCardBasic__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicInputFormCardBasic__VariantsArgs;
    args?: PlasmicInputFormCardBasic__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicInputFormCardBasic__Fetches;
  } & Omit<PlasmicInputFormCardBasic__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicInputFormCardBasic__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicInputFormCardBasic__ArgProps,
      internalVariantPropNames: PlasmicInputFormCardBasic__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicInputFormCardBasic__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInputFormCardBasic";
  } else {
    func.displayName = `PlasmicInputFormCardBasic.${nodeName}`;
  }
  return func;
}

export const PlasmicInputFormCardBasic = Object.assign(
  // Top-level PlasmicInputFormCardBasic renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    parent: makeNodeComponent("parent"),
    headlineCard: makeNodeComponent("headlineCard"),
    headlineSubheadParent: makeNodeComponent("headlineSubheadParent"),
    headline: makeNodeComponent("headline"),
    subheadParent: makeNodeComponent("subheadParent"),
    descriptionCard: makeNodeComponent("descriptionCard"),
    descriptionParent: makeNodeComponent("descriptionParent"),

    // Metadata about props expected for PlasmicInputFormCardBasic
    internalVariantProps: PlasmicInputFormCardBasic__VariantProps,
    internalArgProps: PlasmicInputFormCardBasic__ArgProps
  }
);

export default PlasmicInputFormCardBasic;
/* prettier-ignore-end */
