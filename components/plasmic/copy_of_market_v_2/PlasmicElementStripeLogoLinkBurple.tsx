// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: m2ulW01emKV9Vy
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicElementStripeLogoLinkBurple.module.css"; // plasmic-import: m2ulW01emKV9Vy/css

export type PlasmicElementStripeLogoLinkBurple__VariantMembers = {
  size: "_16" | "_18" | "_24" | "_32" | "_36" | "_40" | "_48";
};

export type PlasmicElementStripeLogoLinkBurple__VariantsArgs = {
  size?: SingleChoiceArg<"_16" | "_18" | "_24" | "_32" | "_36" | "_40" | "_48">;
};

type VariantPropType = keyof PlasmicElementStripeLogoLinkBurple__VariantsArgs;
export const PlasmicElementStripeLogoLinkBurple__VariantProps =
  new Array<VariantPropType>("size");

export type PlasmicElementStripeLogoLinkBurple__ArgsType = {};
type ArgPropType = keyof PlasmicElementStripeLogoLinkBurple__ArgsType;
export const PlasmicElementStripeLogoLinkBurple__ArgProps =
  new Array<ArgPropType>();

export type PlasmicElementStripeLogoLinkBurple__OverridesType = {
  stripeLink?: p.Flex<"a"> & Partial<LinkProps>;
  img?: p.Flex<"img">;
};

export interface DefaultElementStripeLogoLinkBurpleProps {
  size?: SingleChoiceArg<"_16" | "_18" | "_24" | "_32" | "_36" | "_40" | "_48">;
  className?: string;
}

function PlasmicElementStripeLogoLinkBurple__RenderFunc(props: {
  variants: PlasmicElementStripeLogoLinkBurple__VariantsArgs;
  args: PlasmicElementStripeLogoLinkBurple__ArgsType;
  overrides: PlasmicElementStripeLogoLinkBurple__OverridesType;
  dataFetches?: PlasmicElementStripeLogoLinkBurple__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.PlasmicLink
      data-plasmic-name={"stripeLink"}
      data-plasmic-override={overrides.stripeLink}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        defaultcss.all,
        projectcss.root_reset,
        sty.stripeLink,
        {
          [sty.stripeLink__size__16]: hasVariant(variants, "size", "_16"),
          [sty.stripeLink__size__18]: hasVariant(variants, "size", "_18"),
          [sty.stripeLink__size__24]: hasVariant(variants, "size", "_24"),
          [sty.stripeLink__size__32]: hasVariant(variants, "size", "_32"),
          [sty.stripeLink__size__36]: hasVariant(variants, "size", "_36"),
          [sty.stripeLink__size__40]: hasVariant(variants, "size", "_40"),
          [sty.stripeLink__size__48]: hasVariant(variants, "size", "_48")
        }
      )}
      component={Link}
      href={"https://stripe.com" as const}
      platform={"nextjs"}
    >
      <img
        data-plasmic-name={"img"}
        data-plasmic-override={overrides.img}
        alt={""}
        className={classNames(defaultcss.img, sty.img, {
          [sty.img__size__16]: hasVariant(variants, "size", "_16"),
          [sty.img__size__18]: hasVariant(variants, "size", "_18"),
          [sty.img__size__24]: hasVariant(variants, "size", "_24"),
          [sty.img__size__32]: hasVariant(variants, "size", "_32"),
          [sty.img__size__36]: hasVariant(variants, "size", "_36"),
          [sty.img__size__40]: hasVariant(variants, "size", "_40"),
          [sty.img__size__48]: hasVariant(variants, "size", "_48")
        })}
        role={"img"}
        src={
          "/plasmic/copy_of_market_v_2/images/stripeWordmarkBlurpleLgpng.png"
        }
      />
    </p.PlasmicLink>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  stripeLink: ["stripeLink", "img"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  stripeLink: "a";
  img: "img";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicElementStripeLogoLinkBurple__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicElementStripeLogoLinkBurple__VariantsArgs;
    args?: PlasmicElementStripeLogoLinkBurple__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicElementStripeLogoLinkBurple__Fetches;
  } & Omit< // Specify variants directly as props
    PlasmicElementStripeLogoLinkBurple__VariantsArgs,
    ReservedPropsType
  > &
    // Specify args directly as props
    Omit<PlasmicElementStripeLogoLinkBurple__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicElementStripeLogoLinkBurple__ArgProps,
      internalVariantPropNames: PlasmicElementStripeLogoLinkBurple__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicElementStripeLogoLinkBurple__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "stripeLink") {
    func.displayName = "PlasmicElementStripeLogoLinkBurple";
  } else {
    func.displayName = `PlasmicElementStripeLogoLinkBurple.${nodeName}`;
  }
  return func;
}

export const PlasmicElementStripeLogoLinkBurple = Object.assign(
  // Top-level PlasmicElementStripeLogoLinkBurple renders the root element
  makeNodeComponent("stripeLink"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicElementStripeLogoLinkBurple
    internalVariantProps: PlasmicElementStripeLogoLinkBurple__VariantProps,
    internalArgProps: PlasmicElementStripeLogoLinkBurple__ArgProps
  }
);

export default PlasmicElementStripeLogoLinkBurple;
/* prettier-ignore-end */
