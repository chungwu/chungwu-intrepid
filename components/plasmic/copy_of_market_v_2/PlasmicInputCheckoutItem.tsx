// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: ajtBfjoVnJk_2T
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import InputCounter from "../../InputCounter"; // plasmic-import: C54BQdlaGdoUfZ/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicInputCheckoutItem.module.css"; // plasmic-import: ajtBfjoVnJk_2T/css

export type PlasmicInputCheckoutItem__VariantMembers = {
  headline: "headline";
  description: "description";
};

export type PlasmicInputCheckoutItem__VariantsArgs = {
  headline?: SingleBooleanChoiceArg<"headline">;
  description?: SingleBooleanChoiceArg<"description">;
};

type VariantPropType = keyof PlasmicInputCheckoutItem__VariantsArgs;
export const PlasmicInputCheckoutItem__VariantProps =
  new Array<VariantPropType>("headline", "description");

export type PlasmicInputCheckoutItem__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
};

type ArgPropType = keyof PlasmicInputCheckoutItem__ArgsType;
export const PlasmicInputCheckoutItem__ArgProps = new Array<ArgPropType>(
  "children",
  "slot",
  "slot2"
);

export type PlasmicInputCheckoutItem__OverridesType = {
  root?: p.Flex<"div">;
  inputCounter?: p.Flex<typeof InputCounter>;
};

export interface DefaultInputCheckoutItemProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  headline?: SingleBooleanChoiceArg<"headline">;
  description?: SingleBooleanChoiceArg<"description">;
  className?: string;
}

function PlasmicInputCheckoutItem__RenderFunc(props: {
  variants: PlasmicInputCheckoutItem__VariantsArgs;
  args: PlasmicInputCheckoutItem__ArgsType;
  overrides: PlasmicInputCheckoutItem__OverridesType;
  dataFetches?: PlasmicInputCheckoutItem__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      {(hasVariant(variants, "headline", "headline") ? false : true) ? (
        <div
          className={classNames(defaultcss.all, sty.freeBox__aOsw, {
            [sty.freeBox__headline__aOsWrlXBd]: hasVariant(
              variants,
              "headline",
              "headline"
            )
          })}
        >
          <div
            className={classNames(defaultcss.all, sty.freeBox__zXaa, {
              [sty.freeBox__headline__zXaarlXBd]: hasVariant(
                variants,
                "headline",
                "headline"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: "Headline",
              value: args.slot2,
              className: classNames(sty.slotSlot2)
            })}
          </div>
        </div>
      ) : null}

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.freeBox__qkWTg)}
      >
        <div className={classNames(defaultcss.all, sty.freeBox__kvPyt)}>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.freeBox__uNxHj)}
          >
            <div className={classNames(defaultcss.all, sty.freeBox___7HtK)}>
              {p.renderPlasmicSlot({
                defaultContents: "Item",
                value: args.slot,
                className: classNames(sty.slotSlot)
              })}
            </div>
          </p.Stack>

          <InputCounter
            data-plasmic-name={"inputCounter"}
            data-plasmic-override={overrides.inputCounter}
            className={classNames("__wab_instance", sty.inputCounter)}
          />
        </div>

        {(hasVariant(variants, "description", "description") ? false : true) ? (
          <div
            className={classNames(defaultcss.all, sty.freeBox__beW9, {
              [sty.freeBox__description__beW9ZftZc]: hasVariant(
                variants,
                "description",
                "description"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: "Description",
              value: args.children,
              className: classNames(sty.slotChildren, {
                [sty.slotChildren__description]: hasVariant(
                  variants,
                  "description",
                  "description"
                )
              })
            })}
          </div>
        ) : null}
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "inputCounter"],
  inputCounter: ["inputCounter"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  inputCounter: typeof InputCounter;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInputCheckoutItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicInputCheckoutItem__VariantsArgs;
    args?: PlasmicInputCheckoutItem__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicInputCheckoutItem__Fetches;
  } & Omit<PlasmicInputCheckoutItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicInputCheckoutItem__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicInputCheckoutItem__ArgProps,
      internalVariantPropNames: PlasmicInputCheckoutItem__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicInputCheckoutItem__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInputCheckoutItem";
  } else {
    func.displayName = `PlasmicInputCheckoutItem.${nodeName}`;
  }
  return func;
}

export const PlasmicInputCheckoutItem = Object.assign(
  // Top-level PlasmicInputCheckoutItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    inputCounter: makeNodeComponent("inputCounter"),

    // Metadata about props expected for PlasmicInputCheckoutItem
    internalVariantProps: PlasmicInputCheckoutItem__VariantProps,
    internalArgProps: PlasmicInputCheckoutItem__ArgProps
  }
);

export default PlasmicInputCheckoutItem;
/* prettier-ignore-end */
