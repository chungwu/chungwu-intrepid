// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: GOi2fER7xMDJsT
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: gpNjXfbD_ZdpPU/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: biX3aS42hiG0fF/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicCardCta.module.css"; // plasmic-import: GOi2fER7xMDJsT/css

import PlusBoldIcon from "./icons/PlasmicIcon__PlusBold"; // plasmic-import: lhSEEajPJGZatfD/icon

export type PlasmicCardCta__VariantMembers = {
  center: "center";
};

export type PlasmicCardCta__VariantsArgs = {
  center?: SingleBooleanChoiceArg<"center">;
};

type VariantPropType = keyof PlasmicCardCta__VariantsArgs;
export const PlasmicCardCta__VariantProps = new Array<VariantPropType>(
  "center"
);

export type PlasmicCardCta__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
};

type ArgPropType = keyof PlasmicCardCta__ArgsType;
export const PlasmicCardCta__ArgProps = new Array<ArgPropType>(
  "children",
  "slot",
  "slot2"
);

export type PlasmicCardCta__OverridesType = {
  root?: p.Flex<"div">;
  headlineSubHeadline?: p.Flex<"div">;
  buttonPrimary?: p.Flex<typeof ButtonPrimary>;
};

export interface DefaultCardCtaProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  center?: SingleBooleanChoiceArg<"center">;
  className?: string;
}

function PlasmicCardCta__RenderFunc(props: {
  variants: PlasmicCardCta__VariantsArgs;
  args: PlasmicCardCta__ArgsType;
  overrides: PlasmicCardCta__OverridesType;
  dataFetches?: PlasmicCardCta__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__center]: hasVariant(variants, "center", "center")
      })}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.freeBox__be0T)}
      >
        <div className={classNames(defaultcss.all, sty.freeBox__hJQmB)}>
          <div className={classNames(defaultcss.all, sty.freeBox__sAruj)}>
            {p.renderPlasmicSlot({
              defaultContents: "Business Analytics",
              value: args.slot2,
              className: classNames(sty.slotSlot2, {
                [sty.slotSlot2__center]: hasVariant(
                  variants,
                  "center",
                  "center"
                )
              })
            })}
          </div>
        </div>

        <div className={classNames(defaultcss.all, sty.freeBox___7WSoV)}>
          <p.Stack
            as={"div"}
            data-plasmic-name={"headlineSubHeadline"}
            data-plasmic-override={overrides.headlineSubHeadline}
            hasGap={true}
            className={classNames(defaultcss.all, sty.headlineSubHeadline)}
          >
            <div className={classNames(defaultcss.all, sty.freeBox__vkgcm)}>
              <div className={classNames(defaultcss.all, sty.freeBox__gt5Qr)}>
                {p.renderPlasmicSlot({
                  defaultContents:
                    "Manage and grow your business like never before",
                  value: args.children,
                  className: classNames(sty.slotChildren, {
                    [sty.slotChildren__center]: hasVariant(
                      variants,
                      "center",
                      "center"
                    )
                  })
                })}
              </div>
            </div>

            <div className={classNames(defaultcss.all, sty.freeBox__snzJ3)}>
              <div className={classNames(defaultcss.all, sty.freeBox___7Mi6V)}>
                {p.renderPlasmicSlot({
                  defaultContents:
                    "Gain the insights you need to growâ€”use a single dashboard to manage orders, projects, reviews, and payments from anywhere.\n",
                  value: args.slot,
                  className: classNames(sty.slotSlot, {
                    [sty.slotSlot__center]: hasVariant(
                      variants,
                      "center",
                      "center"
                    )
                  })
                })}
              </div>
            </div>
          </p.Stack>
        </div>
      </p.Stack>

      <ButtonPrimary
        data-plasmic-name={"buttonPrimary"}
        data-plasmic-override={overrides.buttonPrimary}
        className={classNames("__wab_instance", sty.buttonPrimary)}
        color={"brand" as const}
        size={"_140" as const}
      >
        {hasVariant(globalVariants, "screen", "desktop")
          ? "Apply to partner"
          : "Start free trial"}
      </ButtonPrimary>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "headlineSubHeadline", "buttonPrimary"],
  headlineSubHeadline: ["headlineSubHeadline"],
  buttonPrimary: ["buttonPrimary"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  headlineSubHeadline: "div";
  buttonPrimary: typeof ButtonPrimary;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCardCta__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCardCta__VariantsArgs;
    args?: PlasmicCardCta__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicCardCta__Fetches;
  } & Omit<PlasmicCardCta__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCardCta__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCardCta__ArgProps,
      internalVariantPropNames: PlasmicCardCta__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicCardCta__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCardCta";
  } else {
    func.displayName = `PlasmicCardCta.${nodeName}`;
  }
  return func;
}

export const PlasmicCardCta = Object.assign(
  // Top-level PlasmicCardCta renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headlineSubHeadline: makeNodeComponent("headlineSubHeadline"),
    buttonPrimary: makeNodeComponent("buttonPrimary"),

    // Metadata about props expected for PlasmicCardCta
    internalVariantProps: PlasmicCardCta__VariantProps,
    internalArgProps: PlasmicCardCta__ArgProps
  }
);

export default PlasmicCardCta;
/* prettier-ignore-end */
