// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: v8d0bbfFjkOeuiJ
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as pp from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import SelectDropdownPrimary__Overlay from "../../SelectDropdownPrimary__Overlay"; // plasmic-import: 0lNdCjWo_JFWVDW/component
import SelectDropdownPrimary__Option from "../../SelectDropdownPrimary__Option"; // plasmic-import: AqtjodigdxHDQVL/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicSelectDropdownPrimary.module.css"; // plasmic-import: v8d0bbfFjkOeuiJ/css

import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: 9P8ZmWdZvn64SyT/icon
import ChevronUpIcon from "./icons/PlasmicIcon__ChevronUp"; // plasmic-import: 3i05kImfGzNoq3d/icon

export type PlasmicSelectDropdownPrimary__VariantMembers = {
  width:
    | "_90"
    | "_120"
    | "_144"
    | "_160"
    | "_180"
    | "_270"
    | "_360"
    | "_540"
    | "_720";
  showPlaceholder: "showPlaceholder";
  isOpen: "isOpen";
  isDisabled: "isDisabled";
  color: "light";
};

export type PlasmicSelectDropdownPrimary__VariantsArgs = {
  width?: SingleChoiceArg<
    | "_90"
    | "_120"
    | "_144"
    | "_160"
    | "_180"
    | "_270"
    | "_360"
    | "_540"
    | "_720"
  >;
  showPlaceholder?: SingleBooleanChoiceArg<"showPlaceholder">;
  isOpen?: SingleBooleanChoiceArg<"isOpen">;
  isDisabled?: SingleBooleanChoiceArg<"isDisabled">;
  color?: SingleChoiceArg<"light">;
};

type VariantPropType = keyof PlasmicSelectDropdownPrimary__VariantsArgs;
export const PlasmicSelectDropdownPrimary__VariantProps =
  new Array<VariantPropType>(
    "width",
    "showPlaceholder",
    "isOpen",
    "isDisabled",
    "color"
  );

export type PlasmicSelectDropdownPrimary__ArgsType = {
  selectedContent?: React.ReactNode;
  placeholder?: React.ReactNode;
  children?: React.ReactNode;
  value?: string;
  name?: string;
};

type ArgPropType = keyof PlasmicSelectDropdownPrimary__ArgsType;
export const PlasmicSelectDropdownPrimary__ArgProps = new Array<ArgPropType>(
  "selectedContent",
  "placeholder",
  "children",
  "value",
  "name"
);

export type PlasmicSelectDropdownPrimary__OverridesType = {
  root?: p.Flex<"div">;
  trigger?: p.Flex<"button">;
  contentContainer?: p.Flex<"div">;
  dropdownIcon?: p.Flex<"svg">;
  overlay?: p.Flex<typeof SelectDropdownPrimary__Overlay>;
  optionsContainer?: p.Flex<"div">;
};

export interface DefaultSelectDropdownPrimaryProps extends pp.BaseSelectProps {
  width?: SingleChoiceArg<
    | "_90"
    | "_120"
    | "_144"
    | "_160"
    | "_180"
    | "_270"
    | "_360"
    | "_540"
    | "_720"
  >;
  color?: SingleChoiceArg<"light">;
}

const PlasmicSelectDropdownPrimaryContext = React.createContext<
  | undefined
  | {
      variants: PlasmicSelectDropdownPrimary__VariantsArgs;
      args: PlasmicSelectDropdownPrimary__ArgsType;
    }
>(undefined);

function PlasmicSelectDropdownPrimary__RenderFunc(props: {
  variants: PlasmicSelectDropdownPrimary__VariantsArgs;
  args: PlasmicSelectDropdownPrimary__ArgsType;
  overrides: PlasmicSelectDropdownPrimary__OverridesType;
  dataFetches?: PlasmicSelectDropdownPrimary__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const [isRootFocusVisibleWithin, triggerRootFocusVisibleWithinProps] =
    useTrigger("useFocusVisibleWithin", {
      isTextInput: false
    });

  const triggers = {
    focusVisibleWithin_root: isRootFocusVisibleWithin
  };

  return (
    <PlasmicSelectDropdownPrimaryContext.Provider value={{ variants, args }}>
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
          [sty.root__isOpen]: hasVariant(variants, "isOpen", "isOpen"),
          [sty.root__width__270]: hasVariant(variants, "width", "_270"),
          [sty.root__width__720]: hasVariant(variants, "width", "_720")
        })}
        data-plasmic-trigger-props={[triggerRootFocusVisibleWithinProps]}
      >
        <p.Stack
          as={"button"}
          data-plasmic-name={"trigger"}
          data-plasmic-override={overrides.trigger}
          hasGap={true}
          className={classNames(defaultcss.button, sty.trigger, {
            [sty.trigger_____focusVisibleWithin]:
              triggers.focusVisibleWithin_root,
            [sty.trigger__color_light]: hasVariant(variants, "color", "light"),
            [sty.trigger__isDisabled]: hasVariant(
              variants,
              "isDisabled",
              "isDisabled"
            ),
            [sty.trigger__isOpen]: hasVariant(variants, "isOpen", "isOpen"),
            [sty.trigger__showPlaceholder]: hasVariant(
              variants,
              "showPlaceholder",
              "showPlaceholder"
            ),
            [sty.trigger__width__120]: hasVariant(variants, "width", "_120"),
            [sty.trigger__width__144]: hasVariant(variants, "width", "_144"),
            [sty.trigger__width__160]: hasVariant(variants, "width", "_160"),
            [sty.trigger__width__180]: hasVariant(variants, "width", "_180"),
            [sty.trigger__width__270]: hasVariant(variants, "width", "_270"),
            [sty.trigger__width__360]: hasVariant(variants, "width", "_360"),
            [sty.trigger__width__540]: hasVariant(variants, "width", "_540"),
            [sty.trigger__width__720]: hasVariant(variants, "width", "_720"),
            [sty.trigger__width__90]: hasVariant(variants, "width", "_90")
          })}
          disabled={
            hasVariant(variants, "isDisabled", "isDisabled") ? true : undefined
          }
        >
          <div
            data-plasmic-name={"contentContainer"}
            data-plasmic-override={overrides.contentContainer}
            className={classNames(defaultcss.all, sty.contentContainer, {
              [sty.contentContainer__showPlaceholder]: hasVariant(
                variants,
                "showPlaceholder",
                "showPlaceholder"
              ),
              [sty.contentContainer__width__160]: hasVariant(
                variants,
                "width",
                "_160"
              )
            })}
          >
            {(
              hasVariant(variants, "showPlaceholder", "showPlaceholder")
                ? false
                : true
            )
              ? p.renderPlasmicSlot({
                  defaultContents: "Selected",
                  value: args.selectedContent,
                  className: classNames(sty.slotSelectedContent, {
                    [sty.slotSelectedContent__isOpen]: hasVariant(
                      variants,
                      "isOpen",
                      "isOpen"
                    ),
                    [sty.slotSelectedContent__showPlaceholder]: hasVariant(
                      variants,
                      "showPlaceholder",
                      "showPlaceholder"
                    )
                  })
                })
              : null}
            {(
              hasVariant(variants, "showPlaceholder", "showPlaceholder")
                ? true
                : false
            )
              ? p.renderPlasmicSlot({
                  defaultContents: "Select...",
                  value: args.placeholder,
                  className: classNames(sty.slotPlaceholder, {
                    [sty.slotPlaceholder__showPlaceholder]: hasVariant(
                      variants,
                      "showPlaceholder",
                      "showPlaceholder"
                    ),
                    [sty.slotPlaceholder__width__90]: hasVariant(
                      variants,
                      "width",
                      "_90"
                    )
                  })
                })
              : null}
          </div>

          <p.PlasmicIcon
            data-plasmic-name={"dropdownIcon"}
            data-plasmic-override={overrides.dropdownIcon}
            PlasmicIconType={
              hasVariant(variants, "isOpen", "isOpen")
                ? ChevronUpIcon
                : ChevronDownIcon
            }
            className={classNames(defaultcss.all, sty.dropdownIcon, {
              [sty.dropdownIcon_____focusVisibleWithin]:
                triggers.focusVisibleWithin_root,
              [sty.dropdownIcon__isOpen]: hasVariant(
                variants,
                "isOpen",
                "isOpen"
              ),
              [sty.dropdownIcon__width__160]: hasVariant(
                variants,
                "width",
                "_160"
              )
            })}
            role={"img"}
          />
        </p.Stack>

        {(hasVariant(variants, "isOpen", "isOpen") ? true : false) ? (
          <SelectDropdownPrimary__Overlay
            data-plasmic-name={"overlay"}
            data-plasmic-override={overrides.overlay}
            className={classNames("__wab_instance", sty.overlay, {
              [sty.overlay__isOpen]: hasVariant(variants, "isOpen", "isOpen")
            })}
            relativePlacement={"bottom" as const}
          >
            <div
              data-plasmic-name={"optionsContainer"}
              data-plasmic-override={overrides.optionsContainer}
              className={classNames(defaultcss.all, sty.optionsContainer)}
            >
              {p.renderPlasmicSlot({
                defaultContents: (
                  <React.Fragment>
                    <SelectDropdownPrimary__Option
                      className={classNames(
                        "__wab_instance",
                        sty.option__glfey
                      )}
                      value={"value1" as const}
                    >
                      {"Option 1"}
                    </SelectDropdownPrimary__Option>

                    <SelectDropdownPrimary__Option
                      className={classNames("__wab_instance", sty.option__yZj)}
                      value={"value2" as const}
                    >
                      {"Option 2"}
                    </SelectDropdownPrimary__Option>
                  </React.Fragment>
                ),
                value: args.children
              })}
            </div>
          </SelectDropdownPrimary__Overlay>
        ) : null}
      </div>
    </PlasmicSelectDropdownPrimaryContext.Provider>
  ) as React.ReactElement | null;
}

function useBehavior<P extends pp.BaseSelectProps>(
  props: P,
  ref: pp.SelectRef
) {
  if (!("children" in props)) {
    props = {
      ...props,
      children: (
        <React.Fragment>
          <SelectDropdownPrimary__Option
            className={classNames("__wab_instance", sty.option__glfey)}
            value={"value1" as const}
          >
            {"Option 1"}
          </SelectDropdownPrimary__Option>

          <SelectDropdownPrimary__Option
            className={classNames("__wab_instance", sty.option__yZj)}
            value={"value2" as const}
          >
            {"Option 2"}
          </SelectDropdownPrimary__Option>
        </React.Fragment>
      )
    };
  }

  return pp.useSelect(
    PlasmicSelectDropdownPrimary,
    props,
    {
      isOpenVariant: { group: "isOpen", variant: "isOpen" },
      placeholderVariant: {
        group: "showPlaceholder",
        variant: "showPlaceholder"
      },
      isDisabledVariant: { group: "isDisabled", variant: "isDisabled" },
      triggerContentSlot: "selectedContent",
      optionsSlot: "children",
      placeholderSlot: "placeholder",
      root: "root",
      trigger: "trigger",
      overlay: "overlay",
      optionsContainer: "optionsContainer"
    },

    ref
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "trigger",
    "contentContainer",
    "dropdownIcon",
    "overlay",
    "optionsContainer"
  ],
  trigger: ["trigger", "contentContainer", "dropdownIcon"],
  contentContainer: ["contentContainer"],
  dropdownIcon: ["dropdownIcon"],
  overlay: ["overlay", "optionsContainer"],
  optionsContainer: ["optionsContainer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  trigger: "button";
  contentContainer: "div";
  dropdownIcon: "svg";
  overlay: typeof SelectDropdownPrimary__Overlay;
  optionsContainer: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSelectDropdownPrimary__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSelectDropdownPrimary__VariantsArgs;
    args?: PlasmicSelectDropdownPrimary__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicSelectDropdownPrimary__Fetches;
  } & Omit<PlasmicSelectDropdownPrimary__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSelectDropdownPrimary__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSelectDropdownPrimary__ArgProps,
      internalVariantPropNames: PlasmicSelectDropdownPrimary__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicSelectDropdownPrimary__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSelectDropdownPrimary";
  } else {
    func.displayName = `PlasmicSelectDropdownPrimary.${nodeName}`;
  }
  return func;
}

export const PlasmicSelectDropdownPrimary = Object.assign(
  // Top-level PlasmicSelectDropdownPrimary renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    trigger: makeNodeComponent("trigger"),
    contentContainer: makeNodeComponent("contentContainer"),
    dropdownIcon: makeNodeComponent("dropdownIcon"),
    overlay: makeNodeComponent("overlay"),
    optionsContainer: makeNodeComponent("optionsContainer"),

    // Metadata about props expected for PlasmicSelectDropdownPrimary
    internalVariantProps: PlasmicSelectDropdownPrimary__VariantProps,
    internalArgProps: PlasmicSelectDropdownPrimary__ArgProps,

    // Context for sub components
    Context: PlasmicSelectDropdownPrimaryContext,

    useBehavior
  }
);

export default PlasmicSelectDropdownPrimary;
/* prettier-ignore-end */
