// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: laETBZLk4uH4Z
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavbarInternal from "../../NavbarInternal"; // plasmic-import: nBfIHHqHvjUywN9/component
import SectionTeamProfileHero from "../../SectionTeamProfileHero"; // plasmic-import: nlgUW1bliso_lZ/component
import NavbarTeamUserProfile from "../../NavbarTeamUserProfile"; // plasmic-import: p7xKZbn5aYyGic/component
import UserAvatar from "../../UserAvatar"; // plasmic-import: kWaJrwe3c90GY1/component
import BadgeVerification from "../../BadgeVerification"; // plasmic-import: _0UAhyxjhw8Dnc9/component
import TagPartnerD from "../../TagPartnerD"; // plasmic-import: oP3_LL4xXepZaZN/component
import RatingDisplayDetail from "../../RatingDisplayDetail"; // plasmic-import: EZFFldQYBrJIX/component
import IconPrimary from "../../IconPrimary"; // plasmic-import: leoxU5GkcMHMK8X/component
import ChipBadgeDisplay from "../../ChipBadgeDisplay"; // plasmic-import: SSFk1BeJq0HW6X/component
import IconSocialProfile from "../../IconSocialProfile"; // plasmic-import: _qRaKUFCQia4l9Z/component
import CardUserprofile from "../../CardUserprofile"; // plasmic-import: RoZ08K4SWkjSRTC/component
import FooterB from "../../FooterB"; // plasmic-import: IZENTiSL4_zyK8/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: biX3aS42hiG0fF/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicTeamprofile.module.css"; // plasmic-import: laETBZLk4uH4Z/css

import Icon171Icon from "./icons/PlasmicIcon__Icon171"; // plasmic-import: L1T0WWEIfF6hPBd/icon
import LocationBIcon from "./icons/PlasmicIcon__LocationB"; // plasmic-import: XM_2eGEzAdwZrPe/icon
import LocationIcon from "./icons/PlasmicIcon__Location"; // plasmic-import: xjfa0WXXQAMnNc9/icon
import LanguagesIcon from "./icons/PlasmicIcon__Languages"; // plasmic-import: tix4hI0OA-I4zoi/icon
import UserIdIcon from "./icons/PlasmicIcon__UserId"; // plasmic-import: WF9J2wcGAxSm_08/icon
import PlusBoldIcon from "./icons/PlasmicIcon__PlusBold"; // plasmic-import: lhSEEajPJGZatfD/icon
import Icon114Icon from "./icons/PlasmicIcon__Icon114"; // plasmic-import: VfXaOZlZvq_xDZf/icon
import Icon170Icon from "./icons/PlasmicIcon__Icon170"; // plasmic-import: 8dZnFQrWLcwMPnF/icon

export type PlasmicTeamprofile__VariantMembers = {};

export type PlasmicTeamprofile__VariantsArgs = {};
type VariantPropType = keyof PlasmicTeamprofile__VariantsArgs;
export const PlasmicTeamprofile__VariantProps = new Array<VariantPropType>();

export type PlasmicTeamprofile__ArgsType = {};
type ArgPropType = keyof PlasmicTeamprofile__ArgsType;
export const PlasmicTeamprofile__ArgProps = new Array<ArgPropType>();

export type PlasmicTeamprofile__OverridesType = {
  root?: p.Flex<"div">;
  navbarInternal?: p.Flex<typeof NavbarInternal>;
  sectionTeamProfileHero?: p.Flex<typeof SectionTeamProfileHero>;
  navbarTeamUserProfile?: p.Flex<typeof NavbarTeamUserProfile>;
  teamAboutInfoSection?: p.Flex<"div">;
  profileAboutParent?: p.Flex<"div">;
  about?: p.Flex<"div">;
  textParent?: p.Flex<"div">;
  text170Characters?: p.Flex<"div">;
  profileCommunityParent?: p.Flex<"div">;
  community?: p.Flex<"div">;
  statsParent?: p.Flex<"div">;
  memberStatParent?: p.Flex<"div">;
  memberNumberCount?: p.Flex<"div">;
  partnerStatParent?: p.Flex<"div">;
  partnerNumberCount?: p.Flex<"div">;
  followersStatParent?: p.Flex<"div">;
  followingNumberCount?: p.Flex<"div">;
  viewsStatParent?: p.Flex<"div">;
  viewsNumberCount?: p.Flex<"div">;
  reactsStatParent?: p.Flex<"div">;
  reactsNumberCount?: p.Flex<"div">;
  savesStatParent?: p.Flex<"div">;
  savesNumberCount?: p.Flex<"div">;
  teamTeamCommunitySection?: p.Flex<"div">;
  profileTeamParent?: p.Flex<"div">;
  team?: p.Flex<"div">;
  teamMemberparent?: p.Flex<"div">;
  linkTeamViewAllParent?: p.Flex<"div">;
  linkTeamViewAll?: p.Flex<"a"> & Partial<LinkProps>;
  profileInformationParent?: p.Flex<"div">;
  details?: p.Flex<"div">;
  textParent5?: p.Flex<"div">;
  memberBadges?: p.Flex<"div">;
  badgeVerification?: p.Flex<typeof BadgeVerification>;
  tagPartnerD?: p.Flex<typeof TagPartnerD>;
  ratingDisplayDetail?: p.Flex<typeof RatingDisplayDetail>;
  locationCityCountry?: p.Flex<"div">;
  svgIcon3?: p.Flex<"svg">;
  location2?: p.Flex<"div">;
  cityText2?: p.Flex<"div">;
  countryText?: p.Flex<"div">;
  languagesAb?: p.Flex<"div">;
  svgIcon21?: p.Flex<"svg">;
  languageParent?: p.Flex<"div">;
  languageA?: p.Flex<"div">;
  languageB?: p.Flex<"div">;
  membershipDateTimestamp?: p.Flex<"div">;
  svgIcon20?: p.Flex<"svg">;
  membershipParent?: p.Flex<"div">;
  memberTextLabel?: p.Flex<"div">;
  dateTimestampParent?: p.Flex<"div">;
  teamIndustrySocialSection?: p.Flex<"div">;
  companyAttributesParent?: p.Flex<"div">;
  profileIndustryParent?: p.Flex<"div">;
  industry?: p.Flex<"div">;
  textParent6?: p.Flex<"div">;
  profileCategoriesParent?: p.Flex<"div">;
  categories?: p.Flex<"div">;
  categoryBadgeParent?: p.Flex<"div">;
  profileSkillsParent?: p.Flex<"div">;
  skillsTextparent?: p.Flex<"div">;
  skills?: p.Flex<"div">;
  skillsBadgeParent?: p.Flex<"div">;
  profileSocialParent?: p.Flex<"div">;
  social?: p.Flex<"div">;
  socialIconsParent?: p.Flex<"div">;
  sectionPartnerSimilarPartners?: p.Flex<"div">;
  profileTeamCarousellParentB?: p.Flex<"div">;
  headlineMembersAlsoViewed2?: p.Flex<"div">;
  similarPartnersparenT?: p.Flex<"div">;
  sectionPartnerAlsoViewed?: p.Flex<"div">;
  profileTeamCarousellParentA?: p.Flex<"div">;
  headlineMembersAlsoViewed?: p.Flex<"div">;
  alsoViewedParent?: p.Flex<"div">;
  footerB?: p.Flex<typeof FooterB>;
};

export interface DefaultTeamprofileProps {
  dataFetches: PlasmicTeamprofile__Fetches;
}

function PlasmicTeamprofile__RenderFunc(props: {
  variants: PlasmicTeamprofile__VariantsArgs;
  args: PlasmicTeamprofile__ArgsType;
  overrides: PlasmicTeamprofile__OverridesType;
  dataFetches?: PlasmicTeamprofile__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <React.Fragment>
      <Head>
        <title key="title">{""}</title>
        <meta key="og:title" property="og:title" content={""} />
        <meta
          key="description"
          name="description"
          property="og:description"
          content={""}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <NavbarInternal
            data-plasmic-name={"navbarInternal"}
            data-plasmic-override={overrides.navbarInternal}
            className={classNames("__wab_instance", sty.navbarInternal)}
          />

          <SectionTeamProfileHero
            data-plasmic-name={"sectionTeamProfileHero"}
            data-plasmic-override={overrides.sectionTeamProfileHero}
            className={classNames("__wab_instance", sty.sectionTeamProfileHero)}
          />

          <NavbarTeamUserProfile
            data-plasmic-name={"navbarTeamUserProfile"}
            data-plasmic-override={overrides.navbarTeamUserProfile}
            className={classNames("__wab_instance", sty.navbarTeamUserProfile)}
            selected={
              hasVariant(globalVariants, "screen", "desktop")
                ? ("about" as const)
                : undefined
            }
          />

          <p.Stack
            as={"div"}
            data-plasmic-name={"teamAboutInfoSection"}
            data-plasmic-override={overrides.teamAboutInfoSection}
            hasGap={true}
            className={classNames(defaultcss.all, sty.teamAboutInfoSection)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"profileAboutParent"}
              data-plasmic-override={overrides.profileAboutParent}
              hasGap={true}
              className={classNames(defaultcss.all, sty.profileAboutParent)}
            >
              <div
                data-plasmic-name={"about"}
                data-plasmic-override={overrides.about}
                className={classNames(defaultcss.all, sty.about)}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__zRwel
                  )}
                >
                  {"About"}
                </div>
              </div>

              <div
                data-plasmic-name={"textParent"}
                data-plasmic-override={overrides.textParent}
                className={classNames(defaultcss.all, sty.textParent)}
              >
                <div
                  data-plasmic-name={"text170Characters"}
                  data-plasmic-override={overrides.text170Characters}
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.text170Characters
                  )}
                >
                  {
                    "One morning, when Gregor Samsa woke from troubled dreams, he found himself transformed in his bed into a horrible vermin. He lay on his armour-like ba"
                  }
                </div>
              </div>
            </p.Stack>

            <p.Stack
              as={"div"}
              data-plasmic-name={"profileCommunityParent"}
              data-plasmic-override={overrides.profileCommunityParent}
              hasGap={true}
              className={classNames(defaultcss.all, sty.profileCommunityParent)}
            >
              <div
                data-plasmic-name={"community"}
                data-plasmic-override={overrides.community}
                className={classNames(defaultcss.all, sty.community)}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__ha1FV
                  )}
                >
                  {"Community"}
                </div>
              </div>

              <p.Stack
                as={"div"}
                data-plasmic-name={"statsParent"}
                data-plasmic-override={overrides.statsParent}
                hasGap={true}
                className={classNames(defaultcss.all, sty.statsParent)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"memberStatParent"}
                  data-plasmic-override={overrides.memberStatParent}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.memberStatParent)}
                >
                  <div
                    data-plasmic-name={"memberNumberCount"}
                    data-plasmic-override={overrides.memberNumberCount}
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.memberNumberCount
                    )}
                  >
                    {"####"}
                  </div>

                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox___0BFw
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobile")
                      ? "Subscribers"
                      : hasVariant(globalVariants, "screen", "desktop")
                      ? "Subscribers"
                      : "Members"}
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"partnerStatParent"}
                  data-plasmic-override={overrides.partnerStatParent}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.partnerStatParent)}
                >
                  <div
                    data-plasmic-name={"partnerNumberCount"}
                    data-plasmic-override={overrides.partnerNumberCount}
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.partnerNumberCount
                    )}
                  >
                    {"####"}
                  </div>

                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox___45Wd
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "desktop")
                      ? "Connections"
                      : "Partners"}
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"followersStatParent"}
                  data-plasmic-override={overrides.followersStatParent}
                  hasGap={true}
                  className={classNames(
                    defaultcss.all,
                    sty.followersStatParent
                  )}
                >
                  <div
                    data-plasmic-name={"followingNumberCount"}
                    data-plasmic-override={overrides.followingNumberCount}
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.followingNumberCount
                    )}
                  >
                    {"####"}
                  </div>

                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__dZ1WD
                    )}
                  >
                    {"Followers"}
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"viewsStatParent"}
                  data-plasmic-override={overrides.viewsStatParent}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.viewsStatParent)}
                >
                  <div
                    data-plasmic-name={"viewsNumberCount"}
                    data-plasmic-override={overrides.viewsNumberCount}
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.viewsNumberCount
                    )}
                  >
                    {"####"}
                  </div>

                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__ae1J
                    )}
                  >
                    {"Views"}
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"reactsStatParent"}
                  data-plasmic-override={overrides.reactsStatParent}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.reactsStatParent)}
                >
                  <div
                    data-plasmic-name={"reactsNumberCount"}
                    data-plasmic-override={overrides.reactsNumberCount}
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.reactsNumberCount
                    )}
                  >
                    {"####"}
                  </div>

                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__dhu4S
                    )}
                  >
                    {"Reacts"}
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"savesStatParent"}
                  data-plasmic-override={overrides.savesStatParent}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.savesStatParent)}
                >
                  <div
                    data-plasmic-name={"savesNumberCount"}
                    data-plasmic-override={overrides.savesNumberCount}
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.savesNumberCount
                    )}
                  >
                    {"####"}
                  </div>

                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__gLHy
                    )}
                  >
                    {"Saves"}
                  </div>
                </p.Stack>
              </p.Stack>
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"teamTeamCommunitySection"}
            data-plasmic-override={overrides.teamTeamCommunitySection}
            hasGap={true}
            className={classNames(defaultcss.all, sty.teamTeamCommunitySection)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"profileTeamParent"}
              data-plasmic-override={overrides.profileTeamParent}
              hasGap={true}
              className={classNames(defaultcss.all, sty.profileTeamParent)}
            >
              <div
                data-plasmic-name={"team"}
                data-plasmic-override={overrides.team}
                className={classNames(defaultcss.all, sty.team)}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__wTqI
                  )}
                >
                  {"Team"}
                </div>
              </div>

              <p.Stack
                as={"div"}
                data-plasmic-name={"teamMemberparent"}
                data-plasmic-override={overrides.teamMemberparent}
                hasGap={true}
                className={classNames(defaultcss.all, sty.teamMemberparent)}
              >
                <UserAvatar
                  className={classNames(
                    "__wab_instance",
                    sty.userAvatar__cvj3L
                  )}
                  size={"_48" as const}
                />

                <UserAvatar
                  className={classNames("__wab_instance", sty.userAvatar__tPVw)}
                  size={"_48" as const}
                />

                <UserAvatar
                  className={classNames(
                    "__wab_instance",
                    sty.userAvatar__wUrbg
                  )}
                  size={"_48" as const}
                />

                <UserAvatar
                  className={classNames(
                    "__wab_instance",
                    sty.userAvatar__sQaJm
                  )}
                  size={"_48" as const}
                />

                <UserAvatar
                  className={classNames(
                    "__wab_instance",
                    sty.userAvatar__foEWm
                  )}
                  size={"_48" as const}
                />

                <UserAvatar
                  className={classNames(
                    "__wab_instance",
                    sty.userAvatar__nd1DO
                  )}
                  size={"_48" as const}
                />

                <UserAvatar
                  className={classNames("__wab_instance", sty.userAvatar__x9Uu)}
                  size={"_48" as const}
                />

                <UserAvatar
                  className={classNames(
                    "__wab_instance",
                    sty.userAvatar__qf90O
                  )}
                  size={"_48" as const}
                />

                <UserAvatar
                  className={classNames(
                    "__wab_instance",
                    sty.userAvatar___962Un
                  )}
                  size={"_48" as const}
                />

                <UserAvatar
                  className={classNames("__wab_instance", sty.userAvatar__diUe)}
                  size={"_48" as const}
                />
              </p.Stack>

              <div
                data-plasmic-name={"linkTeamViewAllParent"}
                data-plasmic-override={overrides.linkTeamViewAllParent}
                className={classNames(
                  defaultcss.all,
                  sty.linkTeamViewAllParent
                )}
              >
                <p.PlasmicLink
                  data-plasmic-name={"linkTeamViewAll"}
                  data-plasmic-override={overrides.linkTeamViewAll}
                  className={classNames(defaultcss.all, sty.linkTeamViewAll)}
                  component={Link}
                  platform={"nextjs"}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__o6GS
                    )}
                  >
                    {"View all team members"}
                  </div>
                </p.PlasmicLink>
              </div>
            </p.Stack>

            <p.Stack
              as={"div"}
              data-plasmic-name={"profileInformationParent"}
              data-plasmic-override={overrides.profileInformationParent}
              hasGap={true}
              className={classNames(
                defaultcss.all,
                sty.profileInformationParent
              )}
            >
              <div className={classNames(defaultcss.all, sty.freeBox__npFcc)}>
                <div
                  data-plasmic-name={"details"}
                  data-plasmic-override={overrides.details}
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.details
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobile")
                    ? "Details"
                    : hasVariant(globalVariants, "screen", "desktop")
                    ? "Details"
                    : "Information"}
                </div>
              </div>

              <p.Stack
                as={"div"}
                data-plasmic-name={"textParent5"}
                data-plasmic-override={overrides.textParent5}
                hasGap={true}
                className={classNames(defaultcss.all, sty.textParent5)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"memberBadges"}
                  data-plasmic-override={overrides.memberBadges}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.memberBadges)}
                >
                  <BadgeVerification
                    data-plasmic-name={"badgeVerification"}
                    data-plasmic-override={overrides.badgeVerification}
                  />

                  <div
                    className={classNames(defaultcss.all, sty.freeBox__gYi3G)}
                  >
                    <TagPartnerD
                      data-plasmic-name={"tagPartnerD"}
                      data-plasmic-override={overrides.tagPartnerD}
                    />
                  </div>

                  <div
                    className={classNames(defaultcss.all, sty.freeBox___89MXa)}
                  >
                    <RatingDisplayDetail
                      data-plasmic-name={"ratingDisplayDetail"}
                      data-plasmic-override={overrides.ratingDisplayDetail}
                    />
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"locationCityCountry"}
                  data-plasmic-override={overrides.locationCityCountry}
                  hasGap={true}
                  className={classNames(
                    defaultcss.all,
                    sty.locationCityCountry
                  )}
                >
                  <IconPrimary
                    className={classNames(
                      "__wab_instance",
                      sty.iconPrimary___6KsvF
                    )}
                    size={"_16Px" as const}
                    svgIcon16Px={
                      <p.PlasmicIcon
                        data-plasmic-name={"svgIcon3"}
                        data-plasmic-override={overrides.svgIcon3}
                        PlasmicIconType={
                          hasVariant(globalVariants, "screen", "desktop")
                            ? LocationIcon
                            : LocationBIcon
                        }
                        className={classNames(defaultcss.all, sty.svgIcon3)}
                        role={"img"}
                      />
                    }
                  />

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"location2"}
                    data-plasmic-override={overrides.location2}
                    hasGap={true}
                    className={classNames(defaultcss.all, sty.location2)}
                  >
                    <div
                      data-plasmic-name={"cityText2"}
                      data-plasmic-override={overrides.cityText2}
                      className={classNames(defaultcss.all, sty.cityText2)}
                    >
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.freeBox__h8Xl2
                        )}
                      >
                        {"cityName"}
                      </div>

                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.freeBox__b5RCq
                        )}
                      >
                        {","}
                      </div>
                    </div>

                    <div
                      data-plasmic-name={"countryText"}
                      data-plasmic-override={overrides.countryText}
                      className={classNames(defaultcss.all, sty.countryText)}
                    >
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.freeBox___27Cq
                        )}
                      >
                        {"countryName"}
                      </div>
                    </div>
                  </p.Stack>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"languagesAb"}
                  data-plasmic-override={overrides.languagesAb}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.languagesAb)}
                >
                  <IconPrimary
                    className={classNames(
                      "__wab_instance",
                      sty.iconPrimary__wapIf
                    )}
                    size={"_16Px" as const}
                    svgIcon16Px={
                      <LanguagesIcon
                        data-plasmic-name={"svgIcon21"}
                        data-plasmic-override={overrides.svgIcon21}
                        className={classNames(defaultcss.all, sty.svgIcon21)}
                        role={"img"}
                      />
                    }
                  />

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"languageParent"}
                    data-plasmic-override={overrides.languageParent}
                    hasGap={true}
                    className={classNames(defaultcss.all, sty.languageParent)}
                  >
                    <div
                      data-plasmic-name={"languageA"}
                      data-plasmic-override={overrides.languageA}
                      className={classNames(defaultcss.all, sty.languageA)}
                    >
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.freeBox__f9YFd
                        )}
                      >
                        {"languageA"}
                      </div>
                    </div>

                    <div
                      data-plasmic-name={"languageB"}
                      data-plasmic-override={overrides.languageB}
                      className={classNames(defaultcss.all, sty.languageB)}
                    >
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.freeBox__bx6Dt
                        )}
                      >
                        {"languageB"}
                      </div>
                    </div>
                  </p.Stack>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"membershipDateTimestamp"}
                  data-plasmic-override={overrides.membershipDateTimestamp}
                  hasGap={true}
                  className={classNames(
                    defaultcss.all,
                    sty.membershipDateTimestamp
                  )}
                >
                  <IconPrimary
                    className={classNames(
                      "__wab_instance",
                      sty.iconPrimary___0TB4Q
                    )}
                    size={"_16Px" as const}
                    svgIcon16Px={
                      <UserIdIcon
                        data-plasmic-name={"svgIcon20"}
                        data-plasmic-override={overrides.svgIcon20}
                        className={classNames(defaultcss.all, sty.svgIcon20)}
                        role={"img"}
                      />
                    }
                  />

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"membershipParent"}
                    data-plasmic-override={overrides.membershipParent}
                    hasGap={true}
                    className={classNames(defaultcss.all, sty.membershipParent)}
                  >
                    <div
                      data-plasmic-name={"memberTextLabel"}
                      data-plasmic-override={overrides.memberTextLabel}
                      className={classNames(
                        defaultcss.all,
                        sty.memberTextLabel
                      )}
                    >
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.freeBox__tlXbz
                        )}
                      >
                        {"Member since"}
                      </div>
                    </div>

                    <div
                      data-plasmic-name={"dateTimestampParent"}
                      data-plasmic-override={overrides.dateTimestampParent}
                      className={classNames(
                        defaultcss.all,
                        sty.dateTimestampParent
                      )}
                    >
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.freeBox__p99Rw
                        )}
                      >
                        {"[dateTimestamp]"}
                      </div>
                    </div>
                  </p.Stack>
                </p.Stack>
              </p.Stack>
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"teamIndustrySocialSection"}
            data-plasmic-override={overrides.teamIndustrySocialSection}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              sty.teamIndustrySocialSection
            )}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"companyAttributesParent"}
              data-plasmic-override={overrides.companyAttributesParent}
              hasGap={true}
              className={classNames(
                defaultcss.all,
                sty.companyAttributesParent
              )}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"profileIndustryParent"}
                data-plasmic-override={overrides.profileIndustryParent}
                hasGap={true}
                className={classNames(
                  defaultcss.all,
                  sty.profileIndustryParent
                )}
              >
                <div className={classNames(defaultcss.all, sty.freeBox__qT6WX)}>
                  <div
                    data-plasmic-name={"industry"}
                    data-plasmic-override={overrides.industry}
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.industry
                    )}
                  >
                    {"Industry"}
                  </div>
                </div>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"textParent6"}
                  data-plasmic-override={overrides.textParent6}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.textParent6)}
                >
                  <ChipBadgeDisplay
                    className={classNames(
                      "__wab_instance",
                      sty.chipBadgeDisplay__p3QLm
                    )}
                    color={"brand" as const}
                    type={"ghost" as const}
                  />

                  <ChipBadgeDisplay
                    className={classNames(
                      "__wab_instance",
                      sty.chipBadgeDisplay__defsu
                    )}
                    color={"brand" as const}
                    type={"ghost" as const}
                  />
                </p.Stack>
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"profileCategoriesParent"}
                data-plasmic-override={overrides.profileCategoriesParent}
                hasGap={true}
                className={classNames(
                  defaultcss.all,
                  sty.profileCategoriesParent
                )}
              >
                <div className={classNames(defaultcss.all, sty.freeBox___1ReM)}>
                  <div
                    data-plasmic-name={"categories"}
                    data-plasmic-override={overrides.categories}
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.categories
                    )}
                  >
                    {"Categories"}
                  </div>
                </div>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"categoryBadgeParent"}
                  data-plasmic-override={overrides.categoryBadgeParent}
                  hasGap={true}
                  className={classNames(
                    defaultcss.all,
                    sty.categoryBadgeParent
                  )}
                >
                  <ChipBadgeDisplay
                    className={classNames(
                      "__wab_instance",
                      sty.chipBadgeDisplay__aEkbl
                    )}
                    color={"brand" as const}
                    type={"ghost" as const}
                  />

                  <ChipBadgeDisplay
                    className={classNames(
                      "__wab_instance",
                      sty.chipBadgeDisplay__qgUiO
                    )}
                    color={"brand" as const}
                    type={"ghost" as const}
                  />

                  <ChipBadgeDisplay
                    className={classNames(
                      "__wab_instance",
                      sty.chipBadgeDisplay__iR0R
                    )}
                    color={"brand" as const}
                    type={"ghost" as const}
                  />
                </p.Stack>
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"profileSkillsParent"}
                data-plasmic-override={overrides.profileSkillsParent}
                hasGap={true}
                className={classNames(defaultcss.all, sty.profileSkillsParent)}
              >
                <div
                  data-plasmic-name={"skillsTextparent"}
                  data-plasmic-override={overrides.skillsTextparent}
                  className={classNames(defaultcss.all, sty.skillsTextparent)}
                >
                  <div
                    data-plasmic-name={"skills"}
                    data-plasmic-override={overrides.skills}
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.skills
                    )}
                  >
                    {"Skills"}
                  </div>
                </div>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"skillsBadgeParent"}
                  data-plasmic-override={overrides.skillsBadgeParent}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.skillsBadgeParent)}
                >
                  <ChipBadgeDisplay
                    className={classNames(
                      "__wab_instance",
                      sty.chipBadgeDisplay__ltuu0
                    )}
                    color={"brand" as const}
                    type={"ghost" as const}
                  />

                  <ChipBadgeDisplay
                    className={classNames(
                      "__wab_instance",
                      sty.chipBadgeDisplay__lejfV
                    )}
                    color={"brand" as const}
                    type={"ghost" as const}
                  />

                  <ChipBadgeDisplay
                    className={classNames(
                      "__wab_instance",
                      sty.chipBadgeDisplay__xNr3F
                    )}
                    color={"brand" as const}
                    type={"ghost" as const}
                  />

                  <ChipBadgeDisplay
                    className={classNames(
                      "__wab_instance",
                      sty.chipBadgeDisplay__iEb1R
                    )}
                    color={"brand" as const}
                    type={"ghost" as const}
                  />

                  <ChipBadgeDisplay
                    className={classNames(
                      "__wab_instance",
                      sty.chipBadgeDisplay___0KPli
                    )}
                    color={"brand" as const}
                    type={"ghost" as const}
                  />
                </p.Stack>
              </p.Stack>
            </p.Stack>

            <p.Stack
              as={"div"}
              data-plasmic-name={"profileSocialParent"}
              data-plasmic-override={overrides.profileSocialParent}
              hasGap={true}
              className={classNames(defaultcss.all, sty.profileSocialParent)}
            >
              <div className={classNames(defaultcss.all, sty.freeBox__xdWni)}>
                <div
                  data-plasmic-name={"social"}
                  data-plasmic-override={overrides.social}
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.social
                  )}
                >
                  {"Social"}
                </div>
              </div>

              <p.Stack
                as={"div"}
                data-plasmic-name={"socialIconsParent"}
                data-plasmic-override={overrides.socialIconsParent}
                hasGap={true}
                className={classNames(defaultcss.all, sty.socialIconsParent)}
              >
                <IconSocialProfile
                  className={classNames(
                    "__wab_instance",
                    sty.iconSocialProfile__yPkYi
                  )}
                  size={"_45X45" as const}
                />

                <IconSocialProfile
                  className={classNames(
                    "__wab_instance",
                    sty.iconSocialProfile___0YAqv
                  )}
                  size={"_45X45" as const}
                />

                <IconSocialProfile
                  className={classNames(
                    "__wab_instance",
                    sty.iconSocialProfile__ldi4M
                  )}
                  size={"_45X45" as const}
                />

                <IconSocialProfile
                  className={classNames(
                    "__wab_instance",
                    sty.iconSocialProfile__jnvSm
                  )}
                  size={"_45X45" as const}
                />

                <IconSocialProfile
                  className={classNames(
                    "__wab_instance",
                    sty.iconSocialProfile__eMk18
                  )}
                  size={"_45X45" as const}
                />

                <IconSocialProfile
                  className={classNames(
                    "__wab_instance",
                    sty.iconSocialProfile___8V5J8
                  )}
                  size={"_45X45" as const}
                />

                <IconSocialProfile
                  className={classNames(
                    "__wab_instance",
                    sty.iconSocialProfile___0XKsp
                  )}
                  size={"_45X45" as const}
                />

                <IconSocialProfile
                  className={classNames(
                    "__wab_instance",
                    sty.iconSocialProfile__aBxE
                  )}
                  size={"_45X45" as const}
                />

                <IconSocialProfile
                  className={classNames(
                    "__wab_instance",
                    sty.iconSocialProfile__bbepe
                  )}
                  size={"_45X45" as const}
                />

                <IconSocialProfile
                  className={classNames(
                    "__wab_instance",
                    sty.iconSocialProfile__fmgKc
                  )}
                  size={"_45X45" as const}
                />
              </p.Stack>
            </p.Stack>
          </p.Stack>

          {(
            hasVariant(globalVariants, "screen", "mobile")
              ? true
              : hasVariant(globalVariants, "screen", "desktop")
              ? true
              : false
          ) ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"sectionPartnerSimilarPartners"}
              data-plasmic-override={overrides.sectionPartnerSimilarPartners}
              hasGap={true}
              className={classNames(
                defaultcss.all,
                sty.sectionPartnerSimilarPartners
              )}
            >
              {(
                hasVariant(globalVariants, "screen", "desktop") ? true : true
              ) ? (
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"profileTeamCarousellParentB"}
                  data-plasmic-override={overrides.profileTeamCarousellParentB}
                  hasGap={true}
                  className={classNames(
                    defaultcss.all,
                    sty.profileTeamCarousellParentB
                  )}
                >
                  <div
                    data-plasmic-name={"headlineMembersAlsoViewed2"}
                    data-plasmic-override={overrides.headlineMembersAlsoViewed2}
                    className={classNames(
                      defaultcss.all,
                      sty.headlineMembersAlsoViewed2
                    )}
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox__mjjBp
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobile")
                        ? "Similar partners"
                        : hasVariant(globalVariants, "screen", "desktop")
                        ? "Similar Partners"
                        : "Team"}
                    </div>
                  </div>

                  {(
                    hasVariant(globalVariants, "screen", "mobile") ? true : true
                  ) ? (
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"similarPartnersparenT"}
                      data-plasmic-override={overrides.similarPartnersparenT}
                      hasGap={true}
                      className={classNames(
                        defaultcss.all,
                        sty.similarPartnersparenT
                      )}
                    >
                      {(
                        hasVariant(globalVariants, "screen", "mobile")
                          ? true
                          : hasVariant(globalVariants, "screen", "desktop")
                          ? true
                          : false
                      ) ? (
                        <CardUserprofile
                          className={classNames(
                            "__wab_instance",
                            sty.cardUserprofile__gxca6
                          )}
                        />
                      ) : null}
                      {(
                        hasVariant(globalVariants, "screen", "mobile")
                          ? true
                          : hasVariant(globalVariants, "screen", "desktop")
                          ? true
                          : false
                      ) ? (
                        <CardUserprofile
                          className={classNames(
                            "__wab_instance",
                            sty.cardUserprofile__i1PMg
                          )}
                        />
                      ) : null}
                      {(
                        hasVariant(globalVariants, "screen", "mobile")
                          ? true
                          : hasVariant(globalVariants, "screen", "desktop")
                          ? true
                          : false
                      ) ? (
                        <CardUserprofile
                          className={classNames(
                            "__wab_instance",
                            sty.cardUserprofile__d1F3J
                          )}
                        />
                      ) : null}
                      {(
                        hasVariant(globalVariants, "screen", "mobile")
                          ? true
                          : hasVariant(globalVariants, "screen", "desktop")
                          ? true
                          : false
                      ) ? (
                        <CardUserprofile
                          className={classNames(
                            "__wab_instance",
                            sty.cardUserprofile___22HD4
                          )}
                        />
                      ) : null}
                      {(
                        hasVariant(globalVariants, "screen", "mobile")
                          ? true
                          : hasVariant(globalVariants, "screen", "desktop")
                          ? true
                          : false
                      ) ? (
                        <CardUserprofile
                          className={classNames(
                            "__wab_instance",
                            sty.cardUserprofile__xiymp
                          )}
                        />
                      ) : null}
                    </p.Stack>
                  ) : null}
                </p.Stack>
              ) : null}
            </p.Stack>
          ) : null}
          {(
            hasVariant(globalVariants, "screen", "mobile")
              ? true
              : hasVariant(globalVariants, "screen", "desktop")
              ? true
              : true
          ) ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"sectionPartnerAlsoViewed"}
              data-plasmic-override={overrides.sectionPartnerAlsoViewed}
              hasGap={true}
              className={classNames(
                defaultcss.all,
                sty.sectionPartnerAlsoViewed
              )}
            >
              {(
                hasVariant(globalVariants, "screen", "desktop") ? true : true
              ) ? (
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"profileTeamCarousellParentA"}
                  data-plasmic-override={overrides.profileTeamCarousellParentA}
                  hasGap={true}
                  className={classNames(
                    defaultcss.all,
                    sty.profileTeamCarousellParentA
                  )}
                >
                  <div
                    data-plasmic-name={"headlineMembersAlsoViewed"}
                    data-plasmic-override={overrides.headlineMembersAlsoViewed}
                    className={classNames(
                      defaultcss.all,
                      sty.headlineMembersAlsoViewed
                    )}
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox__dQ9I
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobile")
                        ? "Members also viewed"
                        : hasVariant(globalVariants, "screen", "desktop")
                        ? "Members also viewed"
                        : "Team"}
                    </div>
                  </div>

                  {(
                    hasVariant(globalVariants, "screen", "mobile") ? true : true
                  ) ? (
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"alsoViewedParent"}
                      data-plasmic-override={overrides.alsoViewedParent}
                      hasGap={true}
                      className={classNames(
                        defaultcss.all,
                        sty.alsoViewedParent
                      )}
                    >
                      {(
                        hasVariant(globalVariants, "screen", "mobile")
                          ? true
                          : hasVariant(globalVariants, "screen", "desktop")
                          ? true
                          : false
                      ) ? (
                        <CardUserprofile
                          className={classNames(
                            "__wab_instance",
                            sty.cardUserprofile___6ZtLs
                          )}
                        />
                      ) : null}
                      {(
                        hasVariant(globalVariants, "screen", "mobile")
                          ? true
                          : hasVariant(globalVariants, "screen", "desktop")
                          ? true
                          : false
                      ) ? (
                        <CardUserprofile
                          className={classNames(
                            "__wab_instance",
                            sty.cardUserprofile__gKoso
                          )}
                        />
                      ) : null}
                      {(
                        hasVariant(globalVariants, "screen", "mobile")
                          ? true
                          : hasVariant(globalVariants, "screen", "desktop")
                          ? true
                          : false
                      ) ? (
                        <CardUserprofile
                          className={classNames(
                            "__wab_instance",
                            sty.cardUserprofile__heunp
                          )}
                        />
                      ) : null}
                      {(
                        hasVariant(globalVariants, "screen", "mobile")
                          ? true
                          : hasVariant(globalVariants, "screen", "desktop")
                          ? true
                          : false
                      ) ? (
                        <CardUserprofile
                          className={classNames(
                            "__wab_instance",
                            sty.cardUserprofile___7Tct
                          )}
                        />
                      ) : null}
                      {(
                        hasVariant(globalVariants, "screen", "mobile")
                          ? true
                          : hasVariant(globalVariants, "screen", "desktop")
                          ? true
                          : false
                      ) ? (
                        <CardUserprofile
                          className={classNames(
                            "__wab_instance",
                            sty.cardUserprofile__yUxXf
                          )}
                        />
                      ) : null}
                    </p.Stack>
                  ) : null}
                </p.Stack>
              ) : null}
            </p.Stack>
          ) : null}

          <FooterB
            data-plasmic-name={"footerB"}
            data-plasmic-override={overrides.footerB}
            className={classNames("__wab_instance", sty.footerB)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbarInternal",
    "sectionTeamProfileHero",
    "navbarTeamUserProfile",
    "teamAboutInfoSection",
    "profileAboutParent",
    "about",
    "textParent",
    "text170Characters",
    "profileCommunityParent",
    "community",
    "statsParent",
    "memberStatParent",
    "memberNumberCount",
    "partnerStatParent",
    "partnerNumberCount",
    "followersStatParent",
    "followingNumberCount",
    "viewsStatParent",
    "viewsNumberCount",
    "reactsStatParent",
    "reactsNumberCount",
    "savesStatParent",
    "savesNumberCount",
    "teamTeamCommunitySection",
    "profileTeamParent",
    "team",
    "teamMemberparent",
    "linkTeamViewAllParent",
    "linkTeamViewAll",
    "profileInformationParent",
    "details",
    "textParent5",
    "memberBadges",
    "badgeVerification",
    "tagPartnerD",
    "ratingDisplayDetail",
    "locationCityCountry",
    "svgIcon3",
    "location2",
    "cityText2",
    "countryText",
    "languagesAb",
    "svgIcon21",
    "languageParent",
    "languageA",
    "languageB",
    "membershipDateTimestamp",
    "svgIcon20",
    "membershipParent",
    "memberTextLabel",
    "dateTimestampParent",
    "teamIndustrySocialSection",
    "companyAttributesParent",
    "profileIndustryParent",
    "industry",
    "textParent6",
    "profileCategoriesParent",
    "categories",
    "categoryBadgeParent",
    "profileSkillsParent",
    "skillsTextparent",
    "skills",
    "skillsBadgeParent",
    "profileSocialParent",
    "social",
    "socialIconsParent",
    "sectionPartnerSimilarPartners",
    "profileTeamCarousellParentB",
    "headlineMembersAlsoViewed2",
    "similarPartnersparenT",
    "sectionPartnerAlsoViewed",
    "profileTeamCarousellParentA",
    "headlineMembersAlsoViewed",
    "alsoViewedParent",
    "footerB"
  ],
  navbarInternal: ["navbarInternal"],
  sectionTeamProfileHero: ["sectionTeamProfileHero"],
  navbarTeamUserProfile: ["navbarTeamUserProfile"],
  teamAboutInfoSection: [
    "teamAboutInfoSection",
    "profileAboutParent",
    "about",
    "textParent",
    "text170Characters",
    "profileCommunityParent",
    "community",
    "statsParent",
    "memberStatParent",
    "memberNumberCount",
    "partnerStatParent",
    "partnerNumberCount",
    "followersStatParent",
    "followingNumberCount",
    "viewsStatParent",
    "viewsNumberCount",
    "reactsStatParent",
    "reactsNumberCount",
    "savesStatParent",
    "savesNumberCount"
  ],
  profileAboutParent: [
    "profileAboutParent",
    "about",
    "textParent",
    "text170Characters"
  ],
  about: ["about"],
  textParent: ["textParent", "text170Characters"],
  text170Characters: ["text170Characters"],
  profileCommunityParent: [
    "profileCommunityParent",
    "community",
    "statsParent",
    "memberStatParent",
    "memberNumberCount",
    "partnerStatParent",
    "partnerNumberCount",
    "followersStatParent",
    "followingNumberCount",
    "viewsStatParent",
    "viewsNumberCount",
    "reactsStatParent",
    "reactsNumberCount",
    "savesStatParent",
    "savesNumberCount"
  ],
  community: ["community"],
  statsParent: [
    "statsParent",
    "memberStatParent",
    "memberNumberCount",
    "partnerStatParent",
    "partnerNumberCount",
    "followersStatParent",
    "followingNumberCount",
    "viewsStatParent",
    "viewsNumberCount",
    "reactsStatParent",
    "reactsNumberCount",
    "savesStatParent",
    "savesNumberCount"
  ],
  memberStatParent: ["memberStatParent", "memberNumberCount"],
  memberNumberCount: ["memberNumberCount"],
  partnerStatParent: ["partnerStatParent", "partnerNumberCount"],
  partnerNumberCount: ["partnerNumberCount"],
  followersStatParent: ["followersStatParent", "followingNumberCount"],
  followingNumberCount: ["followingNumberCount"],
  viewsStatParent: ["viewsStatParent", "viewsNumberCount"],
  viewsNumberCount: ["viewsNumberCount"],
  reactsStatParent: ["reactsStatParent", "reactsNumberCount"],
  reactsNumberCount: ["reactsNumberCount"],
  savesStatParent: ["savesStatParent", "savesNumberCount"],
  savesNumberCount: ["savesNumberCount"],
  teamTeamCommunitySection: [
    "teamTeamCommunitySection",
    "profileTeamParent",
    "team",
    "teamMemberparent",
    "linkTeamViewAllParent",
    "linkTeamViewAll",
    "profileInformationParent",
    "details",
    "textParent5",
    "memberBadges",
    "badgeVerification",
    "tagPartnerD",
    "ratingDisplayDetail",
    "locationCityCountry",
    "svgIcon3",
    "location2",
    "cityText2",
    "countryText",
    "languagesAb",
    "svgIcon21",
    "languageParent",
    "languageA",
    "languageB",
    "membershipDateTimestamp",
    "svgIcon20",
    "membershipParent",
    "memberTextLabel",
    "dateTimestampParent"
  ],
  profileTeamParent: [
    "profileTeamParent",
    "team",
    "teamMemberparent",
    "linkTeamViewAllParent",
    "linkTeamViewAll"
  ],
  team: ["team"],
  teamMemberparent: ["teamMemberparent"],
  linkTeamViewAllParent: ["linkTeamViewAllParent", "linkTeamViewAll"],
  linkTeamViewAll: ["linkTeamViewAll"],
  profileInformationParent: [
    "profileInformationParent",
    "details",
    "textParent5",
    "memberBadges",
    "badgeVerification",
    "tagPartnerD",
    "ratingDisplayDetail",
    "locationCityCountry",
    "svgIcon3",
    "location2",
    "cityText2",
    "countryText",
    "languagesAb",
    "svgIcon21",
    "languageParent",
    "languageA",
    "languageB",
    "membershipDateTimestamp",
    "svgIcon20",
    "membershipParent",
    "memberTextLabel",
    "dateTimestampParent"
  ],
  details: ["details"],
  textParent5: [
    "textParent5",
    "memberBadges",
    "badgeVerification",
    "tagPartnerD",
    "ratingDisplayDetail",
    "locationCityCountry",
    "svgIcon3",
    "location2",
    "cityText2",
    "countryText",
    "languagesAb",
    "svgIcon21",
    "languageParent",
    "languageA",
    "languageB",
    "membershipDateTimestamp",
    "svgIcon20",
    "membershipParent",
    "memberTextLabel",
    "dateTimestampParent"
  ],
  memberBadges: [
    "memberBadges",
    "badgeVerification",
    "tagPartnerD",
    "ratingDisplayDetail"
  ],
  badgeVerification: ["badgeVerification"],
  tagPartnerD: ["tagPartnerD"],
  ratingDisplayDetail: ["ratingDisplayDetail"],
  locationCityCountry: [
    "locationCityCountry",
    "svgIcon3",
    "location2",
    "cityText2",
    "countryText"
  ],
  svgIcon3: ["svgIcon3"],
  location2: ["location2", "cityText2", "countryText"],
  cityText2: ["cityText2"],
  countryText: ["countryText"],
  languagesAb: [
    "languagesAb",
    "svgIcon21",
    "languageParent",
    "languageA",
    "languageB"
  ],
  svgIcon21: ["svgIcon21"],
  languageParent: ["languageParent", "languageA", "languageB"],
  languageA: ["languageA"],
  languageB: ["languageB"],
  membershipDateTimestamp: [
    "membershipDateTimestamp",
    "svgIcon20",
    "membershipParent",
    "memberTextLabel",
    "dateTimestampParent"
  ],
  svgIcon20: ["svgIcon20"],
  membershipParent: [
    "membershipParent",
    "memberTextLabel",
    "dateTimestampParent"
  ],
  memberTextLabel: ["memberTextLabel"],
  dateTimestampParent: ["dateTimestampParent"],
  teamIndustrySocialSection: [
    "teamIndustrySocialSection",
    "companyAttributesParent",
    "profileIndustryParent",
    "industry",
    "textParent6",
    "profileCategoriesParent",
    "categories",
    "categoryBadgeParent",
    "profileSkillsParent",
    "skillsTextparent",
    "skills",
    "skillsBadgeParent",
    "profileSocialParent",
    "social",
    "socialIconsParent"
  ],
  companyAttributesParent: [
    "companyAttributesParent",
    "profileIndustryParent",
    "industry",
    "textParent6",
    "profileCategoriesParent",
    "categories",
    "categoryBadgeParent",
    "profileSkillsParent",
    "skillsTextparent",
    "skills",
    "skillsBadgeParent"
  ],
  profileIndustryParent: ["profileIndustryParent", "industry", "textParent6"],
  industry: ["industry"],
  textParent6: ["textParent6"],
  profileCategoriesParent: [
    "profileCategoriesParent",
    "categories",
    "categoryBadgeParent"
  ],
  categories: ["categories"],
  categoryBadgeParent: ["categoryBadgeParent"],
  profileSkillsParent: [
    "profileSkillsParent",
    "skillsTextparent",
    "skills",
    "skillsBadgeParent"
  ],
  skillsTextparent: ["skillsTextparent", "skills"],
  skills: ["skills"],
  skillsBadgeParent: ["skillsBadgeParent"],
  profileSocialParent: ["profileSocialParent", "social", "socialIconsParent"],
  social: ["social"],
  socialIconsParent: ["socialIconsParent"],
  sectionPartnerSimilarPartners: [
    "sectionPartnerSimilarPartners",
    "profileTeamCarousellParentB",
    "headlineMembersAlsoViewed2",
    "similarPartnersparenT"
  ],
  profileTeamCarousellParentB: [
    "profileTeamCarousellParentB",
    "headlineMembersAlsoViewed2",
    "similarPartnersparenT"
  ],
  headlineMembersAlsoViewed2: ["headlineMembersAlsoViewed2"],
  similarPartnersparenT: ["similarPartnersparenT"],
  sectionPartnerAlsoViewed: [
    "sectionPartnerAlsoViewed",
    "profileTeamCarousellParentA",
    "headlineMembersAlsoViewed",
    "alsoViewedParent"
  ],
  profileTeamCarousellParentA: [
    "profileTeamCarousellParentA",
    "headlineMembersAlsoViewed",
    "alsoViewedParent"
  ],
  headlineMembersAlsoViewed: ["headlineMembersAlsoViewed"],
  alsoViewedParent: ["alsoViewedParent"],
  footerB: ["footerB"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbarInternal: typeof NavbarInternal;
  sectionTeamProfileHero: typeof SectionTeamProfileHero;
  navbarTeamUserProfile: typeof NavbarTeamUserProfile;
  teamAboutInfoSection: "div";
  profileAboutParent: "div";
  about: "div";
  textParent: "div";
  text170Characters: "div";
  profileCommunityParent: "div";
  community: "div";
  statsParent: "div";
  memberStatParent: "div";
  memberNumberCount: "div";
  partnerStatParent: "div";
  partnerNumberCount: "div";
  followersStatParent: "div";
  followingNumberCount: "div";
  viewsStatParent: "div";
  viewsNumberCount: "div";
  reactsStatParent: "div";
  reactsNumberCount: "div";
  savesStatParent: "div";
  savesNumberCount: "div";
  teamTeamCommunitySection: "div";
  profileTeamParent: "div";
  team: "div";
  teamMemberparent: "div";
  linkTeamViewAllParent: "div";
  linkTeamViewAll: "a";
  profileInformationParent: "div";
  details: "div";
  textParent5: "div";
  memberBadges: "div";
  badgeVerification: typeof BadgeVerification;
  tagPartnerD: typeof TagPartnerD;
  ratingDisplayDetail: typeof RatingDisplayDetail;
  locationCityCountry: "div";
  svgIcon3: "svg";
  location2: "div";
  cityText2: "div";
  countryText: "div";
  languagesAb: "div";
  svgIcon21: "svg";
  languageParent: "div";
  languageA: "div";
  languageB: "div";
  membershipDateTimestamp: "div";
  svgIcon20: "svg";
  membershipParent: "div";
  memberTextLabel: "div";
  dateTimestampParent: "div";
  teamIndustrySocialSection: "div";
  companyAttributesParent: "div";
  profileIndustryParent: "div";
  industry: "div";
  textParent6: "div";
  profileCategoriesParent: "div";
  categories: "div";
  categoryBadgeParent: "div";
  profileSkillsParent: "div";
  skillsTextparent: "div";
  skills: "div";
  skillsBadgeParent: "div";
  profileSocialParent: "div";
  social: "div";
  socialIconsParent: "div";
  sectionPartnerSimilarPartners: "div";
  profileTeamCarousellParentB: "div";
  headlineMembersAlsoViewed2: "div";
  similarPartnersparenT: "div";
  sectionPartnerAlsoViewed: "div";
  profileTeamCarousellParentA: "div";
  headlineMembersAlsoViewed: "div";
  alsoViewedParent: "div";
  footerB: typeof FooterB;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTeamprofile__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTeamprofile__VariantsArgs;
    args?: PlasmicTeamprofile__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicTeamprofile__Fetches;
  } & Omit<PlasmicTeamprofile__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTeamprofile__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTeamprofile__ArgProps,
      internalVariantPropNames: PlasmicTeamprofile__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicTeamprofile__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTeamprofile";
  } else {
    func.displayName = `PlasmicTeamprofile.${nodeName}`;
  }
  return func;
}

export const PlasmicTeamprofile = Object.assign(
  // Top-level PlasmicTeamprofile renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbarInternal: makeNodeComponent("navbarInternal"),
    sectionTeamProfileHero: makeNodeComponent("sectionTeamProfileHero"),
    navbarTeamUserProfile: makeNodeComponent("navbarTeamUserProfile"),
    teamAboutInfoSection: makeNodeComponent("teamAboutInfoSection"),
    profileAboutParent: makeNodeComponent("profileAboutParent"),
    about: makeNodeComponent("about"),
    textParent: makeNodeComponent("textParent"),
    text170Characters: makeNodeComponent("text170Characters"),
    profileCommunityParent: makeNodeComponent("profileCommunityParent"),
    community: makeNodeComponent("community"),
    statsParent: makeNodeComponent("statsParent"),
    memberStatParent: makeNodeComponent("memberStatParent"),
    memberNumberCount: makeNodeComponent("memberNumberCount"),
    partnerStatParent: makeNodeComponent("partnerStatParent"),
    partnerNumberCount: makeNodeComponent("partnerNumberCount"),
    followersStatParent: makeNodeComponent("followersStatParent"),
    followingNumberCount: makeNodeComponent("followingNumberCount"),
    viewsStatParent: makeNodeComponent("viewsStatParent"),
    viewsNumberCount: makeNodeComponent("viewsNumberCount"),
    reactsStatParent: makeNodeComponent("reactsStatParent"),
    reactsNumberCount: makeNodeComponent("reactsNumberCount"),
    savesStatParent: makeNodeComponent("savesStatParent"),
    savesNumberCount: makeNodeComponent("savesNumberCount"),
    teamTeamCommunitySection: makeNodeComponent("teamTeamCommunitySection"),
    profileTeamParent: makeNodeComponent("profileTeamParent"),
    team: makeNodeComponent("team"),
    teamMemberparent: makeNodeComponent("teamMemberparent"),
    linkTeamViewAllParent: makeNodeComponent("linkTeamViewAllParent"),
    linkTeamViewAll: makeNodeComponent("linkTeamViewAll"),
    profileInformationParent: makeNodeComponent("profileInformationParent"),
    details: makeNodeComponent("details"),
    textParent5: makeNodeComponent("textParent5"),
    memberBadges: makeNodeComponent("memberBadges"),
    badgeVerification: makeNodeComponent("badgeVerification"),
    tagPartnerD: makeNodeComponent("tagPartnerD"),
    ratingDisplayDetail: makeNodeComponent("ratingDisplayDetail"),
    locationCityCountry: makeNodeComponent("locationCityCountry"),
    svgIcon3: makeNodeComponent("svgIcon3"),
    location2: makeNodeComponent("location2"),
    cityText2: makeNodeComponent("cityText2"),
    countryText: makeNodeComponent("countryText"),
    languagesAb: makeNodeComponent("languagesAb"),
    svgIcon21: makeNodeComponent("svgIcon21"),
    languageParent: makeNodeComponent("languageParent"),
    languageA: makeNodeComponent("languageA"),
    languageB: makeNodeComponent("languageB"),
    membershipDateTimestamp: makeNodeComponent("membershipDateTimestamp"),
    svgIcon20: makeNodeComponent("svgIcon20"),
    membershipParent: makeNodeComponent("membershipParent"),
    memberTextLabel: makeNodeComponent("memberTextLabel"),
    dateTimestampParent: makeNodeComponent("dateTimestampParent"),
    teamIndustrySocialSection: makeNodeComponent("teamIndustrySocialSection"),
    companyAttributesParent: makeNodeComponent("companyAttributesParent"),
    profileIndustryParent: makeNodeComponent("profileIndustryParent"),
    industry: makeNodeComponent("industry"),
    textParent6: makeNodeComponent("textParent6"),
    profileCategoriesParent: makeNodeComponent("profileCategoriesParent"),
    categories: makeNodeComponent("categories"),
    categoryBadgeParent: makeNodeComponent("categoryBadgeParent"),
    profileSkillsParent: makeNodeComponent("profileSkillsParent"),
    skillsTextparent: makeNodeComponent("skillsTextparent"),
    skills: makeNodeComponent("skills"),
    skillsBadgeParent: makeNodeComponent("skillsBadgeParent"),
    profileSocialParent: makeNodeComponent("profileSocialParent"),
    social: makeNodeComponent("social"),
    socialIconsParent: makeNodeComponent("socialIconsParent"),
    sectionPartnerSimilarPartners: makeNodeComponent(
      "sectionPartnerSimilarPartners"
    ),
    profileTeamCarousellParentB: makeNodeComponent(
      "profileTeamCarousellParentB"
    ),
    headlineMembersAlsoViewed2: makeNodeComponent("headlineMembersAlsoViewed2"),
    similarPartnersparenT: makeNodeComponent("similarPartnersparenT"),
    sectionPartnerAlsoViewed: makeNodeComponent("sectionPartnerAlsoViewed"),
    profileTeamCarousellParentA: makeNodeComponent(
      "profileTeamCarousellParentA"
    ),
    headlineMembersAlsoViewed: makeNodeComponent("headlineMembersAlsoViewed"),
    alsoViewedParent: makeNodeComponent("alsoViewedParent"),
    footerB: makeNodeComponent("footerB"),

    // Metadata about props expected for PlasmicTeamprofile
    internalVariantProps: PlasmicTeamprofile__VariantProps,
    internalArgProps: PlasmicTeamprofile__ArgProps
  }
);

export default PlasmicTeamprofile;
/* prettier-ignore-end */
