// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: EZFFldQYBrJIX
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import RatingScore from "../../RatingScore"; // plasmic-import: InwVmPEAmeKF0/component
import RatingReviewAmount from "../../RatingReviewAmount"; // plasmic-import: VlQH8oxKiOADB/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicRatingDisplayDetail.module.css"; // plasmic-import: EZFFldQYBrJIX/css

import SuperpowerIcon from "./icons/PlasmicIcon__Superpower"; // plasmic-import: zLcEmNet-LofjDV/icon

export type PlasmicRatingDisplayDetail__VariantMembers = {
  reviews: "reviews";
  color: "primaryB";
  size: "_14" | "_16";
};

export type PlasmicRatingDisplayDetail__VariantsArgs = {
  reviews?: SingleBooleanChoiceArg<"reviews">;
  color?: SingleChoiceArg<"primaryB">;
  size?: SingleChoiceArg<"_14" | "_16">;
};

type VariantPropType = keyof PlasmicRatingDisplayDetail__VariantsArgs;
export const PlasmicRatingDisplayDetail__VariantProps =
  new Array<VariantPropType>("reviews", "color", "size");

export type PlasmicRatingDisplayDetail__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
};

type ArgPropType = keyof PlasmicRatingDisplayDetail__ArgsType;
export const PlasmicRatingDisplayDetail__ArgProps = new Array<ArgPropType>(
  "children",
  "slot"
);

export type PlasmicRatingDisplayDetail__OverridesType = {
  root?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
  ratingScore?: p.Flex<typeof RatingScore>;
  ratingReviewAmount?: p.Flex<typeof RatingReviewAmount>;
};

export interface DefaultRatingDisplayDetailProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  reviews?: SingleBooleanChoiceArg<"reviews">;
  color?: SingleChoiceArg<"primaryB">;
  size?: SingleChoiceArg<"_14" | "_16">;
  className?: string;
}

function PlasmicRatingDisplayDetail__RenderFunc(props: {
  variants: PlasmicRatingDisplayDetail__VariantsArgs;
  args: PlasmicRatingDisplayDetail__ArgsType;
  overrides: PlasmicRatingDisplayDetail__OverridesType;
  dataFetches?: PlasmicRatingDisplayDetail__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <SuperpowerIcon
        data-plasmic-name={"svg"}
        data-plasmic-override={overrides.svg}
        className={classNames(defaultcss.all, sty.svg, {
          [sty.svg__size__14]: hasVariant(variants, "size", "_14"),
          [sty.svg__size__16]: hasVariant(variants, "size", "_16")
        })}
        role={"img"}
      />

      <RatingScore
        data-plasmic-name={"ratingScore"}
        data-plasmic-override={overrides.ratingScore}
        className={classNames("__wab_instance", sty.ratingScore)}
      >
        {p.renderPlasmicSlot({
          defaultContents: "4.67",
          value: args.children,
          className: classNames(sty.slotChildren, {
            [sty.slotChildren__color_primaryB]: hasVariant(
              variants,
              "color",
              "primaryB"
            ),
            [sty.slotChildren__size__14]: hasVariant(variants, "size", "_14"),
            [sty.slotChildren__size__16]: hasVariant(variants, "size", "_16")
          })
        })}
      </RatingScore>

      {(hasVariant(variants, "reviews", "reviews") ? false : true) ? (
        <RatingReviewAmount
          data-plasmic-name={"ratingReviewAmount"}
          data-plasmic-override={overrides.ratingReviewAmount}
          className={classNames("__wab_instance", sty.ratingReviewAmount, {
            [sty.ratingReviewAmount__reviews]: hasVariant(
              variants,
              "reviews",
              "reviews"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: "(12)",
            value: args.slot,
            className: classNames(sty.slotSlot, {
              [sty.slotSlot__color_primaryB]: hasVariant(
                variants,
                "color",
                "primaryB"
              ),
              [sty.slotSlot__reviews]: hasVariant(
                variants,
                "reviews",
                "reviews"
              ),
              [sty.slotSlot__size__14]: hasVariant(variants, "size", "_14"),
              [sty.slotSlot__size__16]: hasVariant(variants, "size", "_16")
            })
          })}
        </RatingReviewAmount>
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "svg", "ratingScore", "ratingReviewAmount"],
  svg: ["svg"],
  ratingScore: ["ratingScore"],
  ratingReviewAmount: ["ratingReviewAmount"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  svg: "svg";
  ratingScore: typeof RatingScore;
  ratingReviewAmount: typeof RatingReviewAmount;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRatingDisplayDetail__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRatingDisplayDetail__VariantsArgs;
    args?: PlasmicRatingDisplayDetail__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicRatingDisplayDetail__Fetches;
  } & Omit<PlasmicRatingDisplayDetail__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicRatingDisplayDetail__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicRatingDisplayDetail__ArgProps,
      internalVariantPropNames: PlasmicRatingDisplayDetail__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicRatingDisplayDetail__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRatingDisplayDetail";
  } else {
    func.displayName = `PlasmicRatingDisplayDetail.${nodeName}`;
  }
  return func;
}

export const PlasmicRatingDisplayDetail = Object.assign(
  // Top-level PlasmicRatingDisplayDetail renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    ratingScore: makeNodeComponent("ratingScore"),
    ratingReviewAmount: makeNodeComponent("ratingReviewAmount"),

    // Metadata about props expected for PlasmicRatingDisplayDetail
    internalVariantProps: PlasmicRatingDisplayDetail__VariantProps,
    internalArgProps: PlasmicRatingDisplayDetail__ArgProps
  }
);

export default PlasmicRatingDisplayDetail;
/* prettier-ignore-end */
