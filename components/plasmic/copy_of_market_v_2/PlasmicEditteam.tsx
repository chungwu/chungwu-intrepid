// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: LPE26Nj1l8RYjF
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavbarInternal from "../../NavbarInternal"; // plasmic-import: nBfIHHqHvjUywN9/component
import NavbarPartnerEdit from "../../NavbarPartnerEdit"; // plasmic-import: cfySDEV6eDVdN0/component
import CardHeaderTitleDisplay from "../../CardHeaderTitleDisplay"; // plasmic-import: fk5BRaqICb6MOmt/component
import CardHeaderTitlePrimary from "../../CardHeaderTitlePrimary"; // plasmic-import: qjG0g-Rmz0BeDH/component
import UserAvatarButton from "../../UserAvatarButton"; // plasmic-import: S6be1w_HeX7JCB/component
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: gpNjXfbD_ZdpPU/component
import InputTextPrefixSuffix from "../../InputTextPrefixSuffix"; // plasmic-import: SC-07wTZAqk8QnI/component
import InputTextField from "../../InputTextField"; // plasmic-import: eRJarSvs8Cmudj/component
import InputTextAreaPrimary from "../../InputTextAreaPrimary"; // plasmic-import: -MQQi4eWrKtoHRO/component
import SelectGroupDropdownPrimary from "../../SelectGroupDropdownPrimary"; // plasmic-import: LkR_9K5xfRnJSu/component
import InputTextForm from "../../InputTextForm"; // plasmic-import: xiZmrha0lhlIet/component
import InputSearchbarFilterDisplay from "../../InputSearchbarFilterDisplay"; // plasmic-import: tTEt4VhljRx6qm/component
import CardSocialConnectSwitch from "../../CardSocialConnectSwitch"; // plasmic-import: 9czIbo_1TSRssu/component
import FooterB from "../../FooterB"; // plasmic-import: IZENTiSL4_zyK8/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicEditteam.module.css"; // plasmic-import: LPE26Nj1l8RYjF/css

import PlusBoldIcon from "./icons/PlasmicIcon__PlusBold"; // plasmic-import: lhSEEajPJGZatfD/icon

export type PlasmicEditteam__VariantMembers = {};

export type PlasmicEditteam__VariantsArgs = {};
type VariantPropType = keyof PlasmicEditteam__VariantsArgs;
export const PlasmicEditteam__VariantProps = new Array<VariantPropType>();

export type PlasmicEditteam__ArgsType = {};
type ArgPropType = keyof PlasmicEditteam__ArgsType;
export const PlasmicEditteam__ArgProps = new Array<ArgPropType>();

export type PlasmicEditteam__OverridesType = {
  root?: p.Flex<"div">;
  navbarInternal?: p.Flex<typeof NavbarInternal>;
  navbarPartnerEdit?: p.Flex<typeof NavbarPartnerEdit>;
  sectionTeamEditProfile?: p.Flex<"section">;
  formTeamEditProfile?: p.Flex<"form">;
  cardTeamLogo?: p.Flex<"div">;
  teamUploadLogoButtonGroup?: p.Flex<"div">;
  userAvatarButton?: p.Flex<typeof UserAvatarButton>;
  teamEditlogoGroup?: p.Flex<"div">;
  cardTeamDisplayname?: p.Flex<"div">;
  cardTeamUrl?: p.Flex<"div">;
  cardTeamTagline?: p.Flex<"div">;
  inputTextField?: p.Flex<typeof InputTextField>;
  cardTeamDescription?: p.Flex<"div">;
  inputTextAreaPrimary?: p.Flex<typeof InputTextAreaPrimary>;
  cardTeamVideoIntroUrl?: p.Flex<"div">;
  teamSubmitProfile?: p.Flex<typeof ButtonPrimary>;
  sectionTeamEditProfileDetails?: p.Flex<"section">;
  formTeamEditDetails?: p.Flex<"form">;
  cardTeamLocation?: p.Flex<"div">;
  teamLocationGroup?: p.Flex<"div">;
  inputTextForm?: p.Flex<typeof InputTextForm>;
  cardTeamIndustry?: p.Flex<"div">;
  teamIndustryGroup?: p.Flex<"div">;
  cardTeamLanguages?: p.Flex<"div">;
  inputGroupTeamLanguages?: p.Flex<"div">;
  cardTeamSkills?: p.Flex<"div">;
  cardTeamCommunity?: p.Flex<"div">;
  teamSubmitDetails?: p.Flex<typeof ButtonPrimary>;
  sectionTeamEditProfileMarkets?: p.Flex<"section">;
  formTeamEditMarkets?: p.Flex<"form">;
  cardTeamMarkets?: p.Flex<"div">;
  teamMarketsGroup?: p.Flex<"div">;
  cardTeamProjects?: p.Flex<"div">;
  teamProjectsGroup?: p.Flex<"div">;
  cardTeamInterests?: p.Flex<"div">;
  teamSubmitMarkets?: p.Flex<typeof ButtonPrimary>;
  sectionTeamEditProfileSocial?: p.Flex<"section">;
  formTeamEditSocial?: p.Flex<"form">;
  cardTeamWebsite?: p.Flex<"div">;
  cardTeamSocial?: p.Flex<"div">;
  inputGroupTeamSocial?: p.Flex<"div">;
  teamSubmitSocials?: p.Flex<typeof ButtonPrimary>;
  footerB?: p.Flex<typeof FooterB>;
};

export interface DefaultEditteamProps {
  dataFetches: PlasmicEditteam__Fetches;
}

function PlasmicEditteam__RenderFunc(props: {
  variants: PlasmicEditteam__VariantsArgs;
  args: PlasmicEditteam__ArgsType;
  overrides: PlasmicEditteam__OverridesType;
  dataFetches?: PlasmicEditteam__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <React.Fragment>
      <Head>
        <title key="title">{""}</title>
        <meta key="og:title" property="og:title" content={""} />
        <meta
          key="description"
          name="description"
          property="og:description"
          content={""}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <NavbarInternal
            data-plasmic-name={"navbarInternal"}
            data-plasmic-override={overrides.navbarInternal}
            className={classNames("__wab_instance", sty.navbarInternal)}
          />

          <NavbarPartnerEdit
            data-plasmic-name={"navbarPartnerEdit"}
            data-plasmic-override={overrides.navbarPartnerEdit}
            className={classNames("__wab_instance", sty.navbarPartnerEdit)}
            navItems={["messages", "notifications", "reviews", "wallet"]}
            selected={"team" as const}
          />

          <p.Stack
            as={"section"}
            data-plasmic-name={"sectionTeamEditProfile"}
            data-plasmic-override={overrides.sectionTeamEditProfile}
            hasGap={true}
            className={classNames(defaultcss.all, sty.sectionTeamEditProfile)}
          >
            <CardHeaderTitleDisplay
              className={classNames(
                "__wab_instance",
                sty.cardHeaderTitleDisplay__fTnkb
              )}
              size={"_720" as const}
              slot={
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__dmp9Y
                  )}
                >
                  {"Edit profile"}
                </div>
              }
              textDisplay={"Team"}
              textSubhead={
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__tQav1
                  )}
                >
                  {"Set your partner profile and make a great first impression"}
                </div>
              }
            />

            <p.Stack
              as={"form"}
              data-plasmic-name={"formTeamEditProfile"}
              data-plasmic-override={overrides.formTeamEditProfile}
              hasGap={true}
              className={classNames(defaultcss.all, sty.formTeamEditProfile)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"cardTeamLogo"}
                data-plasmic-override={overrides.cardTeamLogo}
                hasGap={true}
                className={classNames(defaultcss.all, sty.cardTeamLogo)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary__wiGc1
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox__apELs
                      )}
                    >
                      {
                        "Click on the avatar to upload a custom image from your files."
                      }
                    </div>
                  }
                >
                  {"Logo"}
                </CardHeaderTitlePrimary>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"teamUploadLogoButtonGroup"}
                  data-plasmic-override={overrides.teamUploadLogoButtonGroup}
                  hasGap={true}
                  className={classNames(
                    defaultcss.all,
                    sty.teamUploadLogoButtonGroup
                  )}
                >
                  <UserAvatarButton
                    data-plasmic-name={"userAvatarButton"}
                    data-plasmic-override={overrides.userAvatarButton}
                    className={classNames(
                      "__wab_instance",
                      sty.userAvatarButton
                    )}
                    size={"_64Px" as const}
                  />

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"teamEditlogoGroup"}
                    data-plasmic-override={overrides.teamEditlogoGroup}
                    hasGap={true}
                    className={classNames(
                      defaultcss.all,
                      sty.teamEditlogoGroup
                    )}
                  >
                    <ButtonPrimary
                      className={classNames(
                        "__wab_instance",
                        sty.buttonPrimary__uXoLh
                      )}
                      size={"_90" as const}
                      type={"outline" as const}
                    >
                      {"Edit"}
                    </ButtonPrimary>

                    <ButtonPrimary
                      className={classNames(
                        "__wab_instance",
                        sty.buttonPrimary__am3Zv
                      )}
                      size={"_90" as const}
                      type={"secondary" as const}
                    >
                      {"Delete"}
                    </ButtonPrimary>
                  </p.Stack>
                </p.Stack>
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"cardTeamDisplayname"}
                data-plasmic-override={overrides.cardTeamDisplayname}
                hasGap={true}
                className={classNames(defaultcss.all, sty.cardTeamDisplayname)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary__pYf8X
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox___3J1W7
                      )}
                    >
                      {
                        "Please enter your company or team name as you want it displayed on Intrepid."
                      }
                    </div>
                  }
                >
                  {"Display name"}
                </CardHeaderTitlePrimary>

                <InputTextPrefixSuffix
                  className={classNames(
                    "__wab_instance",
                    sty.inputTextPrefixSuffix__iHfpV
                  )}
                  prefixLabelHeadline={"@"}
                  suffix={"suffix" as const}
                  type={"primary" as const}
                  width={"_540" as const}
                />
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"cardTeamUrl"}
                data-plasmic-override={overrides.cardTeamUrl}
                hasGap={true}
                className={classNames(defaultcss.all, sty.cardTeamUrl)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary___74Wih
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox__wiHvd
                      )}
                    >
                      {
                        "This is your company's URL namespace within the Intrepid community"
                      }
                    </div>
                  }
                >
                  {"Url namespace"}
                </CardHeaderTitlePrimary>

                <InputTextPrefixSuffix
                  className={classNames(
                    "__wab_instance",
                    sty.inputTextPrefixSuffix__gs9Qs
                  )}
                  prefixLabelHeadline={"intrepid/technology/"}
                  suffix={"suffix" as const}
                  type={"primary" as const}
                  width={"_540" as const}
                />
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"cardTeamTagline"}
                data-plasmic-override={overrides.cardTeamTagline}
                hasGap={true}
                className={classNames(defaultcss.all, sty.cardTeamTagline)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary__tm4V
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox___2Fy5Z
                      )}
                    >
                      {"Short description of your company or team"}
                    </div>
                  }
                >
                  {"Tagline"}
                </CardHeaderTitlePrimary>

                <InputTextField
                  data-plasmic-name={"inputTextField"}
                  data-plasmic-override={overrides.inputTextField}
                  className={classNames("__wab_instance", sty.inputTextField)}
                  size={"_540" as const}
                  type={"secondary" as const}
                />
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"cardTeamDescription"}
                data-plasmic-override={overrides.cardTeamDescription}
                hasGap={true}
                className={classNames(defaultcss.all, sty.cardTeamDescription)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary__rP5H
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox__sHc9F
                      )}
                    >
                      {"Overview description of your company or team."}
                    </div>
                  }
                >
                  {"Description"}
                </CardHeaderTitlePrimary>

                <InputTextAreaPrimary
                  data-plasmic-name={"inputTextAreaPrimary"}
                  data-plasmic-override={overrides.inputTextAreaPrimary}
                  className={classNames(
                    "__wab_instance",
                    sty.inputTextAreaPrimary
                  )}
                  height={"_90" as const}
                  type={"secondary" as const}
                  width={"_540" as const}
                />
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"cardTeamVideoIntroUrl"}
                data-plasmic-override={overrides.cardTeamVideoIntroUrl}
                hasGap={true}
                className={classNames(
                  defaultcss.all,
                  sty.cardTeamVideoIntroUrl
                )}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary__jAbmE
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox__tvlHh
                      )}
                    >
                      {
                        "Don't worry — this is optional and it's okay to launch without a video."
                      }
                    </div>
                  }
                >
                  {"Video introduction"}
                </CardHeaderTitlePrimary>

                <InputTextPrefixSuffix
                  className={classNames(
                    "__wab_instance",
                    sty.inputTextPrefixSuffix__t0Nue
                  )}
                  prefixLabelHeadline={"https//"}
                  suffix={"suffix" as const}
                  type={"primary" as const}
                  width={"_540" as const}
                />
              </p.Stack>

              <ButtonPrimary
                data-plasmic-name={"teamSubmitProfile"}
                data-plasmic-override={overrides.teamSubmitProfile}
                className={classNames("__wab_instance", sty.teamSubmitProfile)}
                size={"_180" as const}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__m9X4
                  )}
                >
                  {"Save profile"}
                </div>
              </ButtonPrimary>
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"section"}
            data-plasmic-name={"sectionTeamEditProfileDetails"}
            data-plasmic-override={overrides.sectionTeamEditProfileDetails}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              sty.sectionTeamEditProfileDetails
            )}
          >
            <CardHeaderTitleDisplay
              className={classNames(
                "__wab_instance",
                sty.cardHeaderTitleDisplay__rOmZ
              )}
              headings={["title"]}
              size={"_720" as const}
              slot={
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__iusty
                  )}
                >
                  {"Details"}
                </div>
              }
              textDisplay={"Profile edit"}
              textSubhead={
                "Fill in your creator details for better visibility and matching in the community"
              }
            />

            <p.Stack
              as={"form"}
              data-plasmic-name={"formTeamEditDetails"}
              data-plasmic-override={overrides.formTeamEditDetails}
              hasGap={true}
              className={classNames(defaultcss.all, sty.formTeamEditDetails)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"cardTeamLocation"}
                data-plasmic-override={overrides.cardTeamLocation}
                hasGap={true}
                className={classNames(defaultcss.all, sty.cardTeamLocation)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary__wCi1A
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox__w44I7
                      )}
                    >
                      {
                        "Please enter the Country and City of your company or team's location."
                      }
                    </div>
                  }
                >
                  {"Location"}
                </CardHeaderTitlePrimary>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"teamLocationGroup"}
                  data-plasmic-override={overrides.teamLocationGroup}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.teamLocationGroup)}
                >
                  <SelectGroupDropdownPrimary
                    className={classNames(
                      "__wab_instance",
                      sty.selectGroupDropdownPrimary__dXqjh
                    )}
                    description={"description" as const}
                  >
                    {"Country"}
                  </SelectGroupDropdownPrimary>

                  <InputTextForm
                    data-plasmic-name={"inputTextForm"}
                    data-plasmic-override={overrides.inputTextForm}
                    className={classNames("__wab_instance", sty.inputTextForm)}
                    labelHeadline={"City"}
                    subhead={"subhead" as const}
                    type={"primary" as const}
                    width={"_360" as const}
                  />
                </p.Stack>
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"cardTeamIndustry"}
                data-plasmic-override={overrides.cardTeamIndustry}
                hasGap={true}
                className={classNames(defaultcss.all, sty.cardTeamIndustry)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary__aOyVv
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox__udK1
                      )}
                    >
                      {"Select the industry and the size of your company"}
                    </div>
                  }
                >
                  {"Industry & company size"}
                </CardHeaderTitlePrimary>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"teamIndustryGroup"}
                  data-plasmic-override={overrides.teamIndustryGroup}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.teamIndustryGroup)}
                >
                  <SelectGroupDropdownPrimary
                    className={classNames(
                      "__wab_instance",
                      sty.selectGroupDropdownPrimary__uk19U
                    )}
                    description={"description" as const}
                  >
                    {"Industry"}
                  </SelectGroupDropdownPrimary>

                  <SelectGroupDropdownPrimary
                    className={classNames(
                      "__wab_instance",
                      sty.selectGroupDropdownPrimary__w8Uo7
                    )}
                    description={"description" as const}
                  >
                    {"Company size"}
                  </SelectGroupDropdownPrimary>
                </p.Stack>
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"cardTeamLanguages"}
                data-plasmic-override={overrides.cardTeamLanguages}
                hasGap={true}
                className={classNames(defaultcss.all, sty.cardTeamLanguages)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary__cocoh
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox__sql16
                      )}
                    >
                      {"Enter the languages you speak on your team"}
                    </div>
                  }
                >
                  {"Languages"}
                </CardHeaderTitlePrimary>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"inputGroupTeamLanguages"}
                  data-plasmic-override={overrides.inputGroupTeamLanguages}
                  hasGap={true}
                  className={classNames(
                    defaultcss.all,
                    sty.inputGroupTeamLanguages
                  )}
                >
                  <SelectGroupDropdownPrimary
                    className={classNames(
                      "__wab_instance",
                      sty.selectGroupDropdownPrimary___29RUp
                    )}
                    description={"description" as const}
                  >
                    {"Primary"}
                  </SelectGroupDropdownPrimary>

                  <SelectGroupDropdownPrimary
                    className={classNames(
                      "__wab_instance",
                      sty.selectGroupDropdownPrimary__bId7Q
                    )}
                    description={"description" as const}
                  >
                    {"Secondary"}
                  </SelectGroupDropdownPrimary>
                </p.Stack>
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"cardTeamSkills"}
                data-plasmic-override={overrides.cardTeamSkills}
                hasGap={true}
                className={classNames(defaultcss.all, sty.cardTeamSkills)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary__v5Nsz
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox__z2HG
                      )}
                    >
                      {
                        "Search and enter your skills and strengths, separated by commas"
                      }
                    </div>
                  }
                >
                  {"Skills"}
                </CardHeaderTitlePrimary>

                <InputSearchbarFilterDisplay
                  className={classNames(
                    "__wab_instance",
                    sty.inputSearchbarFilterDisplay__tpTgN
                  )}
                />
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"cardTeamCommunity"}
                data-plasmic-override={overrides.cardTeamCommunity}
                hasGap={true}
                className={classNames(defaultcss.all, sty.cardTeamCommunity)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary__spOe3
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox__wkkqM
                      )}
                    >
                      {
                        "Search and enter your industry or most relevant community"
                      }
                    </div>
                  }
                >
                  {"Community"}
                </CardHeaderTitlePrimary>

                <InputSearchbarFilterDisplay
                  className={classNames(
                    "__wab_instance",
                    sty.inputSearchbarFilterDisplay__yXnL
                  )}
                />
              </p.Stack>

              <ButtonPrimary
                data-plasmic-name={"teamSubmitDetails"}
                data-plasmic-override={overrides.teamSubmitDetails}
                className={classNames("__wab_instance", sty.teamSubmitDetails)}
                size={"_180" as const}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__gHHsc
                  )}
                >
                  {"Save details"}
                </div>
              </ButtonPrimary>
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"section"}
            data-plasmic-name={"sectionTeamEditProfileMarkets"}
            data-plasmic-override={overrides.sectionTeamEditProfileMarkets}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              sty.sectionTeamEditProfileMarkets
            )}
          >
            <CardHeaderTitleDisplay
              className={classNames(
                "__wab_instance",
                sty.cardHeaderTitleDisplay___9M1J
              )}
              headings={["title"]}
              size={"_720" as const}
              slot={
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox___9ISpe
                  )}
                >
                  {"Markets"}
                </div>
              }
              textDisplay={"Profile edit"}
              textSubhead={
                "Fill in your interests and rates to match with relevant makers and creators"
              }
            />

            <p.Stack
              as={"form"}
              data-plasmic-name={"formTeamEditMarkets"}
              data-plasmic-override={overrides.formTeamEditMarkets}
              hasGap={true}
              className={classNames(defaultcss.all, sty.formTeamEditMarkets)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"cardTeamMarkets"}
                data-plasmic-override={overrides.cardTeamMarkets}
                hasGap={true}
                className={classNames(defaultcss.all, sty.cardTeamMarkets)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary__l5GP
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox__zejpQ
                      )}
                    >
                      {
                        "Select the industry and company size of your desired partners or customers."
                      }
                    </div>
                  }
                >
                  {"Markets & customers"}
                </CardHeaderTitlePrimary>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"teamMarketsGroup"}
                  data-plasmic-override={overrides.teamMarketsGroup}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.teamMarketsGroup)}
                >
                  <SelectGroupDropdownPrimary
                    className={classNames(
                      "__wab_instance",
                      sty.selectGroupDropdownPrimary__pt9UH
                    )}
                    description={"description" as const}
                  >
                    {"Industry"}
                  </SelectGroupDropdownPrimary>

                  <SelectGroupDropdownPrimary
                    className={classNames(
                      "__wab_instance",
                      sty.selectGroupDropdownPrimary__dpGn0
                    )}
                    description={"description" as const}
                  >
                    {"Company size"}
                  </SelectGroupDropdownPrimary>
                </p.Stack>
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"cardTeamProjects"}
                data-plasmic-override={overrides.cardTeamProjects}
                hasGap={true}
                className={classNames(defaultcss.all, sty.cardTeamProjects)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary___4J1If
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox__soOs7
                      )}
                    >
                      {
                        "Select the project size and rate per hour of your services, or your desired partners."
                      }
                    </div>
                  }
                >
                  {"Projects & rates"}
                </CardHeaderTitlePrimary>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"teamProjectsGroup"}
                  data-plasmic-override={overrides.teamProjectsGroup}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.teamProjectsGroup)}
                >
                  <SelectGroupDropdownPrimary
                    className={classNames(
                      "__wab_instance",
                      sty.selectGroupDropdownPrimary__muw1L
                    )}
                    description={"description" as const}
                  >
                    {"Primary"}
                  </SelectGroupDropdownPrimary>

                  <SelectGroupDropdownPrimary
                    className={classNames(
                      "__wab_instance",
                      sty.selectGroupDropdownPrimary__fDda
                    )}
                    description={"description" as const}
                  >
                    {"Secondary"}
                  </SelectGroupDropdownPrimary>
                </p.Stack>
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"cardTeamInterests"}
                data-plasmic-override={overrides.cardTeamInterests}
                hasGap={true}
                className={classNames(defaultcss.all, sty.cardTeamInterests)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary__md5N
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox__uzem
                      )}
                    >
                      {
                        "Search and enter the products/services you are interested in, separated by commas"
                      }
                    </div>
                  }
                >
                  {"Interests"}
                </CardHeaderTitlePrimary>

                <InputSearchbarFilterDisplay
                  className={classNames(
                    "__wab_instance",
                    sty.inputSearchbarFilterDisplay__d2YTm
                  )}
                />
              </p.Stack>

              <ButtonPrimary
                data-plasmic-name={"teamSubmitMarkets"}
                data-plasmic-override={overrides.teamSubmitMarkets}
                className={classNames("__wab_instance", sty.teamSubmitMarkets)}
                size={"_180" as const}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__rlnq5
                  )}
                >
                  {"Save markets"}
                </div>
              </ButtonPrimary>
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"section"}
            data-plasmic-name={"sectionTeamEditProfileSocial"}
            data-plasmic-override={overrides.sectionTeamEditProfileSocial}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              sty.sectionTeamEditProfileSocial
            )}
          >
            <CardHeaderTitleDisplay
              className={classNames(
                "__wab_instance",
                sty.cardHeaderTitleDisplay__q4SzY
              )}
              headings={["title"]}
              size={"_540" as const}
              slot={
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__a37IR
                  )}
                >
                  {"Web and social"}
                </div>
              }
              textDisplay={"Profile edit"}
              textSubhead={
                "Securely verify your accounts and display links on your page. We’ll never post on your behalf."
              }
            />

            <p.Stack
              as={"form"}
              data-plasmic-name={"formTeamEditSocial"}
              data-plasmic-override={overrides.formTeamEditSocial}
              hasGap={true}
              className={classNames(defaultcss.all, sty.formTeamEditSocial)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"cardTeamWebsite"}
                data-plasmic-override={overrides.cardTeamWebsite}
                hasGap={true}
                className={classNames(defaultcss.all, sty.cardTeamWebsite)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary__rs3M7
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox__mnDtf
                      )}
                    >
                      {"Enter your company's website address"}
                    </div>
                  }
                >
                  {"Website"}
                </CardHeaderTitlePrimary>

                <InputTextPrefixSuffix
                  className={classNames(
                    "__wab_instance",
                    sty.inputTextPrefixSuffix__cyHje
                  )}
                  prefixLabelHeadline={"https://"}
                  suffix={"suffix" as const}
                  type={"primary" as const}
                  width={"_540" as const}
                />
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"cardTeamSocial"}
                data-plasmic-override={overrides.cardTeamSocial}
                hasGap={true}
                className={classNames(defaultcss.all, sty.cardTeamSocial)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary__ccyfs
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox__cCqsw
                      )}
                    >
                      {
                        "Increase trust and visibility by connecting the social profiles you want to include on your profile"
                      }
                    </div>
                  }
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__xjGce
                    )}
                  >
                    {"Social"}
                  </div>
                </CardHeaderTitlePrimary>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"inputGroupTeamSocial"}
                  data-plasmic-override={overrides.inputGroupTeamSocial}
                  hasGap={true}
                  className={classNames(
                    defaultcss.all,
                    sty.inputGroupTeamSocial
                  )}
                >
                  <CardSocialConnectSwitch
                    className={classNames(
                      "__wab_instance",
                      sty.cardSocialConnectSwitch__wOtP9
                    )}
                    socialNetwork={"instagram" as const}
                    width={"_540" as const}
                  />

                  <CardSocialConnectSwitch
                    className={classNames(
                      "__wab_instance",
                      sty.cardSocialConnectSwitch___7VuI4
                    )}
                    socialNetwork={"facebook" as const}
                    width={"_540" as const}
                  />

                  <CardSocialConnectSwitch
                    className={classNames(
                      "__wab_instance",
                      sty.cardSocialConnectSwitch__yJiE
                    )}
                    socialNetwork={"linkedin" as const}
                    width={"_540" as const}
                  />

                  <CardSocialConnectSwitch
                    className={classNames(
                      "__wab_instance",
                      sty.cardSocialConnectSwitch__rS6Mn
                    )}
                    socialNetwork={"twitter" as const}
                    width={"_540" as const}
                  />

                  <CardSocialConnectSwitch
                    className={classNames(
                      "__wab_instance",
                      sty.cardSocialConnectSwitch__mNqsx
                    )}
                    socialNetwork={"youtube" as const}
                    width={"_540" as const}
                  />

                  <CardSocialConnectSwitch
                    className={classNames(
                      "__wab_instance",
                      sty.cardSocialConnectSwitch__bp01A
                    )}
                    socialNetwork={"tikTok" as const}
                    width={"_540" as const}
                  />

                  <CardSocialConnectSwitch
                    className={classNames(
                      "__wab_instance",
                      sty.cardSocialConnectSwitch__rCOyt
                    )}
                    socialNetwork={"github" as const}
                    width={"_540" as const}
                  />

                  <CardSocialConnectSwitch
                    className={classNames(
                      "__wab_instance",
                      sty.cardSocialConnectSwitch__hCnBh
                    )}
                    socialNetwork={"dribbble" as const}
                    width={"_540" as const}
                  />
                </p.Stack>
              </p.Stack>

              <ButtonPrimary
                data-plasmic-name={"teamSubmitSocials"}
                data-plasmic-override={overrides.teamSubmitSocials}
                className={classNames("__wab_instance", sty.teamSubmitSocials)}
                size={"_180" as const}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__eiReU
                  )}
                >
                  {"Save socials"}
                </div>
              </ButtonPrimary>
            </p.Stack>
          </p.Stack>

          <FooterB
            data-plasmic-name={"footerB"}
            data-plasmic-override={overrides.footerB}
            className={classNames("__wab_instance", sty.footerB)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbarInternal",
    "navbarPartnerEdit",
    "sectionTeamEditProfile",
    "formTeamEditProfile",
    "cardTeamLogo",
    "teamUploadLogoButtonGroup",
    "userAvatarButton",
    "teamEditlogoGroup",
    "cardTeamDisplayname",
    "cardTeamUrl",
    "cardTeamTagline",
    "inputTextField",
    "cardTeamDescription",
    "inputTextAreaPrimary",
    "cardTeamVideoIntroUrl",
    "teamSubmitProfile",
    "sectionTeamEditProfileDetails",
    "formTeamEditDetails",
    "cardTeamLocation",
    "teamLocationGroup",
    "inputTextForm",
    "cardTeamIndustry",
    "teamIndustryGroup",
    "cardTeamLanguages",
    "inputGroupTeamLanguages",
    "cardTeamSkills",
    "cardTeamCommunity",
    "teamSubmitDetails",
    "sectionTeamEditProfileMarkets",
    "formTeamEditMarkets",
    "cardTeamMarkets",
    "teamMarketsGroup",
    "cardTeamProjects",
    "teamProjectsGroup",
    "cardTeamInterests",
    "teamSubmitMarkets",
    "sectionTeamEditProfileSocial",
    "formTeamEditSocial",
    "cardTeamWebsite",
    "cardTeamSocial",
    "inputGroupTeamSocial",
    "teamSubmitSocials",
    "footerB"
  ],
  navbarInternal: ["navbarInternal"],
  navbarPartnerEdit: ["navbarPartnerEdit"],
  sectionTeamEditProfile: [
    "sectionTeamEditProfile",
    "formTeamEditProfile",
    "cardTeamLogo",
    "teamUploadLogoButtonGroup",
    "userAvatarButton",
    "teamEditlogoGroup",
    "cardTeamDisplayname",
    "cardTeamUrl",
    "cardTeamTagline",
    "inputTextField",
    "cardTeamDescription",
    "inputTextAreaPrimary",
    "cardTeamVideoIntroUrl",
    "teamSubmitProfile"
  ],
  formTeamEditProfile: [
    "formTeamEditProfile",
    "cardTeamLogo",
    "teamUploadLogoButtonGroup",
    "userAvatarButton",
    "teamEditlogoGroup",
    "cardTeamDisplayname",
    "cardTeamUrl",
    "cardTeamTagline",
    "inputTextField",
    "cardTeamDescription",
    "inputTextAreaPrimary",
    "cardTeamVideoIntroUrl",
    "teamSubmitProfile"
  ],
  cardTeamLogo: [
    "cardTeamLogo",
    "teamUploadLogoButtonGroup",
    "userAvatarButton",
    "teamEditlogoGroup"
  ],
  teamUploadLogoButtonGroup: [
    "teamUploadLogoButtonGroup",
    "userAvatarButton",
    "teamEditlogoGroup"
  ],
  userAvatarButton: ["userAvatarButton"],
  teamEditlogoGroup: ["teamEditlogoGroup"],
  cardTeamDisplayname: ["cardTeamDisplayname"],
  cardTeamUrl: ["cardTeamUrl"],
  cardTeamTagline: ["cardTeamTagline", "inputTextField"],
  inputTextField: ["inputTextField"],
  cardTeamDescription: ["cardTeamDescription", "inputTextAreaPrimary"],
  inputTextAreaPrimary: ["inputTextAreaPrimary"],
  cardTeamVideoIntroUrl: ["cardTeamVideoIntroUrl"],
  teamSubmitProfile: ["teamSubmitProfile"],
  sectionTeamEditProfileDetails: [
    "sectionTeamEditProfileDetails",
    "formTeamEditDetails",
    "cardTeamLocation",
    "teamLocationGroup",
    "inputTextForm",
    "cardTeamIndustry",
    "teamIndustryGroup",
    "cardTeamLanguages",
    "inputGroupTeamLanguages",
    "cardTeamSkills",
    "cardTeamCommunity",
    "teamSubmitDetails"
  ],
  formTeamEditDetails: [
    "formTeamEditDetails",
    "cardTeamLocation",
    "teamLocationGroup",
    "inputTextForm",
    "cardTeamIndustry",
    "teamIndustryGroup",
    "cardTeamLanguages",
    "inputGroupTeamLanguages",
    "cardTeamSkills",
    "cardTeamCommunity",
    "teamSubmitDetails"
  ],
  cardTeamLocation: ["cardTeamLocation", "teamLocationGroup", "inputTextForm"],
  teamLocationGroup: ["teamLocationGroup", "inputTextForm"],
  inputTextForm: ["inputTextForm"],
  cardTeamIndustry: ["cardTeamIndustry", "teamIndustryGroup"],
  teamIndustryGroup: ["teamIndustryGroup"],
  cardTeamLanguages: ["cardTeamLanguages", "inputGroupTeamLanguages"],
  inputGroupTeamLanguages: ["inputGroupTeamLanguages"],
  cardTeamSkills: ["cardTeamSkills"],
  cardTeamCommunity: ["cardTeamCommunity"],
  teamSubmitDetails: ["teamSubmitDetails"],
  sectionTeamEditProfileMarkets: [
    "sectionTeamEditProfileMarkets",
    "formTeamEditMarkets",
    "cardTeamMarkets",
    "teamMarketsGroup",
    "cardTeamProjects",
    "teamProjectsGroup",
    "cardTeamInterests",
    "teamSubmitMarkets"
  ],
  formTeamEditMarkets: [
    "formTeamEditMarkets",
    "cardTeamMarkets",
    "teamMarketsGroup",
    "cardTeamProjects",
    "teamProjectsGroup",
    "cardTeamInterests",
    "teamSubmitMarkets"
  ],
  cardTeamMarkets: ["cardTeamMarkets", "teamMarketsGroup"],
  teamMarketsGroup: ["teamMarketsGroup"],
  cardTeamProjects: ["cardTeamProjects", "teamProjectsGroup"],
  teamProjectsGroup: ["teamProjectsGroup"],
  cardTeamInterests: ["cardTeamInterests"],
  teamSubmitMarkets: ["teamSubmitMarkets"],
  sectionTeamEditProfileSocial: [
    "sectionTeamEditProfileSocial",
    "formTeamEditSocial",
    "cardTeamWebsite",
    "cardTeamSocial",
    "inputGroupTeamSocial",
    "teamSubmitSocials"
  ],
  formTeamEditSocial: [
    "formTeamEditSocial",
    "cardTeamWebsite",
    "cardTeamSocial",
    "inputGroupTeamSocial",
    "teamSubmitSocials"
  ],
  cardTeamWebsite: ["cardTeamWebsite"],
  cardTeamSocial: ["cardTeamSocial", "inputGroupTeamSocial"],
  inputGroupTeamSocial: ["inputGroupTeamSocial"],
  teamSubmitSocials: ["teamSubmitSocials"],
  footerB: ["footerB"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbarInternal: typeof NavbarInternal;
  navbarPartnerEdit: typeof NavbarPartnerEdit;
  sectionTeamEditProfile: "section";
  formTeamEditProfile: "form";
  cardTeamLogo: "div";
  teamUploadLogoButtonGroup: "div";
  userAvatarButton: typeof UserAvatarButton;
  teamEditlogoGroup: "div";
  cardTeamDisplayname: "div";
  cardTeamUrl: "div";
  cardTeamTagline: "div";
  inputTextField: typeof InputTextField;
  cardTeamDescription: "div";
  inputTextAreaPrimary: typeof InputTextAreaPrimary;
  cardTeamVideoIntroUrl: "div";
  teamSubmitProfile: typeof ButtonPrimary;
  sectionTeamEditProfileDetails: "section";
  formTeamEditDetails: "form";
  cardTeamLocation: "div";
  teamLocationGroup: "div";
  inputTextForm: typeof InputTextForm;
  cardTeamIndustry: "div";
  teamIndustryGroup: "div";
  cardTeamLanguages: "div";
  inputGroupTeamLanguages: "div";
  cardTeamSkills: "div";
  cardTeamCommunity: "div";
  teamSubmitDetails: typeof ButtonPrimary;
  sectionTeamEditProfileMarkets: "section";
  formTeamEditMarkets: "form";
  cardTeamMarkets: "div";
  teamMarketsGroup: "div";
  cardTeamProjects: "div";
  teamProjectsGroup: "div";
  cardTeamInterests: "div";
  teamSubmitMarkets: typeof ButtonPrimary;
  sectionTeamEditProfileSocial: "section";
  formTeamEditSocial: "form";
  cardTeamWebsite: "div";
  cardTeamSocial: "div";
  inputGroupTeamSocial: "div";
  teamSubmitSocials: typeof ButtonPrimary;
  footerB: typeof FooterB;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicEditteam__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicEditteam__VariantsArgs;
    args?: PlasmicEditteam__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicEditteam__Fetches;
  } & Omit<PlasmicEditteam__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicEditteam__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicEditteam__ArgProps,
      internalVariantPropNames: PlasmicEditteam__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicEditteam__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEditteam";
  } else {
    func.displayName = `PlasmicEditteam.${nodeName}`;
  }
  return func;
}

export const PlasmicEditteam = Object.assign(
  // Top-level PlasmicEditteam renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbarInternal: makeNodeComponent("navbarInternal"),
    navbarPartnerEdit: makeNodeComponent("navbarPartnerEdit"),
    sectionTeamEditProfile: makeNodeComponent("sectionTeamEditProfile"),
    formTeamEditProfile: makeNodeComponent("formTeamEditProfile"),
    cardTeamLogo: makeNodeComponent("cardTeamLogo"),
    teamUploadLogoButtonGroup: makeNodeComponent("teamUploadLogoButtonGroup"),
    userAvatarButton: makeNodeComponent("userAvatarButton"),
    teamEditlogoGroup: makeNodeComponent("teamEditlogoGroup"),
    cardTeamDisplayname: makeNodeComponent("cardTeamDisplayname"),
    cardTeamUrl: makeNodeComponent("cardTeamUrl"),
    cardTeamTagline: makeNodeComponent("cardTeamTagline"),
    inputTextField: makeNodeComponent("inputTextField"),
    cardTeamDescription: makeNodeComponent("cardTeamDescription"),
    inputTextAreaPrimary: makeNodeComponent("inputTextAreaPrimary"),
    cardTeamVideoIntroUrl: makeNodeComponent("cardTeamVideoIntroUrl"),
    teamSubmitProfile: makeNodeComponent("teamSubmitProfile"),
    sectionTeamEditProfileDetails: makeNodeComponent(
      "sectionTeamEditProfileDetails"
    ),
    formTeamEditDetails: makeNodeComponent("formTeamEditDetails"),
    cardTeamLocation: makeNodeComponent("cardTeamLocation"),
    teamLocationGroup: makeNodeComponent("teamLocationGroup"),
    inputTextForm: makeNodeComponent("inputTextForm"),
    cardTeamIndustry: makeNodeComponent("cardTeamIndustry"),
    teamIndustryGroup: makeNodeComponent("teamIndustryGroup"),
    cardTeamLanguages: makeNodeComponent("cardTeamLanguages"),
    inputGroupTeamLanguages: makeNodeComponent("inputGroupTeamLanguages"),
    cardTeamSkills: makeNodeComponent("cardTeamSkills"),
    cardTeamCommunity: makeNodeComponent("cardTeamCommunity"),
    teamSubmitDetails: makeNodeComponent("teamSubmitDetails"),
    sectionTeamEditProfileMarkets: makeNodeComponent(
      "sectionTeamEditProfileMarkets"
    ),
    formTeamEditMarkets: makeNodeComponent("formTeamEditMarkets"),
    cardTeamMarkets: makeNodeComponent("cardTeamMarkets"),
    teamMarketsGroup: makeNodeComponent("teamMarketsGroup"),
    cardTeamProjects: makeNodeComponent("cardTeamProjects"),
    teamProjectsGroup: makeNodeComponent("teamProjectsGroup"),
    cardTeamInterests: makeNodeComponent("cardTeamInterests"),
    teamSubmitMarkets: makeNodeComponent("teamSubmitMarkets"),
    sectionTeamEditProfileSocial: makeNodeComponent(
      "sectionTeamEditProfileSocial"
    ),
    formTeamEditSocial: makeNodeComponent("formTeamEditSocial"),
    cardTeamWebsite: makeNodeComponent("cardTeamWebsite"),
    cardTeamSocial: makeNodeComponent("cardTeamSocial"),
    inputGroupTeamSocial: makeNodeComponent("inputGroupTeamSocial"),
    teamSubmitSocials: makeNodeComponent("teamSubmitSocials"),
    footerB: makeNodeComponent("footerB"),

    // Metadata about props expected for PlasmicEditteam
    internalVariantProps: PlasmicEditteam__VariantProps,
    internalArgProps: PlasmicEditteam__ArgProps
  }
);

export default PlasmicEditteam;
/* prettier-ignore-end */
