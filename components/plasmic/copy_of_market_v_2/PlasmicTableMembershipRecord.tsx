// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: M9pZbM3vz-2Ew6
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TagMemberD from "../../TagMemberD"; // plasmic-import: EwwHW0Pp6J--_CI/component
import TextLinkUnderlinePrimary from "../../TextLinkUnderlinePrimary"; // plasmic-import: 6pY-cK_-KJMdF_/component
import SwitchPrimary from "../../SwitchPrimary"; // plasmic-import: NI4mgAsheQjrPj/component
import ButtonCircleDelete from "../../ButtonCircleDelete"; // plasmic-import: ADEYruGVISG4-wd/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicTableMembershipRecord.module.css"; // plasmic-import: M9pZbM3vz-2Ew6/css

export type PlasmicTableMembershipRecord__VariantMembers = {};

export type PlasmicTableMembershipRecord__VariantsArgs = {};
type VariantPropType = keyof PlasmicTableMembershipRecord__VariantsArgs;
export const PlasmicTableMembershipRecord__VariantProps =
  new Array<VariantPropType>();

export type PlasmicTableMembershipRecord__ArgsType = {
  destination?: string | PageHref;
};

type ArgPropType = keyof PlasmicTableMembershipRecord__ArgsType;
export const PlasmicTableMembershipRecord__ArgProps = new Array<ArgPropType>(
  "destination"
);

export type PlasmicTableMembershipRecord__OverridesType = {
  root?: p.Flex<"div">;
  tagMemberD?: p.Flex<typeof TagMemberD>;
  textLinkUnderlinePrimary?: p.Flex<typeof TextLinkUnderlinePrimary>;
  switchPrimary?: p.Flex<typeof SwitchPrimary>;
  buttonCircleDelete?: p.Flex<typeof ButtonCircleDelete>;
};

export interface DefaultTableMembershipRecordProps {
  destination?: string | PageHref;
  className?: string;
}

function PlasmicTableMembershipRecord__RenderFunc(props: {
  variants: PlasmicTableMembershipRecord__VariantsArgs;
  args: PlasmicTableMembershipRecord__ArgsType;
  overrides: PlasmicTableMembershipRecord__OverridesType;
  dataFetches?: PlasmicTableMembershipRecord__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div className={classNames(defaultcss.all, sty.freeBox__tsUjr)}>
        <TagMemberD
          data-plasmic-name={"tagMemberD"}
          data-plasmic-override={overrides.tagMemberD}
          className={classNames("__wab_instance", sty.tagMemberD)}
        />
      </div>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.freeBox__jHf2J)}
      >
        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.freeBox__kpUs
          )}
        >
          {"1"}
        </div>

        <TextLinkUnderlinePrimary
          data-plasmic-name={"textLinkUnderlinePrimary"}
          data-plasmic-override={overrides.textLinkUnderlinePrimary}
          className={classNames("__wab_instance", sty.textLinkUnderlinePrimary)}
          destination={args.destination}
          size={"_12" as const}
          text={
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox__ikAju
              )}
            >
              {"Edit"}
            </div>
          }
        />
      </p.Stack>

      <div className={classNames(defaultcss.all, sty.freeBox__mGngb)}>
        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.freeBox__jwP55
          )}
        >
          {"$"}
        </div>

        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.freeBox__ub9Jl
          )}
        >
          {"XXXX"}
        </div>
      </div>

      <div className={classNames(defaultcss.all, sty.freeBox__vl1DF)}>
        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.freeBox__bOhL
          )}
        >
          {"XX"}
        </div>

        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.freeBox__aKbLg
          )}
        >
          {"/"}
        </div>

        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.freeBox__jbIxj
          )}
        >
          {"XXXX"}
        </div>
      </div>

      <div className={classNames(defaultcss.all, sty.freeBox__v5Y2D)}>
        <SwitchPrimary
          data-plasmic-name={"switchPrimary"}
          data-plasmic-override={overrides.switchPrimary}
          className={classNames("__wab_instance", sty.switchPrimary)}
        />
      </div>

      <div className={classNames(defaultcss.all, sty.freeBox___7KIto)}>
        <ButtonCircleDelete
          data-plasmic-name={"buttonCircleDelete"}
          data-plasmic-override={overrides.buttonCircleDelete}
          className={classNames("__wab_instance", sty.buttonCircleDelete)}
          size={"_24Px" as const}
        />
      </div>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "tagMemberD",
    "textLinkUnderlinePrimary",
    "switchPrimary",
    "buttonCircleDelete"
  ],
  tagMemberD: ["tagMemberD"],
  textLinkUnderlinePrimary: ["textLinkUnderlinePrimary"],
  switchPrimary: ["switchPrimary"],
  buttonCircleDelete: ["buttonCircleDelete"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  tagMemberD: typeof TagMemberD;
  textLinkUnderlinePrimary: typeof TextLinkUnderlinePrimary;
  switchPrimary: typeof SwitchPrimary;
  buttonCircleDelete: typeof ButtonCircleDelete;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTableMembershipRecord__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTableMembershipRecord__VariantsArgs;
    args?: PlasmicTableMembershipRecord__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicTableMembershipRecord__Fetches;
  } & Omit<PlasmicTableMembershipRecord__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTableMembershipRecord__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTableMembershipRecord__ArgProps,
      internalVariantPropNames: PlasmicTableMembershipRecord__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicTableMembershipRecord__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTableMembershipRecord";
  } else {
    func.displayName = `PlasmicTableMembershipRecord.${nodeName}`;
  }
  return func;
}

export const PlasmicTableMembershipRecord = Object.assign(
  // Top-level PlasmicTableMembershipRecord renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    tagMemberD: makeNodeComponent("tagMemberD"),
    textLinkUnderlinePrimary: makeNodeComponent("textLinkUnderlinePrimary"),
    switchPrimary: makeNodeComponent("switchPrimary"),
    buttonCircleDelete: makeNodeComponent("buttonCircleDelete"),

    // Metadata about props expected for PlasmicTableMembershipRecord
    internalVariantProps: PlasmicTableMembershipRecord__VariantProps,
    internalArgProps: PlasmicTableMembershipRecord__ArgProps
  }
);

export default PlasmicTableMembershipRecord;
/* prettier-ignore-end */
