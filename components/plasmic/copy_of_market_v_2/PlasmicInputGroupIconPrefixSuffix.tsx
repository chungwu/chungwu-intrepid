// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: xdpOT-MjP4wKWt
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import InputIconPrefixSuffix from "../../InputIconPrefixSuffix"; // plasmic-import: 3JhIrbPbEduMnvd/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicInputGroupIconPrefixSuffix.module.css"; // plasmic-import: xdpOT-MjP4wKWt/css

export type PlasmicInputGroupIconPrefixSuffix__VariantMembers = {
  label: "label";
  description: "description";
  prefix: "prefix";
  suffix: "suffix";
};

export type PlasmicInputGroupIconPrefixSuffix__VariantsArgs = {
  label?: SingleBooleanChoiceArg<"label">;
  description?: SingleBooleanChoiceArg<"description">;
  prefix?: SingleBooleanChoiceArg<"prefix">;
  suffix?: SingleBooleanChoiceArg<"suffix">;
};

type VariantPropType = keyof PlasmicInputGroupIconPrefixSuffix__VariantsArgs;
export const PlasmicInputGroupIconPrefixSuffix__VariantProps =
  new Array<VariantPropType>("label", "description", "prefix", "suffix");

export type PlasmicInputGroupIconPrefixSuffix__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
};

type ArgPropType = keyof PlasmicInputGroupIconPrefixSuffix__ArgsType;
export const PlasmicInputGroupIconPrefixSuffix__ArgProps =
  new Array<ArgPropType>("children", "slot");

export type PlasmicInputGroupIconPrefixSuffix__OverridesType = {
  root?: p.Flex<"div">;
  parent?: p.Flex<"div">;
  inputIconPrefixSuffix?: p.Flex<typeof InputIconPrefixSuffix>;
};

export interface DefaultInputGroupIconPrefixSuffixProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  label?: SingleBooleanChoiceArg<"label">;
  description?: SingleBooleanChoiceArg<"description">;
  prefix?: SingleBooleanChoiceArg<"prefix">;
  suffix?: SingleBooleanChoiceArg<"suffix">;
  className?: string;
}

function PlasmicInputGroupIconPrefixSuffix__RenderFunc(props: {
  variants: PlasmicInputGroupIconPrefixSuffix__VariantsArgs;
  args: PlasmicInputGroupIconPrefixSuffix__ArgsType;
  overrides: PlasmicInputGroupIconPrefixSuffix__OverridesType;
  dataFetches?: PlasmicInputGroupIconPrefixSuffix__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"parent"}
        data-plasmic-override={overrides.parent}
        hasGap={true}
        className={classNames(defaultcss.all, sty.parent)}
      >
        {(hasVariant(variants, "label", "label") ? true : true) ? (
          <div
            className={classNames(defaultcss.all, sty.freeBox__f56B9, {
              [sty.freeBox__label__f56B9BZu1R]: hasVariant(
                variants,
                "label",
                "label"
              )
            })}
          >
            <div className={classNames(defaultcss.all, sty.freeBox__oq9W)}>
              {p.renderPlasmicSlot({
                defaultContents: "Label",
                value: args.children,
                className: classNames(sty.slotChildren)
              })}
            </div>
          </div>
        ) : null}

        <InputIconPrefixSuffix
          data-plasmic-name={"inputIconPrefixSuffix"}
          data-plasmic-override={overrides.inputIconPrefixSuffix}
          className={classNames("__wab_instance", sty.inputIconPrefixSuffix, {
            [sty.inputIconPrefixSuffix__prefix]: hasVariant(
              variants,
              "prefix",
              "prefix"
            ),
            [sty.inputIconPrefixSuffix__suffix]: hasVariant(
              variants,
              "suffix",
              "suffix"
            )
          })}
          prefix={
            hasVariant(variants, "prefix", "prefix")
              ? ("prefix" as const)
              : undefined
          }
          suffix={
            hasVariant(variants, "suffix", "suffix")
              ? ("suffix" as const)
              : undefined
          }
          width={"_360" as const}
        />

        {(hasVariant(variants, "description", "description") ? true : true) ? (
          <div
            className={classNames(defaultcss.all, sty.freeBox__kjLrn, {
              [sty.freeBox__description__kjLrNfr5S0]: hasVariant(
                variants,
                "description",
                "description"
              ),
              [sty.freeBox__label__kjLrNbZu1R]: hasVariant(
                variants,
                "label",
                "label"
              )
            })}
          >
            <div
              className={classNames(defaultcss.all, sty.freeBox__cub65, {
                [sty.freeBox__description__cub65Fr5S0]: hasVariant(
                  variants,
                  "description",
                  "description"
                )
              })}
            >
              {p.renderPlasmicSlot({
                defaultContents: "Description",
                value: args.slot,
                className: classNames(sty.slotSlot)
              })}
            </div>
          </div>
        ) : null}
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "parent", "inputIconPrefixSuffix"],
  parent: ["parent", "inputIconPrefixSuffix"],
  inputIconPrefixSuffix: ["inputIconPrefixSuffix"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  parent: "div";
  inputIconPrefixSuffix: typeof InputIconPrefixSuffix;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInputGroupIconPrefixSuffix__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicInputGroupIconPrefixSuffix__VariantsArgs;
    args?: PlasmicInputGroupIconPrefixSuffix__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicInputGroupIconPrefixSuffix__Fetches;
  } & Omit<PlasmicInputGroupIconPrefixSuffix__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicInputGroupIconPrefixSuffix__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicInputGroupIconPrefixSuffix__ArgProps,
      internalVariantPropNames: PlasmicInputGroupIconPrefixSuffix__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicInputGroupIconPrefixSuffix__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInputGroupIconPrefixSuffix";
  } else {
    func.displayName = `PlasmicInputGroupIconPrefixSuffix.${nodeName}`;
  }
  return func;
}

export const PlasmicInputGroupIconPrefixSuffix = Object.assign(
  // Top-level PlasmicInputGroupIconPrefixSuffix renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    parent: makeNodeComponent("parent"),
    inputIconPrefixSuffix: makeNodeComponent("inputIconPrefixSuffix"),

    // Metadata about props expected for PlasmicInputGroupIconPrefixSuffix
    internalVariantProps: PlasmicInputGroupIconPrefixSuffix__VariantProps,
    internalArgProps: PlasmicInputGroupIconPrefixSuffix__ArgProps
  }
);

export default PlasmicInputGroupIconPrefixSuffix;
/* prettier-ignore-end */
