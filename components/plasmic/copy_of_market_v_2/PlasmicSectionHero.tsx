// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: 7MAcSDI-fMePWZ
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import HeroWelcomeCta from "../../HeroWelcomeCta"; // plasmic-import: fiFOLWCFmv_eSP/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: biX3aS42hiG0fF/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicSectionHero.module.css"; // plasmic-import: 7MAcSDI-fMePWZ/css

export type PlasmicSectionHero__VariantMembers = {
  persona: "member" | "partner";
};

export type PlasmicSectionHero__VariantsArgs = {
  persona?: SingleChoiceArg<"member" | "partner">;
};

type VariantPropType = keyof PlasmicSectionHero__VariantsArgs;
export const PlasmicSectionHero__VariantProps = new Array<VariantPropType>(
  "persona"
);

export type PlasmicSectionHero__ArgsType = {};
type ArgPropType = keyof PlasmicSectionHero__ArgsType;
export const PlasmicSectionHero__ArgProps = new Array<ArgPropType>();

export type PlasmicSectionHero__OverridesType = {
  root?: p.Flex<"div">;
  heroTextImageDiv?: p.Flex<"div">;
  heroWelcomeCta?: p.Flex<typeof HeroWelcomeCta>;
};

export interface DefaultSectionHeroProps {
  persona?: SingleChoiceArg<"member" | "partner">;
  className?: string;
}

function PlasmicSectionHero__RenderFunc(props: {
  variants: PlasmicSectionHero__VariantsArgs;
  args: PlasmicSectionHero__ArgsType;
  overrides: PlasmicSectionHero__OverridesType;
  dataFetches?: PlasmicSectionHero__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__persona_member]: hasVariant(variants, "persona", "member"),
        [sty.root__persona_partner]: hasVariant(variants, "persona", "partner")
      })}
    >
      <div
        data-plasmic-name={"heroTextImageDiv"}
        data-plasmic-override={overrides.heroTextImageDiv}
        className={classNames(defaultcss.all, sty.heroTextImageDiv, {
          [sty.heroTextImageDiv__persona_member]: hasVariant(
            variants,
            "persona",
            "member"
          ),
          [sty.heroTextImageDiv__persona_partner]: hasVariant(
            variants,
            "persona",
            "partner"
          )
        })}
      >
        <HeroWelcomeCta
          data-plasmic-name={"heroWelcomeCta"}
          data-plasmic-override={overrides.heroWelcomeCta}
          className={classNames("__wab_instance", sty.heroWelcomeCta, {
            [sty.heroWelcomeCta__persona_member]: hasVariant(
              variants,
              "persona",
              "member"
            ),
            [sty.heroWelcomeCta__persona_partner]: hasVariant(
              variants,
              "persona",
              "partner"
            )
          })}
          cta={
            hasVariant(variants, "persona", "partner")
              ? undefined
              : hasVariant(variants, "persona", "member")
              ? undefined
              : hasVariant(globalVariants, "screen", "desktop")
              ? undefined
              : undefined
          }
          persona={
            hasVariant(variants, "persona", "partner")
              ? ("partner" as const)
              : hasVariant(variants, "persona", "member") &&
                hasVariant(globalVariants, "screen", "desktop")
              ? ("member" as const)
              : hasVariant(variants, "persona", "member")
              ? ("member" as const)
              : hasVariant(globalVariants, "screen", "desktop")
              ? ("partner" as const)
              : ("partner" as const)
          }
          size={
            hasVariant(variants, "persona", "partner") &&
            hasVariant(globalVariants, "screen", "mobile")
              ? ("_270" as const)
              : hasVariant(variants, "persona", "partner")
              ? ("_720" as const)
              : hasVariant(variants, "persona", "member") &&
                hasVariant(globalVariants, "screen", "mobile")
              ? ("_360" as const)
              : hasVariant(variants, "persona", "member") &&
                hasVariant(globalVariants, "screen", "desktop")
              ? ("_720" as const)
              : hasVariant(variants, "persona", "member")
              ? ("_720" as const)
              : hasVariant(globalVariants, "screen", "mobile")
              ? ("_360" as const)
              : ("_720" as const)
          }
        >
          {hasVariant(variants, "persona", "partner")
            ? "Reach a global audience selling your unique professional design and technology services to entrepreneurs and startups around the world"
            : hasVariant(variants, "persona", "member")
            ? "Find all the technology products and services you need to startup, launch, and grow your business."
            : hasVariant(globalVariants, "screen", "mobile")
            ? "Reach a global audience selling your unique design and technology services to entrepreneurs and startups around the world"
            : hasVariant(globalVariants, "screen", "desktop")
            ? "Find creative agencies helping entrepreneurs and startups succeed with product development, technology, and growth."
            : "The marketplace-community for international design and development agencies to sell professional design and technology services globally."}
        </HeroWelcomeCta>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "heroTextImageDiv", "heroWelcomeCta"],
  heroTextImageDiv: ["heroTextImageDiv", "heroWelcomeCta"],
  heroWelcomeCta: ["heroWelcomeCta"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  heroTextImageDiv: "div";
  heroWelcomeCta: typeof HeroWelcomeCta;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSectionHero__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSectionHero__VariantsArgs;
    args?: PlasmicSectionHero__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicSectionHero__Fetches;
  } & Omit<PlasmicSectionHero__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSectionHero__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSectionHero__ArgProps,
      internalVariantPropNames: PlasmicSectionHero__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicSectionHero__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSectionHero";
  } else {
    func.displayName = `PlasmicSectionHero.${nodeName}`;
  }
  return func;
}

export const PlasmicSectionHero = Object.assign(
  // Top-level PlasmicSectionHero renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    heroTextImageDiv: makeNodeComponent("heroTextImageDiv"),
    heroWelcomeCta: makeNodeComponent("heroWelcomeCta"),

    // Metadata about props expected for PlasmicSectionHero
    internalVariantProps: PlasmicSectionHero__VariantProps,
    internalArgProps: PlasmicSectionHero__ArgProps
  }
);

export default PlasmicSectionHero;
/* prettier-ignore-end */
