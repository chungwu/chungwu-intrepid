// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: eHJa7ciga7ihS0
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: gpNjXfbD_ZdpPU/component
import ButtonConnectedAccount from "../../ButtonConnectedAccount"; // plasmic-import: gtSe0S4gPoo40V/component
import ButtonLinkPrimary from "../../ButtonLinkPrimary"; // plasmic-import: tSiOWgKlHR05p7/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: biX3aS42hiG0fF/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicCardSignUp.module.css"; // plasmic-import: eHJa7ciga7ihS0/css

import PlusBoldIcon from "./icons/PlasmicIcon__PlusBold"; // plasmic-import: lhSEEajPJGZatfD/icon
import SectionDividerIcon from "./icons/PlasmicIcon__SectionDivider"; // plasmic-import: Q0kQ1Q6uwg9YSBx/icon

export type PlasmicCardSignUp__VariantMembers = {};

export type PlasmicCardSignUp__VariantsArgs = {};
type VariantPropType = keyof PlasmicCardSignUp__VariantsArgs;
export const PlasmicCardSignUp__VariantProps = new Array<VariantPropType>();

export type PlasmicCardSignUp__ArgsType = {
  id?: string;
};

type ArgPropType = keyof PlasmicCardSignUp__ArgsType;
export const PlasmicCardSignUp__ArgProps = new Array<ArgPropType>("id");

export type PlasmicCardSignUp__OverridesType = {
  formHomeSignUp?: p.Flex<"form">;
  emailInputParent?: p.Flex<"div">;
  emailText?: p.Flex<"label">;
  email?: p.Flex<"input">;
  passwordInputParent?: p.Flex<"div">;
  passwordText?: p.Flex<"label">;
  password?: p.Flex<"input">;
  submitButton?: p.Flex<typeof ButtonPrimary>;
  divider?: p.Flex<"div">;
  signupFacebookConnection?: p.Flex<typeof ButtonConnectedAccount>;
  signupGoogleConnection?: p.Flex<typeof ButtonConnectedAccount>;
  buttonLinkPrimary?: p.Flex<typeof ButtonLinkPrimary>;
  terms?: p.Flex<"div">;
  signupLegalLinks?: p.Flex<"div">;
  signupTos?: p.Flex<"a"> & Partial<LinkProps>;
  signupPrivacy?: p.Flex<"a"> & Partial<LinkProps>;
};

export interface DefaultCardSignUpProps {
  id?: string;
  className?: string;
}

function PlasmicCardSignUp__RenderFunc(props: {
  variants: PlasmicCardSignUp__VariantsArgs;
  args: PlasmicCardSignUp__ArgsType;
  overrides: PlasmicCardSignUp__OverridesType;
  dataFetches?: PlasmicCardSignUp__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <p.Stack
      as={"form"}
      data-plasmic-name={"formHomeSignUp"}
      data-plasmic-override={overrides.formHomeSignUp}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        defaultcss.all,
        projectcss.root_reset,
        sty.formHomeSignUp
      )}
      id={args.id}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"emailInputParent"}
        data-plasmic-override={overrides.emailInputParent}
        hasGap={true}
        className={classNames(defaultcss.all, sty.emailInputParent)}
      >
        <label
          data-plasmic-name={"emailText"}
          data-plasmic-override={overrides.emailText}
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.emailText
          )}
        >
          {"Email"}
        </label>

        <input
          data-plasmic-name={"email"}
          data-plasmic-override={overrides.email}
          className={classNames(defaultcss.input, sty.email)}
          placeholder={"Enter your email" as const}
          size={1 as const}
          type={
            hasVariant(globalVariants, "screen", "desktop")
              ? ("text" as const)
              : ("text" as const)
          }
          value={
            hasVariant(globalVariants, "screen", "desktop")
              ? ("" as const)
              : ("" as const)
          }
        />
      </p.Stack>

      <p.Stack
        as={"div"}
        data-plasmic-name={"passwordInputParent"}
        data-plasmic-override={overrides.passwordInputParent}
        hasGap={true}
        className={classNames(defaultcss.all, sty.passwordInputParent)}
      >
        <label
          data-plasmic-name={"passwordText"}
          data-plasmic-override={overrides.passwordText}
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.passwordText
          )}
        >
          {"Password"}
        </label>

        <input
          data-plasmic-name={"password"}
          data-plasmic-override={overrides.password}
          className={classNames(defaultcss.input, sty.password)}
          placeholder={"Enter your password" as const}
          size={1 as const}
          type={"password" as const}
          value={"" as const}
        />
      </p.Stack>

      <ButtonPrimary
        data-plasmic-name={"submitButton"}
        data-plasmic-override={overrides.submitButton}
        className={classNames("__wab_instance", sty.submitButton)}
        size={"_360" as const}
      >
        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.freeBox__hlE3L
          )}
        >
          {"Continue"}
        </div>
      </ButtonPrimary>

      <p.Stack
        as={"div"}
        data-plasmic-name={"divider"}
        data-plasmic-override={overrides.divider}
        hasGap={true}
        className={classNames(defaultcss.all, sty.divider)}
      >
        <SectionDividerIcon
          className={classNames(defaultcss.all, sty.svg__k8Rr)}
          role={"img"}
        />

        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.freeBox___1CdAu
          )}
        >
          {"or"}
        </div>

        <SectionDividerIcon
          className={classNames(defaultcss.all, sty.svg___6Erya)}
          role={"img"}
        />
      </p.Stack>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.freeBox__uZm9)}
      >
        <ButtonConnectedAccount
          data-plasmic-name={"signupFacebookConnection"}
          data-plasmic-override={overrides.signupFacebookConnection}
          className={classNames("__wab_instance", sty.signupFacebookConnection)}
          company={"facebook" as const}
          height={"_48" as const}
          width={"_360" as const}
        />

        <ButtonConnectedAccount
          data-plasmic-name={"signupGoogleConnection"}
          data-plasmic-override={overrides.signupGoogleConnection}
          className={classNames("__wab_instance", sty.signupGoogleConnection)}
          company={"google" as const}
          height={"_48" as const}
          width={"_360" as const}
        />
      </p.Stack>

      <SectionDividerIcon
        className={classNames(defaultcss.all, sty.svg__wKhjK)}
        role={"img"}
      />

      <div
        className={classNames(
          defaultcss.all,
          defaultcss.__wab_text,
          sty.freeBox__vhjSk
        )}
      >
        {"Already have an account?"}
      </div>

      {(hasVariant(globalVariants, "screen", "desktop") ? true : true) ? (
        <ButtonLinkPrimary
          data-plasmic-name={"buttonLinkPrimary"}
          data-plasmic-override={overrides.buttonLinkPrimary}
          className={classNames("__wab_instance", sty.buttonLinkPrimary)}
          color={
            hasVariant(globalVariants, "screen", "desktop")
              ? ("light" as const)
              : ("light" as const)
          }
          destination={
            hasVariant(globalVariants, "screen", "desktop")
              ? ("/log-in" as const)
              : ("/log-in" as const)
          }
          height={
            hasVariant(globalVariants, "screen", "desktop")
              ? ("_48" as const)
              : ("_48" as const)
          }
          text={
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox__gIhce
              )}
            >
              {hasVariant(globalVariants, "screen", "desktop")
                ? "Login"
                : "Login"}
            </div>
          }
          type={
            hasVariant(globalVariants, "screen", "desktop")
              ? ("outline" as const)
              : ("outline" as const)
          }
          width={
            hasVariant(globalVariants, "screen", "desktop")
              ? ("_360" as const)
              : ("_360" as const)
          }
        />
      ) : null}

      <div
        data-plasmic-name={"terms"}
        data-plasmic-override={overrides.terms}
        className={classNames(defaultcss.all, defaultcss.__wab_text, sty.terms)}
      >
        {
          'By selecting "Continue", I agree to Intrepid\'s Terms of Service, Privacy Policy,  and to receive members-only deals, inspiration, marketing emails, and push notifications. You can opt out of receiving these at any time in your account settings or directly from the marketing notification'
        }
      </div>

      <div
        data-plasmic-name={"signupLegalLinks"}
        data-plasmic-override={overrides.signupLegalLinks}
        className={classNames(defaultcss.all, sty.signupLegalLinks)}
      >
        <p.PlasmicLink
          data-plasmic-name={"signupTos"}
          data-plasmic-override={overrides.signupTos}
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.signupTos
          )}
          component={Link}
          href={"/terms" as const}
          platform={"nextjs"}
        >
          {"Terms of service"}
        </p.PlasmicLink>

        <p.PlasmicLink
          data-plasmic-name={"signupPrivacy"}
          data-plasmic-override={overrides.signupPrivacy}
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.signupPrivacy
          )}
          component={Link}
          href={"/privacy" as const}
          platform={"nextjs"}
        >
          {"Privacy policy"}
        </p.PlasmicLink>
      </div>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  formHomeSignUp: [
    "formHomeSignUp",
    "emailInputParent",
    "emailText",
    "email",
    "passwordInputParent",
    "passwordText",
    "password",
    "submitButton",
    "divider",
    "signupFacebookConnection",
    "signupGoogleConnection",
    "buttonLinkPrimary",
    "terms",
    "signupLegalLinks",
    "signupTos",
    "signupPrivacy"
  ],
  emailInputParent: ["emailInputParent", "emailText", "email"],
  emailText: ["emailText"],
  email: ["email"],
  passwordInputParent: ["passwordInputParent", "passwordText", "password"],
  passwordText: ["passwordText"],
  password: ["password"],
  submitButton: ["submitButton"],
  divider: ["divider"],
  signupFacebookConnection: ["signupFacebookConnection"],
  signupGoogleConnection: ["signupGoogleConnection"],
  buttonLinkPrimary: ["buttonLinkPrimary"],
  terms: ["terms"],
  signupLegalLinks: ["signupLegalLinks", "signupTos", "signupPrivacy"],
  signupTos: ["signupTos"],
  signupPrivacy: ["signupPrivacy"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  formHomeSignUp: "form";
  emailInputParent: "div";
  emailText: "label";
  email: "input";
  passwordInputParent: "div";
  passwordText: "label";
  password: "input";
  submitButton: typeof ButtonPrimary;
  divider: "div";
  signupFacebookConnection: typeof ButtonConnectedAccount;
  signupGoogleConnection: typeof ButtonConnectedAccount;
  buttonLinkPrimary: typeof ButtonLinkPrimary;
  terms: "div";
  signupLegalLinks: "div";
  signupTos: "a";
  signupPrivacy: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCardSignUp__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCardSignUp__VariantsArgs;
    args?: PlasmicCardSignUp__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicCardSignUp__Fetches;
  } & Omit<PlasmicCardSignUp__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCardSignUp__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCardSignUp__ArgProps,
      internalVariantPropNames: PlasmicCardSignUp__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicCardSignUp__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "formHomeSignUp") {
    func.displayName = "PlasmicCardSignUp";
  } else {
    func.displayName = `PlasmicCardSignUp.${nodeName}`;
  }
  return func;
}

export const PlasmicCardSignUp = Object.assign(
  // Top-level PlasmicCardSignUp renders the root element
  makeNodeComponent("formHomeSignUp"),
  {
    // Helper components rendering sub-elements
    emailInputParent: makeNodeComponent("emailInputParent"),
    emailText: makeNodeComponent("emailText"),
    email: makeNodeComponent("email"),
    passwordInputParent: makeNodeComponent("passwordInputParent"),
    passwordText: makeNodeComponent("passwordText"),
    password: makeNodeComponent("password"),
    submitButton: makeNodeComponent("submitButton"),
    divider: makeNodeComponent("divider"),
    signupFacebookConnection: makeNodeComponent("signupFacebookConnection"),
    signupGoogleConnection: makeNodeComponent("signupGoogleConnection"),
    buttonLinkPrimary: makeNodeComponent("buttonLinkPrimary"),
    terms: makeNodeComponent("terms"),
    signupLegalLinks: makeNodeComponent("signupLegalLinks"),
    signupTos: makeNodeComponent("signupTos"),
    signupPrivacy: makeNodeComponent("signupPrivacy"),

    // Metadata about props expected for PlasmicCardSignUp
    internalVariantProps: PlasmicCardSignUp__VariantProps,
    internalArgProps: PlasmicCardSignUp__ArgProps
  }
);

export default PlasmicCardSignUp;
/* prettier-ignore-end */
