// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: GMAvcEQGmyB86b
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ButtonStripeVerification from "../../ButtonStripeVerification"; // plasmic-import: yR30m43Hlvxo_B/component
import ChipStripeLink from "../../ChipStripeLink"; // plasmic-import: WNu_2sznJMMpja/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicButtonGroupStripeVerification.module.css"; // plasmic-import: GMAvcEQGmyB86b/css

export type PlasmicButtonGroupStripeVerification__VariantMembers = {};

export type PlasmicButtonGroupStripeVerification__VariantsArgs = {};
type VariantPropType = keyof PlasmicButtonGroupStripeVerification__VariantsArgs;
export const PlasmicButtonGroupStripeVerification__VariantProps =
  new Array<VariantPropType>();

export type PlasmicButtonGroupStripeVerification__ArgsType = {};
type ArgPropType = keyof PlasmicButtonGroupStripeVerification__ArgsType;
export const PlasmicButtonGroupStripeVerification__ArgProps =
  new Array<ArgPropType>();

export type PlasmicButtonGroupStripeVerification__OverridesType = {
  root?: p.Flex<"div">;
  buttonStripeVerification?: p.Flex<typeof ButtonStripeVerification>;
  noteLinkParent?: p.Flex<"div">;
  descriptionParent?: p.Flex<"div">;
  chipStripeLink?: p.Flex<typeof ChipStripeLink>;
};

export interface DefaultButtonGroupStripeVerificationProps {
  className?: string;
}

function PlasmicButtonGroupStripeVerification__RenderFunc(props: {
  variants: PlasmicButtonGroupStripeVerification__VariantsArgs;
  args: PlasmicButtonGroupStripeVerification__ArgsType;
  overrides: PlasmicButtonGroupStripeVerification__OverridesType;
  dataFetches?: PlasmicButtonGroupStripeVerification__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <ButtonStripeVerification
        data-plasmic-name={"buttonStripeVerification"}
        data-plasmic-override={overrides.buttonStripeVerification}
        className={classNames("__wab_instance", sty.buttonStripeVerification)}
        text={
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox__bzivO
            )}
          >
            {"Get verified with"}
          </div>
        }
      />

      <p.Stack
        as={"div"}
        data-plasmic-name={"noteLinkParent"}
        data-plasmic-override={overrides.noteLinkParent}
        hasGap={true}
        className={classNames(defaultcss.all, sty.noteLinkParent)}
      >
        <div
          data-plasmic-name={"descriptionParent"}
          data-plasmic-override={overrides.descriptionParent}
          className={classNames(defaultcss.all, sty.descriptionParent)}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox___8QbzR
            )}
          >
            {"Verify your account and activate more benefits"}
          </div>
        </div>

        <ChipStripeLink
          data-plasmic-name={"chipStripeLink"}
          data-plasmic-override={overrides.chipStripeLink}
          className={classNames("__wab_instance", sty.chipStripeLink)}
        />
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "buttonStripeVerification",
    "noteLinkParent",
    "descriptionParent",
    "chipStripeLink"
  ],
  buttonStripeVerification: ["buttonStripeVerification"],
  noteLinkParent: ["noteLinkParent", "descriptionParent", "chipStripeLink"],
  descriptionParent: ["descriptionParent"],
  chipStripeLink: ["chipStripeLink"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  buttonStripeVerification: typeof ButtonStripeVerification;
  noteLinkParent: "div";
  descriptionParent: "div";
  chipStripeLink: typeof ChipStripeLink;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicButtonGroupStripeVerification__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicButtonGroupStripeVerification__VariantsArgs;
    args?: PlasmicButtonGroupStripeVerification__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicButtonGroupStripeVerification__Fetches;
  } & Omit< // Specify variants directly as props
    PlasmicButtonGroupStripeVerification__VariantsArgs,
    ReservedPropsType
  > &
    // Specify args directly as props
    Omit<PlasmicButtonGroupStripeVerification__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicButtonGroupStripeVerification__ArgProps,
      internalVariantPropNames:
        PlasmicButtonGroupStripeVerification__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicButtonGroupStripeVerification__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicButtonGroupStripeVerification";
  } else {
    func.displayName = `PlasmicButtonGroupStripeVerification.${nodeName}`;
  }
  return func;
}

export const PlasmicButtonGroupStripeVerification = Object.assign(
  // Top-level PlasmicButtonGroupStripeVerification renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    buttonStripeVerification: makeNodeComponent("buttonStripeVerification"),
    noteLinkParent: makeNodeComponent("noteLinkParent"),
    descriptionParent: makeNodeComponent("descriptionParent"),
    chipStripeLink: makeNodeComponent("chipStripeLink"),

    // Metadata about props expected for PlasmicButtonGroupStripeVerification
    internalVariantProps: PlasmicButtonGroupStripeVerification__VariantProps,
    internalArgProps: PlasmicButtonGroupStripeVerification__ArgProps
  }
);

export default PlasmicButtonGroupStripeVerification;
/* prettier-ignore-end */
