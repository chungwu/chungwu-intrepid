// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: 1AwkgOCapttpWZ
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import IconSocialProfile from "../../IconSocialProfile"; // plasmic-import: _qRaKUFCQia4l9Z/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicElementProfileSocial.module.css"; // plasmic-import: 1AwkgOCapttpWZ/css

export type PlasmicElementProfileSocial__VariantMembers = {};

export type PlasmicElementProfileSocial__VariantsArgs = {};
type VariantPropType = keyof PlasmicElementProfileSocial__VariantsArgs;
export const PlasmicElementProfileSocial__VariantProps =
  new Array<VariantPropType>();

export type PlasmicElementProfileSocial__ArgsType = {};
type ArgPropType = keyof PlasmicElementProfileSocial__ArgsType;
export const PlasmicElementProfileSocial__ArgProps = new Array<ArgPropType>();

export type PlasmicElementProfileSocial__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  social?: p.Flex<"div">;
  socialIconsParent?: p.Flex<"div">;
};

export interface DefaultElementProfileSocialProps {
  className?: string;
}

function PlasmicElementProfileSocial__RenderFunc(props: {
  variants: PlasmicElementProfileSocial__VariantsArgs;
  args: PlasmicElementProfileSocial__ArgsType;
  overrides: PlasmicElementProfileSocial__OverridesType;
  dataFetches?: PlasmicElementProfileSocial__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(defaultcss.all, sty.freeBox)}
      >
        <div
          data-plasmic-name={"social"}
          data-plasmic-override={overrides.social}
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.social
          )}
        >
          {"Social"}
        </div>
      </div>

      <p.Stack
        as={"div"}
        data-plasmic-name={"socialIconsParent"}
        data-plasmic-override={overrides.socialIconsParent}
        hasGap={true}
        className={classNames(defaultcss.all, sty.socialIconsParent)}
      >
        <IconSocialProfile
          className={classNames("__wab_instance", sty.iconSocialProfile__zsms8)}
          size={"_45X45" as const}
          social={"instagram" as const}
        />

        <IconSocialProfile
          className={classNames("__wab_instance", sty.iconSocialProfile__ojT33)}
          size={"_45X45" as const}
          social={"tikTok" as const}
        />

        <IconSocialProfile
          className={classNames("__wab_instance", sty.iconSocialProfile__yo9Vd)}
          size={"_45X45" as const}
          social={"youtube" as const}
        />

        <IconSocialProfile
          className={classNames("__wab_instance", sty.iconSocialProfile__efUiN)}
          size={"_45X45" as const}
          social={"twitter" as const}
        />

        <IconSocialProfile
          className={classNames("__wab_instance", sty.iconSocialProfile__a09Qv)}
          size={"_45X45" as const}
          social={"snapchat" as const}
        />

        <IconSocialProfile
          className={classNames("__wab_instance", sty.iconSocialProfile__kyq9E)}
          size={"_45X45" as const}
          social={"twitch" as const}
        />

        <IconSocialProfile
          className={classNames("__wab_instance", sty.iconSocialProfile__jcIpr)}
          size={"_45X45" as const}
          social={"discord" as const}
        />

        <IconSocialProfile
          className={classNames("__wab_instance", sty.iconSocialProfile__qsilp)}
          size={"_45X45" as const}
          social={"pinterest" as const}
        />

        <IconSocialProfile
          className={classNames("__wab_instance", sty.iconSocialProfile__ujQtj)}
          size={"_45X45" as const}
          social={"wechat" as const}
        />

        <IconSocialProfile
          className={classNames("__wab_instance", sty.iconSocialProfile__sGpF)}
          size={"_45X45" as const}
          social={"hackerNews" as const}
        />
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "social", "socialIconsParent"],
  freeBox: ["freeBox", "social"],
  social: ["social"],
  socialIconsParent: ["socialIconsParent"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  social: "div";
  socialIconsParent: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicElementProfileSocial__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicElementProfileSocial__VariantsArgs;
    args?: PlasmicElementProfileSocial__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicElementProfileSocial__Fetches;
  } & Omit<PlasmicElementProfileSocial__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicElementProfileSocial__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicElementProfileSocial__ArgProps,
      internalVariantPropNames: PlasmicElementProfileSocial__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicElementProfileSocial__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicElementProfileSocial";
  } else {
    func.displayName = `PlasmicElementProfileSocial.${nodeName}`;
  }
  return func;
}

export const PlasmicElementProfileSocial = Object.assign(
  // Top-level PlasmicElementProfileSocial renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    social: makeNodeComponent("social"),
    socialIconsParent: makeNodeComponent("socialIconsParent"),

    // Metadata about props expected for PlasmicElementProfileSocial
    internalVariantProps: PlasmicElementProfileSocial__VariantProps,
    internalArgProps: PlasmicElementProfileSocial__ArgProps
  }
);

export default PlasmicElementProfileSocial;
/* prettier-ignore-end */
