// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: pvHb6wkRxy_-nIy
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicBadgeCommunityRating.module.css"; // plasmic-import: pvHb6wkRxy_-nIy/css

import SuperpowerIcon from "./icons/PlasmicIcon__Superpower"; // plasmic-import: zLcEmNet-LofjDV/icon

export type PlasmicBadgeCommunityRating__VariantMembers = {};

export type PlasmicBadgeCommunityRating__VariantsArgs = {};
type VariantPropType = keyof PlasmicBadgeCommunityRating__VariantsArgs;
export const PlasmicBadgeCommunityRating__VariantProps =
  new Array<VariantPropType>();

export type PlasmicBadgeCommunityRating__ArgsType = {
  overallMemberRatingNumber?: React.ReactNode;
};

type ArgPropType = keyof PlasmicBadgeCommunityRating__ArgsType;
export const PlasmicBadgeCommunityRating__ArgProps = new Array<ArgPropType>(
  "overallMemberRatingNumber"
);

export type PlasmicBadgeCommunityRating__OverridesType = {
  parent?: p.Flex<"div">;
  superpowerIcon?: p.Flex<"svg">;
  overallMemberRatingNumber?: p.Flex<"div">;
};

export interface DefaultBadgeCommunityRatingProps {
  overallMemberRatingNumber?: React.ReactNode;
  className?: string;
}

function PlasmicBadgeCommunityRating__RenderFunc(props: {
  variants: PlasmicBadgeCommunityRating__VariantsArgs;
  args: PlasmicBadgeCommunityRating__ArgsType;
  overrides: PlasmicBadgeCommunityRating__OverridesType;
  dataFetches?: PlasmicBadgeCommunityRating__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"parent"}
      data-plasmic-override={overrides.parent}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.parent)}
    >
      <SuperpowerIcon
        data-plasmic-name={"superpowerIcon"}
        data-plasmic-override={overrides.superpowerIcon}
        className={classNames(defaultcss.all, sty.superpowerIcon)}
        role={"img"}
      />

      <div
        data-plasmic-name={"overallMemberRatingNumber"}
        data-plasmic-override={overrides.overallMemberRatingNumber}
        className={classNames(defaultcss.all, sty.overallMemberRatingNumber)}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox__z1244
              )}
            >
              {"4.8"}
            </div>
          ),

          value: args.overallMemberRatingNumber
        })}
      </div>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  parent: ["parent", "superpowerIcon", "overallMemberRatingNumber"],
  superpowerIcon: ["superpowerIcon"],
  overallMemberRatingNumber: ["overallMemberRatingNumber"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  parent: "div";
  superpowerIcon: "svg";
  overallMemberRatingNumber: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBadgeCommunityRating__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBadgeCommunityRating__VariantsArgs;
    args?: PlasmicBadgeCommunityRating__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicBadgeCommunityRating__Fetches;
  } & Omit<PlasmicBadgeCommunityRating__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicBadgeCommunityRating__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicBadgeCommunityRating__ArgProps,
      internalVariantPropNames: PlasmicBadgeCommunityRating__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicBadgeCommunityRating__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "parent") {
    func.displayName = "PlasmicBadgeCommunityRating";
  } else {
    func.displayName = `PlasmicBadgeCommunityRating.${nodeName}`;
  }
  return func;
}

export const PlasmicBadgeCommunityRating = Object.assign(
  // Top-level PlasmicBadgeCommunityRating renders the root element
  makeNodeComponent("parent"),
  {
    // Helper components rendering sub-elements
    superpowerIcon: makeNodeComponent("superpowerIcon"),
    overallMemberRatingNumber: makeNodeComponent("overallMemberRatingNumber"),

    // Metadata about props expected for PlasmicBadgeCommunityRating
    internalVariantProps: PlasmicBadgeCommunityRating__VariantProps,
    internalArgProps: PlasmicBadgeCommunityRating__ArgProps
  }
);

export default PlasmicBadgeCommunityRating;
/* prettier-ignore-end */
