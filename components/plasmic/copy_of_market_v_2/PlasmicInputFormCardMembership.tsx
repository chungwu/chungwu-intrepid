// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: WKbffIDIUTLarY
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ChipBadgeDisplay from "../../ChipBadgeDisplay"; // plasmic-import: SSFk1BeJq0HW6X/component
import TextLinkUnderlinePrimary from "../../TextLinkUnderlinePrimary"; // plasmic-import: 6pY-cK_-KJMdF_/component
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: gpNjXfbD_ZdpPU/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicInputFormCardMembership.module.css"; // plasmic-import: WKbffIDIUTLarY/css

import PlusBoldIcon from "./icons/PlasmicIcon__PlusBold"; // plasmic-import: lhSEEajPJGZatfD/icon
import Icon170Icon from "./icons/PlasmicIcon__Icon170"; // plasmic-import: 8dZnFQrWLcwMPnF/icon
import Icon114Icon from "./icons/PlasmicIcon__Icon114"; // plasmic-import: VfXaOZlZvq_xDZf/icon

export type PlasmicInputFormCardMembership__VariantMembers = {
  link: "link";
  button: "button";
  border: "border";
};

export type PlasmicInputFormCardMembership__VariantsArgs = {
  link?: SingleBooleanChoiceArg<"link">;
  button?: SingleBooleanChoiceArg<"button">;
  border?: SingleBooleanChoiceArg<"border">;
};

type VariantPropType = keyof PlasmicInputFormCardMembership__VariantsArgs;
export const PlasmicInputFormCardMembership__VariantProps =
  new Array<VariantPropType>("link", "button", "border");

export type PlasmicInputFormCardMembership__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  text?: React.ReactNode;
  slot3?: React.ReactNode;
  slot4?: React.ReactNode;
  badge?: React.ReactNode;
};

type ArgPropType = keyof PlasmicInputFormCardMembership__ArgsType;
export const PlasmicInputFormCardMembership__ArgProps = new Array<ArgPropType>(
  "children",
  "slot",
  "text",
  "slot3",
  "slot4",
  "badge"
);

export type PlasmicInputFormCardMembership__OverridesType = {
  root?: p.Flex<"div">;
  parent?: p.Flex<"div">;
  headlineParent?: p.Flex<"div">;
  headlineSubheadParent?: p.Flex<"div">;
  headline?: p.Flex<"div">;
  subhead?: p.Flex<"div">;
  badgeParent?: p.Flex<"div">;
  multiLineTextParent?: p.Flex<"div">;
  multiLineText?: p.Flex<"div">;
  descriptionParent?: p.Flex<"div">;
  textLinkParent?: p.Flex<"div">;
  textLinkUnderlinePrimary?: p.Flex<typeof TextLinkUnderlinePrimary>;
};

export interface DefaultInputFormCardMembershipProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  text?: React.ReactNode;
  slot3?: React.ReactNode;
  slot4?: React.ReactNode;
  badge?: React.ReactNode;
  link?: SingleBooleanChoiceArg<"link">;
  button?: SingleBooleanChoiceArg<"button">;
  border?: SingleBooleanChoiceArg<"border">;
  className?: string;
}

function PlasmicInputFormCardMembership__RenderFunc(props: {
  variants: PlasmicInputFormCardMembership__VariantsArgs;
  args: PlasmicInputFormCardMembership__ArgsType;
  overrides: PlasmicInputFormCardMembership__OverridesType;
  dataFetches?: PlasmicInputFormCardMembership__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__border]: hasVariant(variants, "border", "border")
      })}
    >
      <div
        data-plasmic-name={"parent"}
        data-plasmic-override={overrides.parent}
        className={classNames(defaultcss.all, sty.parent, {
          [sty.parent__border]: hasVariant(variants, "border", "border")
        })}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"headlineParent"}
          data-plasmic-override={overrides.headlineParent}
          hasGap={true}
          className={classNames(defaultcss.all, sty.headlineParent, {
            [sty.headlineParent__border]: hasVariant(
              variants,
              "border",
              "border"
            )
          })}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"headlineSubheadParent"}
            data-plasmic-override={overrides.headlineSubheadParent}
            hasGap={true}
            className={classNames(defaultcss.all, sty.headlineSubheadParent)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"headline"}
              data-plasmic-override={overrides.headline}
              hasGap={true}
              className={classNames(defaultcss.all, sty.headline)}
            >
              <div className={classNames(defaultcss.all, sty.freeBox__iLh2G)}>
                <div className={classNames(defaultcss.all, sty.freeBox__iv6Th)}>
                  {p.renderPlasmicSlot({
                    defaultContents: "Membership",
                    value: args.children,
                    className: classNames(sty.slotChildren)
                  })}
                </div>
              </div>
            </p.Stack>

            <div
              data-plasmic-name={"subhead"}
              data-plasmic-override={overrides.subhead}
              className={classNames(defaultcss.all, sty.subhead)}
            >
              {p.renderPlasmicSlot({
                defaultContents:
                  "Your personal account membership plan details",
                value: args.slot,
                className: classNames(sty.slotSlot)
              })}
            </div>

            <div
              data-plasmic-name={"badgeParent"}
              data-plasmic-override={overrides.badgeParent}
              className={classNames(defaultcss.all, sty.badgeParent)}
            >
              {p.renderPlasmicSlot({
                defaultContents: (
                  <ChipBadgeDisplay
                    color={"brand" as const}
                    type={"ghost" as const}
                  >
                    {"Creator"}
                  </ChipBadgeDisplay>
                ),

                value: args.badge
              })}
            </div>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"multiLineTextParent"}
            data-plasmic-override={overrides.multiLineTextParent}
            hasGap={true}
            className={classNames(defaultcss.all, sty.multiLineTextParent)}
          >
            <div
              data-plasmic-name={"multiLineText"}
              data-plasmic-override={overrides.multiLineText}
              className={classNames(defaultcss.all, sty.multiLineText)}
            >
              {p.renderPlasmicSlot({
                defaultContents:
                  "Our Creator and Maker member accounts are free forever. To get the most from the Intrepid community, for professional purposes, or to work with a team, get started by creating a company or contacting sales.",
                value: args.text,
                className: classNames(sty.slotText, {
                  [sty.slotText__border_link]:
                    hasVariant(variants, "border", "border") &&
                    hasVariant(variants, "link", "link")
                })
              })}
            </div>
          </p.Stack>
        </p.Stack>

        <div
          data-plasmic-name={"descriptionParent"}
          data-plasmic-override={overrides.descriptionParent}
          className={classNames(defaultcss.all, sty.descriptionParent, {
            [sty.descriptionParent__border_link]:
              hasVariant(variants, "border", "border") &&
              hasVariant(variants, "link", "link"),
            [sty.descriptionParent__button_link]:
              hasVariant(variants, "button", "button") &&
              hasVariant(variants, "link", "link"),
            [sty.descriptionParent__link]: hasVariant(variants, "link", "link")
          })}
        >
          <div
            data-plasmic-name={"textLinkParent"}
            data-plasmic-override={overrides.textLinkParent}
            className={classNames(defaultcss.all, sty.textLinkParent, {
              [sty.textLinkParent__border_link]:
                hasVariant(variants, "border", "border") &&
                hasVariant(variants, "link", "link"),
              [sty.textLinkParent__link]: hasVariant(variants, "link", "link")
            })}
          >
            <TextLinkUnderlinePrimary
              data-plasmic-name={"textLinkUnderlinePrimary"}
              data-plasmic-override={overrides.textLinkUnderlinePrimary}
              className={classNames(
                "__wab_instance",
                sty.textLinkUnderlinePrimary
              )}
              text={p.renderPlasmicSlot({
                defaultContents: "Contact sales",
                value: args.slot3
              })}
            />
          </div>

          {p.renderPlasmicSlot({
            defaultContents: true ? (
              <ButtonPrimary
                className={classNames(
                  "__wab_instance",
                  sty.buttonPrimary__pix7I
                )}
                size={"_140" as const}
              >
                {"Upgrade"}
              </ButtonPrimary>
            ) : null,
            value: args.slot4
          })}
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "parent",
    "headlineParent",
    "headlineSubheadParent",
    "headline",
    "subhead",
    "badgeParent",
    "multiLineTextParent",
    "multiLineText",
    "descriptionParent",
    "textLinkParent",
    "textLinkUnderlinePrimary"
  ],
  parent: [
    "parent",
    "headlineParent",
    "headlineSubheadParent",
    "headline",
    "subhead",
    "badgeParent",
    "multiLineTextParent",
    "multiLineText",
    "descriptionParent",
    "textLinkParent",
    "textLinkUnderlinePrimary"
  ],
  headlineParent: [
    "headlineParent",
    "headlineSubheadParent",
    "headline",
    "subhead",
    "badgeParent",
    "multiLineTextParent",
    "multiLineText"
  ],
  headlineSubheadParent: [
    "headlineSubheadParent",
    "headline",
    "subhead",
    "badgeParent"
  ],
  headline: ["headline"],
  subhead: ["subhead"],
  badgeParent: ["badgeParent"],
  multiLineTextParent: ["multiLineTextParent", "multiLineText"],
  multiLineText: ["multiLineText"],
  descriptionParent: [
    "descriptionParent",
    "textLinkParent",
    "textLinkUnderlinePrimary"
  ],
  textLinkParent: ["textLinkParent", "textLinkUnderlinePrimary"],
  textLinkUnderlinePrimary: ["textLinkUnderlinePrimary"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  parent: "div";
  headlineParent: "div";
  headlineSubheadParent: "div";
  headline: "div";
  subhead: "div";
  badgeParent: "div";
  multiLineTextParent: "div";
  multiLineText: "div";
  descriptionParent: "div";
  textLinkParent: "div";
  textLinkUnderlinePrimary: typeof TextLinkUnderlinePrimary;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInputFormCardMembership__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicInputFormCardMembership__VariantsArgs;
    args?: PlasmicInputFormCardMembership__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicInputFormCardMembership__Fetches;
  } & Omit<PlasmicInputFormCardMembership__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicInputFormCardMembership__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicInputFormCardMembership__ArgProps,
      internalVariantPropNames: PlasmicInputFormCardMembership__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicInputFormCardMembership__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInputFormCardMembership";
  } else {
    func.displayName = `PlasmicInputFormCardMembership.${nodeName}`;
  }
  return func;
}

export const PlasmicInputFormCardMembership = Object.assign(
  // Top-level PlasmicInputFormCardMembership renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    parent: makeNodeComponent("parent"),
    headlineParent: makeNodeComponent("headlineParent"),
    headlineSubheadParent: makeNodeComponent("headlineSubheadParent"),
    headline: makeNodeComponent("headline"),
    subhead: makeNodeComponent("subhead"),
    badgeParent: makeNodeComponent("badgeParent"),
    multiLineTextParent: makeNodeComponent("multiLineTextParent"),
    multiLineText: makeNodeComponent("multiLineText"),
    descriptionParent: makeNodeComponent("descriptionParent"),
    textLinkParent: makeNodeComponent("textLinkParent"),
    textLinkUnderlinePrimary: makeNodeComponent("textLinkUnderlinePrimary"),

    // Metadata about props expected for PlasmicInputFormCardMembership
    internalVariantProps: PlasmicInputFormCardMembership__VariantProps,
    internalArgProps: PlasmicInputFormCardMembership__ArgProps
  }
);

export default PlasmicInputFormCardMembership;
/* prettier-ignore-end */
