// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: ZADAc9O40KPQwj1
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicTablePricingElementFeatureValueProp.module.css"; // plasmic-import: ZADAc9O40KPQwj1/css

import Icon129Icon from "./icons/PlasmicIcon__Icon129"; // plasmic-import: 3f8NxRRxXPSDSg5/icon

export type PlasmicTablePricingElementFeatureValueProp__VariantMembers = {
  size: "_16Px" | "_24Px";
};

export type PlasmicTablePricingElementFeatureValueProp__VariantsArgs = {
  size?: SingleChoiceArg<"_16Px" | "_24Px">;
};

type VariantPropType =
  keyof PlasmicTablePricingElementFeatureValueProp__VariantsArgs;
export const PlasmicTablePricingElementFeatureValueProp__VariantProps =
  new Array<VariantPropType>("size");

export type PlasmicTablePricingElementFeatureValueProp__ArgsType = {
  featureValueText?: React.ReactNode;
  svgCheck?: React.ReactNode;
};

type ArgPropType = keyof PlasmicTablePricingElementFeatureValueProp__ArgsType;
export const PlasmicTablePricingElementFeatureValueProp__ArgProps =
  new Array<ArgPropType>("featureValueText", "svgCheck");

export type PlasmicTablePricingElementFeatureValueProp__OverridesType = {
  root?: p.Flex<"div">;
  svgIconParent?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
};

export interface DefaultTablePricingElementFeatureValuePropProps {
  featureValueText?: React.ReactNode;
  svgCheck?: React.ReactNode;
  size?: SingleChoiceArg<"_16Px" | "_24Px">;
  className?: string;
}

function PlasmicTablePricingElementFeatureValueProp__RenderFunc(props: {
  variants: PlasmicTablePricingElementFeatureValueProp__VariantsArgs;
  args: PlasmicTablePricingElementFeatureValueProp__ArgsType;
  overrides: PlasmicTablePricingElementFeatureValueProp__OverridesType;
  dataFetches?: PlasmicTablePricingElementFeatureValueProp__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__size__16Px]: hasVariant(variants, "size", "_16Px"),
        [sty.root__size__24Px]: hasVariant(variants, "size", "_24Px")
      })}
    >
      <div
        data-plasmic-name={"svgIconParent"}
        data-plasmic-override={overrides.svgIconParent}
        className={classNames(defaultcss.all, sty.svgIconParent)}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <div className={classNames(defaultcss.all, sty.freeBox__ju3Zg)}>
              <Icon129Icon
                className={classNames(defaultcss.all, sty.svg___1Hppe)}
                role={"img"}
              />
            </div>
          ),

          value: args.svgCheck,
          className: classNames(sty.slotSvgCheck, {
            [sty.slotSvgCheck__size__16Px]: hasVariant(
              variants,
              "size",
              "_16Px"
            )
          })
        })}
      </div>

      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(defaultcss.all, sty.freeBox, {
          [sty.freeBox__size__16Px]: hasVariant(variants, "size", "_16Px")
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: "feature value proposition",
          value: args.featureValueText,
          className: classNames(sty.slotFeatureValueText, {
            [sty.slotFeatureValueText__size__16Px]: hasVariant(
              variants,
              "size",
              "_16Px"
            )
          })
        })}
      </div>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "svgIconParent", "freeBox"],
  svgIconParent: ["svgIconParent"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  svgIconParent: "div";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTablePricingElementFeatureValueProp__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTablePricingElementFeatureValueProp__VariantsArgs;
    args?: PlasmicTablePricingElementFeatureValueProp__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicTablePricingElementFeatureValueProp__Fetches;
  } & Omit< // Specify variants directly as props
    PlasmicTablePricingElementFeatureValueProp__VariantsArgs,
    ReservedPropsType
  > &
    // Specify args directly as props
    Omit<
      PlasmicTablePricingElementFeatureValueProp__ArgsType,
      ReservedPropsType
    > &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames:
        PlasmicTablePricingElementFeatureValueProp__ArgProps,
      internalVariantPropNames:
        PlasmicTablePricingElementFeatureValueProp__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicTablePricingElementFeatureValueProp__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTablePricingElementFeatureValueProp";
  } else {
    func.displayName = `PlasmicTablePricingElementFeatureValueProp.${nodeName}`;
  }
  return func;
}

export const PlasmicTablePricingElementFeatureValueProp = Object.assign(
  // Top-level PlasmicTablePricingElementFeatureValueProp renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svgIconParent: makeNodeComponent("svgIconParent"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicTablePricingElementFeatureValueProp
    internalVariantProps:
      PlasmicTablePricingElementFeatureValueProp__VariantProps,
    internalArgProps: PlasmicTablePricingElementFeatureValueProp__ArgProps
  }
);

export default PlasmicTablePricingElementFeatureValueProp;
/* prettier-ignore-end */
