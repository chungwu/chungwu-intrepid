// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: m-iJ0Cap5t77A2
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import UserAvatarButton from "../../UserAvatarButton"; // plasmic-import: S6be1w_HeX7JCB/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: biX3aS42hiG0fF/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicInputFormCardAvatar.module.css"; // plasmic-import: m-iJ0Cap5t77A2/css

export type PlasmicInputFormCardAvatar__VariantMembers = {
  subDescription: "subDescription";
  border: "border";
};

export type PlasmicInputFormCardAvatar__VariantsArgs = {
  subDescription?: SingleBooleanChoiceArg<"subDescription">;
  border?: SingleBooleanChoiceArg<"border">;
};

type VariantPropType = keyof PlasmicInputFormCardAvatar__VariantsArgs;
export const PlasmicInputFormCardAvatar__VariantProps =
  new Array<VariantPropType>("subDescription", "border");

export type PlasmicInputFormCardAvatar__ArgsType = {
  headline?: React.ReactNode;
  subHead?: React.ReactNode;
  description?: React.ReactNode;
};

type ArgPropType = keyof PlasmicInputFormCardAvatar__ArgsType;
export const PlasmicInputFormCardAvatar__ArgProps = new Array<ArgPropType>(
  "headline",
  "subHead",
  "description"
);

export type PlasmicInputFormCardAvatar__OverridesType = {
  root?: p.Flex<"div">;
  parent?: p.Flex<"div">;
  mainCard?: p.Flex<"div">;
  headlineParent?: p.Flex<"div">;
  subheadParent?: p.Flex<"div">;
  userAvatarButton?: p.Flex<typeof UserAvatarButton>;
  descriptionCard?: p.Flex<"div">;
  descriptionParent?: p.Flex<"div">;
};

export interface DefaultInputFormCardAvatarProps {
  headline?: React.ReactNode;
  subHead?: React.ReactNode;
  description?: React.ReactNode;
  subDescription?: SingleBooleanChoiceArg<"subDescription">;
  border?: SingleBooleanChoiceArg<"border">;
  className?: string;
}

function PlasmicInputFormCardAvatar__RenderFunc(props: {
  variants: PlasmicInputFormCardAvatar__VariantsArgs;
  args: PlasmicInputFormCardAvatar__ArgsType;
  overrides: PlasmicInputFormCardAvatar__OverridesType;
  dataFetches?: PlasmicInputFormCardAvatar__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__border]: hasVariant(variants, "border", "border")
      })}
    >
      <div
        data-plasmic-name={"parent"}
        data-plasmic-override={overrides.parent}
        className={classNames(defaultcss.all, sty.parent, {
          [sty.parent__border]: hasVariant(variants, "border", "border")
        })}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"mainCard"}
          data-plasmic-override={overrides.mainCard}
          hasGap={true}
          className={classNames(defaultcss.all, sty.mainCard, {
            [sty.mainCard__border]: hasVariant(variants, "border", "border"),
            [sty.mainCard__subDescription]: hasVariant(
              variants,
              "subDescription",
              "subDescription"
            )
          })}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"headlineParent"}
            data-plasmic-override={overrides.headlineParent}
            hasGap={true}
            className={classNames(defaultcss.all, sty.headlineParent, {
              [sty.headlineParent__subDescription]: hasVariant(
                variants,
                "subDescription",
                "subDescription"
              )
            })}
          >
            <div className={classNames(defaultcss.all, sty.freeBox__uzu3K)}>
              <div className={classNames(defaultcss.all, sty.freeBox__tpjTz)}>
                {p.renderPlasmicSlot({
                  defaultContents: "Headline",
                  value: args.headline,
                  className: classNames(sty.slotHeadline, {
                    [sty.slotHeadline__subDescription]: hasVariant(
                      variants,
                      "subDescription",
                      "subDescription"
                    )
                  })
                })}
              </div>
            </div>

            <div
              data-plasmic-name={"subheadParent"}
              data-plasmic-override={overrides.subheadParent}
              className={classNames(defaultcss.all, sty.subheadParent)}
            >
              {p.renderPlasmicSlot({
                defaultContents: "Sub head",
                value: args.subHead,
                className: classNames(sty.slotSubHead, {
                  [sty.slotSubHead__subDescription]: hasVariant(
                    variants,
                    "subDescription",
                    "subDescription"
                  )
                })
              })}
            </div>
          </p.Stack>

          <UserAvatarButton
            data-plasmic-name={"userAvatarButton"}
            data-plasmic-override={overrides.userAvatarButton}
            className={classNames("__wab_instance", sty.userAvatarButton)}
            size={
              hasVariant(globalVariants, "screen", "mobile")
                ? ("_64Px" as const)
                : ("_80Px" as const)
            }
          />
        </p.Stack>

        <div
          data-plasmic-name={"descriptionCard"}
          data-plasmic-override={overrides.descriptionCard}
          className={classNames(defaultcss.all, sty.descriptionCard, {
            [sty.descriptionCard__border]: hasVariant(
              variants,
              "border",
              "border"
            ),
            [sty.descriptionCard__subDescription]: hasVariant(
              variants,
              "subDescription",
              "subDescription"
            )
          })}
        >
          <div
            data-plasmic-name={"descriptionParent"}
            data-plasmic-override={overrides.descriptionParent}
            className={classNames(defaultcss.all, sty.descriptionParent, {
              [sty.descriptionParent__subDescription]: hasVariant(
                variants,
                "subDescription",
                "subDescription"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: "Description",
              value: args.description,
              className: classNames(sty.slotDescription, {
                [sty.slotDescription__subDescription]: hasVariant(
                  variants,
                  "subDescription",
                  "subDescription"
                )
              })
            })}
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "parent",
    "mainCard",
    "headlineParent",
    "subheadParent",
    "userAvatarButton",
    "descriptionCard",
    "descriptionParent"
  ],
  parent: [
    "parent",
    "mainCard",
    "headlineParent",
    "subheadParent",
    "userAvatarButton",
    "descriptionCard",
    "descriptionParent"
  ],
  mainCard: ["mainCard", "headlineParent", "subheadParent", "userAvatarButton"],
  headlineParent: ["headlineParent", "subheadParent"],
  subheadParent: ["subheadParent"],
  userAvatarButton: ["userAvatarButton"],
  descriptionCard: ["descriptionCard", "descriptionParent"],
  descriptionParent: ["descriptionParent"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  parent: "div";
  mainCard: "div";
  headlineParent: "div";
  subheadParent: "div";
  userAvatarButton: typeof UserAvatarButton;
  descriptionCard: "div";
  descriptionParent: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInputFormCardAvatar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicInputFormCardAvatar__VariantsArgs;
    args?: PlasmicInputFormCardAvatar__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicInputFormCardAvatar__Fetches;
  } & Omit<PlasmicInputFormCardAvatar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicInputFormCardAvatar__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicInputFormCardAvatar__ArgProps,
      internalVariantPropNames: PlasmicInputFormCardAvatar__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicInputFormCardAvatar__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInputFormCardAvatar";
  } else {
    func.displayName = `PlasmicInputFormCardAvatar.${nodeName}`;
  }
  return func;
}

export const PlasmicInputFormCardAvatar = Object.assign(
  // Top-level PlasmicInputFormCardAvatar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    parent: makeNodeComponent("parent"),
    mainCard: makeNodeComponent("mainCard"),
    headlineParent: makeNodeComponent("headlineParent"),
    subheadParent: makeNodeComponent("subheadParent"),
    userAvatarButton: makeNodeComponent("userAvatarButton"),
    descriptionCard: makeNodeComponent("descriptionCard"),
    descriptionParent: makeNodeComponent("descriptionParent"),

    // Metadata about props expected for PlasmicInputFormCardAvatar
    internalVariantProps: PlasmicInputFormCardAvatar__VariantProps,
    internalArgProps: PlasmicInputFormCardAvatar__ArgProps
  }
);

export default PlasmicInputFormCardAvatar;
/* prettier-ignore-end */
