// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: GciqOy8BXpcdNe
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicTextMultiLineA.module.css"; // plasmic-import: GciqOy8BXpcdNe/css

export type PlasmicTextMultiLineA__VariantMembers = {
  size: "large" | "medium";
};

export type PlasmicTextMultiLineA__VariantsArgs = {
  size?: SingleChoiceArg<"large" | "medium">;
};

type VariantPropType = keyof PlasmicTextMultiLineA__VariantsArgs;
export const PlasmicTextMultiLineA__VariantProps = new Array<VariantPropType>(
  "size"
);

export type PlasmicTextMultiLineA__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicTextMultiLineA__ArgsType;
export const PlasmicTextMultiLineA__ArgProps = new Array<ArgPropType>(
  "children"
);

export type PlasmicTextMultiLineA__OverridesType = {
  root?: p.Flex<"div">;
  textarea?: p.Flex<"textarea">;
};

export interface DefaultTextMultiLineAProps {
  children?: React.ReactNode;
  size?: SingleChoiceArg<"large" | "medium">;
  className?: string;
}

function PlasmicTextMultiLineA__RenderFunc(props: {
  variants: PlasmicTextMultiLineA__VariantsArgs;
  args: PlasmicTextMultiLineA__ArgsType;
  overrides: PlasmicTextMultiLineA__OverridesType;
  dataFetches?: PlasmicTextMultiLineA__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__size_medium]: hasVariant(variants, "size", "medium")
      })}
    >
      {p.renderPlasmicSlot({
        defaultContents: "Headline",
        value: args.children,
        className: classNames(sty.slotChildren, {
          [sty.slotChildren__size_medium]: hasVariant(
            variants,
            "size",
            "medium"
          )
        })
      })}

      <textarea
        data-plasmic-name={"textarea"}
        data-plasmic-override={overrides.textarea}
        className={classNames(defaultcss.textarea, sty.textarea, {
          [sty.textarea__size_large]: hasVariant(variants, "size", "large"),
          [sty.textarea__size_medium]: hasVariant(variants, "size", "medium")
        })}
        value={"This is a text area." as const}
      />
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "textarea"],
  textarea: ["textarea"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  textarea: "textarea";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTextMultiLineA__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTextMultiLineA__VariantsArgs;
    args?: PlasmicTextMultiLineA__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicTextMultiLineA__Fetches;
  } & Omit<PlasmicTextMultiLineA__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTextMultiLineA__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTextMultiLineA__ArgProps,
      internalVariantPropNames: PlasmicTextMultiLineA__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicTextMultiLineA__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTextMultiLineA";
  } else {
    func.displayName = `PlasmicTextMultiLineA.${nodeName}`;
  }
  return func;
}

export const PlasmicTextMultiLineA = Object.assign(
  // Top-level PlasmicTextMultiLineA renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    textarea: makeNodeComponent("textarea"),

    // Metadata about props expected for PlasmicTextMultiLineA
    internalVariantProps: PlasmicTextMultiLineA__VariantProps,
    internalArgProps: PlasmicTextMultiLineA__ArgProps
  }
);

export default PlasmicTextMultiLineA;
/* prettier-ignore-end */
