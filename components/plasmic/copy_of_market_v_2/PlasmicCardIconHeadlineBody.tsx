// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: BOZv7f3ebU6i7m
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TextLinkArrow from "../../TextLinkArrow"; // plasmic-import: owlfhtgWXRNTq-/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicCardIconHeadlineBody.module.css"; // plasmic-import: BOZv7f3ebU6i7m/css

import Icon56Icon from "./icons/PlasmicIcon__Icon56"; // plasmic-import: WO2T1W6d2HCs2lF/icon
import ChevronLeftIcon from "./icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r8gtrzySptnr1T7/icon
import Icon118Icon from "./icons/PlasmicIcon__Icon118"; // plasmic-import: pXVovyNfHjQVjud/icon

export type PlasmicCardIconHeadlineBody__VariantMembers = {
  state: "deactivated";
};

export type PlasmicCardIconHeadlineBody__VariantsArgs = {
  state?: SingleChoiceArg<"deactivated">;
};

type VariantPropType = keyof PlasmicCardIconHeadlineBody__VariantsArgs;
export const PlasmicCardIconHeadlineBody__VariantProps =
  new Array<VariantPropType>("state");

export type PlasmicCardIconHeadlineBody__ArgsType = {
  children?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  slot?: React.ReactNode;
};

type ArgPropType = keyof PlasmicCardIconHeadlineBody__ArgsType;
export const PlasmicCardIconHeadlineBody__ArgProps = new Array<ArgPropType>(
  "children",
  "slot2",
  "slot3",
  "slot"
);

export type PlasmicCardIconHeadlineBody__OverridesType = {
  root?: p.Flex<"a"> & Partial<LinkProps>;
  textLinkArrow?: p.Flex<typeof TextLinkArrow>;
  accountBodyText?: p.Flex<"div">;
};

export interface DefaultCardIconHeadlineBodyProps {
  children?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  slot?: React.ReactNode;
  state?: SingleChoiceArg<"deactivated">;
  className?: string;
}

function PlasmicCardIconHeadlineBody__RenderFunc(props: {
  variants: PlasmicCardIconHeadlineBody__VariantsArgs;
  args: PlasmicCardIconHeadlineBody__ArgsType;
  overrides: PlasmicCardIconHeadlineBody__OverridesType;
  dataFetches?: PlasmicCardIconHeadlineBody__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover
  };

  return (
    <p.Stack
      as={p.PlasmicLink}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__state_deactivated]: hasVariant(
          variants,
          "state",
          "deactivated"
        )
      })}
      component={Link}
      platform={"nextjs"}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      <div className={classNames(defaultcss.all, sty.freeBox__rmhvj)}>
        <div className={classNames(defaultcss.all, sty.freeBox__kJrjS)}>
          {p.renderPlasmicSlot({
            defaultContents: (
              <Icon56Icon
                className={classNames(defaultcss.all, sty.svg__hURv)}
                role={"img"}
              />
            ),

            value: args.slot,
            className: classNames(sty.slotSlot, {
              [sty.slotSlot__state_deactivated]: hasVariant(
                variants,
                "state",
                "deactivated"
              )
            })
          })}
        </div>
      </div>

      <TextLinkArrow
        data-plasmic-name={"textLinkArrow"}
        data-plasmic-override={overrides.textLinkArrow}
        className={classNames("__wab_instance", sty.textLinkArrow, {
          [sty.textLinkArrow__state_deactivated]: hasVariant(
            variants,
            "state",
            "deactivated"
          )
        })}
        color={triggers.hover_root ? ("dark" as const) : ("dark" as const)}
        direction={"right" as const}
        svgRight={p.renderPlasmicSlot({
          defaultContents: (
            <Icon118Icon
              className={classNames(defaultcss.all, sty.svg__sIyi9)}
              role={"img"}
            />
          ),

          value: args.slot3,
          className: classNames(sty.slotSlot3, {
            [sty.slotSlot3__state_deactivated]: hasVariant(
              variants,
              "state",
              "deactivated"
            )
          })
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: triggers.hover_root ? "Headline" : "Headline",
          value: args.slot2,
          className: classNames(sty.slotSlot2, {
            [sty.slotSlot2__state_deactivated]: hasVariant(
              variants,
              "state",
              "deactivated"
            )
          })
        })}
      </TextLinkArrow>

      <div
        data-plasmic-name={"accountBodyText"}
        data-plasmic-override={overrides.accountBodyText}
        className={classNames(defaultcss.all, sty.accountBodyText)}
      >
        <div className={classNames(defaultcss.all, sty.freeBox___5Wtx)}>
          {p.renderPlasmicSlot({
            defaultContents: triggers.hover_root ? "Body text" : "Body text",
            value: args.children,
            className: classNames(sty.slotChildren, {
              [sty.slotChildren__state_deactivated]: hasVariant(
                variants,
                "state",
                "deactivated"
              )
            })
          })}
        </div>
      </div>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "textLinkArrow", "accountBodyText"],
  textLinkArrow: ["textLinkArrow"],
  accountBodyText: ["accountBodyText"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "a";
  textLinkArrow: typeof TextLinkArrow;
  accountBodyText: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCardIconHeadlineBody__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCardIconHeadlineBody__VariantsArgs;
    args?: PlasmicCardIconHeadlineBody__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicCardIconHeadlineBody__Fetches;
  } & Omit<PlasmicCardIconHeadlineBody__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCardIconHeadlineBody__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCardIconHeadlineBody__ArgProps,
      internalVariantPropNames: PlasmicCardIconHeadlineBody__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicCardIconHeadlineBody__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCardIconHeadlineBody";
  } else {
    func.displayName = `PlasmicCardIconHeadlineBody.${nodeName}`;
  }
  return func;
}

export const PlasmicCardIconHeadlineBody = Object.assign(
  // Top-level PlasmicCardIconHeadlineBody renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    textLinkArrow: makeNodeComponent("textLinkArrow"),
    accountBodyText: makeNodeComponent("accountBodyText"),

    // Metadata about props expected for PlasmicCardIconHeadlineBody
    internalVariantProps: PlasmicCardIconHeadlineBody__VariantProps,
    internalArgProps: PlasmicCardIconHeadlineBody__ArgProps
  }
);

export default PlasmicCardIconHeadlineBody;
/* prettier-ignore-end */
