// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: ZxMCtSSS3lPiHE
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import IconPrimary from "../../IconPrimary"; // plasmic-import: leoxU5GkcMHMK8X/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: biX3aS42hiG0fF/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicElementLocationPrimary.module.css"; // plasmic-import: ZxMCtSSS3lPiHE/css

import LocationIcon from "./icons/PlasmicIcon__Location"; // plasmic-import: xjfa0WXXQAMnNc9/icon
import Icon171Icon from "./icons/PlasmicIcon__Icon171"; // plasmic-import: L1T0WWEIfF6hPBd/icon

export type PlasmicElementLocationPrimary__VariantMembers = {};

export type PlasmicElementLocationPrimary__VariantsArgs = {};
type VariantPropType = keyof PlasmicElementLocationPrimary__VariantsArgs;
export const PlasmicElementLocationPrimary__VariantProps =
  new Array<VariantPropType>();

export type PlasmicElementLocationPrimary__ArgsType = {};
type ArgPropType = keyof PlasmicElementLocationPrimary__ArgsType;
export const PlasmicElementLocationPrimary__ArgProps = new Array<ArgPropType>();

export type PlasmicElementLocationPrimary__OverridesType = {
  root?: p.Flex<"div">;
  parent?: p.Flex<"div">;
  locationPin?: p.Flex<typeof IconPrimary>;
  svgIcon?: p.Flex<"svg">;
  svgIcon3?: p.Flex<"svg">;
  svgIcon4?: p.Flex<"svg">;
  cityTextParent?: p.Flex<"div">;
  cityName?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  countryTextParent?: p.Flex<"div">;
  countryName?: p.Flex<"div">;
};

export interface DefaultElementLocationPrimaryProps {
  className?: string;
}

function PlasmicElementLocationPrimary__RenderFunc(props: {
  variants: PlasmicElementLocationPrimary__VariantsArgs;
  args: PlasmicElementLocationPrimary__ArgsType;
  overrides: PlasmicElementLocationPrimary__OverridesType;
  dataFetches?: PlasmicElementLocationPrimary__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    (hasVariant(globalVariants, "screen", "desktop") ? true : true) ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
      >
        {(hasVariant(globalVariants, "screen", "desktop") ? true : true) ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"parent"}
            data-plasmic-override={overrides.parent}
            hasGap={true}
            className={classNames(defaultcss.all, sty.parent)}
          >
            {(hasVariant(globalVariants, "screen", "desktop") ? true : true) ? (
              <IconPrimary
                data-plasmic-name={"locationPin"}
                data-plasmic-override={overrides.locationPin}
                className={classNames("__wab_instance", sty.locationPin)}
                size={
                  hasVariant(globalVariants, "screen", "desktop")
                    ? ("_16Px" as const)
                    : ("_16Px" as const)
                }
                svgIcon={
                  <LocationIcon
                    data-plasmic-name={"svgIcon"}
                    data-plasmic-override={overrides.svgIcon}
                    className={classNames(defaultcss.all, sty.svgIcon)}
                    role={"img"}
                  />
                }
                svgIcon16Px={
                  <p.PlasmicIcon
                    data-plasmic-name={"svgIcon3"}
                    data-plasmic-override={overrides.svgIcon3}
                    PlasmicIconType={
                      hasVariant(globalVariants, "screen", "desktop")
                        ? LocationIcon
                        : LocationIcon
                    }
                    className={classNames(defaultcss.all, sty.svgIcon3)}
                    role={"img"}
                  />
                }
                svgIcon18Px={
                  <LocationIcon
                    data-plasmic-name={"svgIcon4"}
                    data-plasmic-override={overrides.svgIcon4}
                    className={classNames(defaultcss.all, sty.svgIcon4)}
                    role={"img"}
                  />
                }
              />
            ) : null}

            <div
              data-plasmic-name={"cityTextParent"}
              data-plasmic-override={overrides.cityTextParent}
              className={classNames(defaultcss.all, sty.cityTextParent)}
            >
              <div
                data-plasmic-name={"cityName"}
                data-plasmic-override={overrides.cityName}
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.cityName
                )}
              >
                {"San Francisco"}
              </div>

              <div
                data-plasmic-name={"freeBox"}
                data-plasmic-override={overrides.freeBox}
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.freeBox
                )}
              >
                {","}
              </div>
            </div>

            <div
              data-plasmic-name={"countryTextParent"}
              data-plasmic-override={overrides.countryTextParent}
              className={classNames(defaultcss.all, sty.countryTextParent)}
            >
              <div
                data-plasmic-name={"countryName"}
                data-plasmic-override={overrides.countryName}
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.countryName
                )}
              >
                {"United States"}
              </div>
            </div>
          </p.Stack>
        ) : null}
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "parent",
    "locationPin",
    "svgIcon",
    "svgIcon3",
    "svgIcon4",
    "cityTextParent",
    "cityName",
    "freeBox",
    "countryTextParent",
    "countryName"
  ],
  parent: [
    "parent",
    "locationPin",
    "svgIcon",
    "svgIcon3",
    "svgIcon4",
    "cityTextParent",
    "cityName",
    "freeBox",
    "countryTextParent",
    "countryName"
  ],
  locationPin: ["locationPin", "svgIcon", "svgIcon3", "svgIcon4"],
  svgIcon: ["svgIcon"],
  svgIcon3: ["svgIcon3"],
  svgIcon4: ["svgIcon4"],
  cityTextParent: ["cityTextParent", "cityName", "freeBox"],
  cityName: ["cityName"],
  freeBox: ["freeBox"],
  countryTextParent: ["countryTextParent", "countryName"],
  countryName: ["countryName"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  parent: "div";
  locationPin: typeof IconPrimary;
  svgIcon: "svg";
  svgIcon3: "svg";
  svgIcon4: "svg";
  cityTextParent: "div";
  cityName: "div";
  freeBox: "div";
  countryTextParent: "div";
  countryName: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicElementLocationPrimary__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicElementLocationPrimary__VariantsArgs;
    args?: PlasmicElementLocationPrimary__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicElementLocationPrimary__Fetches;
  } & Omit<PlasmicElementLocationPrimary__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicElementLocationPrimary__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicElementLocationPrimary__ArgProps,
      internalVariantPropNames: PlasmicElementLocationPrimary__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicElementLocationPrimary__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicElementLocationPrimary";
  } else {
    func.displayName = `PlasmicElementLocationPrimary.${nodeName}`;
  }
  return func;
}

export const PlasmicElementLocationPrimary = Object.assign(
  // Top-level PlasmicElementLocationPrimary renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    parent: makeNodeComponent("parent"),
    locationPin: makeNodeComponent("locationPin"),
    svgIcon: makeNodeComponent("svgIcon"),
    svgIcon3: makeNodeComponent("svgIcon3"),
    svgIcon4: makeNodeComponent("svgIcon4"),
    cityTextParent: makeNodeComponent("cityTextParent"),
    cityName: makeNodeComponent("cityName"),
    freeBox: makeNodeComponent("freeBox"),
    countryTextParent: makeNodeComponent("countryTextParent"),
    countryName: makeNodeComponent("countryName"),

    // Metadata about props expected for PlasmicElementLocationPrimary
    internalVariantProps: PlasmicElementLocationPrimary__VariantProps,
    internalArgProps: PlasmicElementLocationPrimary__ArgProps
  }
);

export default PlasmicElementLocationPrimary;
/* prettier-ignore-end */
