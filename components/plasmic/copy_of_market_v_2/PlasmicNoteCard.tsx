// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: LR6H7sqCzagSH7v
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: gpNjXfbD_ZdpPU/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicNoteCard.module.css"; // plasmic-import: LR6H7sqCzagSH7v/css

import PlusBoldIcon from "./icons/PlasmicIcon__PlusBold"; // plasmic-import: lhSEEajPJGZatfD/icon

export type PlasmicNoteCard__VariantMembers = {
  button: "button";
};

export type PlasmicNoteCard__VariantsArgs = {
  button?: SingleBooleanChoiceArg<"button">;
};

type VariantPropType = keyof PlasmicNoteCard__VariantsArgs;
export const PlasmicNoteCard__VariantProps = new Array<VariantPropType>(
  "button"
);

export type PlasmicNoteCard__ArgsType = {
  message?: React.ReactNode;
  note?: React.ReactNode;
};

type ArgPropType = keyof PlasmicNoteCard__ArgsType;
export const PlasmicNoteCard__ArgProps = new Array<ArgPropType>(
  "message",
  "note"
);

export type PlasmicNoteCard__OverridesType = {
  root?: p.Flex<"div">;
  noteMessageParent?: p.Flex<"div">;
  noteParent?: p.Flex<"div">;
  mesageParent?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  buttonPrimary?: p.Flex<typeof ButtonPrimary>;
};

export interface DefaultNoteCardProps {
  message?: React.ReactNode;
  note?: React.ReactNode;
  button?: SingleBooleanChoiceArg<"button">;
  className?: string;
}

function PlasmicNoteCard__RenderFunc(props: {
  variants: PlasmicNoteCard__VariantsArgs;
  args: PlasmicNoteCard__ArgsType;
  overrides: PlasmicNoteCard__OverridesType;
  dataFetches?: PlasmicNoteCard__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"noteMessageParent"}
        data-plasmic-override={overrides.noteMessageParent}
        hasGap={true}
        className={classNames(defaultcss.all, sty.noteMessageParent)}
      >
        <div
          data-plasmic-name={"noteParent"}
          data-plasmic-override={overrides.noteParent}
          className={classNames(defaultcss.all, sty.noteParent)}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Note:",
            value: args.note,
            className: classNames(sty.slotNote)
          })}
        </div>

        <div
          data-plasmic-name={"mesageParent"}
          data-plasmic-override={overrides.mesageParent}
          className={classNames(defaultcss.all, sty.mesageParent)}
        >
          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(defaultcss.all, sty.freeBox)}
          >
            {p.renderPlasmicSlot({
              defaultContents: "This note details some information.",
              value: args.message
            })}
          </div>
        </div>
      </p.Stack>

      <ButtonPrimary
        data-plasmic-name={"buttonPrimary"}
        data-plasmic-override={overrides.buttonPrimary}
        className={classNames("__wab_instance", sty.buttonPrimary, {
          [sty.buttonPrimary__button]: hasVariant(variants, "button", "button")
        })}
        size={"_90" as const}
      />
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "noteMessageParent",
    "noteParent",
    "mesageParent",
    "freeBox",
    "buttonPrimary"
  ],
  noteMessageParent: [
    "noteMessageParent",
    "noteParent",
    "mesageParent",
    "freeBox"
  ],
  noteParent: ["noteParent"],
  mesageParent: ["mesageParent", "freeBox"],
  freeBox: ["freeBox"],
  buttonPrimary: ["buttonPrimary"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  noteMessageParent: "div";
  noteParent: "div";
  mesageParent: "div";
  freeBox: "div";
  buttonPrimary: typeof ButtonPrimary;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNoteCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNoteCard__VariantsArgs;
    args?: PlasmicNoteCard__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicNoteCard__Fetches;
  } & Omit<PlasmicNoteCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNoteCard__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNoteCard__ArgProps,
      internalVariantPropNames: PlasmicNoteCard__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicNoteCard__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNoteCard";
  } else {
    func.displayName = `PlasmicNoteCard.${nodeName}`;
  }
  return func;
}

export const PlasmicNoteCard = Object.assign(
  // Top-level PlasmicNoteCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    noteMessageParent: makeNodeComponent("noteMessageParent"),
    noteParent: makeNodeComponent("noteParent"),
    mesageParent: makeNodeComponent("mesageParent"),
    freeBox: makeNodeComponent("freeBox"),
    buttonPrimary: makeNodeComponent("buttonPrimary"),

    // Metadata about props expected for PlasmicNoteCard
    internalVariantProps: PlasmicNoteCard__VariantProps,
    internalArgProps: PlasmicNoteCard__ArgProps
  }
);

export default PlasmicNoteCard;
/* prettier-ignore-end */
