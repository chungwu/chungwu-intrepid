// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: 5cYP3DAN9gTD53K
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import MenuIconListItem from "../../MenuIconListItem"; // plasmic-import: A4cpU1IW2YGn9yX/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicPanelMemberSectionMember.module.css"; // plasmic-import: 5cYP3DAN9gTD53K/css

import UserIcon from "./icons/PlasmicIcon__User"; // plasmic-import: 69Nnfgwrrho7Epq/icon
import TeamPartnersIcon from "./icons/PlasmicIcon__TeamPartners"; // plasmic-import: Hf6TOd80Ag78cQq/icon
import WalletEarningsIcon from "./icons/PlasmicIcon__WalletEarnings"; // plasmic-import: 0j9c3K2zanlGHIW/icon
import SwitchUserIcon from "./icons/PlasmicIcon__SwitchUser"; // plasmic-import: rOUpOXLd5q8qCDn/icon

export type PlasmicPanelMemberSectionMember__VariantMembers = {};

export type PlasmicPanelMemberSectionMember__VariantsArgs = {};
type VariantPropType = keyof PlasmicPanelMemberSectionMember__VariantsArgs;
export const PlasmicPanelMemberSectionMember__VariantProps =
  new Array<VariantPropType>();

export type PlasmicPanelMemberSectionMember__ArgsType = {};
type ArgPropType = keyof PlasmicPanelMemberSectionMember__ArgsType;
export const PlasmicPanelMemberSectionMember__ArgProps =
  new Array<ArgPropType>();

export type PlasmicPanelMemberSectionMember__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultPanelMemberSectionMemberProps {
  className?: string;
}

function PlasmicPanelMemberSectionMember__RenderFunc(props: {
  variants: PlasmicPanelMemberSectionMember__VariantsArgs;
  args: PlasmicPanelMemberSectionMember__ArgsType;
  overrides: PlasmicPanelMemberSectionMember__OverridesType;
  dataFetches?: PlasmicPanelMemberSectionMember__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.freeBox__qkRp)}
      >
        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.freeBox__siOyx
          )}
        >
          {"Member"}
        </div>
      </p.Stack>

      <MenuIconListItem
        className={classNames("__wab_instance", sty.menuIconListItem__owYWj)}
        navIcon={
          <div className={classNames(defaultcss.all, sty.freeBox__t7E1M)}>
            <UserIcon
              className={classNames(defaultcss.all, sty.svg___16UgD)}
              role={"img"}
            />
          </div>
        }
        navText={"Profile"}
      />

      <MenuIconListItem
        className={classNames("__wab_instance", sty.menuIconListItem___78R)}
        navIcon={
          <div className={classNames(defaultcss.all, sty.freeBox__ueOEz)}>
            <TeamPartnersIcon
              className={classNames(defaultcss.all, sty.svg__kzl9K)}
              role={"img"}
            />
          </div>
        }
        navText={"Team"}
      />

      <MenuIconListItem
        className={classNames("__wab_instance", sty.menuIconListItem__v515M)}
        navIcon={
          <div className={classNames(defaultcss.all, sty.freeBox___4OwSt)}>
            <WalletEarningsIcon
              className={classNames(defaultcss.all, sty.svg__kGgpb)}
              role={"img"}
            />
          </div>
        }
        navText={"Wallet"}
      />

      <MenuIconListItem
        className={classNames("__wab_instance", sty.menuIconListItem__uan77)}
        navIcon={
          <div className={classNames(defaultcss.all, sty.freeBox__tBgm)}>
            <SwitchUserIcon
              className={classNames(defaultcss.all, sty.svg__xLj9Q)}
              role={"img"}
            />
          </div>
        }
        navText={"Switch to Partner"}
      />
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPanelMemberSectionMember__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPanelMemberSectionMember__VariantsArgs;
    args?: PlasmicPanelMemberSectionMember__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicPanelMemberSectionMember__Fetches;
  } & Omit<PlasmicPanelMemberSectionMember__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPanelMemberSectionMember__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPanelMemberSectionMember__ArgProps,
      internalVariantPropNames: PlasmicPanelMemberSectionMember__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicPanelMemberSectionMember__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPanelMemberSectionMember";
  } else {
    func.displayName = `PlasmicPanelMemberSectionMember.${nodeName}`;
  }
  return func;
}

export const PlasmicPanelMemberSectionMember = Object.assign(
  // Top-level PlasmicPanelMemberSectionMember renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicPanelMemberSectionMember
    internalVariantProps: PlasmicPanelMemberSectionMember__VariantProps,
    internalArgProps: PlasmicPanelMemberSectionMember__ArgProps
  }
);

export default PlasmicPanelMemberSectionMember;
/* prettier-ignore-end */
