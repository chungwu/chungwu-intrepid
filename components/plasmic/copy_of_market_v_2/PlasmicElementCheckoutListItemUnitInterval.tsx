// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: 5EU0MwcRzuuFemQ
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicElementCheckoutListItemUnitInterval.module.css"; // plasmic-import: 5EU0MwcRzuuFemQ/css

export type PlasmicElementCheckoutListItemUnitInterval__VariantMembers = {};

export type PlasmicElementCheckoutListItemUnitInterval__VariantsArgs = {};
type VariantPropType =
  keyof PlasmicElementCheckoutListItemUnitInterval__VariantsArgs;
export const PlasmicElementCheckoutListItemUnitInterval__VariantProps =
  new Array<VariantPropType>();

export type PlasmicElementCheckoutListItemUnitInterval__ArgsType = {
  unitNumber?: React.ReactNode;
  unitText?: React.ReactNode;
  timeIntervalText?: React.ReactNode;
  currencySymbol?: React.ReactNode;
  totalValueNumber?: React.ReactNode;
};

type ArgPropType = keyof PlasmicElementCheckoutListItemUnitInterval__ArgsType;
export const PlasmicElementCheckoutListItemUnitInterval__ArgProps =
  new Array<ArgPropType>(
    "unitNumber",
    "unitText",
    "timeIntervalText",
    "currencySymbol",
    "totalValueNumber"
  );

export type PlasmicElementCheckoutListItemUnitInterval__OverridesType = {
  root?: p.Flex<"div">;
  unitItemInterval?: p.Flex<"div">;
  unitNumberbackgroundParent?: p.Flex<"div">;
  unitNumberBackground?: p.Flex<"div">;
  unitNumberParent?: p.Flex<"div">;
  unitTextbackground?: p.Flex<"div">;
  timeIntervalBackgroundParent?: p.Flex<"div">;
  timeIntervalBackground?: p.Flex<"div">;
  timeIntervalTextParent?: p.Flex<"div">;
  currencyTotalValueNumberParent?: p.Flex<"div">;
  currencySymbolParent?: p.Flex<"div">;
  totalValueNumberParent?: p.Flex<"div">;
};

export interface DefaultElementCheckoutListItemUnitIntervalProps {
  unitNumber?: React.ReactNode;
  unitText?: React.ReactNode;
  timeIntervalText?: React.ReactNode;
  currencySymbol?: React.ReactNode;
  totalValueNumber?: React.ReactNode;
  className?: string;
}

function PlasmicElementCheckoutListItemUnitInterval__RenderFunc(props: {
  variants: PlasmicElementCheckoutListItemUnitInterval__VariantsArgs;
  args: PlasmicElementCheckoutListItemUnitInterval__ArgsType;
  overrides: PlasmicElementCheckoutListItemUnitInterval__OverridesType;
  dataFetches?: PlasmicElementCheckoutListItemUnitInterval__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"unitItemInterval"}
        data-plasmic-override={overrides.unitItemInterval}
        hasGap={true}
        className={classNames(defaultcss.all, sty.unitItemInterval)}
      >
        <div
          data-plasmic-name={"unitNumberbackgroundParent"}
          data-plasmic-override={overrides.unitNumberbackgroundParent}
          className={classNames(defaultcss.all, sty.unitNumberbackgroundParent)}
        >
          <div
            data-plasmic-name={"unitNumberBackground"}
            data-plasmic-override={overrides.unitNumberBackground}
            className={classNames(defaultcss.all, sty.unitNumberBackground)}
          >
            <div
              data-plasmic-name={"unitNumberParent"}
              data-plasmic-override={overrides.unitNumberParent}
              className={classNames(defaultcss.all, sty.unitNumberParent)}
            >
              {p.renderPlasmicSlot({
                defaultContents: "1",
                value: args.unitNumber,
                className: classNames(sty.slotUnitNumber)
              })}
            </div>
          </div>
        </div>

        <div
          data-plasmic-name={"unitTextbackground"}
          data-plasmic-override={overrides.unitTextbackground}
          className={classNames(defaultcss.all, sty.unitTextbackground)}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Service",
            value: args.unitText,
            className: classNames(sty.slotUnitText)
          })}
        </div>

        <div className={classNames(defaultcss.all, sty.freeBox__tkPSp)}>
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox__nm1Dd
            )}
          >
            {"x"}
          </div>
        </div>

        <div
          data-plasmic-name={"timeIntervalBackgroundParent"}
          data-plasmic-override={overrides.timeIntervalBackgroundParent}
          className={classNames(
            defaultcss.all,
            sty.timeIntervalBackgroundParent
          )}
        >
          <div
            data-plasmic-name={"timeIntervalBackground"}
            data-plasmic-override={overrides.timeIntervalBackground}
            className={classNames(defaultcss.all, sty.timeIntervalBackground)}
          >
            <div
              data-plasmic-name={"timeIntervalTextParent"}
              data-plasmic-override={overrides.timeIntervalTextParent}
              className={classNames(defaultcss.all, sty.timeIntervalTextParent)}
            >
              {p.renderPlasmicSlot({
                defaultContents: "Month",
                value: args.timeIntervalText,
                className: classNames(sty.slotTimeIntervalText)
              })}
            </div>
          </div>
        </div>
      </p.Stack>

      <p.Stack
        as={"div"}
        data-plasmic-name={"currencyTotalValueNumberParent"}
        data-plasmic-override={overrides.currencyTotalValueNumberParent}
        hasGap={true}
        className={classNames(
          defaultcss.all,
          sty.currencyTotalValueNumberParent
        )}
      >
        <div
          data-plasmic-name={"currencySymbolParent"}
          data-plasmic-override={overrides.currencySymbolParent}
          className={classNames(defaultcss.all, sty.currencySymbolParent)}
        >
          {p.renderPlasmicSlot({
            defaultContents: "$",
            value: args.currencySymbol,
            className: classNames(sty.slotCurrencySymbol)
          })}
        </div>

        <div
          data-plasmic-name={"totalValueNumberParent"}
          data-plasmic-override={overrides.totalValueNumberParent}
          className={classNames(defaultcss.all, sty.totalValueNumberParent)}
        >
          {p.renderPlasmicSlot({
            defaultContents: "0.00",
            value: args.totalValueNumber,
            className: classNames(sty.slotTotalValueNumber)
          })}
        </div>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "unitItemInterval",
    "unitNumberbackgroundParent",
    "unitNumberBackground",
    "unitNumberParent",
    "unitTextbackground",
    "timeIntervalBackgroundParent",
    "timeIntervalBackground",
    "timeIntervalTextParent",
    "currencyTotalValueNumberParent",
    "currencySymbolParent",
    "totalValueNumberParent"
  ],
  unitItemInterval: [
    "unitItemInterval",
    "unitNumberbackgroundParent",
    "unitNumberBackground",
    "unitNumberParent",
    "unitTextbackground",
    "timeIntervalBackgroundParent",
    "timeIntervalBackground",
    "timeIntervalTextParent"
  ],
  unitNumberbackgroundParent: [
    "unitNumberbackgroundParent",
    "unitNumberBackground",
    "unitNumberParent"
  ],
  unitNumberBackground: ["unitNumberBackground", "unitNumberParent"],
  unitNumberParent: ["unitNumberParent"],
  unitTextbackground: ["unitTextbackground"],
  timeIntervalBackgroundParent: [
    "timeIntervalBackgroundParent",
    "timeIntervalBackground",
    "timeIntervalTextParent"
  ],
  timeIntervalBackground: ["timeIntervalBackground", "timeIntervalTextParent"],
  timeIntervalTextParent: ["timeIntervalTextParent"],
  currencyTotalValueNumberParent: [
    "currencyTotalValueNumberParent",
    "currencySymbolParent",
    "totalValueNumberParent"
  ],
  currencySymbolParent: ["currencySymbolParent"],
  totalValueNumberParent: ["totalValueNumberParent"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  unitItemInterval: "div";
  unitNumberbackgroundParent: "div";
  unitNumberBackground: "div";
  unitNumberParent: "div";
  unitTextbackground: "div";
  timeIntervalBackgroundParent: "div";
  timeIntervalBackground: "div";
  timeIntervalTextParent: "div";
  currencyTotalValueNumberParent: "div";
  currencySymbolParent: "div";
  totalValueNumberParent: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicElementCheckoutListItemUnitInterval__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicElementCheckoutListItemUnitInterval__VariantsArgs;
    args?: PlasmicElementCheckoutListItemUnitInterval__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicElementCheckoutListItemUnitInterval__Fetches;
  } & Omit< // Specify variants directly as props
    PlasmicElementCheckoutListItemUnitInterval__VariantsArgs,
    ReservedPropsType
  > &
    // Specify args directly as props
    Omit<
      PlasmicElementCheckoutListItemUnitInterval__ArgsType,
      ReservedPropsType
    > &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames:
        PlasmicElementCheckoutListItemUnitInterval__ArgProps,
      internalVariantPropNames:
        PlasmicElementCheckoutListItemUnitInterval__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicElementCheckoutListItemUnitInterval__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicElementCheckoutListItemUnitInterval";
  } else {
    func.displayName = `PlasmicElementCheckoutListItemUnitInterval.${nodeName}`;
  }
  return func;
}

export const PlasmicElementCheckoutListItemUnitInterval = Object.assign(
  // Top-level PlasmicElementCheckoutListItemUnitInterval renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    unitItemInterval: makeNodeComponent("unitItemInterval"),
    unitNumberbackgroundParent: makeNodeComponent("unitNumberbackgroundParent"),
    unitNumberBackground: makeNodeComponent("unitNumberBackground"),
    unitNumberParent: makeNodeComponent("unitNumberParent"),
    unitTextbackground: makeNodeComponent("unitTextbackground"),
    timeIntervalBackgroundParent: makeNodeComponent(
      "timeIntervalBackgroundParent"
    ),
    timeIntervalBackground: makeNodeComponent("timeIntervalBackground"),
    timeIntervalTextParent: makeNodeComponent("timeIntervalTextParent"),
    currencyTotalValueNumberParent: makeNodeComponent(
      "currencyTotalValueNumberParent"
    ),
    currencySymbolParent: makeNodeComponent("currencySymbolParent"),
    totalValueNumberParent: makeNodeComponent("totalValueNumberParent"),

    // Metadata about props expected for PlasmicElementCheckoutListItemUnitInterval
    internalVariantProps:
      PlasmicElementCheckoutListItemUnitInterval__VariantProps,
    internalArgProps: PlasmicElementCheckoutListItemUnitInterval__ArgProps
  }
);

export default PlasmicElementCheckoutListItemUnitInterval;
/* prettier-ignore-end */
