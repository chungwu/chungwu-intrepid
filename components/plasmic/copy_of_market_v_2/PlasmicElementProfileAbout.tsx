// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: P4j9cTdPiH_JFv
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: biX3aS42hiG0fF/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicElementProfileAbout.module.css"; // plasmic-import: P4j9cTdPiH_JFv/css

export type PlasmicElementProfileAbout__VariantMembers = {};

export type PlasmicElementProfileAbout__VariantsArgs = {};
type VariantPropType = keyof PlasmicElementProfileAbout__VariantsArgs;
export const PlasmicElementProfileAbout__VariantProps =
  new Array<VariantPropType>();

export type PlasmicElementProfileAbout__ArgsType = {};
type ArgPropType = keyof PlasmicElementProfileAbout__ArgsType;
export const PlasmicElementProfileAbout__ArgProps = new Array<ArgPropType>();

export type PlasmicElementProfileAbout__OverridesType = {
  root?: p.Flex<"div">;
  about?: p.Flex<"div">;
  aboutText?: p.Flex<"div">;
  textParent?: p.Flex<"div">;
  text170Characters?: p.Flex<"div">;
};

export interface DefaultElementProfileAboutProps {
  className?: string;
}

function PlasmicElementProfileAbout__RenderFunc(props: {
  variants: PlasmicElementProfileAbout__VariantsArgs;
  args: PlasmicElementProfileAbout__ArgsType;
  overrides: PlasmicElementProfileAbout__OverridesType;
  dataFetches?: PlasmicElementProfileAbout__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      {true ? (
        <div
          data-plasmic-name={"about"}
          data-plasmic-override={overrides.about}
          className={classNames(defaultcss.all, sty.about)}
        >
          <div
            data-plasmic-name={"aboutText"}
            data-plasmic-override={overrides.aboutText}
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.aboutText
            )}
          >
            {"About"}
          </div>
        </div>
      ) : null}
      {true ? (
        <div
          data-plasmic-name={"textParent"}
          data-plasmic-override={overrides.textParent}
          className={classNames(defaultcss.all, sty.textParent)}
        >
          <div
            data-plasmic-name={"text170Characters"}
            data-plasmic-override={overrides.text170Characters}
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.text170Characters
            )}
          >
            {
              "I'm an independent designer and engineer who has worked for Uber and Shopify.\n\nI tried a few startups and now I'm starting my own studio.\n\nI enjoy travel and exploring new cultures.\n\nI especially love trying new foods and working in new places"
            }
          </div>
        </div>
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "about", "aboutText", "textParent", "text170Characters"],
  about: ["about", "aboutText"],
  aboutText: ["aboutText"],
  textParent: ["textParent", "text170Characters"],
  text170Characters: ["text170Characters"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  about: "div";
  aboutText: "div";
  textParent: "div";
  text170Characters: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicElementProfileAbout__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicElementProfileAbout__VariantsArgs;
    args?: PlasmicElementProfileAbout__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicElementProfileAbout__Fetches;
  } & Omit<PlasmicElementProfileAbout__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicElementProfileAbout__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicElementProfileAbout__ArgProps,
      internalVariantPropNames: PlasmicElementProfileAbout__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicElementProfileAbout__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicElementProfileAbout";
  } else {
    func.displayName = `PlasmicElementProfileAbout.${nodeName}`;
  }
  return func;
}

export const PlasmicElementProfileAbout = Object.assign(
  // Top-level PlasmicElementProfileAbout renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    about: makeNodeComponent("about"),
    aboutText: makeNodeComponent("aboutText"),
    textParent: makeNodeComponent("textParent"),
    text170Characters: makeNodeComponent("text170Characters"),

    // Metadata about props expected for PlasmicElementProfileAbout
    internalVariantProps: PlasmicElementProfileAbout__VariantProps,
    internalArgProps: PlasmicElementProfileAbout__ArgProps
  }
);

export default PlasmicElementProfileAbout;
/* prettier-ignore-end */
