// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: wqQNK0wEImtKu
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: biX3aS42hiG0fF/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicSectionBrandTestimonial.module.css"; // plasmic-import: wqQNK0wEImtKu/css

import RedbullsvgIcon from "./icons/PlasmicIcon__Redbullsvg"; // plasmic-import: XP5eJyEYCLqy4RL/icon
import LvmhLogosvgIcon from "./icons/PlasmicIcon__LvmhLogosvg"; // plasmic-import: 43yRvqo2pZ1_K86/icon
import MastercardsvgIcon from "./icons/PlasmicIcon__Mastercardsvg"; // plasmic-import: PYAqvYMe6TquwWH/icon
import SamsungsvgIcon from "./icons/PlasmicIcon__Samsungsvg"; // plasmic-import: M-sQgasMaHsSLIT/icon
import TheNorthFace1LogoSvgVectorsvgIcon from "./icons/PlasmicIcon__TheNorthFace1LogoSvgVectorsvg"; // plasmic-import: vg0y2J0E3fS0HM3/icon
import NikesvgIcon from "./icons/PlasmicIcon__Nikesvg"; // plasmic-import: rrWoXHIkUi-j0TV/icon

export type PlasmicSectionBrandTestimonial__VariantMembers = {};

export type PlasmicSectionBrandTestimonial__VariantsArgs = {};
type VariantPropType = keyof PlasmicSectionBrandTestimonial__VariantsArgs;
export const PlasmicSectionBrandTestimonial__VariantProps =
  new Array<VariantPropType>();

export type PlasmicSectionBrandTestimonial__ArgsType = {
  children?: React.ReactNode;
  slot3?: React.ReactNode;
};

type ArgPropType = keyof PlasmicSectionBrandTestimonial__ArgsType;
export const PlasmicSectionBrandTestimonial__ArgProps = new Array<ArgPropType>(
  "children",
  "slot3"
);

export type PlasmicSectionBrandTestimonial__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultSectionBrandTestimonialProps {
  children?: React.ReactNode;
  slot3?: React.ReactNode;
  className?: string;
}

function PlasmicSectionBrandTestimonial__RenderFunc(props: {
  variants: PlasmicSectionBrandTestimonial__VariantsArgs;
  args: PlasmicSectionBrandTestimonial__ArgsType;
  overrides: PlasmicSectionBrandTestimonial__OverridesType;
  dataFetches?: PlasmicSectionBrandTestimonial__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div className={classNames(defaultcss.all, sty.freeBox__qxivE)}>
        <div className={classNames(defaultcss.all, sty.freeBox__sFfp)}>
          {p.renderPlasmicSlot({
            defaultContents:
              "The world's leading brands innovate, transform, and grow with our community",
            value: args.children,
            className: classNames(sty.slotChildren)
          })}
        </div>
      </div>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.freeBox__wwoAi)}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <React.Fragment>
              <RedbullsvgIcon
                className={classNames(defaultcss.all, sty.svg__zlule)}
                role={"img"}
              />

              <LvmhLogosvgIcon
                className={classNames(defaultcss.all, sty.svg__mBmd8)}
                role={"img"}
              />

              <MastercardsvgIcon
                className={classNames(defaultcss.all, sty.svg__drFfr)}
                role={"img"}
              />

              <SamsungsvgIcon
                className={classNames(defaultcss.all, sty.svg__idkgV)}
                role={"img"}
              />

              <TheNorthFace1LogoSvgVectorsvgIcon
                className={classNames(defaultcss.all, sty.svg__c7I8E)}
                role={"img"}
              />

              <NikesvgIcon
                className={classNames(defaultcss.all, sty.svg__hxEt)}
                role={"img"}
              />
            </React.Fragment>
          ),
          value: args.slot3
        })}
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSectionBrandTestimonial__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSectionBrandTestimonial__VariantsArgs;
    args?: PlasmicSectionBrandTestimonial__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicSectionBrandTestimonial__Fetches;
  } & Omit<PlasmicSectionBrandTestimonial__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSectionBrandTestimonial__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSectionBrandTestimonial__ArgProps,
      internalVariantPropNames: PlasmicSectionBrandTestimonial__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicSectionBrandTestimonial__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSectionBrandTestimonial";
  } else {
    func.displayName = `PlasmicSectionBrandTestimonial.${nodeName}`;
  }
  return func;
}

export const PlasmicSectionBrandTestimonial = Object.assign(
  // Top-level PlasmicSectionBrandTestimonial renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicSectionBrandTestimonial
    internalVariantProps: PlasmicSectionBrandTestimonial__VariantProps,
    internalArgProps: PlasmicSectionBrandTestimonial__ArgProps
  }
);

export default PlasmicSectionBrandTestimonial;
/* prettier-ignore-end */
