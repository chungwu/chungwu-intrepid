// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: AG6t5mL1330yf1
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavbarServiceListing from "../../NavbarServiceListing"; // plasmic-import: CjIIrelyshy5Wa/component
import ProgressBar from "../../ProgressBar"; // plasmic-import: L1r4sBRgwURapY/component
import FooterB from "../../FooterB"; // plasmic-import: IZENTiSL4_zyK8/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicServicelistingconfirmation.module.css"; // plasmic-import: AG6t5mL1330yf1/css

export type PlasmicServicelistingconfirmation__VariantMembers = {};

export type PlasmicServicelistingconfirmation__VariantsArgs = {};
type VariantPropType = keyof PlasmicServicelistingconfirmation__VariantsArgs;
export const PlasmicServicelistingconfirmation__VariantProps =
  new Array<VariantPropType>();

export type PlasmicServicelistingconfirmation__ArgsType = {};
type ArgPropType = keyof PlasmicServicelistingconfirmation__ArgsType;
export const PlasmicServicelistingconfirmation__ArgProps =
  new Array<ArgPropType>();

export type PlasmicServicelistingconfirmation__OverridesType = {
  root?: p.Flex<"div">;
  serviceListingNavbar?: p.Flex<"div">;
  navbarServiceListing?: p.Flex<typeof NavbarServiceListing>;
  progressBar?: p.Flex<typeof ProgressBar>;
  footerB?: p.Flex<typeof FooterB>;
};

export interface DefaultServicelistingconfirmationProps {
  dataFetches: PlasmicServicelistingconfirmation__Fetches;
}

function PlasmicServicelistingconfirmation__RenderFunc(props: {
  variants: PlasmicServicelistingconfirmation__VariantsArgs;
  args: PlasmicServicelistingconfirmation__ArgsType;
  overrides: PlasmicServicelistingconfirmation__OverridesType;
  dataFetches?: PlasmicServicelistingconfirmation__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <React.Fragment>
      <Head>
        <title key="title">{""}</title>
        <meta key="og:title" property="og:title" content={""} />
        <meta
          key="description"
          name="description"
          property="og:description"
          content={""}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"serviceListingNavbar"}
            data-plasmic-override={overrides.serviceListingNavbar}
            className={classNames(defaultcss.all, sty.serviceListingNavbar)}
          >
            <NavbarServiceListing
              data-plasmic-name={"navbarServiceListing"}
              data-plasmic-override={overrides.navbarServiceListing}
              className={classNames("__wab_instance", sty.navbarServiceListing)}
            >
              {"Confirmation"}
            </NavbarServiceListing>

            <ProgressBar
              data-plasmic-name={"progressBar"}
              data-plasmic-override={overrides.progressBar}
              className={classNames("__wab_instance", sty.progressBar)}
              progress={"_100" as const}
            />
          </div>

          <FooterB
            data-plasmic-name={"footerB"}
            data-plasmic-override={overrides.footerB}
            className={classNames("__wab_instance", sty.footerB)}
          />
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "serviceListingNavbar",
    "navbarServiceListing",
    "progressBar",
    "footerB"
  ],
  serviceListingNavbar: [
    "serviceListingNavbar",
    "navbarServiceListing",
    "progressBar"
  ],
  navbarServiceListing: ["navbarServiceListing"],
  progressBar: ["progressBar"],
  footerB: ["footerB"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  serviceListingNavbar: "div";
  navbarServiceListing: typeof NavbarServiceListing;
  progressBar: typeof ProgressBar;
  footerB: typeof FooterB;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicServicelistingconfirmation__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicServicelistingconfirmation__VariantsArgs;
    args?: PlasmicServicelistingconfirmation__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicServicelistingconfirmation__Fetches;
  } & Omit<PlasmicServicelistingconfirmation__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicServicelistingconfirmation__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicServicelistingconfirmation__ArgProps,
      internalVariantPropNames: PlasmicServicelistingconfirmation__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicServicelistingconfirmation__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicServicelistingconfirmation";
  } else {
    func.displayName = `PlasmicServicelistingconfirmation.${nodeName}`;
  }
  return func;
}

export const PlasmicServicelistingconfirmation = Object.assign(
  // Top-level PlasmicServicelistingconfirmation renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    serviceListingNavbar: makeNodeComponent("serviceListingNavbar"),
    navbarServiceListing: makeNodeComponent("navbarServiceListing"),
    progressBar: makeNodeComponent("progressBar"),
    footerB: makeNodeComponent("footerB"),

    // Metadata about props expected for PlasmicServicelistingconfirmation
    internalVariantProps: PlasmicServicelistingconfirmation__VariantProps,
    internalArgProps: PlasmicServicelistingconfirmation__ArgProps
  }
);

export default PlasmicServicelistingconfirmation;
/* prettier-ignore-end */
