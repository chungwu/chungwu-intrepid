// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: LCJ0Mh3XlqeJy94
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicElementRadioPrimary.module.css"; // plasmic-import: LCJ0Mh3XlqeJy94/css

export type PlasmicElementRadioPrimary__VariantMembers = {
  selected: "selected";
  size: "_12Px" | "_14Px" | "_16Px" | "_18Px" | "_24Px" | "_32Px";
};

export type PlasmicElementRadioPrimary__VariantsArgs = {
  selected?: SingleBooleanChoiceArg<"selected">;
  size?: SingleChoiceArg<
    "_12Px" | "_14Px" | "_16Px" | "_18Px" | "_24Px" | "_32Px"
  >;
};

type VariantPropType = keyof PlasmicElementRadioPrimary__VariantsArgs;
export const PlasmicElementRadioPrimary__VariantProps =
  new Array<VariantPropType>("selected", "size");

export type PlasmicElementRadioPrimary__ArgsType = {};
type ArgPropType = keyof PlasmicElementRadioPrimary__ArgsType;
export const PlasmicElementRadioPrimary__ArgProps = new Array<ArgPropType>();

export type PlasmicElementRadioPrimary__OverridesType = {
  root?: p.Flex<"div">;
  radioBorder?: p.Flex<"div">;
  radioCore?: p.Flex<"div">;
};

export interface DefaultElementRadioPrimaryProps {
  selected?: SingleBooleanChoiceArg<"selected">;
  size?: SingleChoiceArg<
    "_12Px" | "_14Px" | "_16Px" | "_18Px" | "_24Px" | "_32Px"
  >;
  className?: string;
}

function PlasmicElementRadioPrimary__RenderFunc(props: {
  variants: PlasmicElementRadioPrimary__VariantsArgs;
  args: PlasmicElementRadioPrimary__ArgsType;
  overrides: PlasmicElementRadioPrimary__OverridesType;
  dataFetches?: PlasmicElementRadioPrimary__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div
        data-plasmic-name={"radioBorder"}
        data-plasmic-override={overrides.radioBorder}
        className={classNames(defaultcss.all, sty.radioBorder, {
          [sty.radioBorder__selected]: hasVariant(
            variants,
            "selected",
            "selected"
          ),
          [sty.radioBorder__size__12Px]: hasVariant(variants, "size", "_12Px"),
          [sty.radioBorder__size__14Px]: hasVariant(variants, "size", "_14Px"),
          [sty.radioBorder__size__16Px]: hasVariant(variants, "size", "_16Px"),
          [sty.radioBorder__size__18Px]: hasVariant(variants, "size", "_18Px"),
          [sty.radioBorder__size__24Px]: hasVariant(variants, "size", "_24Px"),
          [sty.radioBorder__size__32Px]: hasVariant(variants, "size", "_32Px")
        })}
      >
        <div
          data-plasmic-name={"radioCore"}
          data-plasmic-override={overrides.radioCore}
          className={classNames(defaultcss.all, sty.radioCore, {
            [sty.radioCore__selected]: hasVariant(
              variants,
              "selected",
              "selected"
            ),
            [sty.radioCore__size__12Px]: hasVariant(variants, "size", "_12Px"),
            [sty.radioCore__size__14Px]: hasVariant(variants, "size", "_14Px"),
            [sty.radioCore__size__16Px]: hasVariant(variants, "size", "_16Px"),
            [sty.radioCore__size__18Px]: hasVariant(variants, "size", "_18Px"),
            [sty.radioCore__size__24Px]: hasVariant(variants, "size", "_24Px"),
            [sty.radioCore__size__32Px]: hasVariant(variants, "size", "_32Px")
          })}
        />
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "radioBorder", "radioCore"],
  radioBorder: ["radioBorder", "radioCore"],
  radioCore: ["radioCore"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  radioBorder: "div";
  radioCore: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicElementRadioPrimary__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicElementRadioPrimary__VariantsArgs;
    args?: PlasmicElementRadioPrimary__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicElementRadioPrimary__Fetches;
  } & Omit<PlasmicElementRadioPrimary__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicElementRadioPrimary__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicElementRadioPrimary__ArgProps,
      internalVariantPropNames: PlasmicElementRadioPrimary__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicElementRadioPrimary__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicElementRadioPrimary";
  } else {
    func.displayName = `PlasmicElementRadioPrimary.${nodeName}`;
  }
  return func;
}

export const PlasmicElementRadioPrimary = Object.assign(
  // Top-level PlasmicElementRadioPrimary renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    radioBorder: makeNodeComponent("radioBorder"),
    radioCore: makeNodeComponent("radioCore"),

    // Metadata about props expected for PlasmicElementRadioPrimary
    internalVariantProps: PlasmicElementRadioPrimary__VariantProps,
    internalArgProps: PlasmicElementRadioPrimary__ArgProps
  }
);

export default PlasmicElementRadioPrimary;
/* prettier-ignore-end */
