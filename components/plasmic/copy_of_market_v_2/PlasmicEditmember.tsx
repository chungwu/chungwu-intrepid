// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: YLtKwRZjV_XUDF
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavbarInternal from "../../NavbarInternal"; // plasmic-import: nBfIHHqHvjUywN9/component
import NavbarMemberEdit from "../../NavbarMemberEdit"; // plasmic-import: MpfEfF3PxMa-4U/component
import CardHeaderTitleDisplay from "../../CardHeaderTitleDisplay"; // plasmic-import: fk5BRaqICb6MOmt/component
import CardHeaderTitlePrimary from "../../CardHeaderTitlePrimary"; // plasmic-import: qjG0g-Rmz0BeDH/component
import InputTextForm from "../../InputTextForm"; // plasmic-import: xiZmrha0lhlIet/component
import ButtonGroupStripeVerification from "../../ButtonGroupStripeVerification"; // plasmic-import: GMAvcEQGmyB86b/component
import UserAvatarButton from "../../UserAvatarButton"; // plasmic-import: S6be1w_HeX7JCB/component
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: gpNjXfbD_ZdpPU/component
import InputTextPrefixSuffix from "../../InputTextPrefixSuffix"; // plasmic-import: SC-07wTZAqk8QnI/component
import InputTextField from "../../InputTextField"; // plasmic-import: eRJarSvs8Cmudj/component
import InputTextAreaPrimary from "../../InputTextAreaPrimary"; // plasmic-import: -MQQi4eWrKtoHRO/component
import SelectGroupDropdownPrimary from "../../SelectGroupDropdownPrimary"; // plasmic-import: LkR_9K5xfRnJSu/component
import InputSearchbarFilterDisplay from "../../InputSearchbarFilterDisplay"; // plasmic-import: tTEt4VhljRx6qm/component
import CardSocialConnectSwitch from "../../CardSocialConnectSwitch"; // plasmic-import: 9czIbo_1TSRssu/component
import FooterB from "../../FooterB"; // plasmic-import: IZENTiSL4_zyK8/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicEditmember.module.css"; // plasmic-import: YLtKwRZjV_XUDF/css

import PlusBoldIcon from "./icons/PlasmicIcon__PlusBold"; // plasmic-import: lhSEEajPJGZatfD/icon

export type PlasmicEditmember__VariantMembers = {};

export type PlasmicEditmember__VariantsArgs = {};
type VariantPropType = keyof PlasmicEditmember__VariantsArgs;
export const PlasmicEditmember__VariantProps = new Array<VariantPropType>();

export type PlasmicEditmember__ArgsType = {};
type ArgPropType = keyof PlasmicEditmember__ArgsType;
export const PlasmicEditmember__ArgProps = new Array<ArgPropType>();

export type PlasmicEditmember__OverridesType = {
  root?: p.Flex<"div">;
  navbarInternal?: p.Flex<typeof NavbarInternal>;
  navbarMemberEdit?: p.Flex<typeof NavbarMemberEdit>;
  sectionMemberEditProfile?: p.Flex<"section">;
  formMemberEditProfile?: p.Flex<"form">;
  cardMemberPersonalVerification?: p.Flex<"div">;
  memberPersonalNameGroup?: p.Flex<"div">;
  buttonGroupStripeVerification?: p.Flex<typeof ButtonGroupStripeVerification>;
  cardMemberImage?: p.Flex<"div">;
  memberUploadLogoButtonGroup?: p.Flex<"div">;
  userAvatarButton?: p.Flex<typeof UserAvatarButton>;
  memberEditlogoGroup?: p.Flex<"div">;
  cardMemberUsername?: p.Flex<"div">;
  cardMemberUrl?: p.Flex<"div">;
  cardMemberTagline?: p.Flex<"div">;
  inputTextField?: p.Flex<typeof InputTextField>;
  cardMemberDescription?: p.Flex<"div">;
  inputTextAreaPrimary?: p.Flex<typeof InputTextAreaPrimary>;
  cardVideoIntroUrl?: p.Flex<"div">;
  memberSubmitProfile?: p.Flex<typeof ButtonPrimary>;
  sectionMemberEditProfileDetails?: p.Flex<"section">;
  formMemberEditDetails?: p.Flex<"form">;
  cardMemberLocation?: p.Flex<"div">;
  memberLocationGroup?: p.Flex<"div">;
  cardMemberIndustry?: p.Flex<"div">;
  memberIndustryGroup?: p.Flex<"div">;
  cardMemberLanguages?: p.Flex<"div">;
  inputGroupMemberLanguages?: p.Flex<"div">;
  cardMemberInterests?: p.Flex<"div">;
  cardMemberSkills?: p.Flex<"div">;
  cardMemberCommunity?: p.Flex<"div">;
  memberSubmitDetails?: p.Flex<typeof ButtonPrimary>;
  sectionMemberEditProfileSocial?: p.Flex<"section">;
  formMemberEditSocial?: p.Flex<"form">;
  cardMemberWebsite?: p.Flex<"div">;
  cardMemberSocial?: p.Flex<"div">;
  inputGroupMemberSocial?: p.Flex<"div">;
  memberSubmitSocials?: p.Flex<typeof ButtonPrimary>;
  footerB?: p.Flex<typeof FooterB>;
};

export interface DefaultEditmemberProps {
  dataFetches: PlasmicEditmember__Fetches;
}

function PlasmicEditmember__RenderFunc(props: {
  variants: PlasmicEditmember__VariantsArgs;
  args: PlasmicEditmember__ArgsType;
  overrides: PlasmicEditmember__OverridesType;
  dataFetches?: PlasmicEditmember__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <React.Fragment>
      <Head>
        <title key="title">{""}</title>
        <meta key="og:title" property="og:title" content={""} />
        <meta
          key="description"
          name="description"
          property="og:description"
          content={""}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <NavbarInternal
            data-plasmic-name={"navbarInternal"}
            data-plasmic-override={overrides.navbarInternal}
            className={classNames("__wab_instance", sty.navbarInternal)}
          />

          <NavbarMemberEdit
            data-plasmic-name={"navbarMemberEdit"}
            data-plasmic-override={overrides.navbarMemberEdit}
            className={classNames("__wab_instance", sty.navbarMemberEdit)}
            navItems={[
              "notifications",
              "messages",
              "reviews",
              "lists",
              "wallet"
            ]}
            selected={"profile" as const}
          />

          <p.Stack
            as={"section"}
            data-plasmic-name={"sectionMemberEditProfile"}
            data-plasmic-override={overrides.sectionMemberEditProfile}
            hasGap={true}
            className={classNames(defaultcss.all, sty.sectionMemberEditProfile)}
          >
            <CardHeaderTitleDisplay
              className={classNames(
                "__wab_instance",
                sty.cardHeaderTitleDisplay__p0Ysi
              )}
              size={"_720" as const}
              slot={
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__oyIqJ
                  )}
                >
                  {"Edit profile"}
                </div>
              }
              textDisplay={"Member"}
              textSubhead={
                "Set your creator profile and make a great first impression"
              }
            />

            <p.Stack
              as={"form"}
              data-plasmic-name={"formMemberEditProfile"}
              data-plasmic-override={overrides.formMemberEditProfile}
              hasGap={true}
              className={classNames(defaultcss.all, sty.formMemberEditProfile)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"cardMemberPersonalVerification"}
                data-plasmic-override={overrides.cardMemberPersonalVerification}
                hasGap={true}
                className={classNames(
                  defaultcss.all,
                  sty.cardMemberPersonalVerification
                )}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary__jvKq
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox__xx1Cq
                      )}
                    >
                      {"Please enter your full name."}
                    </div>
                  }
                >
                  {"Personal name"}
                </CardHeaderTitlePrimary>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"memberPersonalNameGroup"}
                  data-plasmic-override={overrides.memberPersonalNameGroup}
                  hasGap={true}
                  className={classNames(
                    defaultcss.all,
                    sty.memberPersonalNameGroup
                  )}
                >
                  <InputTextForm
                    className={classNames(
                      "__wab_instance",
                      sty.inputTextForm__dbjd1
                    )}
                    labelHeadline={"First name"}
                    type={"secondary" as const}
                    width={"_360" as const}
                  />

                  <InputTextForm
                    className={classNames(
                      "__wab_instance",
                      sty.inputTextForm__jiPs0
                    )}
                    labelHeadline={"Last name"}
                    type={"secondary" as const}
                    width={"_360" as const}
                  />
                </p.Stack>

                <ButtonGroupStripeVerification
                  data-plasmic-name={"buttonGroupStripeVerification"}
                  data-plasmic-override={
                    overrides.buttonGroupStripeVerification
                  }
                  className={classNames(
                    "__wab_instance",
                    sty.buttonGroupStripeVerification
                  )}
                />
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"cardMemberImage"}
                data-plasmic-override={overrides.cardMemberImage}
                hasGap={true}
                className={classNames(defaultcss.all, sty.cardMemberImage)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary___7WvjF
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox__sLmyW
                      )}
                    >
                      {
                        "Click on the avatar to upload a custom image from your files."
                      }
                    </div>
                  }
                >
                  {"Image"}
                </CardHeaderTitlePrimary>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"memberUploadLogoButtonGroup"}
                  data-plasmic-override={overrides.memberUploadLogoButtonGroup}
                  hasGap={true}
                  className={classNames(
                    defaultcss.all,
                    sty.memberUploadLogoButtonGroup
                  )}
                >
                  <UserAvatarButton
                    data-plasmic-name={"userAvatarButton"}
                    data-plasmic-override={overrides.userAvatarButton}
                    className={classNames(
                      "__wab_instance",
                      sty.userAvatarButton
                    )}
                    size={"_64Px" as const}
                  />

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"memberEditlogoGroup"}
                    data-plasmic-override={overrides.memberEditlogoGroup}
                    hasGap={true}
                    className={classNames(
                      defaultcss.all,
                      sty.memberEditlogoGroup
                    )}
                  >
                    <ButtonPrimary
                      className={classNames(
                        "__wab_instance",
                        sty.buttonPrimary__bv4Dz
                      )}
                      size={"_90" as const}
                      type={"outline" as const}
                    >
                      {"Edit"}
                    </ButtonPrimary>

                    <ButtonPrimary
                      className={classNames(
                        "__wab_instance",
                        sty.buttonPrimary___69Ukc
                      )}
                      size={"_90" as const}
                      type={"secondary" as const}
                    >
                      {"Delete"}
                    </ButtonPrimary>
                  </p.Stack>
                </p.Stack>
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"cardMemberUsername"}
                data-plasmic-override={overrides.cardMemberUsername}
                hasGap={true}
                className={classNames(defaultcss.all, sty.cardMemberUsername)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary__beJ6L
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox___4EJl
                      )}
                    >
                      {
                        "This is your URL namespace within the Intrepid community"
                      }
                    </div>
                  }
                >
                  {"Username display"}
                </CardHeaderTitlePrimary>

                <InputTextPrefixSuffix
                  className={classNames(
                    "__wab_instance",
                    sty.inputTextPrefixSuffix__flW10
                  )}
                  prefixLabelHeadline={"@"}
                  suffix={"suffix" as const}
                  type={"primary" as const}
                  width={"_540" as const}
                />
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"cardMemberUrl"}
                data-plasmic-override={overrides.cardMemberUrl}
                hasGap={true}
                className={classNames(defaultcss.all, sty.cardMemberUrl)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary__c7XB
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox__t9T9R
                      )}
                    >
                      {
                        "This is your copany's URL namespace within the Intrepid community"
                      }
                    </div>
                  }
                >
                  {"Url namespace"}
                </CardHeaderTitlePrimary>

                <InputTextPrefixSuffix
                  className={classNames(
                    "__wab_instance",
                    sty.inputTextPrefixSuffix__b29JR
                  )}
                  prefixLabelHeadline={"intrepid/technology/"}
                  suffix={"suffix" as const}
                  type={"primary" as const}
                  width={"_540" as const}
                />
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"cardMemberTagline"}
                data-plasmic-override={overrides.cardMemberTagline}
                hasGap={true}
                className={classNames(defaultcss.all, sty.cardMemberTagline)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary__pSsdh
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox__hherC
                      )}
                    >
                      {"Short description of your company or team"}
                    </div>
                  }
                >
                  {"Tagline"}
                </CardHeaderTitlePrimary>

                <InputTextField
                  data-plasmic-name={"inputTextField"}
                  data-plasmic-override={overrides.inputTextField}
                  className={classNames("__wab_instance", sty.inputTextField)}
                  size={"_540" as const}
                  type={"secondary" as const}
                />
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"cardMemberDescription"}
                data-plasmic-override={overrides.cardMemberDescription}
                hasGap={true}
                className={classNames(
                  defaultcss.all,
                  sty.cardMemberDescription
                )}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary___6Wl8T
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox___8KnrN
                      )}
                    >
                      {"Please describe yourself and your interests. "}
                    </div>
                  }
                >
                  {"Description"}
                </CardHeaderTitlePrimary>

                <InputTextAreaPrimary
                  data-plasmic-name={"inputTextAreaPrimary"}
                  data-plasmic-override={overrides.inputTextAreaPrimary}
                  className={classNames(
                    "__wab_instance",
                    sty.inputTextAreaPrimary
                  )}
                  height={"_90" as const}
                  type={"secondary" as const}
                  width={"_540" as const}
                />
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"cardVideoIntroUrl"}
                data-plasmic-override={overrides.cardVideoIntroUrl}
                hasGap={true}
                className={classNames(defaultcss.all, sty.cardVideoIntroUrl)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary__yGpsg
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox__snqiD
                      )}
                    >
                      {
                        "Don't worry — this is optional and it's okay to launch without a video."
                      }
                    </div>
                  }
                >
                  {"Video introduction"}
                </CardHeaderTitlePrimary>

                <InputTextPrefixSuffix
                  className={classNames(
                    "__wab_instance",
                    sty.inputTextPrefixSuffix__i7Fwr
                  )}
                  prefixLabelHeadline={"https//"}
                  suffix={"suffix" as const}
                  type={"primary" as const}
                  width={"_540" as const}
                />
              </p.Stack>

              <ButtonPrimary
                data-plasmic-name={"memberSubmitProfile"}
                data-plasmic-override={overrides.memberSubmitProfile}
                className={classNames(
                  "__wab_instance",
                  sty.memberSubmitProfile
                )}
                size={"_180" as const}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__cEmKy
                  )}
                >
                  {"Save profile"}
                </div>
              </ButtonPrimary>
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"section"}
            data-plasmic-name={"sectionMemberEditProfileDetails"}
            data-plasmic-override={overrides.sectionMemberEditProfileDetails}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              sty.sectionMemberEditProfileDetails
            )}
          >
            <CardHeaderTitleDisplay
              className={classNames(
                "__wab_instance",
                sty.cardHeaderTitleDisplay__wyQQj
              )}
              headings={["title"]}
              size={"_720" as const}
              slot={
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__poFfo
                  )}
                >
                  {"Details"}
                </div>
              }
              textDisplay={"Profile edit"}
              textSubhead={
                "Fill in your creator details for better visibility and matching in the community"
              }
            />

            <p.Stack
              as={"form"}
              data-plasmic-name={"formMemberEditDetails"}
              data-plasmic-override={overrides.formMemberEditDetails}
              hasGap={true}
              className={classNames(defaultcss.all, sty.formMemberEditDetails)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"cardMemberLocation"}
                data-plasmic-override={overrides.cardMemberLocation}
                hasGap={true}
                className={classNames(defaultcss.all, sty.cardMemberLocation)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary__ja9Rj
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox__aA68C
                      )}
                    >
                      {
                        "Please enter the Country and City of your legal residence"
                      }
                    </div>
                  }
                >
                  {"Location"}
                </CardHeaderTitlePrimary>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"memberLocationGroup"}
                  data-plasmic-override={overrides.memberLocationGroup}
                  hasGap={true}
                  className={classNames(
                    defaultcss.all,
                    sty.memberLocationGroup
                  )}
                >
                  <SelectGroupDropdownPrimary
                    className={classNames(
                      "__wab_instance",
                      sty.selectGroupDropdownPrimary__y0QS
                    )}
                    description={"description" as const}
                  >
                    {"Country"}
                  </SelectGroupDropdownPrimary>

                  <InputTextForm
                    className={classNames(
                      "__wab_instance",
                      sty.inputTextForm__wpSHc
                    )}
                    labelHeadline={"City"}
                    subhead={"subhead" as const}
                    type={"primary" as const}
                    width={"_360" as const}
                  />
                </p.Stack>
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"cardMemberIndustry"}
                data-plasmic-override={overrides.cardMemberIndustry}
                hasGap={true}
                className={classNames(defaultcss.all, sty.cardMemberIndustry)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary__rgJnx
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox__r9Dut
                      )}
                    >
                      {
                        "Please enter the industry you work in and your role in your company."
                      }
                    </div>
                  }
                >
                  {"Industry & job"}
                </CardHeaderTitlePrimary>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"memberIndustryGroup"}
                  data-plasmic-override={overrides.memberIndustryGroup}
                  hasGap={true}
                  className={classNames(
                    defaultcss.all,
                    sty.memberIndustryGroup
                  )}
                >
                  <SelectGroupDropdownPrimary
                    className={classNames(
                      "__wab_instance",
                      sty.selectGroupDropdownPrimary__dC93
                    )}
                    description={"description" as const}
                  >
                    {"Industry"}
                  </SelectGroupDropdownPrimary>

                  <InputTextForm
                    className={classNames(
                      "__wab_instance",
                      sty.inputTextForm__ub7TC
                    )}
                    labelHeadline={"Job title"}
                    subhead={"subhead" as const}
                    type={"primary" as const}
                    width={"_360" as const}
                  />
                </p.Stack>
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"cardMemberLanguages"}
                data-plasmic-override={overrides.cardMemberLanguages}
                hasGap={true}
                className={classNames(defaultcss.all, sty.cardMemberLanguages)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary___2H34B
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox__a6V8L
                      )}
                    >
                      {"Enter the languages you speak"}
                    </div>
                  }
                >
                  {"Languages"}
                </CardHeaderTitlePrimary>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"inputGroupMemberLanguages"}
                  data-plasmic-override={overrides.inputGroupMemberLanguages}
                  hasGap={true}
                  className={classNames(
                    defaultcss.all,
                    sty.inputGroupMemberLanguages
                  )}
                >
                  <SelectGroupDropdownPrimary
                    className={classNames(
                      "__wab_instance",
                      sty.selectGroupDropdownPrimary__cdnEw
                    )}
                    description={"description" as const}
                  >
                    {"Primary"}
                  </SelectGroupDropdownPrimary>

                  <SelectGroupDropdownPrimary
                    className={classNames(
                      "__wab_instance",
                      sty.selectGroupDropdownPrimary__l7Jic
                    )}
                    description={"description" as const}
                  >
                    {"Secondary"}
                  </SelectGroupDropdownPrimary>
                </p.Stack>
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"cardMemberInterests"}
                data-plasmic-override={overrides.cardMemberInterests}
                hasGap={true}
                className={classNames(defaultcss.all, sty.cardMemberInterests)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary__fJvL0
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox__keTaM
                      )}
                    >
                      {
                        "Search and enter the products/services you are interested in, separated by commas"
                      }
                    </div>
                  }
                >
                  {"Interests"}
                </CardHeaderTitlePrimary>

                <InputSearchbarFilterDisplay
                  className={classNames(
                    "__wab_instance",
                    sty.inputSearchbarFilterDisplay___2ZcIm
                  )}
                />
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"cardMemberSkills"}
                data-plasmic-override={overrides.cardMemberSkills}
                hasGap={true}
                className={classNames(defaultcss.all, sty.cardMemberSkills)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary__rnQgS
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox__ieJou
                      )}
                    >
                      {
                        "Search and enter your skills and strengths, separated by commas"
                      }
                    </div>
                  }
                >
                  {"Skills"}
                </CardHeaderTitlePrimary>

                <InputSearchbarFilterDisplay
                  className={classNames(
                    "__wab_instance",
                    sty.inputSearchbarFilterDisplay__aasJ4
                  )}
                />
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"cardMemberCommunity"}
                data-plasmic-override={overrides.cardMemberCommunity}
                hasGap={true}
                className={classNames(defaultcss.all, sty.cardMemberCommunity)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary___1S6Zy
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox___2QeJa
                      )}
                    >
                      {
                        "Search and enter your industry or most relevant community"
                      }
                    </div>
                  }
                >
                  {"Community"}
                </CardHeaderTitlePrimary>

                <InputSearchbarFilterDisplay
                  className={classNames(
                    "__wab_instance",
                    sty.inputSearchbarFilterDisplay__m3Yb1
                  )}
                />
              </p.Stack>

              <ButtonPrimary
                data-plasmic-name={"memberSubmitDetails"}
                data-plasmic-override={overrides.memberSubmitDetails}
                className={classNames(
                  "__wab_instance",
                  sty.memberSubmitDetails
                )}
                size={"_180" as const}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__sci67
                  )}
                >
                  {"Save details"}
                </div>
              </ButtonPrimary>
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"section"}
            data-plasmic-name={"sectionMemberEditProfileSocial"}
            data-plasmic-override={overrides.sectionMemberEditProfileSocial}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              sty.sectionMemberEditProfileSocial
            )}
          >
            <CardHeaderTitleDisplay
              className={classNames(
                "__wab_instance",
                sty.cardHeaderTitleDisplay__gy9I7
              )}
              headings={["title"]}
              size={"_720" as const}
              slot={
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__enIc
                  )}
                >
                  {"Web and social"}
                </div>
              }
              textDisplay={"Profile edit"}
              textSubhead={
                "Securely verify your accounts and display links on your page. We’ll never post on your behalf."
              }
            />

            <p.Stack
              as={"form"}
              data-plasmic-name={"formMemberEditSocial"}
              data-plasmic-override={overrides.formMemberEditSocial}
              hasGap={true}
              className={classNames(defaultcss.all, sty.formMemberEditSocial)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"cardMemberWebsite"}
                data-plasmic-override={overrides.cardMemberWebsite}
                hasGap={true}
                className={classNames(defaultcss.all, sty.cardMemberWebsite)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary__xr3Me
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox__tRdDe
                      )}
                    >
                      {"Enter your company's website address"}
                    </div>
                  }
                >
                  {"Website"}
                </CardHeaderTitlePrimary>

                <InputTextPrefixSuffix
                  className={classNames(
                    "__wab_instance",
                    sty.inputTextPrefixSuffix__nxbdT
                  )}
                  prefixLabelHeadline={"https://"}
                  suffix={"suffix" as const}
                  type={"primary" as const}
                  width={"_540" as const}
                />
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"cardMemberSocial"}
                data-plasmic-override={overrides.cardMemberSocial}
                hasGap={true}
                className={classNames(defaultcss.all, sty.cardMemberSocial)}
              >
                <CardHeaderTitlePrimary
                  className={classNames(
                    "__wab_instance",
                    sty.cardHeaderTitlePrimary__qSlf
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox__edkmm
                      )}
                    >
                      {
                        "Increase trust and visibility by connecting the social profiles you want to include on your profile"
                      }
                    </div>
                  }
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__rmg5Y
                    )}
                  >
                    {"Social"}
                  </div>
                </CardHeaderTitlePrimary>

                <div
                  data-plasmic-name={"inputGroupMemberSocial"}
                  data-plasmic-override={overrides.inputGroupMemberSocial}
                  className={classNames(
                    defaultcss.all,
                    sty.inputGroupMemberSocial
                  )}
                >
                  <CardSocialConnectSwitch
                    className={classNames(
                      "__wab_instance",
                      sty.cardSocialConnectSwitch__mzjxh
                    )}
                    socialNetwork={"instagram" as const}
                    width={"_540" as const}
                  />

                  <CardSocialConnectSwitch
                    className={classNames(
                      "__wab_instance",
                      sty.cardSocialConnectSwitch__uv45R
                    )}
                    socialNetwork={"facebook" as const}
                    width={"_540" as const}
                  />

                  <CardSocialConnectSwitch
                    className={classNames(
                      "__wab_instance",
                      sty.cardSocialConnectSwitch___6R4Pt
                    )}
                    socialNetwork={"linkedin" as const}
                    width={"_540" as const}
                  />

                  <CardSocialConnectSwitch
                    className={classNames(
                      "__wab_instance",
                      sty.cardSocialConnectSwitch__jKgi
                    )}
                    socialNetwork={"twitter" as const}
                    width={"_540" as const}
                  />

                  <CardSocialConnectSwitch
                    className={classNames(
                      "__wab_instance",
                      sty.cardSocialConnectSwitch__t29C
                    )}
                    socialNetwork={"youtube" as const}
                    width={"_540" as const}
                  />

                  <CardSocialConnectSwitch
                    className={classNames(
                      "__wab_instance",
                      sty.cardSocialConnectSwitch__mjcWe
                    )}
                    socialNetwork={"tikTok" as const}
                    width={"_540" as const}
                  />

                  <CardSocialConnectSwitch
                    className={classNames(
                      "__wab_instance",
                      sty.cardSocialConnectSwitch__iIrjU
                    )}
                    socialNetwork={"github" as const}
                    width={"_540" as const}
                  />

                  <CardSocialConnectSwitch
                    className={classNames(
                      "__wab_instance",
                      sty.cardSocialConnectSwitch__pcRku
                    )}
                    socialNetwork={"dribbble" as const}
                    width={"_540" as const}
                  />
                </div>
              </p.Stack>

              <ButtonPrimary
                data-plasmic-name={"memberSubmitSocials"}
                data-plasmic-override={overrides.memberSubmitSocials}
                className={classNames(
                  "__wab_instance",
                  sty.memberSubmitSocials
                )}
                size={"_180" as const}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox___98Hoa
                  )}
                >
                  {"Save socials"}
                </div>
              </ButtonPrimary>
            </p.Stack>
          </p.Stack>

          <FooterB
            data-plasmic-name={"footerB"}
            data-plasmic-override={overrides.footerB}
            className={classNames("__wab_instance", sty.footerB)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbarInternal",
    "navbarMemberEdit",
    "sectionMemberEditProfile",
    "formMemberEditProfile",
    "cardMemberPersonalVerification",
    "memberPersonalNameGroup",
    "buttonGroupStripeVerification",
    "cardMemberImage",
    "memberUploadLogoButtonGroup",
    "userAvatarButton",
    "memberEditlogoGroup",
    "cardMemberUsername",
    "cardMemberUrl",
    "cardMemberTagline",
    "inputTextField",
    "cardMemberDescription",
    "inputTextAreaPrimary",
    "cardVideoIntroUrl",
    "memberSubmitProfile",
    "sectionMemberEditProfileDetails",
    "formMemberEditDetails",
    "cardMemberLocation",
    "memberLocationGroup",
    "cardMemberIndustry",
    "memberIndustryGroup",
    "cardMemberLanguages",
    "inputGroupMemberLanguages",
    "cardMemberInterests",
    "cardMemberSkills",
    "cardMemberCommunity",
    "memberSubmitDetails",
    "sectionMemberEditProfileSocial",
    "formMemberEditSocial",
    "cardMemberWebsite",
    "cardMemberSocial",
    "inputGroupMemberSocial",
    "memberSubmitSocials",
    "footerB"
  ],
  navbarInternal: ["navbarInternal"],
  navbarMemberEdit: ["navbarMemberEdit"],
  sectionMemberEditProfile: [
    "sectionMemberEditProfile",
    "formMemberEditProfile",
    "cardMemberPersonalVerification",
    "memberPersonalNameGroup",
    "buttonGroupStripeVerification",
    "cardMemberImage",
    "memberUploadLogoButtonGroup",
    "userAvatarButton",
    "memberEditlogoGroup",
    "cardMemberUsername",
    "cardMemberUrl",
    "cardMemberTagline",
    "inputTextField",
    "cardMemberDescription",
    "inputTextAreaPrimary",
    "cardVideoIntroUrl",
    "memberSubmitProfile"
  ],
  formMemberEditProfile: [
    "formMemberEditProfile",
    "cardMemberPersonalVerification",
    "memberPersonalNameGroup",
    "buttonGroupStripeVerification",
    "cardMemberImage",
    "memberUploadLogoButtonGroup",
    "userAvatarButton",
    "memberEditlogoGroup",
    "cardMemberUsername",
    "cardMemberUrl",
    "cardMemberTagline",
    "inputTextField",
    "cardMemberDescription",
    "inputTextAreaPrimary",
    "cardVideoIntroUrl",
    "memberSubmitProfile"
  ],
  cardMemberPersonalVerification: [
    "cardMemberPersonalVerification",
    "memberPersonalNameGroup",
    "buttonGroupStripeVerification"
  ],
  memberPersonalNameGroup: ["memberPersonalNameGroup"],
  buttonGroupStripeVerification: ["buttonGroupStripeVerification"],
  cardMemberImage: [
    "cardMemberImage",
    "memberUploadLogoButtonGroup",
    "userAvatarButton",
    "memberEditlogoGroup"
  ],
  memberUploadLogoButtonGroup: [
    "memberUploadLogoButtonGroup",
    "userAvatarButton",
    "memberEditlogoGroup"
  ],
  userAvatarButton: ["userAvatarButton"],
  memberEditlogoGroup: ["memberEditlogoGroup"],
  cardMemberUsername: ["cardMemberUsername"],
  cardMemberUrl: ["cardMemberUrl"],
  cardMemberTagline: ["cardMemberTagline", "inputTextField"],
  inputTextField: ["inputTextField"],
  cardMemberDescription: ["cardMemberDescription", "inputTextAreaPrimary"],
  inputTextAreaPrimary: ["inputTextAreaPrimary"],
  cardVideoIntroUrl: ["cardVideoIntroUrl"],
  memberSubmitProfile: ["memberSubmitProfile"],
  sectionMemberEditProfileDetails: [
    "sectionMemberEditProfileDetails",
    "formMemberEditDetails",
    "cardMemberLocation",
    "memberLocationGroup",
    "cardMemberIndustry",
    "memberIndustryGroup",
    "cardMemberLanguages",
    "inputGroupMemberLanguages",
    "cardMemberInterests",
    "cardMemberSkills",
    "cardMemberCommunity",
    "memberSubmitDetails"
  ],
  formMemberEditDetails: [
    "formMemberEditDetails",
    "cardMemberLocation",
    "memberLocationGroup",
    "cardMemberIndustry",
    "memberIndustryGroup",
    "cardMemberLanguages",
    "inputGroupMemberLanguages",
    "cardMemberInterests",
    "cardMemberSkills",
    "cardMemberCommunity",
    "memberSubmitDetails"
  ],
  cardMemberLocation: ["cardMemberLocation", "memberLocationGroup"],
  memberLocationGroup: ["memberLocationGroup"],
  cardMemberIndustry: ["cardMemberIndustry", "memberIndustryGroup"],
  memberIndustryGroup: ["memberIndustryGroup"],
  cardMemberLanguages: ["cardMemberLanguages", "inputGroupMemberLanguages"],
  inputGroupMemberLanguages: ["inputGroupMemberLanguages"],
  cardMemberInterests: ["cardMemberInterests"],
  cardMemberSkills: ["cardMemberSkills"],
  cardMemberCommunity: ["cardMemberCommunity"],
  memberSubmitDetails: ["memberSubmitDetails"],
  sectionMemberEditProfileSocial: [
    "sectionMemberEditProfileSocial",
    "formMemberEditSocial",
    "cardMemberWebsite",
    "cardMemberSocial",
    "inputGroupMemberSocial",
    "memberSubmitSocials"
  ],
  formMemberEditSocial: [
    "formMemberEditSocial",
    "cardMemberWebsite",
    "cardMemberSocial",
    "inputGroupMemberSocial",
    "memberSubmitSocials"
  ],
  cardMemberWebsite: ["cardMemberWebsite"],
  cardMemberSocial: ["cardMemberSocial", "inputGroupMemberSocial"],
  inputGroupMemberSocial: ["inputGroupMemberSocial"],
  memberSubmitSocials: ["memberSubmitSocials"],
  footerB: ["footerB"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbarInternal: typeof NavbarInternal;
  navbarMemberEdit: typeof NavbarMemberEdit;
  sectionMemberEditProfile: "section";
  formMemberEditProfile: "form";
  cardMemberPersonalVerification: "div";
  memberPersonalNameGroup: "div";
  buttonGroupStripeVerification: typeof ButtonGroupStripeVerification;
  cardMemberImage: "div";
  memberUploadLogoButtonGroup: "div";
  userAvatarButton: typeof UserAvatarButton;
  memberEditlogoGroup: "div";
  cardMemberUsername: "div";
  cardMemberUrl: "div";
  cardMemberTagline: "div";
  inputTextField: typeof InputTextField;
  cardMemberDescription: "div";
  inputTextAreaPrimary: typeof InputTextAreaPrimary;
  cardVideoIntroUrl: "div";
  memberSubmitProfile: typeof ButtonPrimary;
  sectionMemberEditProfileDetails: "section";
  formMemberEditDetails: "form";
  cardMemberLocation: "div";
  memberLocationGroup: "div";
  cardMemberIndustry: "div";
  memberIndustryGroup: "div";
  cardMemberLanguages: "div";
  inputGroupMemberLanguages: "div";
  cardMemberInterests: "div";
  cardMemberSkills: "div";
  cardMemberCommunity: "div";
  memberSubmitDetails: typeof ButtonPrimary;
  sectionMemberEditProfileSocial: "section";
  formMemberEditSocial: "form";
  cardMemberWebsite: "div";
  cardMemberSocial: "div";
  inputGroupMemberSocial: "div";
  memberSubmitSocials: typeof ButtonPrimary;
  footerB: typeof FooterB;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicEditmember__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicEditmember__VariantsArgs;
    args?: PlasmicEditmember__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicEditmember__Fetches;
  } & Omit<PlasmicEditmember__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicEditmember__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicEditmember__ArgProps,
      internalVariantPropNames: PlasmicEditmember__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicEditmember__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEditmember";
  } else {
    func.displayName = `PlasmicEditmember.${nodeName}`;
  }
  return func;
}

export const PlasmicEditmember = Object.assign(
  // Top-level PlasmicEditmember renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbarInternal: makeNodeComponent("navbarInternal"),
    navbarMemberEdit: makeNodeComponent("navbarMemberEdit"),
    sectionMemberEditProfile: makeNodeComponent("sectionMemberEditProfile"),
    formMemberEditProfile: makeNodeComponent("formMemberEditProfile"),
    cardMemberPersonalVerification: makeNodeComponent(
      "cardMemberPersonalVerification"
    ),
    memberPersonalNameGroup: makeNodeComponent("memberPersonalNameGroup"),
    buttonGroupStripeVerification: makeNodeComponent(
      "buttonGroupStripeVerification"
    ),
    cardMemberImage: makeNodeComponent("cardMemberImage"),
    memberUploadLogoButtonGroup: makeNodeComponent(
      "memberUploadLogoButtonGroup"
    ),
    userAvatarButton: makeNodeComponent("userAvatarButton"),
    memberEditlogoGroup: makeNodeComponent("memberEditlogoGroup"),
    cardMemberUsername: makeNodeComponent("cardMemberUsername"),
    cardMemberUrl: makeNodeComponent("cardMemberUrl"),
    cardMemberTagline: makeNodeComponent("cardMemberTagline"),
    inputTextField: makeNodeComponent("inputTextField"),
    cardMemberDescription: makeNodeComponent("cardMemberDescription"),
    inputTextAreaPrimary: makeNodeComponent("inputTextAreaPrimary"),
    cardVideoIntroUrl: makeNodeComponent("cardVideoIntroUrl"),
    memberSubmitProfile: makeNodeComponent("memberSubmitProfile"),
    sectionMemberEditProfileDetails: makeNodeComponent(
      "sectionMemberEditProfileDetails"
    ),
    formMemberEditDetails: makeNodeComponent("formMemberEditDetails"),
    cardMemberLocation: makeNodeComponent("cardMemberLocation"),
    memberLocationGroup: makeNodeComponent("memberLocationGroup"),
    cardMemberIndustry: makeNodeComponent("cardMemberIndustry"),
    memberIndustryGroup: makeNodeComponent("memberIndustryGroup"),
    cardMemberLanguages: makeNodeComponent("cardMemberLanguages"),
    inputGroupMemberLanguages: makeNodeComponent("inputGroupMemberLanguages"),
    cardMemberInterests: makeNodeComponent("cardMemberInterests"),
    cardMemberSkills: makeNodeComponent("cardMemberSkills"),
    cardMemberCommunity: makeNodeComponent("cardMemberCommunity"),
    memberSubmitDetails: makeNodeComponent("memberSubmitDetails"),
    sectionMemberEditProfileSocial: makeNodeComponent(
      "sectionMemberEditProfileSocial"
    ),
    formMemberEditSocial: makeNodeComponent("formMemberEditSocial"),
    cardMemberWebsite: makeNodeComponent("cardMemberWebsite"),
    cardMemberSocial: makeNodeComponent("cardMemberSocial"),
    inputGroupMemberSocial: makeNodeComponent("inputGroupMemberSocial"),
    memberSubmitSocials: makeNodeComponent("memberSubmitSocials"),
    footerB: makeNodeComponent("footerB"),

    // Metadata about props expected for PlasmicEditmember
    internalVariantProps: PlasmicEditmember__VariantProps,
    internalArgProps: PlasmicEditmember__ArgProps
  }
);

export default PlasmicEditmember;
/* prettier-ignore-end */
