// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: ZMIdBGmrvix6xJy
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TablePricingTierDisplay from "../../TablePricingTierDisplay"; // plasmic-import: uIOrSNKsO-h8g74/component
import TablePricingPriceDisplay from "../../TablePricingPriceDisplay"; // plasmic-import: QYkl57rOnjSIZTZ/component
import PricingPageElementTeamBlock from "../../PricingPageElementTeamBlock"; // plasmic-import: z1m_lEVVJqYOi96/component
import PricingPageElementFeaturesBlock from "../../PricingPageElementFeaturesBlock"; // plasmic-import: wYTr68reWOduQcu/component
import PricingPageElementServiceBlock from "../../PricingPageElementServiceBlock"; // plasmic-import: adlTRbUv8NU1Fen/component
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: gpNjXfbD_ZdpPU/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicTablePricing.module.css"; // plasmic-import: ZMIdBGmrvix6xJy/css

import TeamPartnersIcon from "./icons/PlasmicIcon__TeamPartners"; // plasmic-import: Hf6TOd80Ag78cQq/icon
import Icon164Icon from "./icons/PlasmicIcon__Icon164"; // plasmic-import: w7nSyC5BjylkNp1/icon
import Icon122Icon from "./icons/PlasmicIcon__Icon122"; // plasmic-import: GEUiKMgMQ7RXOJ2/icon
import ListingIcon from "./icons/PlasmicIcon__Listing"; // plasmic-import: V-Z6DuZPre8UBS6/icon
import Icon169Icon from "./icons/PlasmicIcon__Icon169"; // plasmic-import: hzDc3CsFLBB3eRG/icon
import PlusBoldIcon from "./icons/PlasmicIcon__PlusBold"; // plasmic-import: lhSEEajPJGZatfD/icon

export type PlasmicTablePricing__VariantMembers = {
  _switch: "_switch";
};

export type PlasmicTablePricing__VariantsArgs = {
  _switch?: SingleBooleanChoiceArg<"_switch">;
};

type VariantPropType = keyof PlasmicTablePricing__VariantsArgs;
export const PlasmicTablePricing__VariantProps = new Array<VariantPropType>(
  "_switch"
);

export type PlasmicTablePricing__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  slot4?: React.ReactNode;
  slot5?: React.ReactNode;
  slot6?: React.ReactNode;
  slot7?: React.ReactNode;
  slot8?: React.ReactNode;
  slot9?: React.ReactNode;
  slot10?: React.ReactNode;
  slot11?: React.ReactNode;
  slot12?: React.ReactNode;
  slot13?: React.ReactNode;
  slot14?: React.ReactNode;
  slot15?: React.ReactNode;
  slot16?: React.ReactNode;
  slot17?: React.ReactNode;
  slot18?: React.ReactNode;
  slot19?: React.ReactNode;
  slot20?: React.ReactNode;
  slot21?: React.ReactNode;
  slot22?: React.ReactNode;
  slot23?: React.ReactNode;
  slot24?: React.ReactNode;
  slot25?: React.ReactNode;
  slot26?: React.ReactNode;
  slot27?: React.ReactNode;
  slot28?: React.ReactNode;
};

type ArgPropType = keyof PlasmicTablePricing__ArgsType;
export const PlasmicTablePricing__ArgProps = new Array<ArgPropType>(
  "children",
  "slot",
  "slot2",
  "slot3",
  "slot4",
  "slot5",
  "slot6",
  "slot7",
  "slot8",
  "slot9",
  "slot10",
  "slot11",
  "slot12",
  "slot13",
  "slot14",
  "slot15",
  "slot16",
  "slot17",
  "slot18",
  "slot19",
  "slot20",
  "slot21",
  "slot22",
  "slot23",
  "slot24",
  "slot25",
  "slot26",
  "slot27",
  "slot28"
);

export type PlasmicTablePricing__OverridesType = {
  root?: p.Flex<"div">;
  tablePricingTierDisplay?: p.Flex<typeof TablePricingTierDisplay>;
  freeBox?: p.Flex<"div">;
  pricingTableDropDownDrawerParent?: p.Flex<"div">;
  tablePricingPriceDisplay?: p.Flex<typeof TablePricingPriceDisplay>;
  pricingTableDropDownChildItems?: p.Flex<"div">;
  pricingPageElementTeamBlock?: p.Flex<typeof PricingPageElementTeamBlock>;
  pricingPageElementFeaturesBlock?: p.Flex<
    typeof PricingPageElementFeaturesBlock
  >;
  pricingPageElementServiceBlock?: p.Flex<
    typeof PricingPageElementServiceBlock
  >;
  partnerMembership?: p.Flex<typeof ButtonPrimary>;
};

export interface DefaultTablePricingProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  slot4?: React.ReactNode;
  slot5?: React.ReactNode;
  slot6?: React.ReactNode;
  slot7?: React.ReactNode;
  slot8?: React.ReactNode;
  slot9?: React.ReactNode;
  slot10?: React.ReactNode;
  slot11?: React.ReactNode;
  slot12?: React.ReactNode;
  slot13?: React.ReactNode;
  slot14?: React.ReactNode;
  slot15?: React.ReactNode;
  slot16?: React.ReactNode;
  slot17?: React.ReactNode;
  slot18?: React.ReactNode;
  slot19?: React.ReactNode;
  slot20?: React.ReactNode;
  slot21?: React.ReactNode;
  slot22?: React.ReactNode;
  slot23?: React.ReactNode;
  slot24?: React.ReactNode;
  slot25?: React.ReactNode;
  slot26?: React.ReactNode;
  slot27?: React.ReactNode;
  slot28?: React.ReactNode;
  _switch?: SingleBooleanChoiceArg<"_switch">;
  className?: string;
}

function PlasmicTablePricing__RenderFunc(props: {
  variants: PlasmicTablePricing__VariantsArgs;
  args: PlasmicTablePricing__ArgsType;
  overrides: PlasmicTablePricing__OverridesType;
  dataFetches?: PlasmicTablePricing__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    true ? (
      <p.Stack
        as={"div"}
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        hasGap={true}
        className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
          [sty.root___switch]: hasVariant(variants, "_switch", "_switch")
        })}
      >
        <TablePricingTierDisplay
          data-plasmic-name={"tablePricingTierDisplay"}
          data-plasmic-override={overrides.tablePricingTierDisplay}
          className={classNames("__wab_instance", sty.tablePricingTierDisplay)}
          slot={
            <div
              data-plasmic-name={"freeBox"}
              data-plasmic-override={overrides.freeBox}
              className={classNames(defaultcss.all, sty.freeBox)}
            >
              {p.renderPlasmicSlot({
                defaultContents:
                  "Choose if you are an independent creative professional, solopreneur, or founder getting ready to grow your startup.",
                value: args.slot,
                className: classNames(sty.slotSlot)
              })}
            </div>
          }
          slot2={p.renderPlasmicSlot({
            defaultContents: "Partner",
            value: args.slot21
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Pro",
            value: args.children
          })}
        </TablePricingTierDisplay>

        {true ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"pricingTableDropDownDrawerParent"}
            data-plasmic-override={overrides.pricingTableDropDownDrawerParent}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              sty.pricingTableDropDownDrawerParent,
              {
                [sty.pricingTableDropDownDrawerParent___switch]: hasVariant(
                  variants,
                  "_switch",
                  "_switch"
                )
              }
            )}
          >
            <TablePricingPriceDisplay
              data-plasmic-name={"tablePricingPriceDisplay"}
              data-plasmic-override={overrides.tablePricingPriceDisplay}
              className={classNames(
                "__wab_instance",
                sty.tablePricingPriceDisplay
              )}
              slot={p.renderPlasmicSlot({
                defaultContents: (
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__vUsDo
                    )}
                  >
                    {
                      "Get all the tools you need to grow a global audience and build a valuable business."
                    }
                  </div>
                ),

                value: args.slot3
              })}
              slot2={p.renderPlasmicSlot({
                defaultContents: (
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__qjMbg
                    )}
                  >
                    {"$"}
                  </div>
                ),

                value: args.slot23
              })}
              slot3={p.renderPlasmicSlot({
                defaultContents: (
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__oyms
                    )}
                  >
                    {"50"}
                  </div>
                ),

                value: args.slot2
              })}
              slot4={p.renderPlasmicSlot({
                defaultContents: (
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__zDe6U
                    )}
                  >
                    {"/year"}
                  </div>
                ),

                value: args.slot22
              })}
            >
              {p.renderPlasmicSlot({
                defaultContents: "Membership",
                value: args.slot24
              })}
            </TablePricingPriceDisplay>

            <p.Stack
              as={"div"}
              data-plasmic-name={"pricingTableDropDownChildItems"}
              data-plasmic-override={overrides.pricingTableDropDownChildItems}
              hasGap={true}
              className={classNames(
                defaultcss.all,
                sty.pricingTableDropDownChildItems
              )}
            >
              <PricingPageElementTeamBlock
                data-plasmic-name={"pricingPageElementTeamBlock"}
                data-plasmic-override={overrides.pricingPageElementTeamBlock}
                className={classNames(
                  "__wab_instance",
                  sty.pricingPageElementTeamBlock
                )}
                slot={p.renderPlasmicSlot({
                  defaultContents: "5",
                  value: args.slot4
                })}
              >
                {p.renderPlasmicSlot({
                  defaultContents: "Team members included",
                  value: args.slot19
                })}
              </PricingPageElementTeamBlock>

              <PricingPageElementFeaturesBlock
                data-plasmic-name={"pricingPageElementFeaturesBlock"}
                data-plasmic-override={
                  overrides.pricingPageElementFeaturesBlock
                }
                className={classNames(
                  "__wab_instance",
                  sty.pricingPageElementFeaturesBlock
                )}
                slot={p.renderPlasmicSlot({
                  defaultContents: (
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox___7To56
                      )}
                    >
                      {"feature value proposition"}
                    </div>
                  ),

                  value: args.slot15
                })}
                slot2={p.renderPlasmicSlot({
                  defaultContents: "feature value proposition",
                  value: args.slot16
                })}
                slot3={p.renderPlasmicSlot({
                  defaultContents: "feature value proposition",
                  value: args.slot17
                })}
                slot4={p.renderPlasmicSlot({
                  defaultContents: "feature value proposition",
                  value: args.slot18
                })}
              >
                {p.renderPlasmicSlot({
                  defaultContents: (
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox__gXlr
                      )}
                    >
                      {"feature value proposition"}
                    </div>
                  ),

                  value: args.slot14
                })}
              </PricingPageElementFeaturesBlock>

              <PricingPageElementServiceBlock
                data-plasmic-name={"pricingPageElementServiceBlock"}
                data-plasmic-override={overrides.pricingPageElementServiceBlock}
                className={classNames(
                  "__wab_instance",
                  sty.pricingPageElementServiceBlock
                )}
                featurevalueText={p.renderPlasmicSlot({
                  defaultContents: "Priority upgrade per listing",
                  value: args.slot9
                })}
                slot={p.renderPlasmicSlot({
                  defaultContents: "3",
                  value: args.slot5
                })}
                slot10={p.renderPlasmicSlot({
                  defaultContents: "Standard rate per listing",
                  value: args.slot10
                })}
                slot11={p.renderPlasmicSlot({
                  defaultContents: "Payment processing fees",
                  value: args.slot13
                })}
                slot12={p.renderPlasmicSlot({
                  defaultContents: (
                    <Icon164Icon
                      className={classNames(defaultcss.all, sty.svg__ugiqi)}
                      role={"img"}
                    />
                  ),

                  value: args.slot28
                })}
                slot13={p.renderPlasmicSlot({
                  defaultContents: (
                    <Icon122Icon
                      className={classNames(defaultcss.all, sty.svg__vxezP)}
                      role={"img"}
                    />
                  ),

                  value: args.slot27
                })}
                slot14={p.renderPlasmicSlot({
                  defaultContents: (
                    <ListingIcon
                      className={classNames(defaultcss.all, sty.svg__pO5B)}
                      role={"img"}
                    />
                  ),

                  value: args.slot26
                })}
                slot15={p.renderPlasmicSlot({
                  defaultContents: (
                    <Icon169Icon
                      className={classNames(defaultcss.all, sty.svg__aKh46)}
                      role={"img"}
                    />
                  ),

                  value: args.slot25
                })}
                slot2={p.renderPlasmicSlot({
                  defaultContents: "1",
                  value: args.slot6
                })}
                slot3={p.renderPlasmicSlot({
                  defaultContents: "1",
                  value: args.slot7
                })}
                slot4={p.renderPlasmicSlot({
                  defaultContents: "Service rate on earned income",
                  value: args.slot12
                })}
                slot5={p.renderPlasmicSlot({
                  defaultContents: "$",
                  value: args.slot8
                })}
                slot7={p.renderPlasmicSlot({
                  defaultContents: "$",
                  value: args.slot11
                })}
              />
            </p.Stack>
          </p.Stack>
        ) : null}

        <ButtonPrimary
          data-plasmic-name={"partnerMembership"}
          data-plasmic-override={overrides.partnerMembership}
          className={classNames("__wab_instance", sty.partnerMembership)}
          color={"brand" as const}
          size={"_360" as const}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.freeBox__wCzt
                )}
              >
                {"Get started"}
              </div>
            ),

            value: args.slot20
          })}
        </ButtonPrimary>
      </p.Stack>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "tablePricingTierDisplay",
    "freeBox",
    "pricingTableDropDownDrawerParent",
    "tablePricingPriceDisplay",
    "pricingTableDropDownChildItems",
    "pricingPageElementTeamBlock",
    "pricingPageElementFeaturesBlock",
    "pricingPageElementServiceBlock",
    "partnerMembership"
  ],
  tablePricingTierDisplay: ["tablePricingTierDisplay", "freeBox"],
  freeBox: ["freeBox"],
  pricingTableDropDownDrawerParent: [
    "pricingTableDropDownDrawerParent",
    "tablePricingPriceDisplay",
    "pricingTableDropDownChildItems",
    "pricingPageElementTeamBlock",
    "pricingPageElementFeaturesBlock",
    "pricingPageElementServiceBlock"
  ],
  tablePricingPriceDisplay: ["tablePricingPriceDisplay"],
  pricingTableDropDownChildItems: [
    "pricingTableDropDownChildItems",
    "pricingPageElementTeamBlock",
    "pricingPageElementFeaturesBlock",
    "pricingPageElementServiceBlock"
  ],
  pricingPageElementTeamBlock: ["pricingPageElementTeamBlock"],
  pricingPageElementFeaturesBlock: ["pricingPageElementFeaturesBlock"],
  pricingPageElementServiceBlock: ["pricingPageElementServiceBlock"],
  partnerMembership: ["partnerMembership"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  tablePricingTierDisplay: typeof TablePricingTierDisplay;
  freeBox: "div";
  pricingTableDropDownDrawerParent: "div";
  tablePricingPriceDisplay: typeof TablePricingPriceDisplay;
  pricingTableDropDownChildItems: "div";
  pricingPageElementTeamBlock: typeof PricingPageElementTeamBlock;
  pricingPageElementFeaturesBlock: typeof PricingPageElementFeaturesBlock;
  pricingPageElementServiceBlock: typeof PricingPageElementServiceBlock;
  partnerMembership: typeof ButtonPrimary;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTablePricing__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTablePricing__VariantsArgs;
    args?: PlasmicTablePricing__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicTablePricing__Fetches;
  } & Omit<PlasmicTablePricing__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTablePricing__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTablePricing__ArgProps,
      internalVariantPropNames: PlasmicTablePricing__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicTablePricing__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTablePricing";
  } else {
    func.displayName = `PlasmicTablePricing.${nodeName}`;
  }
  return func;
}

export const PlasmicTablePricing = Object.assign(
  // Top-level PlasmicTablePricing renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    tablePricingTierDisplay: makeNodeComponent("tablePricingTierDisplay"),
    freeBox: makeNodeComponent("freeBox"),
    pricingTableDropDownDrawerParent: makeNodeComponent(
      "pricingTableDropDownDrawerParent"
    ),
    tablePricingPriceDisplay: makeNodeComponent("tablePricingPriceDisplay"),
    pricingTableDropDownChildItems: makeNodeComponent(
      "pricingTableDropDownChildItems"
    ),
    pricingPageElementTeamBlock: makeNodeComponent(
      "pricingPageElementTeamBlock"
    ),
    pricingPageElementFeaturesBlock: makeNodeComponent(
      "pricingPageElementFeaturesBlock"
    ),
    pricingPageElementServiceBlock: makeNodeComponent(
      "pricingPageElementServiceBlock"
    ),
    partnerMembership: makeNodeComponent("partnerMembership"),

    // Metadata about props expected for PlasmicTablePricing
    internalVariantProps: PlasmicTablePricing__VariantProps,
    internalArgProps: PlasmicTablePricing__ArgProps
  }
);

export default PlasmicTablePricing;
/* prettier-ignore-end */
