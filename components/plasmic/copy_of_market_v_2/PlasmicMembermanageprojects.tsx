// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: 95b7OFP1kEK9sY
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavbarInternal from "../../NavbarInternal"; // plasmic-import: nBfIHHqHvjUywN9/component
import NavbarMemberEdit from "../../NavbarMemberEdit"; // plasmic-import: MpfEfF3PxMa-4U/component
import CardHeaderTitleDisplay from "../../CardHeaderTitleDisplay"; // plasmic-import: fk5BRaqICb6MOmt/component
import CardHeaderTitlePrimary from "../../CardHeaderTitlePrimary"; // plasmic-import: qjG0g-Rmz0BeDH/component
import SearchbarPrimary from "../../SearchbarPrimary"; // plasmic-import: i9y9X99bmAqsmFE/component
import SelectDropdownPrimary from "../../SelectDropdownPrimary"; // plasmic-import: v8d0bbfFjkOeuiJ/component
import SelectDropdownPrimary__Option from "../../SelectDropdownPrimary__Option"; // plasmic-import: AqtjodigdxHDQVL/component
import TableProjectAdminHeader from "../../TableProjectAdminHeader"; // plasmic-import: p4P6aRucJwmJYM/component
import TableProjectAdminRecord from "../../TableProjectAdminRecord"; // plasmic-import: cWdeP_yEJ8ZrS3/component
import FooterB from "../../FooterB"; // plasmic-import: IZENTiSL4_zyK8/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: biX3aS42hiG0fF/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicMembermanageprojects.module.css"; // plasmic-import: 95b7OFP1kEK9sY/css

export type PlasmicMembermanageprojects__VariantMembers = {};

export type PlasmicMembermanageprojects__VariantsArgs = {};
type VariantPropType = keyof PlasmicMembermanageprojects__VariantsArgs;
export const PlasmicMembermanageprojects__VariantProps =
  new Array<VariantPropType>();

export type PlasmicMembermanageprojects__ArgsType = {};
type ArgPropType = keyof PlasmicMembermanageprojects__ArgsType;
export const PlasmicMembermanageprojects__ArgProps = new Array<ArgPropType>();

export type PlasmicMembermanageprojects__OverridesType = {
  root?: p.Flex<"div">;
  navbarInternal?: p.Flex<typeof NavbarInternal>;
  navbarMemberEdit?: p.Flex<typeof NavbarMemberEdit>;
  sectionMemberManageProjectsHeader?: p.Flex<"section">;
  cardHeaderTitleDisplay?: p.Flex<typeof CardHeaderTitleDisplay>;
  sectionMemberManageListings?: p.Flex<"section">;
  cardHeaderTitlePrimary?: p.Flex<typeof CardHeaderTitlePrimary>;
  listingManagementBlockParent?: p.Flex<"div">;
  listingTotalParent?: p.Flex<"div">;
  listingNumberParent?: p.Flex<"div">;
  listingNumber?: p.Flex<"div">;
  listingSearchFilterParent?: p.Flex<"div">;
  searchOrderFilterParent?: p.Flex<"div">;
  searchbarPrimary?: p.Flex<typeof SearchbarPrimary>;
  listingSearchFilterDropdownParent?: p.Flex<"div">;
  orderTableColumnMain?: p.Flex<"main">;
  tableProjectAdminHeader?: p.Flex<typeof TableProjectAdminHeader>;
  footerB?: p.Flex<typeof FooterB>;
};

export interface DefaultMembermanageprojectsProps {
  dataFetches: PlasmicMembermanageprojects__Fetches;
}

function PlasmicMembermanageprojects__RenderFunc(props: {
  variants: PlasmicMembermanageprojects__VariantsArgs;
  args: PlasmicMembermanageprojects__ArgsType;
  overrides: PlasmicMembermanageprojects__OverridesType;
  dataFetches?: PlasmicMembermanageprojects__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <React.Fragment>
      <Head>
        <title key="title">{""}</title>
        <meta key="og:title" property="og:title" content={""} />
        <meta
          key="description"
          name="description"
          property="og:description"
          content={""}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <NavbarInternal
            data-plasmic-name={"navbarInternal"}
            data-plasmic-override={overrides.navbarInternal}
            className={classNames("__wab_instance", sty.navbarInternal)}
          />

          <NavbarMemberEdit
            data-plasmic-name={"navbarMemberEdit"}
            data-plasmic-override={overrides.navbarMemberEdit}
            className={classNames("__wab_instance", sty.navbarMemberEdit)}
            navItems={[
              "notifications",
              "lists",
              "reviews",
              "wallet",
              "messages"
            ]}
            selected={"projects" as const}
          />

          <p.Stack
            as={"section"}
            data-plasmic-name={"sectionMemberManageProjectsHeader"}
            data-plasmic-override={overrides.sectionMemberManageProjectsHeader}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              sty.sectionMemberManageProjectsHeader
            )}
          >
            <CardHeaderTitleDisplay
              data-plasmic-name={"cardHeaderTitleDisplay"}
              data-plasmic-override={overrides.cardHeaderTitleDisplay}
              className={classNames(
                "__wab_instance",
                sty.cardHeaderTitleDisplay
              )}
              size={"_720" as const}
              slot={
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__dd2Zj
                  )}
                >
                  {"Manage your projects"}
                </div>
              }
              textDisplay={"Projects"}
              textSubhead={
                "Project overview with controls on how to contact your partner and provide instructions on how to complete your project"
              }
            />
          </p.Stack>

          <p.Stack
            as={"section"}
            data-plasmic-name={"sectionMemberManageListings"}
            data-plasmic-override={overrides.sectionMemberManageListings}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              sty.sectionMemberManageListings
            )}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.freeBox__xdWaa)}
            >
              <CardHeaderTitlePrimary
                data-plasmic-name={"cardHeaderTitlePrimary"}
                data-plasmic-override={overrides.cardHeaderTitlePrimary}
                className={classNames(
                  "__wab_instance",
                  sty.cardHeaderTitlePrimary
                )}
                slot={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__ukoul
                    )}
                  >
                    {"Manage your project collaboration"}
                  </div>
                }
              >
                {"Services"}
              </CardHeaderTitlePrimary>

              <p.Stack
                as={"div"}
                data-plasmic-name={"listingManagementBlockParent"}
                data-plasmic-override={overrides.listingManagementBlockParent}
                hasGap={true}
                className={classNames(
                  defaultcss.all,
                  sty.listingManagementBlockParent
                )}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"listingTotalParent"}
                  data-plasmic-override={overrides.listingTotalParent}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.listingTotalParent)}
                >
                  <div
                    data-plasmic-name={"listingNumberParent"}
                    data-plasmic-override={overrides.listingNumberParent}
                    className={classNames(
                      defaultcss.all,
                      sty.listingNumberParent
                    )}
                  >
                    <div
                      data-plasmic-name={"listingNumber"}
                      data-plasmic-override={overrides.listingNumber}
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.listingNumber
                      )}
                    >
                      {"3"}
                    </div>
                  </div>

                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__d8BQ8
                    )}
                  >
                    {"Projects"}
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.freeBox__esis)}
                >
                  <div
                    data-plasmic-name={"listingSearchFilterParent"}
                    data-plasmic-override={overrides.listingSearchFilterParent}
                    className={classNames(
                      defaultcss.all,
                      sty.listingSearchFilterParent
                    )}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"searchOrderFilterParent"}
                      data-plasmic-override={overrides.searchOrderFilterParent}
                      hasGap={true}
                      className={classNames(
                        defaultcss.all,
                        sty.searchOrderFilterParent
                      )}
                    >
                      <SearchbarPrimary
                        data-plasmic-name={"searchbarPrimary"}
                        data-plasmic-override={overrides.searchbarPrimary}
                        className={classNames(
                          "__wab_instance",
                          sty.searchbarPrimary
                        )}
                        width={"_540" as const}
                      />

                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"listingSearchFilterDropdownParent"}
                        data-plasmic-override={
                          overrides.listingSearchFilterDropdownParent
                        }
                        hasGap={true}
                        className={classNames(
                          defaultcss.all,
                          sty.listingSearchFilterDropdownParent
                        )}
                      >
                        <SelectDropdownPrimary
                          className={classNames(
                            "__wab_instance",
                            sty.selectDropdownPrimary__rA4Mr
                          )}
                          placeholder={"Status"}
                          width={"_180" as const}
                        />

                        <SelectDropdownPrimary
                          className={classNames(
                            "__wab_instance",
                            sty.selectDropdownPrimary__wo19L
                          )}
                          placeholder={"Approved"}
                          width={"_180" as const}
                        />
                      </p.Stack>
                    </p.Stack>
                  </div>

                  <p.Stack
                    as={"main"}
                    data-plasmic-name={"orderTableColumnMain"}
                    data-plasmic-override={overrides.orderTableColumnMain}
                    hasGap={true}
                    className={classNames(
                      defaultcss.all,
                      sty.orderTableColumnMain
                    )}
                  >
                    <TableProjectAdminHeader
                      data-plasmic-name={"tableProjectAdminHeader"}
                      data-plasmic-override={overrides.tableProjectAdminHeader}
                      className={classNames(
                        "__wab_instance",
                        sty.tableProjectAdminHeader
                      )}
                    />

                    <TableProjectAdminRecord
                      className={classNames(
                        "__wab_instance",
                        sty.tableProjectAdminRecord__dWmpF
                      )}
                    />

                    <TableProjectAdminRecord
                      className={classNames(
                        "__wab_instance",
                        sty.tableProjectAdminRecord__hJtzV
                      )}
                    />

                    <TableProjectAdminRecord
                      className={classNames(
                        "__wab_instance",
                        sty.tableProjectAdminRecord__s40L
                      )}
                    />
                  </p.Stack>
                </p.Stack>
              </p.Stack>
            </p.Stack>
          </p.Stack>

          <FooterB
            data-plasmic-name={"footerB"}
            data-plasmic-override={overrides.footerB}
            className={classNames("__wab_instance", sty.footerB)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbarInternal",
    "navbarMemberEdit",
    "sectionMemberManageProjectsHeader",
    "cardHeaderTitleDisplay",
    "sectionMemberManageListings",
    "cardHeaderTitlePrimary",
    "listingManagementBlockParent",
    "listingTotalParent",
    "listingNumberParent",
    "listingNumber",
    "listingSearchFilterParent",
    "searchOrderFilterParent",
    "searchbarPrimary",
    "listingSearchFilterDropdownParent",
    "orderTableColumnMain",
    "tableProjectAdminHeader",
    "footerB"
  ],
  navbarInternal: ["navbarInternal"],
  navbarMemberEdit: ["navbarMemberEdit"],
  sectionMemberManageProjectsHeader: [
    "sectionMemberManageProjectsHeader",
    "cardHeaderTitleDisplay"
  ],
  cardHeaderTitleDisplay: ["cardHeaderTitleDisplay"],
  sectionMemberManageListings: [
    "sectionMemberManageListings",
    "cardHeaderTitlePrimary",
    "listingManagementBlockParent",
    "listingTotalParent",
    "listingNumberParent",
    "listingNumber",
    "listingSearchFilterParent",
    "searchOrderFilterParent",
    "searchbarPrimary",
    "listingSearchFilterDropdownParent",
    "orderTableColumnMain",
    "tableProjectAdminHeader"
  ],
  cardHeaderTitlePrimary: ["cardHeaderTitlePrimary"],
  listingManagementBlockParent: [
    "listingManagementBlockParent",
    "listingTotalParent",
    "listingNumberParent",
    "listingNumber",
    "listingSearchFilterParent",
    "searchOrderFilterParent",
    "searchbarPrimary",
    "listingSearchFilterDropdownParent",
    "orderTableColumnMain",
    "tableProjectAdminHeader"
  ],
  listingTotalParent: [
    "listingTotalParent",
    "listingNumberParent",
    "listingNumber"
  ],
  listingNumberParent: ["listingNumberParent", "listingNumber"],
  listingNumber: ["listingNumber"],
  listingSearchFilterParent: [
    "listingSearchFilterParent",
    "searchOrderFilterParent",
    "searchbarPrimary",
    "listingSearchFilterDropdownParent"
  ],
  searchOrderFilterParent: [
    "searchOrderFilterParent",
    "searchbarPrimary",
    "listingSearchFilterDropdownParent"
  ],
  searchbarPrimary: ["searchbarPrimary"],
  listingSearchFilterDropdownParent: ["listingSearchFilterDropdownParent"],
  orderTableColumnMain: ["orderTableColumnMain", "tableProjectAdminHeader"],
  tableProjectAdminHeader: ["tableProjectAdminHeader"],
  footerB: ["footerB"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbarInternal: typeof NavbarInternal;
  navbarMemberEdit: typeof NavbarMemberEdit;
  sectionMemberManageProjectsHeader: "section";
  cardHeaderTitleDisplay: typeof CardHeaderTitleDisplay;
  sectionMemberManageListings: "section";
  cardHeaderTitlePrimary: typeof CardHeaderTitlePrimary;
  listingManagementBlockParent: "div";
  listingTotalParent: "div";
  listingNumberParent: "div";
  listingNumber: "div";
  listingSearchFilterParent: "div";
  searchOrderFilterParent: "div";
  searchbarPrimary: typeof SearchbarPrimary;
  listingSearchFilterDropdownParent: "div";
  orderTableColumnMain: "main";
  tableProjectAdminHeader: typeof TableProjectAdminHeader;
  footerB: typeof FooterB;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMembermanageprojects__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMembermanageprojects__VariantsArgs;
    args?: PlasmicMembermanageprojects__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicMembermanageprojects__Fetches;
  } & Omit<PlasmicMembermanageprojects__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMembermanageprojects__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicMembermanageprojects__ArgProps,
      internalVariantPropNames: PlasmicMembermanageprojects__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicMembermanageprojects__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMembermanageprojects";
  } else {
    func.displayName = `PlasmicMembermanageprojects.${nodeName}`;
  }
  return func;
}

export const PlasmicMembermanageprojects = Object.assign(
  // Top-level PlasmicMembermanageprojects renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbarInternal: makeNodeComponent("navbarInternal"),
    navbarMemberEdit: makeNodeComponent("navbarMemberEdit"),
    sectionMemberManageProjectsHeader: makeNodeComponent(
      "sectionMemberManageProjectsHeader"
    ),
    cardHeaderTitleDisplay: makeNodeComponent("cardHeaderTitleDisplay"),
    sectionMemberManageListings: makeNodeComponent(
      "sectionMemberManageListings"
    ),
    cardHeaderTitlePrimary: makeNodeComponent("cardHeaderTitlePrimary"),
    listingManagementBlockParent: makeNodeComponent(
      "listingManagementBlockParent"
    ),
    listingTotalParent: makeNodeComponent("listingTotalParent"),
    listingNumberParent: makeNodeComponent("listingNumberParent"),
    listingNumber: makeNodeComponent("listingNumber"),
    listingSearchFilterParent: makeNodeComponent("listingSearchFilterParent"),
    searchOrderFilterParent: makeNodeComponent("searchOrderFilterParent"),
    searchbarPrimary: makeNodeComponent("searchbarPrimary"),
    listingSearchFilterDropdownParent: makeNodeComponent(
      "listingSearchFilterDropdownParent"
    ),
    orderTableColumnMain: makeNodeComponent("orderTableColumnMain"),
    tableProjectAdminHeader: makeNodeComponent("tableProjectAdminHeader"),
    footerB: makeNodeComponent("footerB"),

    // Metadata about props expected for PlasmicMembermanageprojects
    internalVariantProps: PlasmicMembermanageprojects__VariantProps,
    internalArgProps: PlasmicMembermanageprojects__ArgProps
  }
);

export default PlasmicMembermanageprojects;
/* prettier-ignore-end */
