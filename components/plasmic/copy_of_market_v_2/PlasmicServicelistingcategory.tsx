// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: lJYtEDlCtmLUyi
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavbarServiceListing from "../../NavbarServiceListing"; // plasmic-import: CjIIrelyshy5Wa/component
import ProgressBar from "../../ProgressBar"; // plasmic-import: L1r4sBRgwURapY/component
import CardQuestionServiceListing from "../../CardQuestionServiceListing"; // plasmic-import: 6ULzHucCr0IVSB/component
import ButtonFormDropdownSelect from "../../ButtonFormDropdownSelect"; // plasmic-import: 3Qqc2KbBe45URw/component
import ToolTipServiceListing from "../../ToolTipServiceListing"; // plasmic-import: EWZKmdZCm54hbu/component
import SectionServiceFeatures from "../../SectionServiceFeatures"; // plasmic-import: Xa_CDJ1tlBfizT/component
import SectionServiceContent from "../../SectionServiceContent"; // plasmic-import: NG21lYfED6DcwS/component
import SearchBadge from "../../SearchBadge"; // plasmic-import: NX4Ld8qtgVFY99/component
import ChipBadgeDisplay from "../../ChipBadgeDisplay"; // plasmic-import: SSFk1BeJq0HW6X/component
import FooterServiceListing from "../../FooterServiceListing"; // plasmic-import: KdJma6zoTnjpLW/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicServicelistingcategory.module.css"; // plasmic-import: lJYtEDlCtmLUyi/css

import Icon96Icon from "./icons/PlasmicIcon__Icon96"; // plasmic-import: bC6DTgVYN3bioSf/icon
import Icon100Icon from "./icons/PlasmicIcon__Icon100"; // plasmic-import: AOrmKBCHzOZuEYY/icon
import PlusBoldIcon from "./icons/PlasmicIcon__PlusBold"; // plasmic-import: lhSEEajPJGZatfD/icon
import Icon170Icon from "./icons/PlasmicIcon__Icon170"; // plasmic-import: 8dZnFQrWLcwMPnF/icon
import Icon114Icon from "./icons/PlasmicIcon__Icon114"; // plasmic-import: VfXaOZlZvq_xDZf/icon

export type PlasmicServicelistingcategory__VariantMembers = {};

export type PlasmicServicelistingcategory__VariantsArgs = {};
type VariantPropType = keyof PlasmicServicelistingcategory__VariantsArgs;
export const PlasmicServicelistingcategory__VariantProps =
  new Array<VariantPropType>();

export type PlasmicServicelistingcategory__ArgsType = {};
type ArgPropType = keyof PlasmicServicelistingcategory__ArgsType;
export const PlasmicServicelistingcategory__ArgProps = new Array<ArgPropType>();

export type PlasmicServicelistingcategory__OverridesType = {
  root?: p.Flex<"form">;
  serviceListingNavbar?: p.Flex<"div">;
  navbarServiceListing?: p.Flex<typeof NavbarServiceListing>;
  progressBar?: p.Flex<typeof ProgressBar>;
  questionCategoryBlock?: p.Flex<"div">;
  questionFeaturesBlock?: p.Flex<"div">;
  sectionServiceFeatures?: p.Flex<typeof SectionServiceFeatures>;
  questionContentBlock?: p.Flex<"div">;
  sectionServiceContent?: p.Flex<typeof SectionServiceContent>;
  questionIndustryBlock?: p.Flex<"div">;
  questionToolsBlock?: p.Flex<"div">;
  footerServiceListing?: p.Flex<typeof FooterServiceListing>;
};

export interface DefaultServicelistingcategoryProps {
  dataFetches: PlasmicServicelistingcategory__Fetches;
}

function PlasmicServicelistingcategory__RenderFunc(props: {
  variants: PlasmicServicelistingcategory__VariantsArgs;
  args: PlasmicServicelistingcategory__ArgsType;
  overrides: PlasmicServicelistingcategory__OverridesType;
  dataFetches?: PlasmicServicelistingcategory__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <React.Fragment>
      <Head>
        <title key="title">{""}</title>
        <meta key="og:title" property="og:title" content={""} />
        <meta
          key="description"
          name="description"
          property="og:description"
          content={""}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <p.Stack
          as={"form"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"serviceListingNavbar"}
            data-plasmic-override={overrides.serviceListingNavbar}
            className={classNames(defaultcss.all, sty.serviceListingNavbar)}
          >
            <NavbarServiceListing
              data-plasmic-name={"navbarServiceListing"}
              data-plasmic-override={overrides.navbarServiceListing}
              className={classNames("__wab_instance", sty.navbarServiceListing)}
            >
              {"Category"}
            </NavbarServiceListing>

            <ProgressBar
              data-plasmic-name={"progressBar"}
              data-plasmic-override={overrides.progressBar}
              className={classNames("__wab_instance", sty.progressBar)}
              progress={"_20" as const}
            />
          </div>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.freeBox___26Zq9)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"questionCategoryBlock"}
              data-plasmic-override={overrides.questionCategoryBlock}
              hasGap={true}
              className={classNames(defaultcss.all, sty.questionCategoryBlock)}
            >
              <CardQuestionServiceListing
                className={classNames(
                  "__wab_instance",
                  sty.cardQuestionServiceListing__toaMj
                )}
                slot={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__x4Oxs
                    )}
                  >
                    {"Step 1"}
                  </div>
                }
                slot2={"Choose a category and select a service."}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__njMwu
                  )}
                >
                  {"What kind of service are you listing?"}
                </div>
              </CardQuestionServiceListing>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.freeBox__h9Cza)}
              >
                <ButtonFormDropdownSelect
                  dropdownTitle={"Select"}
                  headlineLabelTitle={"Select a service category"}
                  size={"_360X40" as const}
                />

                <ButtonFormDropdownSelect
                  className={classNames(
                    "__wab_instance",
                    sty.buttonFormDropdownSelect__uYgQt
                  )}
                  dropdownTitle={"Select"}
                  headlineLabelTitle={"Select a service"}
                  size={"_360X40" as const}
                />
              </p.Stack>
            </p.Stack>

            <ToolTipServiceListing
              className={classNames(
                "__wab_instance",
                sty.toolTipServiceListing__lMShJ
              )}
              slot={"Choosing listing categories"}
            >
              {
                "Selecting accurate categories helps Members know what to expect when it comes to format, features, outcomes, and level of service they'll receive when creating digital products with you, or your team."
              }
            </ToolTipServiceListing>
          </p.Stack>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.freeBox__tvEfE)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"questionFeaturesBlock"}
              data-plasmic-override={overrides.questionFeaturesBlock}
              hasGap={true}
              className={classNames(defaultcss.all, sty.questionFeaturesBlock)}
            >
              <CardQuestionServiceListing
                className={classNames(
                  "__wab_instance",
                  sty.cardQuestionServiceListing__xh1F7
                )}
                overline={"overline" as const}
                slot={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__haBk7
                    )}
                  >
                    {"Step 2"}
                  </div>
                }
                slot2={"Select all that apply"}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__a2Rgf
                  )}
                >
                  {"What features are included?"}
                </div>
              </CardQuestionServiceListing>

              <SectionServiceFeatures
                data-plasmic-name={"sectionServiceFeatures"}
                data-plasmic-override={overrides.sectionServiceFeatures}
                breadcrumbs={"breadcrumbs" as const}
                className={classNames(
                  "__wab_instance",
                  sty.sectionServiceFeatures
                )}
                uxDesign={"userResearch" as const}
              />
            </p.Stack>

            <ToolTipServiceListing
              className={classNames(
                "__wab_instance",
                sty.toolTipServiceListing__xyf37
              )}
              slot={"Selecting features"}
            />
          </p.Stack>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.freeBox__wMkP1)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"questionContentBlock"}
              data-plasmic-override={overrides.questionContentBlock}
              hasGap={true}
              className={classNames(defaultcss.all, sty.questionContentBlock)}
            >
              <CardQuestionServiceListing
                className={classNames(
                  "__wab_instance",
                  sty.cardQuestionServiceListing__l6Ywn
                )}
                overline={"overline" as const}
                slot={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__y8JPx
                    )}
                  >
                    {"Step 2"}
                  </div>
                }
                slot2={"Enter a number for all that apply to your service"}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__jQcUr
                  )}
                >
                  {"What content is included?"}
                </div>
              </CardQuestionServiceListing>

              <SectionServiceContent
                data-plasmic-name={"sectionServiceContent"}
                data-plasmic-override={overrides.sectionServiceContent}
                breadcrumbs={"breadcrumbs" as const}
                className={classNames(
                  "__wab_instance",
                  sty.sectionServiceContent
                )}
                serviceType={"webMultiplePage" as const}
              />
            </p.Stack>

            <ToolTipServiceListing
              className={classNames(
                "__wab_instance",
                sty.toolTipServiceListing__qdJMh
              )}
              slot={"Including content"}
            />
          </p.Stack>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.freeBox___5N46N)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"questionIndustryBlock"}
              data-plasmic-override={overrides.questionIndustryBlock}
              hasGap={true}
              className={classNames(defaultcss.all, sty.questionIndustryBlock)}
            >
              <CardQuestionServiceListing
                className={classNames(
                  "__wab_instance",
                  sty.cardQuestionServiceListing__tL6Lg
                )}
                overline={"overline" as const}
                slot={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__guTW
                    )}
                  >
                    {"Step 2"}
                  </div>
                }
                slot2={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__lLmEo
                    )}
                  >
                    {"Choose industry tags for better matching. Max 5 tags."}
                  </div>
                }
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__wKvQo
                  )}
                >
                  {"What is the industry community for your service?"}
                </div>
              </CardQuestionServiceListing>

              <SearchBadge
                className={classNames("__wab_instance", sty.searchBadge__iDz0O)}
              >
                <ChipBadgeDisplay
                  className={classNames(
                    "__wab_instance",
                    sty.chipBadgeDisplay__jazmf
                  )}
                  type={"ghost" as const}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__akbFo
                    )}
                  >
                    {"Badge"}
                  </div>
                </ChipBadgeDisplay>

                <ChipBadgeDisplay
                  className={classNames(
                    "__wab_instance",
                    sty.chipBadgeDisplay___1Cqhs
                  )}
                  type={"ghost" as const}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__t7K8E
                    )}
                  >
                    {"Badge"}
                  </div>
                </ChipBadgeDisplay>

                <ChipBadgeDisplay
                  className={classNames(
                    "__wab_instance",
                    sty.chipBadgeDisplay__tNcL
                  )}
                  type={"ghost" as const}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox___3Gi4C
                    )}
                  >
                    {"Badge"}
                  </div>
                </ChipBadgeDisplay>

                <ChipBadgeDisplay
                  className={classNames(
                    "__wab_instance",
                    sty.chipBadgeDisplay__bUdkY
                  )}
                  type={"ghost" as const}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__c9Fho
                    )}
                  >
                    {"Badge"}
                  </div>
                </ChipBadgeDisplay>

                <ChipBadgeDisplay
                  className={classNames(
                    "__wab_instance",
                    sty.chipBadgeDisplay__fnU33
                  )}
                  type={"ghost" as const}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__hzVft
                    )}
                  >
                    {"Badge"}
                  </div>
                </ChipBadgeDisplay>

                <ChipBadgeDisplay
                  className={classNames(
                    "__wab_instance",
                    sty.chipBadgeDisplay__vWnHq
                  )}
                  type={"ghost" as const}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__jlA3
                    )}
                  >
                    {"Badge"}
                  </div>
                </ChipBadgeDisplay>
              </SearchBadge>
            </p.Stack>

            <ToolTipServiceListing
              className={classNames(
                "__wab_instance",
                sty.toolTipServiceListing__b4VBf
              )}
              slot={"About industry categories"}
            />
          </p.Stack>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.freeBox__t4Axv)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"questionToolsBlock"}
              data-plasmic-override={overrides.questionToolsBlock}
              hasGap={true}
              className={classNames(defaultcss.all, sty.questionToolsBlock)}
            >
              <CardQuestionServiceListing
                className={classNames(
                  "__wab_instance",
                  sty.cardQuestionServiceListing__xejn0
                )}
                overline={"overline" as const}
                slot={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox___2FFzl
                    )}
                  >
                    {"Step 2"}
                  </div>
                }
                slot2={
                  "Choose tool tags to increase visibility in searches. Max 5 tags."
                }
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__oViZl
                  )}
                >
                  {"What tools, or technology do you use for your service?"}
                </div>
              </CardQuestionServiceListing>

              <SearchBadge
                className={classNames("__wab_instance", sty.searchBadge__zgr0)}
              >
                <ChipBadgeDisplay
                  className={classNames(
                    "__wab_instance",
                    sty.chipBadgeDisplay__aJKi
                  )}
                  type={"ghost" as const}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__dLvL
                    )}
                  >
                    {"Badge"}
                  </div>
                </ChipBadgeDisplay>

                <ChipBadgeDisplay
                  className={classNames(
                    "__wab_instance",
                    sty.chipBadgeDisplay___0GKyv
                  )}
                  type={"ghost" as const}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__zKhut
                    )}
                  >
                    {"Badge"}
                  </div>
                </ChipBadgeDisplay>

                <ChipBadgeDisplay
                  className={classNames(
                    "__wab_instance",
                    sty.chipBadgeDisplay__mUipt
                  )}
                  type={"ghost" as const}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__zDQpj
                    )}
                  >
                    {"Badge"}
                  </div>
                </ChipBadgeDisplay>

                <ChipBadgeDisplay
                  className={classNames(
                    "__wab_instance",
                    sty.chipBadgeDisplay__dLKeT
                  )}
                  type={"ghost" as const}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__nvqz
                    )}
                  >
                    {"Badge"}
                  </div>
                </ChipBadgeDisplay>

                <ChipBadgeDisplay
                  className={classNames(
                    "__wab_instance",
                    sty.chipBadgeDisplay__dJ15
                  )}
                  type={"ghost" as const}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__a12Cy
                    )}
                  >
                    {"Badge"}
                  </div>
                </ChipBadgeDisplay>

                <ChipBadgeDisplay
                  className={classNames(
                    "__wab_instance",
                    sty.chipBadgeDisplay__lfGcH
                  )}
                  type={"ghost" as const}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox___9KKhs
                    )}
                  >
                    {"Badge"}
                  </div>
                </ChipBadgeDisplay>
              </SearchBadge>
            </p.Stack>

            <ToolTipServiceListing
              className={classNames(
                "__wab_instance",
                sty.toolTipServiceListing__pycuP
              )}
              slot={"Tools and matching"}
            >
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.freeBox__xXmgw
                )}
              >
                {
                  "Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec qu"
                }
              </div>
            </ToolTipServiceListing>
          </p.Stack>

          <FooterServiceListing
            data-plasmic-name={"footerServiceListing"}
            data-plasmic-override={overrides.footerServiceListing}
            className={classNames("__wab_instance", sty.footerServiceListing)}
          />
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "serviceListingNavbar",
    "navbarServiceListing",
    "progressBar",
    "questionCategoryBlock",
    "questionFeaturesBlock",
    "sectionServiceFeatures",
    "questionContentBlock",
    "sectionServiceContent",
    "questionIndustryBlock",
    "questionToolsBlock",
    "footerServiceListing"
  ],
  serviceListingNavbar: [
    "serviceListingNavbar",
    "navbarServiceListing",
    "progressBar"
  ],
  navbarServiceListing: ["navbarServiceListing"],
  progressBar: ["progressBar"],
  questionCategoryBlock: ["questionCategoryBlock"],
  questionFeaturesBlock: ["questionFeaturesBlock", "sectionServiceFeatures"],
  sectionServiceFeatures: ["sectionServiceFeatures"],
  questionContentBlock: ["questionContentBlock", "sectionServiceContent"],
  sectionServiceContent: ["sectionServiceContent"],
  questionIndustryBlock: ["questionIndustryBlock"],
  questionToolsBlock: ["questionToolsBlock"],
  footerServiceListing: ["footerServiceListing"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "form";
  serviceListingNavbar: "div";
  navbarServiceListing: typeof NavbarServiceListing;
  progressBar: typeof ProgressBar;
  questionCategoryBlock: "div";
  questionFeaturesBlock: "div";
  sectionServiceFeatures: typeof SectionServiceFeatures;
  questionContentBlock: "div";
  sectionServiceContent: typeof SectionServiceContent;
  questionIndustryBlock: "div";
  questionToolsBlock: "div";
  footerServiceListing: typeof FooterServiceListing;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicServicelistingcategory__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicServicelistingcategory__VariantsArgs;
    args?: PlasmicServicelistingcategory__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicServicelistingcategory__Fetches;
  } & Omit<PlasmicServicelistingcategory__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicServicelistingcategory__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicServicelistingcategory__ArgProps,
      internalVariantPropNames: PlasmicServicelistingcategory__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicServicelistingcategory__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicServicelistingcategory";
  } else {
    func.displayName = `PlasmicServicelistingcategory.${nodeName}`;
  }
  return func;
}

export const PlasmicServicelistingcategory = Object.assign(
  // Top-level PlasmicServicelistingcategory renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    serviceListingNavbar: makeNodeComponent("serviceListingNavbar"),
    navbarServiceListing: makeNodeComponent("navbarServiceListing"),
    progressBar: makeNodeComponent("progressBar"),
    questionCategoryBlock: makeNodeComponent("questionCategoryBlock"),
    questionFeaturesBlock: makeNodeComponent("questionFeaturesBlock"),
    sectionServiceFeatures: makeNodeComponent("sectionServiceFeatures"),
    questionContentBlock: makeNodeComponent("questionContentBlock"),
    sectionServiceContent: makeNodeComponent("sectionServiceContent"),
    questionIndustryBlock: makeNodeComponent("questionIndustryBlock"),
    questionToolsBlock: makeNodeComponent("questionToolsBlock"),
    footerServiceListing: makeNodeComponent("footerServiceListing"),

    // Metadata about props expected for PlasmicServicelistingcategory
    internalVariantProps: PlasmicServicelistingcategory__VariantProps,
    internalArgProps: PlasmicServicelistingcategory__ArgProps
  }
);

export default PlasmicServicelistingcategory;
/* prettier-ignore-end */
