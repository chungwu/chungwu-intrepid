// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: av9HZ4_jQpoVJO
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicRadioCheckboxCard.module.css"; // plasmic-import: av9HZ4_jQpoVJO/css

import Icon103Icon from "./icons/PlasmicIcon__Icon103"; // plasmic-import: 19fSx1gDgA296ke/icon

export type PlasmicRadioCheckboxCard__VariantMembers = {
  state: "selected";
  size: "_90" | "_180" | "_270" | "_360";
};

export type PlasmicRadioCheckboxCard__VariantsArgs = {
  state?: SingleChoiceArg<"selected">;
  size?: SingleChoiceArg<"_90" | "_180" | "_270" | "_360">;
};

type VariantPropType = keyof PlasmicRadioCheckboxCard__VariantsArgs;
export const PlasmicRadioCheckboxCard__VariantProps =
  new Array<VariantPropType>("state", "size");

export type PlasmicRadioCheckboxCard__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicRadioCheckboxCard__ArgsType;
export const PlasmicRadioCheckboxCard__ArgProps = new Array<ArgPropType>(
  "children"
);

export type PlasmicRadioCheckboxCard__OverridesType = {
  root?: p.Flex<"button">;
};

export interface DefaultRadioCheckboxCardProps {
  children?: React.ReactNode;
  state?: SingleChoiceArg<"selected">;
  size?: SingleChoiceArg<"_90" | "_180" | "_270" | "_360">;
  className?: string;
}

function PlasmicRadioCheckboxCard__RenderFunc(props: {
  variants: PlasmicRadioCheckboxCard__VariantsArgs;
  args: PlasmicRadioCheckboxCard__ArgsType;
  overrides: PlasmicRadioCheckboxCard__OverridesType;
  dataFetches?: PlasmicRadioCheckboxCard__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"button"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        defaultcss.button,
        projectcss.root_reset,
        sty.root,
        {
          [sty.root__size__180]: hasVariant(variants, "size", "_180"),
          [sty.root__size__270]: hasVariant(variants, "size", "_270"),
          [sty.root__size__360]: hasVariant(variants, "size", "_360"),
          [sty.root__size__90]: hasVariant(variants, "size", "_90"),
          [sty.root__state_selected]: hasVariant(variants, "state", "selected")
        }
      )}
    >
      <div
        className={classNames(defaultcss.all, sty.freeBox__dzGrl, {
          [sty.freeBox__size__270__dzGrlBkywm]: hasVariant(
            variants,
            "size",
            "_270"
          ),
          [sty.freeBox__size__90__dzGrl6Hq8O]: hasVariant(
            variants,
            "size",
            "_90"
          ),
          [sty.freeBox__state_selected__dzGrlyWnXh]: hasVariant(
            variants,
            "state",
            "selected"
          )
        })}
      >
        {(hasVariant(variants, "state", "selected") ? true : false) ? (
          <Icon103Icon
            className={classNames(defaultcss.all, sty.svg__uvzD, {
              [sty.svg__state_selected__uvzDyWnXh]: hasVariant(
                variants,
                "state",
                "selected"
              )
            })}
            role={"img"}
          />
        ) : null}
        {false ? (
          <svg
            className={classNames(defaultcss.all, sty.svg__x45W, {
              [sty.svg__state_selected__x45WyWnXh]: hasVariant(
                variants,
                "state",
                "selected"
              )
            })}
            role={"img"}
          />
        ) : null}
      </div>

      <div
        className={classNames(defaultcss.all, sty.freeBox___7V84T, {
          [sty.freeBox__size__90___7V84T6Hq8O]: hasVariant(
            variants,
            "size",
            "_90"
          ),
          [sty.freeBox__state_selected___7V84TyWnXh]: hasVariant(
            variants,
            "state",
            "selected"
          )
        })}
      >
        <div
          className={classNames(defaultcss.all, sty.freeBox__cgNHj, {
            [sty.freeBox__size__90__cgNHj6Hq8O]: hasVariant(
              variants,
              "size",
              "_90"
            ),
            [sty.freeBox__state_selected__cgNHjyWnXh]: hasVariant(
              variants,
              "state",
              "selected"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Feature",
            value: args.children,
            className: classNames(sty.slotChildren, {
              [sty.slotChildren__size__180]: hasVariant(
                variants,
                "size",
                "_180"
              ),
              [sty.slotChildren__size__270]: hasVariant(
                variants,
                "size",
                "_270"
              ),
              [sty.slotChildren__size__360]: hasVariant(
                variants,
                "size",
                "_360"
              ),
              [sty.slotChildren__size__90]: hasVariant(variants, "size", "_90"),
              [sty.slotChildren__state_selected]: hasVariant(
                variants,
                "state",
                "selected"
              )
            })
          })}
        </div>
      </div>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "button";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRadioCheckboxCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRadioCheckboxCard__VariantsArgs;
    args?: PlasmicRadioCheckboxCard__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicRadioCheckboxCard__Fetches;
  } & Omit<PlasmicRadioCheckboxCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicRadioCheckboxCard__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicRadioCheckboxCard__ArgProps,
      internalVariantPropNames: PlasmicRadioCheckboxCard__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicRadioCheckboxCard__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRadioCheckboxCard";
  } else {
    func.displayName = `PlasmicRadioCheckboxCard.${nodeName}`;
  }
  return func;
}

export const PlasmicRadioCheckboxCard = Object.assign(
  // Top-level PlasmicRadioCheckboxCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicRadioCheckboxCard
    internalVariantProps: PlasmicRadioCheckboxCard__VariantProps,
    internalArgProps: PlasmicRadioCheckboxCard__ArgProps
  }
);

export default PlasmicRadioCheckboxCard;
/* prettier-ignore-end */
