// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: 1ZJCGR7JIrafEd
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicAccordion.module.css"; // plasmic-import: 1ZJCGR7JIrafEd/css

import PlusBoldIcon from "./icons/PlasmicIcon__PlusBold"; // plasmic-import: lhSEEajPJGZatfD/icon

export type PlasmicAccordion__VariantMembers = {
  size: "_360";
};

export type PlasmicAccordion__VariantsArgs = {
  size?: SingleChoiceArg<"_360">;
};

type VariantPropType = keyof PlasmicAccordion__VariantsArgs;
export const PlasmicAccordion__VariantProps = new Array<VariantPropType>(
  "size"
);

export type PlasmicAccordion__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicAccordion__ArgsType;
export const PlasmicAccordion__ArgProps = new Array<ArgPropType>("children");

export type PlasmicAccordion__OverridesType = {
  root?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
};

export interface DefaultAccordionProps {
  children?: React.ReactNode;
  size?: SingleChoiceArg<"_360">;
  className?: string;
}

function PlasmicAccordion__RenderFunc(props: {
  variants: PlasmicAccordion__VariantsArgs;
  args: PlasmicAccordion__ArgsType;
  overrides: PlasmicAccordion__OverridesType;
  dataFetches?: PlasmicAccordion__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__size__360]: hasVariant(variants, "size", "_360")
      })}
    >
      <div className={classNames(defaultcss.all, sty.freeBox___5GcXl)}>
        <div className={classNames(defaultcss.all, sty.freeBox___2HcZn)}>
          <div className={classNames(defaultcss.all, sty.freeBox__vhcA8)}>
            {p.renderPlasmicSlot({
              defaultContents: "Accordion",
              value: args.children,
              className: classNames(sty.slotChildren, {
                [sty.slotChildren__size__360]: hasVariant(
                  variants,
                  "size",
                  "_360"
                )
              })
            })}
          </div>
        </div>
      </div>

      <div className={classNames(defaultcss.all, sty.freeBox__ge19U)}>
        <div className={classNames(defaultcss.all, sty.freeBox__u0Zpx)}>
          <PlusBoldIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(defaultcss.all, sty.svg, {
              [sty.svg__size__360]: hasVariant(variants, "size", "_360")
            })}
            role={"img"}
          />
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "svg"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAccordion__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAccordion__VariantsArgs;
    args?: PlasmicAccordion__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicAccordion__Fetches;
  } & Omit<PlasmicAccordion__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAccordion__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicAccordion__ArgProps,
      internalVariantPropNames: PlasmicAccordion__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicAccordion__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAccordion";
  } else {
    func.displayName = `PlasmicAccordion.${nodeName}`;
  }
  return func;
}

export const PlasmicAccordion = Object.assign(
  // Top-level PlasmicAccordion renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicAccordion
    internalVariantProps: PlasmicAccordion__VariantProps,
    internalArgProps: PlasmicAccordion__ArgProps
  }
);

export default PlasmicAccordion;
/* prettier-ignore-end */
