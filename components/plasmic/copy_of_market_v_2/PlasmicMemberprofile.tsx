// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: aeO36eh-LO5CWL
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavbarInternal from "../../NavbarInternal"; // plasmic-import: nBfIHHqHvjUywN9/component
import SectionMemberProfileHero from "../../SectionMemberProfileHero"; // plasmic-import: nQdI5SjiY8ZpJJ/component
import NavbarMemberUserProfile from "../../NavbarMemberUserProfile"; // plasmic-import: yFwfZ0ardR5faM/component
import ElementProfileAbout from "../../ElementProfileAbout"; // plasmic-import: P4j9cTdPiH_JFv/component
import ElementProfileMemberDetails from "../../ElementProfileMemberDetails"; // plasmic-import: rUrFJXC9mviW3M/component
import ElementProfileTeamMembership from "../../ElementProfileTeamMembership"; // plasmic-import: KUQiSRtNSmfvTt/component
import ElementMemberProfileConnections from "../../ElementMemberProfileConnections"; // plasmic-import: 5-AqvXiyOk61eS/component
import ElementProfileAttributes from "../../ElementProfileAttributes"; // plasmic-import: ErmvbbexDfIb5I/component
import ElementProfileSocial from "../../ElementProfileSocial"; // plasmic-import: 1AwkgOCapttpWZ/component
import ElementMemberProfileCarousell from "../../ElementMemberProfileCarousell"; // plasmic-import: 1Z-t_MHRbSqXDq/component
import FooterB from "../../FooterB"; // plasmic-import: IZENTiSL4_zyK8/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: biX3aS42hiG0fF/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicMemberprofile.module.css"; // plasmic-import: aeO36eh-LO5CWL/css

export type PlasmicMemberprofile__VariantMembers = {};

export type PlasmicMemberprofile__VariantsArgs = {};
type VariantPropType = keyof PlasmicMemberprofile__VariantsArgs;
export const PlasmicMemberprofile__VariantProps = new Array<VariantPropType>();

export type PlasmicMemberprofile__ArgsType = {};
type ArgPropType = keyof PlasmicMemberprofile__ArgsType;
export const PlasmicMemberprofile__ArgProps = new Array<ArgPropType>();

export type PlasmicMemberprofile__OverridesType = {
  root?: p.Flex<"div">;
  navbarInternal?: p.Flex<typeof NavbarInternal>;
  sectionMemberProfileHero?: p.Flex<typeof SectionMemberProfileHero>;
  navbarMemberUserProfile?: p.Flex<typeof NavbarMemberUserProfile>;
  sectionAboutDetails?: p.Flex<"div">;
  elementProfileAbout?: p.Flex<typeof ElementProfileAbout>;
  elementProfileMemberDetails?: p.Flex<typeof ElementProfileMemberDetails>;
  memberTeamConnectionsSection?: p.Flex<"div">;
  elementProfileTeamMembership?: p.Flex<typeof ElementProfileTeamMembership>;
  elementMemberProfileConnections?: p.Flex<
    typeof ElementMemberProfileConnections
  >;
  sectionMemberProfileIndustrySocial?: p.Flex<"div">;
  elementProfileAttributes?: p.Flex<typeof ElementProfileAttributes>;
  elementProfileSocial?: p.Flex<typeof ElementProfileSocial>;
  sectionProfileMemberSimilarMembers?: p.Flex<"div">;
  sectionProfileMemberPeopleAlsoViewed?: p.Flex<"div">;
  footerB?: p.Flex<typeof FooterB>;
};

export interface DefaultMemberprofileProps {
  dataFetches: PlasmicMemberprofile__Fetches;
}

function PlasmicMemberprofile__RenderFunc(props: {
  variants: PlasmicMemberprofile__VariantsArgs;
  args: PlasmicMemberprofile__ArgsType;
  overrides: PlasmicMemberprofile__OverridesType;
  dataFetches?: PlasmicMemberprofile__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <React.Fragment>
      <Head>
        <title key="title">{""}</title>
        <meta key="og:title" property="og:title" content={""} />
        <meta
          key="description"
          name="description"
          property="og:description"
          content={""}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          {(
            hasVariant(globalVariants, "screen", "mobile")
              ? true
              : hasVariant(globalVariants, "screen", "desktop")
              ? true
              : true
          ) ? (
            <NavbarInternal
              data-plasmic-name={"navbarInternal"}
              data-plasmic-override={overrides.navbarInternal}
              className={classNames("__wab_instance", sty.navbarInternal)}
              user={
                hasVariant(globalVariants, "screen", "mobile")
                  ? ("member" as const)
                  : undefined
              }
            />
          ) : null}
          {(
            hasVariant(globalVariants, "screen", "mobile")
              ? true
              : hasVariant(globalVariants, "screen", "desktop")
              ? true
              : true
          ) ? (
            <SectionMemberProfileHero
              data-plasmic-name={"sectionMemberProfileHero"}
              data-plasmic-override={overrides.sectionMemberProfileHero}
              className={classNames(
                "__wab_instance",
                sty.sectionMemberProfileHero
              )}
            />
          ) : null}
          {(
            hasVariant(globalVariants, "screen", "mobile")
              ? true
              : hasVariant(globalVariants, "screen", "desktop")
              ? true
              : true
          ) ? (
            <NavbarMemberUserProfile
              data-plasmic-name={"navbarMemberUserProfile"}
              data-plasmic-override={overrides.navbarMemberUserProfile}
              className={classNames(
                "__wab_instance",
                sty.navbarMemberUserProfile
              )}
            />
          ) : null}
          {(hasVariant(globalVariants, "screen", "desktop") ? true : true) ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"sectionAboutDetails"}
              data-plasmic-override={overrides.sectionAboutDetails}
              hasGap={true}
              className={classNames(defaultcss.all, sty.sectionAboutDetails)}
            >
              {(
                hasVariant(globalVariants, "screen", "mobile")
                  ? true
                  : hasVariant(globalVariants, "screen", "desktop")
                  ? true
                  : false
              ) ? (
                <ElementProfileAbout
                  data-plasmic-name={"elementProfileAbout"}
                  data-plasmic-override={overrides.elementProfileAbout}
                  className={classNames(
                    "__wab_instance",
                    sty.elementProfileAbout
                  )}
                />
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "mobile")
                  ? true
                  : hasVariant(globalVariants, "screen", "desktop")
                  ? true
                  : false
              ) ? (
                <ElementProfileMemberDetails
                  data-plasmic-name={"elementProfileMemberDetails"}
                  data-plasmic-override={overrides.elementProfileMemberDetails}
                  className={classNames(
                    "__wab_instance",
                    sty.elementProfileMemberDetails
                  )}
                />
              ) : null}
            </p.Stack>
          ) : null}

          <p.Stack
            as={"div"}
            data-plasmic-name={"memberTeamConnectionsSection"}
            data-plasmic-override={overrides.memberTeamConnectionsSection}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              sty.memberTeamConnectionsSection
            )}
          >
            <ElementProfileTeamMembership
              data-plasmic-name={"elementProfileTeamMembership"}
              data-plasmic-override={overrides.elementProfileTeamMembership}
              className={classNames(
                "__wab_instance",
                sty.elementProfileTeamMembership
              )}
            />

            <ElementMemberProfileConnections
              data-plasmic-name={"elementMemberProfileConnections"}
              data-plasmic-override={overrides.elementMemberProfileConnections}
              className={classNames(
                "__wab_instance",
                sty.elementMemberProfileConnections
              )}
            />
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"sectionMemberProfileIndustrySocial"}
            data-plasmic-override={overrides.sectionMemberProfileIndustrySocial}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              sty.sectionMemberProfileIndustrySocial
            )}
          >
            {(
              hasVariant(globalVariants, "screen", "mobile")
                ? true
                : hasVariant(globalVariants, "screen", "desktop")
                ? true
                : false
            ) ? (
              <ElementProfileAttributes
                data-plasmic-name={"elementProfileAttributes"}
                data-plasmic-override={overrides.elementProfileAttributes}
                className={classNames(
                  "__wab_instance",
                  sty.elementProfileAttributes
                )}
              />
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "mobile")
                ? true
                : hasVariant(globalVariants, "screen", "desktop")
                ? true
                : false
            ) ? (
              <ElementProfileSocial
                data-plasmic-name={"elementProfileSocial"}
                data-plasmic-override={overrides.elementProfileSocial}
                className={classNames(
                  "__wab_instance",
                  sty.elementProfileSocial
                )}
              />
            ) : null}
          </p.Stack>

          {(
            hasVariant(globalVariants, "screen", "mobile")
              ? true
              : hasVariant(globalVariants, "screen", "desktop")
              ? true
              : false
          ) ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"sectionProfileMemberSimilarMembers"}
              data-plasmic-override={
                overrides.sectionProfileMemberSimilarMembers
              }
              hasGap={true}
              className={classNames(
                defaultcss.all,
                sty.sectionProfileMemberSimilarMembers
              )}
            >
              {(
                hasVariant(globalVariants, "screen", "mobile")
                  ? true
                  : hasVariant(globalVariants, "screen", "desktop")
                  ? true
                  : false
              ) ? (
                <ElementMemberProfileCarousell
                  className={classNames(
                    "__wab_instance",
                    sty.elementMemberProfileCarousell__xsXCu
                  )}
                  headlineLabel={
                    hasVariant(globalVariants, "screen", "mobile")
                      ? "Similar members"
                      : hasVariant(globalVariants, "screen", "desktop")
                      ? "Similar members"
                      : "Headline label"
                  }
                />
              ) : null}
            </p.Stack>
          ) : null}
          {(
            hasVariant(globalVariants, "screen", "mobile")
              ? true
              : hasVariant(globalVariants, "screen", "desktop")
              ? true
              : false
          ) ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"sectionProfileMemberPeopleAlsoViewed"}
              data-plasmic-override={
                overrides.sectionProfileMemberPeopleAlsoViewed
              }
              hasGap={true}
              className={classNames(
                defaultcss.all,
                sty.sectionProfileMemberPeopleAlsoViewed
              )}
            >
              {(
                hasVariant(globalVariants, "screen", "mobile")
                  ? true
                  : hasVariant(globalVariants, "screen", "desktop")
                  ? true
                  : false
              ) ? (
                <ElementMemberProfileCarousell
                  className={classNames(
                    "__wab_instance",
                    sty.elementMemberProfileCarousell__aT6Fu
                  )}
                  headlineLabel={
                    hasVariant(globalVariants, "screen", "mobile")
                      ? "People also viewed"
                      : hasVariant(globalVariants, "screen", "desktop")
                      ? "People also viewed"
                      : "Headline label"
                  }
                />
              ) : null}
            </p.Stack>
          ) : null}
          {(
            hasVariant(globalVariants, "screen", "mobile")
              ? true
              : hasVariant(globalVariants, "screen", "desktop")
              ? true
              : true
          ) ? (
            <FooterB
              data-plasmic-name={"footerB"}
              data-plasmic-override={overrides.footerB}
              className={classNames("__wab_instance", sty.footerB)}
            />
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbarInternal",
    "sectionMemberProfileHero",
    "navbarMemberUserProfile",
    "sectionAboutDetails",
    "elementProfileAbout",
    "elementProfileMemberDetails",
    "memberTeamConnectionsSection",
    "elementProfileTeamMembership",
    "elementMemberProfileConnections",
    "sectionMemberProfileIndustrySocial",
    "elementProfileAttributes",
    "elementProfileSocial",
    "sectionProfileMemberSimilarMembers",
    "sectionProfileMemberPeopleAlsoViewed",
    "footerB"
  ],
  navbarInternal: ["navbarInternal"],
  sectionMemberProfileHero: ["sectionMemberProfileHero"],
  navbarMemberUserProfile: ["navbarMemberUserProfile"],
  sectionAboutDetails: [
    "sectionAboutDetails",
    "elementProfileAbout",
    "elementProfileMemberDetails"
  ],
  elementProfileAbout: ["elementProfileAbout"],
  elementProfileMemberDetails: ["elementProfileMemberDetails"],
  memberTeamConnectionsSection: [
    "memberTeamConnectionsSection",
    "elementProfileTeamMembership",
    "elementMemberProfileConnections"
  ],
  elementProfileTeamMembership: ["elementProfileTeamMembership"],
  elementMemberProfileConnections: ["elementMemberProfileConnections"],
  sectionMemberProfileIndustrySocial: [
    "sectionMemberProfileIndustrySocial",
    "elementProfileAttributes",
    "elementProfileSocial"
  ],
  elementProfileAttributes: ["elementProfileAttributes"],
  elementProfileSocial: ["elementProfileSocial"],
  sectionProfileMemberSimilarMembers: ["sectionProfileMemberSimilarMembers"],
  sectionProfileMemberPeopleAlsoViewed: [
    "sectionProfileMemberPeopleAlsoViewed"
  ],
  footerB: ["footerB"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbarInternal: typeof NavbarInternal;
  sectionMemberProfileHero: typeof SectionMemberProfileHero;
  navbarMemberUserProfile: typeof NavbarMemberUserProfile;
  sectionAboutDetails: "div";
  elementProfileAbout: typeof ElementProfileAbout;
  elementProfileMemberDetails: typeof ElementProfileMemberDetails;
  memberTeamConnectionsSection: "div";
  elementProfileTeamMembership: typeof ElementProfileTeamMembership;
  elementMemberProfileConnections: typeof ElementMemberProfileConnections;
  sectionMemberProfileIndustrySocial: "div";
  elementProfileAttributes: typeof ElementProfileAttributes;
  elementProfileSocial: typeof ElementProfileSocial;
  sectionProfileMemberSimilarMembers: "div";
  sectionProfileMemberPeopleAlsoViewed: "div";
  footerB: typeof FooterB;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMemberprofile__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMemberprofile__VariantsArgs;
    args?: PlasmicMemberprofile__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicMemberprofile__Fetches;
  } & Omit<PlasmicMemberprofile__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMemberprofile__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicMemberprofile__ArgProps,
      internalVariantPropNames: PlasmicMemberprofile__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicMemberprofile__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMemberprofile";
  } else {
    func.displayName = `PlasmicMemberprofile.${nodeName}`;
  }
  return func;
}

export const PlasmicMemberprofile = Object.assign(
  // Top-level PlasmicMemberprofile renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbarInternal: makeNodeComponent("navbarInternal"),
    sectionMemberProfileHero: makeNodeComponent("sectionMemberProfileHero"),
    navbarMemberUserProfile: makeNodeComponent("navbarMemberUserProfile"),
    sectionAboutDetails: makeNodeComponent("sectionAboutDetails"),
    elementProfileAbout: makeNodeComponent("elementProfileAbout"),
    elementProfileMemberDetails: makeNodeComponent(
      "elementProfileMemberDetails"
    ),
    memberTeamConnectionsSection: makeNodeComponent(
      "memberTeamConnectionsSection"
    ),
    elementProfileTeamMembership: makeNodeComponent(
      "elementProfileTeamMembership"
    ),
    elementMemberProfileConnections: makeNodeComponent(
      "elementMemberProfileConnections"
    ),
    sectionMemberProfileIndustrySocial: makeNodeComponent(
      "sectionMemberProfileIndustrySocial"
    ),
    elementProfileAttributes: makeNodeComponent("elementProfileAttributes"),
    elementProfileSocial: makeNodeComponent("elementProfileSocial"),
    sectionProfileMemberSimilarMembers: makeNodeComponent(
      "sectionProfileMemberSimilarMembers"
    ),
    sectionProfileMemberPeopleAlsoViewed: makeNodeComponent(
      "sectionProfileMemberPeopleAlsoViewed"
    ),
    footerB: makeNodeComponent("footerB"),

    // Metadata about props expected for PlasmicMemberprofile
    internalVariantProps: PlasmicMemberprofile__VariantProps,
    internalArgProps: PlasmicMemberprofile__ArgProps
  }
);

export default PlasmicMemberprofile;
/* prettier-ignore-end */
