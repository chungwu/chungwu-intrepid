// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: Q8nDsfZ3HCsIxL
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: gpNjXfbD_ZdpPU/component
import ChipBadgeDisplay from "../../ChipBadgeDisplay"; // plasmic-import: SSFk1BeJq0HW6X/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicInputFormCardEmailSearchBadge.module.css"; // plasmic-import: Q8nDsfZ3HCsIxL/css

import Icon52Icon from "./icons/PlasmicIcon__Icon52"; // plasmic-import: AGciCeUjQGqKosz/icon
import Icon107Icon from "./icons/PlasmicIcon__Icon107"; // plasmic-import: Bluvx2OeXhCzQlw/icon
import PlusBoldIcon from "./icons/PlasmicIcon__PlusBold"; // plasmic-import: lhSEEajPJGZatfD/icon
import Icon170Icon from "./icons/PlasmicIcon__Icon170"; // plasmic-import: 8dZnFQrWLcwMPnF/icon
import Icon114Icon from "./icons/PlasmicIcon__Icon114"; // plasmic-import: VfXaOZlZvq_xDZf/icon

export type PlasmicInputFormCardEmailSearchBadge__VariantMembers = {
  subDescription: "subDescription";
  button: "button";
  border: "border";
  search: "search";
};

export type PlasmicInputFormCardEmailSearchBadge__VariantsArgs = {
  subDescription?: SingleBooleanChoiceArg<"subDescription">;
  button?: SingleBooleanChoiceArg<"button">;
  border?: SingleBooleanChoiceArg<"border">;
  search?: SingleBooleanChoiceArg<"search">;
};

type VariantPropType = keyof PlasmicInputFormCardEmailSearchBadge__VariantsArgs;
export const PlasmicInputFormCardEmailSearchBadge__VariantProps =
  new Array<VariantPropType>("subDescription", "button", "border", "search");

export type PlasmicInputFormCardEmailSearchBadge__ArgsType = {
  email?: React.ReactNode;
  description?: React.ReactNode;
  subHead?: React.ReactNode;
  headline?: React.ReactNode;
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicInputFormCardEmailSearchBadge__ArgsType;
export const PlasmicInputFormCardEmailSearchBadge__ArgProps =
  new Array<ArgPropType>(
    "email",
    "description",
    "subHead",
    "headline",
    "children"
  );

export type PlasmicInputFormCardEmailSearchBadge__OverridesType = {
  root?: p.Flex<"div">;
  parent?: p.Flex<"div">;
  mainCard?: p.Flex<"div">;
  headlineSubheadParent?: p.Flex<"div">;
  headlineTextParent?: p.Flex<"div">;
  textInputParent?: p.Flex<"div">;
  searchTriggerParent?: p.Flex<"div">;
  textbox?: p.Flex<"input">;
  svg?: p.Flex<"svg">;
  badgeDisplay?: p.Flex<"div">;
  descriptionCard?: p.Flex<"div">;
  subDescription?: p.Flex<"div">;
};

export interface DefaultInputFormCardEmailSearchBadgeProps {
  email?: React.ReactNode;
  description?: React.ReactNode;
  subHead?: React.ReactNode;
  headline?: React.ReactNode;
  children?: React.ReactNode;
  subDescription?: SingleBooleanChoiceArg<"subDescription">;
  button?: SingleBooleanChoiceArg<"button">;
  border?: SingleBooleanChoiceArg<"border">;
  search?: SingleBooleanChoiceArg<"search">;
  className?: string;
}

function PlasmicInputFormCardEmailSearchBadge__RenderFunc(props: {
  variants: PlasmicInputFormCardEmailSearchBadge__VariantsArgs;
  args: PlasmicInputFormCardEmailSearchBadge__ArgsType;
  overrides: PlasmicInputFormCardEmailSearchBadge__OverridesType;
  dataFetches?: PlasmicInputFormCardEmailSearchBadge__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div
        data-plasmic-name={"parent"}
        data-plasmic-override={overrides.parent}
        className={classNames(defaultcss.all, sty.parent, {
          [sty.parent__border]: hasVariant(variants, "border", "border")
        })}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"mainCard"}
          data-plasmic-override={overrides.mainCard}
          hasGap={true}
          className={classNames(defaultcss.all, sty.mainCard, {
            [sty.mainCard__search]: hasVariant(variants, "search", "search")
          })}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"headlineSubheadParent"}
            data-plasmic-override={overrides.headlineSubheadParent}
            hasGap={true}
            className={classNames(defaultcss.all, sty.headlineSubheadParent)}
          >
            <div
              data-plasmic-name={"headlineTextParent"}
              data-plasmic-override={overrides.headlineTextParent}
              className={classNames(defaultcss.all, sty.headlineTextParent)}
            >
              {p.renderPlasmicSlot({
                defaultContents: "Headline",
                value: args.headline,
                className: classNames(sty.slotHeadline)
              })}
            </div>

            {p.renderPlasmicSlot({
              defaultContents: "Sub head",
              value: args.subHead,
              className: classNames(sty.slotSubHead, {
                [sty.slotSubHead__search]: hasVariant(
                  variants,
                  "search",
                  "search"
                )
              })
            })}
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"textInputParent"}
            data-plasmic-override={overrides.textInputParent}
            hasGap={true}
            className={classNames(defaultcss.all, sty.textInputParent, {
              [sty.textInputParent__search]: hasVariant(
                variants,
                "search",
                "search"
              )
            })}
          >
            {(hasVariant(variants, "search", "search") ? false : true) ? (
              <div
                className={classNames(defaultcss.all, sty.freeBox__nEv6F, {
                  [sty.freeBox__search__nEv6FxGqH2]: hasVariant(
                    variants,
                    "search",
                    "search"
                  )
                })}
              >
                {p.renderPlasmicSlot({
                  defaultContents: (
                    <input
                      className={classNames(
                        defaultcss.input,
                        sty.textbox__bvs3Y
                      )}
                      placeholder={"email@example.com" as const}
                      size={1 as const}
                      type={"text" as const}
                      value={"" as const}
                    />
                  ),

                  value: args.email
                })}
              </div>
            ) : null}
            {(hasVariant(variants, "search", "search") ? true : false) ? (
              <p.Stack
                as={"div"}
                data-plasmic-name={"searchTriggerParent"}
                data-plasmic-override={overrides.searchTriggerParent}
                hasGap={true}
                className={classNames(defaultcss.all, sty.searchTriggerParent, {
                  [sty.searchTriggerParent__search]: hasVariant(
                    variants,
                    "search",
                    "search"
                  )
                })}
              >
                {(hasVariant(variants, "search", "search") ? true : false) ? (
                  <input
                    data-plasmic-name={"textbox"}
                    data-plasmic-override={overrides.textbox}
                    className={classNames(defaultcss.input, sty.textbox, {
                      [sty.textbox__search]: hasVariant(
                        variants,
                        "search",
                        "search"
                      )
                    })}
                    placeholder={
                      hasVariant(variants, "search", "search")
                        ? ("Search and enter" as const)
                        : ("Some placeholder" as const)
                    }
                    size={1 as const}
                    type={"text" as const}
                    value={
                      hasVariant(variants, "search", "search")
                        ? ("Search and enter" as const)
                        : ("Some value" as const)
                    }
                  />
                ) : null}
                {(hasVariant(variants, "search", "search") ? true : false) ? (
                  <ButtonPrimary
                    className={classNames(
                      "__wab_instance",
                      sty.buttonPrimary__rVqkw,
                      {
                        [sty.buttonPrimary__search__rVqkwxGqH2]: hasVariant(
                          variants,
                          "search",
                          "search"
                        )
                      }
                    )}
                    size={
                      hasVariant(variants, "search", "search")
                        ? ("_90" as const)
                        : undefined
                    }
                    svgIcon={
                      <p.PlasmicIcon
                        data-plasmic-name={"svg"}
                        data-plasmic-override={overrides.svg}
                        PlasmicIconType={
                          hasVariant(variants, "search", "search")
                            ? Icon107Icon
                            : Icon52Icon
                        }
                        className={classNames(defaultcss.all, sty.svg, {
                          [sty.svg__search]: hasVariant(
                            variants,
                            "search",
                            "search"
                          )
                        })}
                        role={"img"}
                      />
                    }
                    type={
                      hasVariant(variants, "search", "search")
                        ? ("icon" as const)
                        : undefined
                    }
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox__zyccC,
                        {
                          [sty.freeBox__search__zyccCxGqH2]: hasVariant(
                            variants,
                            "search",
                            "search"
                          )
                        }
                      )}
                    >
                      {hasVariant(variants, "search", "search")
                        ? "Add"
                        : "Button"}
                    </div>
                  </ButtonPrimary>
                ) : null}
              </p.Stack>
            ) : null}
            {(hasVariant(variants, "search", "search") ? true : false) ? (
              <p.Stack
                as={"div"}
                data-plasmic-name={"badgeDisplay"}
                data-plasmic-override={overrides.badgeDisplay}
                hasGap={true}
                className={classNames(defaultcss.all, sty.badgeDisplay, {
                  [sty.badgeDisplay__search]: hasVariant(
                    variants,
                    "search",
                    "search"
                  )
                })}
              >
                {p.renderPlasmicSlot({
                  defaultContents: (
                    <ChipBadgeDisplay
                      className={classNames(
                        "__wab_instance",
                        sty.chipBadgeDisplay__vv8Ep
                      )}
                      color={"brand" as const}
                      type={"ghost" as const}
                    />
                  ),

                  value: args.children
                })}
              </p.Stack>
            ) : null}
          </p.Stack>
        </p.Stack>

        <div
          data-plasmic-name={"descriptionCard"}
          data-plasmic-override={overrides.descriptionCard}
          className={classNames(defaultcss.all, sty.descriptionCard, {
            [sty.descriptionCard__search]: hasVariant(
              variants,
              "search",
              "search"
            ),
            [sty.descriptionCard__subDescription]: hasVariant(
              variants,
              "subDescription",
              "subDescription"
            ),
            [sty.descriptionCard__subDescription_button]:
              hasVariant(variants, "subDescription", "subDescription") &&
              hasVariant(variants, "button", "button")
          })}
        >
          <div
            data-plasmic-name={"subDescription"}
            data-plasmic-override={overrides.subDescription}
            className={classNames(defaultcss.all, sty.subDescription, {
              [sty.subDescription__subDescription]: hasVariant(
                variants,
                "subDescription",
                "subDescription"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: "Description",
              value: args.description,
              className: classNames(sty.slotDescription, {
                [sty.slotDescription__subDescription]: hasVariant(
                  variants,
                  "subDescription",
                  "subDescription"
                )
              })
            })}
          </div>

          <ButtonPrimary
            className={classNames("__wab_instance", sty.buttonPrimary__l2Isq, {
              [sty.buttonPrimary__button__l2Isq7D56P]: hasVariant(
                variants,
                "button",
                "button"
              ),
              [sty.buttonPrimary__subDescription__l2IsQu4Gxx]: hasVariant(
                variants,
                "subDescription",
                "subDescription"
              ),
              [sty.buttonPrimary__subDescription_button__l2IsQu4Gxx7D56P]:
                hasVariant(variants, "subDescription", "subDescription") &&
                hasVariant(variants, "button", "button")
            })}
            size={"_140" as const}
          >
            {"Save"}
          </ButtonPrimary>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "parent",
    "mainCard",
    "headlineSubheadParent",
    "headlineTextParent",
    "textInputParent",
    "searchTriggerParent",
    "textbox",
    "svg",
    "badgeDisplay",
    "descriptionCard",
    "subDescription"
  ],
  parent: [
    "parent",
    "mainCard",
    "headlineSubheadParent",
    "headlineTextParent",
    "textInputParent",
    "searchTriggerParent",
    "textbox",
    "svg",
    "badgeDisplay",
    "descriptionCard",
    "subDescription"
  ],
  mainCard: [
    "mainCard",
    "headlineSubheadParent",
    "headlineTextParent",
    "textInputParent",
    "searchTriggerParent",
    "textbox",
    "svg",
    "badgeDisplay"
  ],
  headlineSubheadParent: ["headlineSubheadParent", "headlineTextParent"],
  headlineTextParent: ["headlineTextParent"],
  textInputParent: [
    "textInputParent",
    "searchTriggerParent",
    "textbox",
    "svg",
    "badgeDisplay"
  ],
  searchTriggerParent: ["searchTriggerParent", "textbox", "svg"],
  textbox: ["textbox"],
  svg: ["svg"],
  badgeDisplay: ["badgeDisplay"],
  descriptionCard: ["descriptionCard", "subDescription"],
  subDescription: ["subDescription"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  parent: "div";
  mainCard: "div";
  headlineSubheadParent: "div";
  headlineTextParent: "div";
  textInputParent: "div";
  searchTriggerParent: "div";
  textbox: "input";
  svg: "svg";
  badgeDisplay: "div";
  descriptionCard: "div";
  subDescription: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInputFormCardEmailSearchBadge__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicInputFormCardEmailSearchBadge__VariantsArgs;
    args?: PlasmicInputFormCardEmailSearchBadge__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicInputFormCardEmailSearchBadge__Fetches;
  } & Omit< // Specify variants directly as props
    PlasmicInputFormCardEmailSearchBadge__VariantsArgs,
    ReservedPropsType
  > &
    // Specify args directly as props
    Omit<PlasmicInputFormCardEmailSearchBadge__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicInputFormCardEmailSearchBadge__ArgProps,
      internalVariantPropNames:
        PlasmicInputFormCardEmailSearchBadge__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicInputFormCardEmailSearchBadge__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInputFormCardEmailSearchBadge";
  } else {
    func.displayName = `PlasmicInputFormCardEmailSearchBadge.${nodeName}`;
  }
  return func;
}

export const PlasmicInputFormCardEmailSearchBadge = Object.assign(
  // Top-level PlasmicInputFormCardEmailSearchBadge renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    parent: makeNodeComponent("parent"),
    mainCard: makeNodeComponent("mainCard"),
    headlineSubheadParent: makeNodeComponent("headlineSubheadParent"),
    headlineTextParent: makeNodeComponent("headlineTextParent"),
    textInputParent: makeNodeComponent("textInputParent"),
    searchTriggerParent: makeNodeComponent("searchTriggerParent"),
    textbox: makeNodeComponent("textbox"),
    svg: makeNodeComponent("svg"),
    badgeDisplay: makeNodeComponent("badgeDisplay"),
    descriptionCard: makeNodeComponent("descriptionCard"),
    subDescription: makeNodeComponent("subDescription"),

    // Metadata about props expected for PlasmicInputFormCardEmailSearchBadge
    internalVariantProps: PlasmicInputFormCardEmailSearchBadge__VariantProps,
    internalArgProps: PlasmicInputFormCardEmailSearchBadge__ArgProps
  }
);

export default PlasmicInputFormCardEmailSearchBadge;
/* prettier-ignore-end */
