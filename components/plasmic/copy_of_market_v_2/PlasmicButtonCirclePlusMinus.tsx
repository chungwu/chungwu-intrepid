// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: Ywd6v68I9OnfFBZ
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicButtonCirclePlusMinus.module.css"; // plasmic-import: Ywd6v68I9OnfFBZ/css

import CirclePlusIcon from "./icons/PlasmicIcon__CirclePlus"; // plasmic-import: yHmlBQsexwj3m38/icon
import CircleMinusIcon from "./icons/PlasmicIcon__CircleMinus"; // plasmic-import: f9_lMIhoLUYTeuT/icon

export type PlasmicButtonCirclePlusMinus__VariantMembers = {
  type: "increment" | "decrement";
  size: "_16" | "_18" | "_24" | "_32" | "_48";
  alignment: "left" | "right";
};

export type PlasmicButtonCirclePlusMinus__VariantsArgs = {
  type?: SingleChoiceArg<"increment" | "decrement">;
  size?: SingleChoiceArg<"_16" | "_18" | "_24" | "_32" | "_48">;
  alignment?: SingleChoiceArg<"left" | "right">;
};

type VariantPropType = keyof PlasmicButtonCirclePlusMinus__VariantsArgs;
export const PlasmicButtonCirclePlusMinus__VariantProps =
  new Array<VariantPropType>("type", "size", "alignment");

export type PlasmicButtonCirclePlusMinus__ArgsType = {};
type ArgPropType = keyof PlasmicButtonCirclePlusMinus__ArgsType;
export const PlasmicButtonCirclePlusMinus__ArgProps = new Array<ArgPropType>();

export type PlasmicButtonCirclePlusMinus__OverridesType = {
  root?: p.Flex<"button">;
  parent?: p.Flex<"div">;
  svgBackground?: p.Flex<"div">;
  svgParent?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
};

export interface DefaultButtonCirclePlusMinusProps {
  type?: SingleChoiceArg<"increment" | "decrement">;
  size?: SingleChoiceArg<"_16" | "_18" | "_24" | "_32" | "_48">;
  alignment?: SingleChoiceArg<"left" | "right">;
  className?: string;
}

function PlasmicButtonCirclePlusMinus__RenderFunc(props: {
  variants: PlasmicButtonCirclePlusMinus__VariantsArgs;
  args: PlasmicButtonCirclePlusMinus__ArgsType;
  overrides: PlasmicButtonCirclePlusMinus__OverridesType;
  dataFetches?: PlasmicButtonCirclePlusMinus__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <button
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        defaultcss.button,
        projectcss.root_reset,
        sty.root,
        {
          [sty.root__alignment_left]: hasVariant(variants, "alignment", "left"),
          [sty.root__alignment_right]: hasVariant(
            variants,
            "alignment",
            "right"
          ),
          [sty.root__size__16]: hasVariant(variants, "size", "_16"),
          [sty.root__size__24]: hasVariant(variants, "size", "_24"),
          [sty.root__size__32]: hasVariant(variants, "size", "_32"),
          [sty.root__size__48]: hasVariant(variants, "size", "_48")
        }
      )}
    >
      <div
        data-plasmic-name={"parent"}
        data-plasmic-override={overrides.parent}
        className={classNames(defaultcss.all, sty.parent, {
          [sty.parent__alignment_left]: hasVariant(
            variants,
            "alignment",
            "left"
          ),
          [sty.parent__alignment_right]: hasVariant(
            variants,
            "alignment",
            "right"
          ),
          [sty.parent__size__16]: hasVariant(variants, "size", "_16"),
          [sty.parent__size__24]: hasVariant(variants, "size", "_24"),
          [sty.parent__size__32]: hasVariant(variants, "size", "_32"),
          [sty.parent__size__48]: hasVariant(variants, "size", "_48")
        })}
      >
        <div
          data-plasmic-name={"svgBackground"}
          data-plasmic-override={overrides.svgBackground}
          className={classNames(defaultcss.all, sty.svgBackground, {
            [sty.svgBackground__alignment_left]: hasVariant(
              variants,
              "alignment",
              "left"
            ),
            [sty.svgBackground__alignment_right]: hasVariant(
              variants,
              "alignment",
              "right"
            ),
            [sty.svgBackground__size__16]: hasVariant(variants, "size", "_16"),
            [sty.svgBackground__size__24]: hasVariant(variants, "size", "_24"),
            [sty.svgBackground__size__32]: hasVariant(variants, "size", "_32"),
            [sty.svgBackground__size__48]: hasVariant(variants, "size", "_48")
          })}
        >
          <div
            data-plasmic-name={"svgParent"}
            data-plasmic-override={overrides.svgParent}
            className={classNames(defaultcss.all, sty.svgParent, {
              [sty.svgParent__alignment_left]: hasVariant(
                variants,
                "alignment",
                "left"
              ),
              [sty.svgParent__size__16]: hasVariant(variants, "size", "_16"),
              [sty.svgParent__size__24]: hasVariant(variants, "size", "_24"),
              [sty.svgParent__size__32]: hasVariant(variants, "size", "_32"),
              [sty.svgParent__size__48]: hasVariant(variants, "size", "_48")
            })}
          >
            <p.PlasmicIcon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              PlasmicIconType={
                hasVariant(variants, "type", "decrement")
                  ? CircleMinusIcon
                  : CirclePlusIcon
              }
              className={classNames(defaultcss.all, sty.svg, {
                [sty.svg__alignment_left]: hasVariant(
                  variants,
                  "alignment",
                  "left"
                ),
                [sty.svg__size__16]: hasVariant(variants, "size", "_16"),
                [sty.svg__size__18]: hasVariant(variants, "size", "_18"),
                [sty.svg__size__32]: hasVariant(variants, "size", "_32"),
                [sty.svg__size__48]: hasVariant(variants, "size", "_48"),
                [sty.svg__type_decrement]: hasVariant(
                  variants,
                  "type",
                  "decrement"
                ),
                [sty.svg__type_increment]: hasVariant(
                  variants,
                  "type",
                  "increment"
                )
              })}
              role={"img"}
            />
          </div>
        </div>
      </div>
    </button>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "parent", "svgBackground", "svgParent", "svg"],
  parent: ["parent", "svgBackground", "svgParent", "svg"],
  svgBackground: ["svgBackground", "svgParent", "svg"],
  svgParent: ["svgParent", "svg"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "button";
  parent: "div";
  svgBackground: "div";
  svgParent: "div";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicButtonCirclePlusMinus__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicButtonCirclePlusMinus__VariantsArgs;
    args?: PlasmicButtonCirclePlusMinus__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicButtonCirclePlusMinus__Fetches;
  } & Omit<PlasmicButtonCirclePlusMinus__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicButtonCirclePlusMinus__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicButtonCirclePlusMinus__ArgProps,
      internalVariantPropNames: PlasmicButtonCirclePlusMinus__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicButtonCirclePlusMinus__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicButtonCirclePlusMinus";
  } else {
    func.displayName = `PlasmicButtonCirclePlusMinus.${nodeName}`;
  }
  return func;
}

export const PlasmicButtonCirclePlusMinus = Object.assign(
  // Top-level PlasmicButtonCirclePlusMinus renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    parent: makeNodeComponent("parent"),
    svgBackground: makeNodeComponent("svgBackground"),
    svgParent: makeNodeComponent("svgParent"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicButtonCirclePlusMinus
    internalVariantProps: PlasmicButtonCirclePlusMinus__VariantProps,
    internalArgProps: PlasmicButtonCirclePlusMinus__ArgProps
  }
);

export default PlasmicButtonCirclePlusMinus;
/* prettier-ignore-end */
