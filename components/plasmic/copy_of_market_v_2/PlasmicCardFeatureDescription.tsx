// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: hLrFJ-JgiWwHRG
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicCardFeatureDescription.module.css"; // plasmic-import: hLrFJ-JgiWwHRG/css

import PlusBoldIcon from "./icons/PlasmicIcon__PlusBold"; // plasmic-import: lhSEEajPJGZatfD/icon

export type PlasmicCardFeatureDescription__VariantMembers = {
  border: "border";
  size: "_360" | "_160";
};

export type PlasmicCardFeatureDescription__VariantsArgs = {
  border?: SingleBooleanChoiceArg<"border">;
  size?: SingleChoiceArg<"_360" | "_160">;
};

type VariantPropType = keyof PlasmicCardFeatureDescription__VariantsArgs;
export const PlasmicCardFeatureDescription__VariantProps =
  new Array<VariantPropType>("border", "size");

export type PlasmicCardFeatureDescription__ArgsType = {
  text?: React.ReactNode;
  headline?: React.ReactNode;
  iconParent?: React.ReactNode;
};

type ArgPropType = keyof PlasmicCardFeatureDescription__ArgsType;
export const PlasmicCardFeatureDescription__ArgProps = new Array<ArgPropType>(
  "text",
  "headline",
  "iconParent"
);

export type PlasmicCardFeatureDescription__OverridesType = {
  root?: p.Flex<"div">;
  cardParent?: p.Flex<"div">;
  iconParent?: p.Flex<"div">;
  headlineBodyTextParent?: p.Flex<"div">;
  headlineDiv?: p.Flex<"div">;
  headline?: p.Flex<"div">;
  textParent?: p.Flex<"div">;
};

export interface DefaultCardFeatureDescriptionProps {
  text?: React.ReactNode;
  headline?: React.ReactNode;
  iconParent?: React.ReactNode;
  border?: SingleBooleanChoiceArg<"border">;
  size?: SingleChoiceArg<"_360" | "_160">;
  className?: string;
}

function PlasmicCardFeatureDescription__RenderFunc(props: {
  variants: PlasmicCardFeatureDescription__VariantsArgs;
  args: PlasmicCardFeatureDescription__ArgsType;
  overrides: PlasmicCardFeatureDescription__OverridesType;
  dataFetches?: PlasmicCardFeatureDescription__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__size__360]: hasVariant(variants, "size", "_360")
      })}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"cardParent"}
        data-plasmic-override={overrides.cardParent}
        hasGap={true}
        className={classNames(defaultcss.all, sty.cardParent, {
          [sty.cardParent__border]: hasVariant(variants, "border", "border"),
          [sty.cardParent__size__160]: hasVariant(variants, "size", "_160"),
          [sty.cardParent__size__360]: hasVariant(variants, "size", "_360")
        })}
      >
        <div
          data-plasmic-name={"iconParent"}
          data-plasmic-override={overrides.iconParent}
          className={classNames(defaultcss.all, sty.iconParent, {
            [sty.iconParent__size__360]: hasVariant(variants, "size", "_360")
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <div className={classNames(defaultcss.all, sty.freeBox__uo4TS)}>
                <PlusBoldIcon
                  className={classNames(defaultcss.all, sty.svg__uta5)}
                  role={"img"}
                />
              </div>
            ),

            value: args.iconParent
          })}
        </div>

        <p.Stack
          as={"div"}
          data-plasmic-name={"headlineBodyTextParent"}
          data-plasmic-override={overrides.headlineBodyTextParent}
          hasGap={true}
          className={classNames(defaultcss.all, sty.headlineBodyTextParent, {
            [sty.headlineBodyTextParent__size__160]: hasVariant(
              variants,
              "size",
              "_160"
            ),
            [sty.headlineBodyTextParent__size__360]: hasVariant(
              variants,
              "size",
              "_360"
            )
          })}
        >
          <div
            data-plasmic-name={"headlineDiv"}
            data-plasmic-override={overrides.headlineDiv}
            className={classNames(defaultcss.all, sty.headlineDiv)}
          >
            <div
              data-plasmic-name={"headline"}
              data-plasmic-override={overrides.headline}
              className={classNames(defaultcss.all, sty.headline, {
                [sty.headline__size__160]: hasVariant(variants, "size", "_160")
              })}
            >
              {p.renderPlasmicSlot({
                defaultContents: "Headline feature desription",
                value: args.headline,
                className: classNames(sty.slotHeadline, {
                  [sty.slotHeadline__size__160]: hasVariant(
                    variants,
                    "size",
                    "_160"
                  ),
                  [sty.slotHeadline__size__360]: hasVariant(
                    variants,
                    "size",
                    "_360"
                  )
                })
              })}
            </div>
          </div>

          <div
            data-plasmic-name={"textParent"}
            data-plasmic-override={overrides.textParent}
            className={classNames(defaultcss.all, sty.textParent, {
              [sty.textParent__size__360]: hasVariant(variants, "size", "_360")
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents:
                "One morning, when Gregor Samsa woke from troubled dreams, he found himself transformed in his bed in.",
              value: args.text,
              className: classNames(sty.slotText, {
                [sty.slotText__size__160]: hasVariant(variants, "size", "_160"),
                [sty.slotText__size__360]: hasVariant(variants, "size", "_360")
              })
            })}
          </div>
        </p.Stack>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "cardParent",
    "iconParent",
    "headlineBodyTextParent",
    "headlineDiv",
    "headline",
    "textParent"
  ],
  cardParent: [
    "cardParent",
    "iconParent",
    "headlineBodyTextParent",
    "headlineDiv",
    "headline",
    "textParent"
  ],
  iconParent: ["iconParent"],
  headlineBodyTextParent: [
    "headlineBodyTextParent",
    "headlineDiv",
    "headline",
    "textParent"
  ],
  headlineDiv: ["headlineDiv", "headline"],
  headline: ["headline"],
  textParent: ["textParent"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  cardParent: "div";
  iconParent: "div";
  headlineBodyTextParent: "div";
  headlineDiv: "div";
  headline: "div";
  textParent: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCardFeatureDescription__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCardFeatureDescription__VariantsArgs;
    args?: PlasmicCardFeatureDescription__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicCardFeatureDescription__Fetches;
  } & Omit<PlasmicCardFeatureDescription__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCardFeatureDescription__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCardFeatureDescription__ArgProps,
      internalVariantPropNames: PlasmicCardFeatureDescription__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicCardFeatureDescription__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCardFeatureDescription";
  } else {
    func.displayName = `PlasmicCardFeatureDescription.${nodeName}`;
  }
  return func;
}

export const PlasmicCardFeatureDescription = Object.assign(
  // Top-level PlasmicCardFeatureDescription renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    cardParent: makeNodeComponent("cardParent"),
    iconParent: makeNodeComponent("iconParent"),
    headlineBodyTextParent: makeNodeComponent("headlineBodyTextParent"),
    headlineDiv: makeNodeComponent("headlineDiv"),
    headline: makeNodeComponent("headline"),
    textParent: makeNodeComponent("textParent"),

    // Metadata about props expected for PlasmicCardFeatureDescription
    internalVariantProps: PlasmicCardFeatureDescription__VariantProps,
    internalArgProps: PlasmicCardFeatureDescription__ArgProps
  }
);

export default PlasmicCardFeatureDescription;
/* prettier-ignore-end */
