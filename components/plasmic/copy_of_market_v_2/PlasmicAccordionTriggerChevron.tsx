// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: CZ7nwXEIZCpElcG
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicAccordionTriggerChevron.module.css"; // plasmic-import: CZ7nwXEIZCpElcG/css

import ChevronDownBIcon from "./icons/PlasmicIcon__ChevronDownB"; // plasmic-import: _PBzFXwb8iqLULI/icon
import Icon170Icon from "./icons/PlasmicIcon__Icon170"; // plasmic-import: 8dZnFQrWLcwMPnF/icon

export type PlasmicAccordionTriggerChevron__VariantMembers = {
  state: "closed" | "disabled";
};

export type PlasmicAccordionTriggerChevron__VariantsArgs = {
  state?: SingleChoiceArg<"closed" | "disabled">;
};

type VariantPropType = keyof PlasmicAccordionTriggerChevron__VariantsArgs;
export const PlasmicAccordionTriggerChevron__VariantProps =
  new Array<VariantPropType>("state");

export type PlasmicAccordionTriggerChevron__ArgsType = {
  svg?: React.ReactNode;
  svgClosed?: React.ReactNode;
};

type ArgPropType = keyof PlasmicAccordionTriggerChevron__ArgsType;
export const PlasmicAccordionTriggerChevron__ArgProps = new Array<ArgPropType>(
  "svg",
  "svgClosed"
);

export type PlasmicAccordionTriggerChevron__OverridesType = {
  root?: p.Flex<"button">;
  svgParent?: p.Flex<"div">;
};

export interface DefaultAccordionTriggerChevronProps {
  svg?: React.ReactNode;
  svgClosed?: React.ReactNode;
  state?: SingleChoiceArg<"closed" | "disabled">;
  className?: string;
}

function PlasmicAccordionTriggerChevron__RenderFunc(props: {
  variants: PlasmicAccordionTriggerChevron__VariantsArgs;
  args: PlasmicAccordionTriggerChevron__ArgsType;
  overrides: PlasmicAccordionTriggerChevron__OverridesType;
  dataFetches?: PlasmicAccordionTriggerChevron__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <button
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.button, projectcss.root_reset, sty.root)}
    >
      <div
        data-plasmic-name={"svgParent"}
        data-plasmic-override={overrides.svgParent}
        className={classNames(defaultcss.all, sty.svgParent, {
          [sty.svgParent__state_closed]: hasVariant(variants, "state", "closed")
        })}
      >
        {(hasVariant(variants, "state", "closed") ? false : true)
          ? p.renderPlasmicSlot({
              defaultContents: (
                <ChevronDownBIcon
                  className={classNames(defaultcss.all, sty.svg___8NNiF)}
                  role={"img"}
                />
              ),

              value: args.svg,
              className: classNames(sty.slotSvg, {
                [sty.slotSvg__state_closed]: hasVariant(
                  variants,
                  "state",
                  "closed"
                ),
                [sty.slotSvg__state_disabled]: hasVariant(
                  variants,
                  "state",
                  "disabled"
                )
              })
            })
          : null}
        {(hasVariant(variants, "state", "closed") ? true : false)
          ? p.renderPlasmicSlot({
              defaultContents: (
                <Icon170Icon
                  className={classNames(defaultcss.all, sty.svg__uP4Ht)}
                  role={"img"}
                />
              ),

              value: args.svgClosed
            })
          : null}
      </div>
    </button>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "svgParent"],
  svgParent: ["svgParent"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "button";
  svgParent: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAccordionTriggerChevron__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAccordionTriggerChevron__VariantsArgs;
    args?: PlasmicAccordionTriggerChevron__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicAccordionTriggerChevron__Fetches;
  } & Omit<PlasmicAccordionTriggerChevron__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAccordionTriggerChevron__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicAccordionTriggerChevron__ArgProps,
      internalVariantPropNames: PlasmicAccordionTriggerChevron__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicAccordionTriggerChevron__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAccordionTriggerChevron";
  } else {
    func.displayName = `PlasmicAccordionTriggerChevron.${nodeName}`;
  }
  return func;
}

export const PlasmicAccordionTriggerChevron = Object.assign(
  // Top-level PlasmicAccordionTriggerChevron renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svgParent: makeNodeComponent("svgParent"),

    // Metadata about props expected for PlasmicAccordionTriggerChevron
    internalVariantProps: PlasmicAccordionTriggerChevron__VariantProps,
    internalArgProps: PlasmicAccordionTriggerChevron__ArgProps
  }
);

export default PlasmicAccordionTriggerChevron;
/* prettier-ignore-end */
