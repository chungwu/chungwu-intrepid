// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: kA_EF3hfn-efp1E
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavbarInternal from "../../NavbarInternal"; // plasmic-import: nBfIHHqHvjUywN9/component
import CardHeaderTitleDisplay from "../../CardHeaderTitleDisplay"; // plasmic-import: fk5BRaqICb6MOmt/component
import ElementListingEditCard from "../../ElementListingEditCard"; // plasmic-import: mRuNfrL7Pl0W2gW/component
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: gpNjXfbD_ZdpPU/component
import TextLinkUnderlinePrimary from "../../TextLinkUnderlinePrimary"; // plasmic-import: 6pY-cK_-KJMdF_/component
import FooterB from "../../FooterB"; // plasmic-import: IZENTiSL4_zyK8/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: biX3aS42hiG0fF/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicEditpartnerlisting.module.css"; // plasmic-import: kA_EF3hfn-efp1E/css

import CircleCheckedIcon from "./icons/PlasmicIcon__CircleChecked"; // plasmic-import: Rx_TV1hYzOOAuX3/icon
import PlusBoldIcon from "./icons/PlasmicIcon__PlusBold"; // plasmic-import: lhSEEajPJGZatfD/icon
import Icon176Icon from "./icons/PlasmicIcon__Icon176"; // plasmic-import: pztbm3RWMG3Ggxk/icon
import Icon177Icon from "./icons/PlasmicIcon__Icon177"; // plasmic-import: NOfWrFOMKMx_mTF/icon
import Icon111Icon from "./icons/PlasmicIcon__Icon111"; // plasmic-import: bs7hcDR6K9Xgoi3/icon

export type PlasmicEditpartnerlisting__VariantMembers = {};

export type PlasmicEditpartnerlisting__VariantsArgs = {};
type VariantPropType = keyof PlasmicEditpartnerlisting__VariantsArgs;
export const PlasmicEditpartnerlisting__VariantProps =
  new Array<VariantPropType>();

export type PlasmicEditpartnerlisting__ArgsType = {};
type ArgPropType = keyof PlasmicEditpartnerlisting__ArgsType;
export const PlasmicEditpartnerlisting__ArgProps = new Array<ArgPropType>();

export type PlasmicEditpartnerlisting__OverridesType = {
  root?: p.Flex<"div">;
  editListingSectionParent?: p.Flex<"div">;
  navbarInternal?: p.Flex<typeof NavbarInternal>;
  sectionHeaderEditListing?: p.Flex<"div">;
  cardHeaderTitleDisplay?: p.Flex<typeof CardHeaderTitleDisplay>;
  sectionEditListing?: p.Flex<"div">;
  listingEditCategoryFieldsParent?: p.Flex<"div">;
  footerB?: p.Flex<typeof FooterB>;
};

export interface DefaultEditpartnerlistingProps {
  dataFetches: PlasmicEditpartnerlisting__Fetches;
}

function PlasmicEditpartnerlisting__RenderFunc(props: {
  variants: PlasmicEditpartnerlisting__VariantsArgs;
  args: PlasmicEditpartnerlisting__ArgsType;
  overrides: PlasmicEditpartnerlisting__OverridesType;
  dataFetches?: PlasmicEditpartnerlisting__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <React.Fragment>
      <Head>
        <title key="title">{""}</title>
        <meta key="og:title" property="og:title" content={""} />
        <meta
          key="description"
          name="description"
          property="og:description"
          content={""}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"editListingSectionParent"}
            data-plasmic-override={overrides.editListingSectionParent}
            hasGap={true}
            className={classNames(defaultcss.all, sty.editListingSectionParent)}
          >
            <NavbarInternal
              data-plasmic-name={"navbarInternal"}
              data-plasmic-override={overrides.navbarInternal}
              className={classNames("__wab_instance", sty.navbarInternal)}
            />

            <p.Stack
              as={"div"}
              data-plasmic-name={"sectionHeaderEditListing"}
              data-plasmic-override={overrides.sectionHeaderEditListing}
              hasGap={true}
              className={classNames(
                defaultcss.all,
                sty.sectionHeaderEditListing
              )}
            >
              <CardHeaderTitleDisplay
                data-plasmic-name={"cardHeaderTitleDisplay"}
                data-plasmic-override={overrides.cardHeaderTitleDisplay}
                size={
                  hasVariant(globalVariants, "screen", "mobile")
                    ? ("_360" as const)
                    : ("_360" as const)
                }
                slot={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__dPNij
                    )}
                  >
                    {"Edit listing"}
                  </div>
                }
                textDisplay={"Partner"}
                textSubhead={
                  hasVariant(globalVariants, "screen", "mobile")
                    ? "Finish your listing — build your rep and start earning. You can always edit your listing after you publish."
                    : "Finish your listing — build your rep and start earning.\nYou can always edit your listing after you publish."
                }
              />
            </p.Stack>

            <p.Stack
              as={"div"}
              data-plasmic-name={"sectionEditListing"}
              data-plasmic-override={overrides.sectionEditListing}
              hasGap={true}
              className={classNames(defaultcss.all, sty.sectionEditListing)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"listingEditCategoryFieldsParent"}
                data-plasmic-override={
                  overrides.listingEditCategoryFieldsParent
                }
                hasGap={true}
                className={classNames(
                  defaultcss.all,
                  sty.listingEditCategoryFieldsParent
                )}
              >
                <ElementListingEditCard
                  buttonParent={
                    true ? (
                      <ButtonPrimary
                        className={classNames(
                          "__wab_instance",
                          sty.buttonPrimary___38Nwo
                        )}
                        color={"success" as const}
                        size={"_120" as const}
                        type={"ghost" as const}
                      >
                        <div
                          className={classNames(
                            defaultcss.all,
                            defaultcss.__wab_text,
                            sty.freeBox__ur0Tx
                          )}
                        >
                          {"Edit"}
                        </div>
                      </ButtonPrimary>
                    ) : null
                  }
                  className={classNames(
                    "__wab_instance",
                    sty.elementListingEditCard__m1Nwh
                  )}
                  textLink={
                    <TextLinkUnderlinePrimary
                      size={"_32" as const}
                      text={"Category"}
                    />
                  }
                  toolTip={"check" as const}
                />

                <ElementListingEditCard
                  buttonParent={
                    true ? (
                      <ButtonPrimary
                        className={classNames(
                          "__wab_instance",
                          sty.buttonPrimary__tMFec
                        )}
                        color={"success" as const}
                        size={"_120" as const}
                        type={"ghost" as const}
                      >
                        <div
                          className={classNames(
                            defaultcss.all,
                            defaultcss.__wab_text,
                            sty.freeBox__od8Uj
                          )}
                        >
                          {"Edit"}
                        </div>
                      </ButtonPrimary>
                    ) : null
                  }
                  className={classNames(
                    "__wab_instance",
                    sty.elementListingEditCard__aZt3G
                  )}
                  textLink={
                    <TextLinkUnderlinePrimary
                      size={"_32" as const}
                      text={"Community"}
                    />
                  }
                  toolTip={"check" as const}
                />

                <ElementListingEditCard
                  buttonParent={
                    true ? (
                      <ButtonPrimary
                        className={classNames(
                          "__wab_instance",
                          sty.buttonPrimary__lz4V0
                        )}
                        color={"success" as const}
                        size={"_120" as const}
                        type={"ghost" as const}
                      >
                        {"Edit"}
                      </ButtonPrimary>
                    ) : null
                  }
                  className={classNames(
                    "__wab_instance",
                    sty.elementListingEditCard__veZvq
                  )}
                  textLink={
                    <TextLinkUnderlinePrimary
                      size={"_32" as const}
                      text={"Description"}
                    />
                  }
                  toolTip={"check" as const}
                />

                <ElementListingEditCard
                  buttonParent={
                    true ? (
                      <ButtonPrimary
                        className={classNames(
                          "__wab_instance",
                          sty.buttonPrimary__fFdOb
                        )}
                        color={"caution" as const}
                        size={"_120" as const}
                        type={"ghost" as const}
                      >
                        {"Add photos"}
                      </ButtonPrimary>
                    ) : null
                  }
                  className={classNames(
                    "__wab_instance",
                    sty.elementListingEditCard__rwKJc
                  )}
                  textLink={
                    <TextLinkUnderlinePrimary
                      size={"_32" as const}
                      text={"Images"}
                    />
                  }
                  toolTip={"alert" as const}
                />

                <ElementListingEditCard
                  buttonParent={
                    true ? (
                      <ButtonPrimary
                        className={classNames(
                          "__wab_instance",
                          sty.buttonPrimary__yLKe6
                        )}
                        color={"warning" as const}
                        size={"_120" as const}
                        type={"ghost" as const}
                      >
                        {"Fix"}
                      </ButtonPrimary>
                    ) : null
                  }
                  className={classNames(
                    "__wab_instance",
                    sty.elementListingEditCard__gHjY7
                  )}
                  textLink={
                    <TextLinkUnderlinePrimary
                      size={"_32" as const}
                      text={"Process"}
                    />
                  }
                  toolTip={"question" as const}
                />

                <ElementListingEditCard
                  buttonParent={
                    true ? (
                      <ButtonPrimary
                        className={classNames(
                          "__wab_instance",
                          sty.buttonPrimary__ohZaP
                        )}
                        color={"success" as const}
                        size={"_120" as const}
                        type={"ghost" as const}
                      >
                        {"Edit"}
                      </ButtonPrimary>
                    ) : null
                  }
                  className={classNames(
                    "__wab_instance",
                    sty.elementListingEditCard__m7J4P
                  )}
                  textLink={
                    <TextLinkUnderlinePrimary
                      size={"_32" as const}
                      text={"Features"}
                    />
                  }
                  toolTip={"check" as const}
                />

                <ElementListingEditCard
                  buttonParent={
                    true ? (
                      <ButtonPrimary
                        className={classNames(
                          "__wab_instance",
                          sty.buttonPrimary__euJR
                        )}
                        color={"success" as const}
                        size={"_120" as const}
                        type={"ghost" as const}
                      >
                        {"Edit"}
                      </ButtonPrimary>
                    ) : null
                  }
                  className={classNames(
                    "__wab_instance",
                    sty.elementListingEditCard__xeXRx
                  )}
                  textLink={
                    <TextLinkUnderlinePrimary
                      size={"_32" as const}
                      text={"Content"}
                    />
                  }
                  toolTip={"check" as const}
                />

                <ElementListingEditCard
                  buttonParent={
                    true ? (
                      <ButtonPrimary
                        className={classNames(
                          "__wab_instance",
                          sty.buttonPrimary__iMjUb
                        )}
                        color={"success" as const}
                        size={"_120" as const}
                        type={"ghost" as const}
                      >
                        {"Edit"}
                      </ButtonPrimary>
                    ) : null
                  }
                  className={classNames(
                    "__wab_instance",
                    sty.elementListingEditCard__zgTmf
                  )}
                  textLink={
                    <TextLinkUnderlinePrimary
                      size={"_32" as const}
                      text={"Method"}
                    />
                  }
                  toolTip={"check" as const}
                />

                <ElementListingEditCard
                  buttonParent={
                    true ? (
                      <ButtonPrimary
                        className={classNames(
                          "__wab_instance",
                          sty.buttonPrimary__oawcI
                        )}
                        color={"success" as const}
                        size={"_120" as const}
                        type={"ghost" as const}
                      >
                        {"Edit"}
                      </ButtonPrimary>
                    ) : null
                  }
                  className={classNames(
                    "__wab_instance",
                    sty.elementListingEditCard___2AQV
                  )}
                  textLink={
                    <TextLinkUnderlinePrimary
                      size={"_32" as const}
                      text={"Format"}
                    />
                  }
                  toolTip={"check" as const}
                />

                <ElementListingEditCard
                  buttonParent={
                    true ? (
                      <ButtonPrimary
                        className={classNames(
                          "__wab_instance",
                          sty.buttonPrimary__w114M
                        )}
                        color={"success" as const}
                        size={"_120" as const}
                        type={"ghost" as const}
                      >
                        {"Edit"}
                      </ButtonPrimary>
                    ) : null
                  }
                  className={classNames(
                    "__wab_instance",
                    sty.elementListingEditCard__ahNao
                  )}
                  textLink={
                    <TextLinkUnderlinePrimary
                      size={"_32" as const}
                      text={"Tools"}
                    />
                  }
                  toolTip={"check" as const}
                />

                <ElementListingEditCard
                  buttonParent={
                    true ? (
                      <ButtonPrimary
                        className={classNames(
                          "__wab_instance",
                          sty.buttonPrimary___0YcCj
                        )}
                        color={"warning" as const}
                        size={"_120" as const}
                        type={"ghost" as const}
                      >
                        {"Fix"}
                      </ButtonPrimary>
                    ) : null
                  }
                  className={classNames(
                    "__wab_instance",
                    sty.elementListingEditCard__xP1Q
                  )}
                  textLink={
                    <TextLinkUnderlinePrimary
                      size={"_32" as const}
                      text={"Requirements"}
                    />
                  }
                  toolTip={"question" as const}
                />

                <ElementListingEditCard
                  buttonParent={
                    true ? (
                      <ButtonPrimary
                        className={classNames(
                          "__wab_instance",
                          sty.buttonPrimary__t6GBv
                        )}
                        color={"warning" as const}
                        size={"_120" as const}
                        type={"ghost" as const}
                      >
                        {"Fix"}
                      </ButtonPrimary>
                    ) : null
                  }
                  className={classNames(
                    "__wab_instance",
                    sty.elementListingEditCard__lyUv
                  )}
                  textLink={
                    <TextLinkUnderlinePrimary
                      size={"_32" as const}
                      text={"Terms"}
                    />
                  }
                  toolTip={"question" as const}
                />

                <ElementListingEditCard
                  buttonParent={
                    true ? (
                      <ButtonPrimary
                        className={classNames(
                          "__wab_instance",
                          sty.buttonPrimary__kaxXt
                        )}
                        color={"caution" as const}
                        size={"_120" as const}
                        type={"ghost" as const}
                      >
                        {"Finish"}
                      </ButtonPrimary>
                    ) : null
                  }
                  className={classNames(
                    "__wab_instance",
                    sty.elementListingEditCard__maCzs
                  )}
                  textLink={
                    <TextLinkUnderlinePrimary
                      size={"_32" as const}
                      text={"Checkout"}
                    />
                  }
                  toolTip={"alert" as const}
                />
              </p.Stack>
            </p.Stack>

            <FooterB
              data-plasmic-name={"footerB"}
              data-plasmic-override={overrides.footerB}
              className={classNames("__wab_instance", sty.footerB)}
            />
          </p.Stack>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "editListingSectionParent",
    "navbarInternal",
    "sectionHeaderEditListing",
    "cardHeaderTitleDisplay",
    "sectionEditListing",
    "listingEditCategoryFieldsParent",
    "footerB"
  ],
  editListingSectionParent: [
    "editListingSectionParent",
    "navbarInternal",
    "sectionHeaderEditListing",
    "cardHeaderTitleDisplay",
    "sectionEditListing",
    "listingEditCategoryFieldsParent",
    "footerB"
  ],
  navbarInternal: ["navbarInternal"],
  sectionHeaderEditListing: [
    "sectionHeaderEditListing",
    "cardHeaderTitleDisplay"
  ],
  cardHeaderTitleDisplay: ["cardHeaderTitleDisplay"],
  sectionEditListing: ["sectionEditListing", "listingEditCategoryFieldsParent"],
  listingEditCategoryFieldsParent: ["listingEditCategoryFieldsParent"],
  footerB: ["footerB"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  editListingSectionParent: "div";
  navbarInternal: typeof NavbarInternal;
  sectionHeaderEditListing: "div";
  cardHeaderTitleDisplay: typeof CardHeaderTitleDisplay;
  sectionEditListing: "div";
  listingEditCategoryFieldsParent: "div";
  footerB: typeof FooterB;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicEditpartnerlisting__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicEditpartnerlisting__VariantsArgs;
    args?: PlasmicEditpartnerlisting__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicEditpartnerlisting__Fetches;
  } & Omit<PlasmicEditpartnerlisting__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicEditpartnerlisting__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicEditpartnerlisting__ArgProps,
      internalVariantPropNames: PlasmicEditpartnerlisting__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicEditpartnerlisting__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEditpartnerlisting";
  } else {
    func.displayName = `PlasmicEditpartnerlisting.${nodeName}`;
  }
  return func;
}

export const PlasmicEditpartnerlisting = Object.assign(
  // Top-level PlasmicEditpartnerlisting renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    editListingSectionParent: makeNodeComponent("editListingSectionParent"),
    navbarInternal: makeNodeComponent("navbarInternal"),
    sectionHeaderEditListing: makeNodeComponent("sectionHeaderEditListing"),
    cardHeaderTitleDisplay: makeNodeComponent("cardHeaderTitleDisplay"),
    sectionEditListing: makeNodeComponent("sectionEditListing"),
    listingEditCategoryFieldsParent: makeNodeComponent(
      "listingEditCategoryFieldsParent"
    ),
    footerB: makeNodeComponent("footerB"),

    // Metadata about props expected for PlasmicEditpartnerlisting
    internalVariantProps: PlasmicEditpartnerlisting__VariantProps,
    internalArgProps: PlasmicEditpartnerlisting__ArgProps
  }
);

export default PlasmicEditpartnerlisting;
/* prettier-ignore-end */
