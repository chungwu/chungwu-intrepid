// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: grn_6puaTZGkCl
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import InputFormCardWebhookConnections from "../../InputFormCardWebhookConnections"; // plasmic-import: xhtqzOQbigz-bm/component
import CardConnectedAccount from "../../CardConnectedAccount"; // plasmic-import: 40diCBROeAR9vl/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicSectionConnectedAccounts.module.css"; // plasmic-import: grn_6puaTZGkCl/css

export type PlasmicSectionConnectedAccounts__VariantMembers = {
  closed: "closed";
  visible: "google" | "facebook";
  border: "border";
};

export type PlasmicSectionConnectedAccounts__VariantsArgs = {
  closed?: SingleBooleanChoiceArg<"closed">;
  visible?: SingleChoiceArg<"google" | "facebook">;
  border?: SingleBooleanChoiceArg<"border">;
};

type VariantPropType = keyof PlasmicSectionConnectedAccounts__VariantsArgs;
export const PlasmicSectionConnectedAccounts__VariantProps =
  new Array<VariantPropType>("closed", "visible", "border");

export type PlasmicSectionConnectedAccounts__ArgsType = {
  headline?: React.ReactNode;
  subhead?: React.ReactNode;
  description?: React.ReactNode;
};

type ArgPropType = keyof PlasmicSectionConnectedAccounts__ArgsType;
export const PlasmicSectionConnectedAccounts__ArgProps = new Array<ArgPropType>(
  "headline",
  "subhead",
  "description"
);

export type PlasmicSectionConnectedAccounts__OverridesType = {
  parent?: p.Flex<"div">;
  personalLoginConnectionAccounts?: p.Flex<
    typeof InputFormCardWebhookConnections
  >;
  personalConnectedGoogleAccount?: p.Flex<typeof CardConnectedAccount>;
  personalConnectedFacebookAccount?: p.Flex<typeof CardConnectedAccount>;
};

export interface DefaultSectionConnectedAccountsProps {
  headline?: React.ReactNode;
  subhead?: React.ReactNode;
  description?: React.ReactNode;
  closed?: SingleBooleanChoiceArg<"closed">;
  visible?: SingleChoiceArg<"google" | "facebook">;
  border?: SingleBooleanChoiceArg<"border">;
  className?: string;
}

function PlasmicSectionConnectedAccounts__RenderFunc(props: {
  variants: PlasmicSectionConnectedAccounts__VariantsArgs;
  args: PlasmicSectionConnectedAccounts__ArgsType;
  overrides: PlasmicSectionConnectedAccounts__OverridesType;
  dataFetches?: PlasmicSectionConnectedAccounts__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"parent"}
      data-plasmic-override={overrides.parent}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.parent, {
        [sty.parent__border]: hasVariant(variants, "border", "border"),
        [sty.parent__closed]: hasVariant(variants, "closed", "closed"),
        [sty.parent__visible_google]: hasVariant(variants, "visible", "google")
      })}
    >
      <InputFormCardWebhookConnections
        data-plasmic-name={"personalLoginConnectionAccounts"}
        data-plasmic-override={overrides.personalLoginConnectionAccounts}
        className={classNames(
          "__wab_instance",
          sty.personalLoginConnectionAccounts
        )}
        description={p.renderPlasmicSlot({
          defaultContents:
            "One login connection can be added per third-party service.",
          value: args.description
        })}
        slot={p.renderPlasmicSlot({
          defaultContents:
            "Connect your social accounts to log in to Intrepid.",
          value: args.subhead
        })}
        subheadDescription={"subheadDescription" as const}
      >
        {p.renderPlasmicSlot({
          defaultContents: "Login Connections",
          value: args.headline
        })}
      </InputFormCardWebhookConnections>

      {(
        hasVariant(variants, "visible", "facebook")
          ? false
          : hasVariant(variants, "closed", "closed")
          ? false
          : true
      ) ? (
        <CardConnectedAccount
          data-plasmic-name={"personalConnectedGoogleAccount"}
          data-plasmic-override={overrides.personalConnectedGoogleAccount}
          className={classNames(
            "__wab_instance",
            sty.personalConnectedGoogleAccount,
            {
              [sty.personalConnectedGoogleAccount__closed]: hasVariant(
                variants,
                "closed",
                "closed"
              ),
              [sty.personalConnectedGoogleAccount__visible_facebook]:
                hasVariant(variants, "visible", "facebook")
            }
          )}
          userFirstname={
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox__uhkvq
              )}
            >
              {"userFirstName"}
            </div>
          }
          userLastName={
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox__n2V6K
              )}
            >
              {"userLastName"}
            </div>
          }
        />
      ) : null}
      {(
        hasVariant(variants, "visible", "google")
          ? false
          : hasVariant(variants, "closed", "closed")
          ? false
          : true
      ) ? (
        <CardConnectedAccount
          data-plasmic-name={"personalConnectedFacebookAccount"}
          data-plasmic-override={overrides.personalConnectedFacebookAccount}
          className={classNames(
            "__wab_instance",
            sty.personalConnectedFacebookAccount,
            {
              [sty.personalConnectedFacebookAccount__closed]: hasVariant(
                variants,
                "closed",
                "closed"
              ),
              [sty.personalConnectedFacebookAccount__visible_facebook]:
                hasVariant(variants, "visible", "facebook"),
              [sty.personalConnectedFacebookAccount__visible_google]:
                hasVariant(variants, "visible", "google")
            }
          )}
          userFirstname={
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox___1ObZu
              )}
            >
              {"userFirstName"}
            </div>
          }
          userLastName={
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox__vWRgt
              )}
            >
              {"userLastName"}
            </div>
          }
        />
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  parent: [
    "parent",
    "personalLoginConnectionAccounts",
    "personalConnectedGoogleAccount",
    "personalConnectedFacebookAccount"
  ],
  personalLoginConnectionAccounts: ["personalLoginConnectionAccounts"],
  personalConnectedGoogleAccount: ["personalConnectedGoogleAccount"],
  personalConnectedFacebookAccount: ["personalConnectedFacebookAccount"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  parent: "div";
  personalLoginConnectionAccounts: typeof InputFormCardWebhookConnections;
  personalConnectedGoogleAccount: typeof CardConnectedAccount;
  personalConnectedFacebookAccount: typeof CardConnectedAccount;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSectionConnectedAccounts__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSectionConnectedAccounts__VariantsArgs;
    args?: PlasmicSectionConnectedAccounts__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicSectionConnectedAccounts__Fetches;
  } & Omit<PlasmicSectionConnectedAccounts__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSectionConnectedAccounts__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSectionConnectedAccounts__ArgProps,
      internalVariantPropNames: PlasmicSectionConnectedAccounts__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicSectionConnectedAccounts__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "parent") {
    func.displayName = "PlasmicSectionConnectedAccounts";
  } else {
    func.displayName = `PlasmicSectionConnectedAccounts.${nodeName}`;
  }
  return func;
}

export const PlasmicSectionConnectedAccounts = Object.assign(
  // Top-level PlasmicSectionConnectedAccounts renders the root element
  makeNodeComponent("parent"),
  {
    // Helper components rendering sub-elements
    personalLoginConnectionAccounts: makeNodeComponent(
      "personalLoginConnectionAccounts"
    ),
    personalConnectedGoogleAccount: makeNodeComponent(
      "personalConnectedGoogleAccount"
    ),
    personalConnectedFacebookAccount: makeNodeComponent(
      "personalConnectedFacebookAccount"
    ),

    // Metadata about props expected for PlasmicSectionConnectedAccounts
    internalVariantProps: PlasmicSectionConnectedAccounts__VariantProps,
    internalArgProps: PlasmicSectionConnectedAccounts__ArgProps
  }
);

export default PlasmicSectionConnectedAccounts;
/* prettier-ignore-end */
