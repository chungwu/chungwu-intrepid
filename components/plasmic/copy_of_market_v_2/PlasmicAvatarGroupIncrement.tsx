// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: _G7vIao-9ZOCHFa
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import UserAvatar from "../../UserAvatar"; // plasmic-import: kWaJrwe3c90GY1/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicAvatarGroupIncrement.module.css"; // plasmic-import: _G7vIao-9ZOCHFa/css

export type PlasmicAvatarGroupIncrement__VariantMembers = {};

export type PlasmicAvatarGroupIncrement__VariantsArgs = {};
type VariantPropType = keyof PlasmicAvatarGroupIncrement__VariantsArgs;
export const PlasmicAvatarGroupIncrement__VariantProps =
  new Array<VariantPropType>();

export type PlasmicAvatarGroupIncrement__ArgsType = {
  number?: React.ReactNode;
};

type ArgPropType = keyof PlasmicAvatarGroupIncrement__ArgsType;
export const PlasmicAvatarGroupIncrement__ArgProps = new Array<ArgPropType>(
  "number"
);

export type PlasmicAvatarGroupIncrement__OverridesType = {
  root?: p.Flex<"div">;
  parent?: p.Flex<"div">;
  avatarParent?: p.Flex<"div">;
  additionalMembers?: p.Flex<"div">;
  numberParent?: p.Flex<"div">;
};

export interface DefaultAvatarGroupIncrementProps {
  number?: React.ReactNode;
  className?: string;
}

function PlasmicAvatarGroupIncrement__RenderFunc(props: {
  variants: PlasmicAvatarGroupIncrement__VariantsArgs;
  args: PlasmicAvatarGroupIncrement__ArgsType;
  overrides: PlasmicAvatarGroupIncrement__OverridesType;
  dataFetches?: PlasmicAvatarGroupIncrement__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"parent"}
        data-plasmic-override={overrides.parent}
        hasGap={true}
        className={classNames(defaultcss.all, sty.parent)}
      >
        <div
          data-plasmic-name={"avatarParent"}
          data-plasmic-override={overrides.avatarParent}
          className={classNames(defaultcss.all, sty.avatarParent)}
        >
          <UserAvatar
            navUserAvatar18={
              <img
                alt={""}
                className={classNames(defaultcss.img, sty.img___9VbiP)}
                role={"img"}
                src={
                  "/plasmic/copy_of_market_v_2/images/peopleCreative3Jpg.jpeg"
                }
              />
            }
            size={"_18" as const}
          />

          <UserAvatar
            className={classNames("__wab_instance", sty.userAvatar__bautd)}
            navUserAvatar18={
              <img
                alt={""}
                className={classNames(defaultcss.img, sty.img__d8Jmg)}
                role={"img"}
                src={"/plasmic/copy_of_market_v_2/images/image32.png"}
              />
            }
            size={"_18" as const}
          />

          <UserAvatar
            className={classNames("__wab_instance", sty.userAvatar__jRb6O)}
            navUserAvatar18={
              <img
                alt={""}
                className={classNames(defaultcss.img, sty.img___4ApW)}
                role={"img"}
                src={
                  "/plasmic/copy_of_market_v_2/images/cesarRinconXhVpWcr5GrQUnsplashjpg.jpeg"
                }
              />
            }
            size={"_18" as const}
          />
        </div>

        <p.Stack
          as={"div"}
          data-plasmic-name={"additionalMembers"}
          data-plasmic-override={overrides.additionalMembers}
          hasGap={true}
          className={classNames(defaultcss.all, sty.additionalMembers)}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox__e4Ivw
            )}
          >
            {"+"}
          </div>

          <div
            data-plasmic-name={"numberParent"}
            data-plasmic-override={overrides.numberParent}
            className={classNames(defaultcss.all, sty.numberParent)}
          >
            <div className={classNames(defaultcss.all, sty.freeBox__zyoLt)}>
              {p.renderPlasmicSlot({
                defaultContents: "#####",
                value: args.number,
                className: classNames(sty.slotNumber)
              })}
            </div>
          </div>
        </p.Stack>
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "parent", "avatarParent", "additionalMembers", "numberParent"],
  parent: ["parent", "avatarParent", "additionalMembers", "numberParent"],
  avatarParent: ["avatarParent"],
  additionalMembers: ["additionalMembers", "numberParent"],
  numberParent: ["numberParent"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  parent: "div";
  avatarParent: "div";
  additionalMembers: "div";
  numberParent: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAvatarGroupIncrement__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAvatarGroupIncrement__VariantsArgs;
    args?: PlasmicAvatarGroupIncrement__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicAvatarGroupIncrement__Fetches;
  } & Omit<PlasmicAvatarGroupIncrement__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAvatarGroupIncrement__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicAvatarGroupIncrement__ArgProps,
      internalVariantPropNames: PlasmicAvatarGroupIncrement__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicAvatarGroupIncrement__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAvatarGroupIncrement";
  } else {
    func.displayName = `PlasmicAvatarGroupIncrement.${nodeName}`;
  }
  return func;
}

export const PlasmicAvatarGroupIncrement = Object.assign(
  // Top-level PlasmicAvatarGroupIncrement renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    parent: makeNodeComponent("parent"),
    avatarParent: makeNodeComponent("avatarParent"),
    additionalMembers: makeNodeComponent("additionalMembers"),
    numberParent: makeNodeComponent("numberParent"),

    // Metadata about props expected for PlasmicAvatarGroupIncrement
    internalVariantProps: PlasmicAvatarGroupIncrement__VariantProps,
    internalArgProps: PlasmicAvatarGroupIncrement__ArgProps
  }
);

export default PlasmicAvatarGroupIncrement;
/* prettier-ignore-end */
