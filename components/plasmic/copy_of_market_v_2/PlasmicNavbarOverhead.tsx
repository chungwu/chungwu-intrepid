// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: nnF88DTLpNW1ku
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavLink from "../../NavLink"; // plasmic-import: XqQQfEEDIGeiz/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: biX3aS42hiG0fF/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicNavbarOverhead.module.css"; // plasmic-import: nnF88DTLpNW1ku/css

export type PlasmicNavbarOverhead__VariantMembers = {
  colors: "primary" | "dark" | "brand";
};

export type PlasmicNavbarOverhead__VariantsArgs = {
  colors?: SingleChoiceArg<"primary" | "dark" | "brand">;
};

type VariantPropType = keyof PlasmicNavbarOverhead__VariantsArgs;
export const PlasmicNavbarOverhead__VariantProps = new Array<VariantPropType>(
  "colors"
);

export type PlasmicNavbarOverhead__ArgsType = {
  destination?: string;
  loginMain?: string;
};

type ArgPropType = keyof PlasmicNavbarOverhead__ArgsType;
export const PlasmicNavbarOverhead__ArgProps = new Array<ArgPropType>(
  "destination",
  "loginMain"
);

export type PlasmicNavbarOverhead__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  memberPricing?: p.Flex<typeof NavLink>;
  partnerPricing?: p.Flex<typeof NavLink>;
  loginMain?: p.Flex<typeof NavLink>;
};

export interface DefaultNavbarOverheadProps {
  destination?: string;
  loginMain?: string;
  colors?: SingleChoiceArg<"primary" | "dark" | "brand">;
  className?: string;
}

function PlasmicNavbarOverhead__RenderFunc(props: {
  variants: PlasmicNavbarOverhead__VariantsArgs;
  args: PlasmicNavbarOverhead__ArgsType;
  overrides: PlasmicNavbarOverhead__OverridesType;
  dataFetches?: PlasmicNavbarOverhead__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__colors_brand]: hasVariant(variants, "colors", "brand"),
        [sty.root__colors_dark]: hasVariant(variants, "colors", "dark")
      })}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        hasGap={true}
        className={classNames(defaultcss.all, sty.freeBox)}
      >
        <NavLink
          data-plasmic-name={"memberPricing"}
          data-plasmic-override={overrides.memberPricing}
          className={classNames("__wab_instance", sty.memberPricing, {
            [sty.memberPricing__colors_brand]: hasVariant(
              variants,
              "colors",
              "brand"
            ),
            [sty.memberPricing__colors_dark]: hasVariant(
              variants,
              "colors",
              "dark"
            )
          })}
          color={
            hasVariant(variants, "colors", "brand")
              ? ("light" as const)
              : hasVariant(variants, "colors", "dark")
              ? ("light" as const)
              : ("primary" as const)
          }
          destination={"/member/pricing" as const}
          linkText={"Members"}
        />

        <NavLink
          data-plasmic-name={"partnerPricing"}
          data-plasmic-override={overrides.partnerPricing}
          className={classNames("__wab_instance", sty.partnerPricing, {
            [sty.partnerPricing__colors_brand]: hasVariant(
              variants,
              "colors",
              "brand"
            ),
            [sty.partnerPricing__colors_dark]: hasVariant(
              variants,
              "colors",
              "dark"
            )
          })}
          color={
            hasVariant(variants, "colors", "brand")
              ? ("light" as const)
              : hasVariant(variants, "colors", "dark")
              ? ("light" as const)
              : ("primary" as const)
          }
          destination={"/partner/pricing" as const}
          linkText={"Partners"}
        />

        {(hasVariant(globalVariants, "screen", "mobile") ? true : true) ? (
          <NavLink
            data-plasmic-name={"loginMain"}
            data-plasmic-override={overrides.loginMain}
            className={classNames("__wab_instance", sty.loginMain, {
              [sty.loginMain__colors_brand]: hasVariant(
                variants,
                "colors",
                "brand"
              ),
              [sty.loginMain__colors_dark]: hasVariant(
                variants,
                "colors",
                "dark"
              )
            })}
            color={
              hasVariant(variants, "colors", "brand")
                ? ("light" as const)
                : hasVariant(variants, "colors", "dark")
                ? ("light" as const)
                : ("primary" as const)
            }
            destination={"/log-in" as const}
            linkText={"Login"}
          />
        ) : null}
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "memberPricing", "partnerPricing", "loginMain"],
  freeBox: ["freeBox", "memberPricing", "partnerPricing", "loginMain"],
  memberPricing: ["memberPricing"],
  partnerPricing: ["partnerPricing"],
  loginMain: ["loginMain"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  memberPricing: typeof NavLink;
  partnerPricing: typeof NavLink;
  loginMain: typeof NavLink;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavbarOverhead__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavbarOverhead__VariantsArgs;
    args?: PlasmicNavbarOverhead__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicNavbarOverhead__Fetches;
  } & Omit<PlasmicNavbarOverhead__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNavbarOverhead__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNavbarOverhead__ArgProps,
      internalVariantPropNames: PlasmicNavbarOverhead__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicNavbarOverhead__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavbarOverhead";
  } else {
    func.displayName = `PlasmicNavbarOverhead.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbarOverhead = Object.assign(
  // Top-level PlasmicNavbarOverhead renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    memberPricing: makeNodeComponent("memberPricing"),
    partnerPricing: makeNodeComponent("partnerPricing"),
    loginMain: makeNodeComponent("loginMain"),

    // Metadata about props expected for PlasmicNavbarOverhead
    internalVariantProps: PlasmicNavbarOverhead__VariantProps,
    internalArgProps: PlasmicNavbarOverhead__ArgProps
  }
);

export default PlasmicNavbarOverhead;
/* prettier-ignore-end */
