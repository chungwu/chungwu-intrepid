// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: L2oSUSfRPT7VO_
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ChipCategoryHeader from "../../ChipCategoryHeader"; // plasmic-import: Mx4HQhNc2W5WKP/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: biX3aS42hiG0fF/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicSectionShopByIndustry.module.css"; // plasmic-import: L2oSUSfRPT7VO_/css

import Icon31Icon from "./icons/PlasmicIcon__Icon31"; // plasmic-import: a8lL9oEuEXhH7lp/icon
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: kBWqdDZE_vCRG-s/icon
import BlockchainsvgIcon from "./icons/PlasmicIcon__Blockchainsvg"; // plasmic-import: zaNu6bUeEexOjAn/icon
import Icon18Icon from "./icons/PlasmicIcon__Icon18"; // plasmic-import: ts3Xj1pDqitI0SN/icon
import Icon25Icon from "./icons/PlasmicIcon__Icon25"; // plasmic-import: ijgJq24xGQUmvCJ/icon
import Icon32Icon from "./icons/PlasmicIcon__Icon32"; // plasmic-import: 6gqZwE5IMa6j4c2/icon
import Icon44Icon from "./icons/PlasmicIcon__Icon44"; // plasmic-import: XIuULjt4hQFKHoe/icon
import ChevronRightIcon from "./icons/PlasmicIcon__ChevronRight"; // plasmic-import: m28uAvImID5kjZn/icon

export type PlasmicSectionShopByIndustry__VariantMembers = {};

export type PlasmicSectionShopByIndustry__VariantsArgs = {};
type VariantPropType = keyof PlasmicSectionShopByIndustry__VariantsArgs;
export const PlasmicSectionShopByIndustry__VariantProps =
  new Array<VariantPropType>();

export type PlasmicSectionShopByIndustry__ArgsType = {};
type ArgPropType = keyof PlasmicSectionShopByIndustry__ArgsType;
export const PlasmicSectionShopByIndustry__ArgProps = new Array<ArgPropType>();

export type PlasmicSectionShopByIndustry__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultSectionShopByIndustryProps {
  className?: string;
}

function PlasmicSectionShopByIndustry__RenderFunc(props: {
  variants: PlasmicSectionShopByIndustry__VariantsArgs;
  args: PlasmicSectionShopByIndustry__ArgsType;
  overrides: PlasmicSectionShopByIndustry__OverridesType;
  dataFetches?: PlasmicSectionShopByIndustry__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div
        className={classNames(
          defaultcss.all,
          defaultcss.__wab_text,
          sty.freeBox__mkOs7
        )}
      >
        {hasVariant(globalVariants, "screen", "mobile")
          ? "Find by Industry"
          : hasVariant(globalVariants, "screen", "desktop")
          ? "Find by Industry"
          : "Shop by Industry"}
      </div>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.freeBox__g8Z6G)}
      >
        <ChipCategoryHeader
          className={classNames(
            "__wab_instance",
            sty.chipCategoryHeader__typ4R
          )}
          size={
            hasVariant(globalVariants, "screen", "mobile")
              ? ("_180" as const)
              : ("_270" as const)
          }
          slot={
            hasVariant(globalVariants, "screen", "desktop")
              ? "E-commerce"
              : "E-commerce development"
          }
        >
          <Icon31Icon
            className={classNames(defaultcss.all, sty.svg__kDou7)}
            role={"img"}
          />
        </ChipCategoryHeader>

        <ChipCategoryHeader
          className={classNames(
            "__wab_instance",
            sty.chipCategoryHeader__yR0RC
          )}
          size={
            hasVariant(globalVariants, "screen", "mobile")
              ? ("_180" as const)
              : ("_270" as const)
          }
          slot={"Video"}
        >
          <Icon11Icon
            className={classNames(defaultcss.all, sty.svg__iL69R)}
            role={"img"}
          />
        </ChipCategoryHeader>

        <ChipCategoryHeader
          className={classNames(
            "__wab_instance",
            sty.chipCategoryHeader___1SZe
          )}
          size={
            hasVariant(globalVariants, "screen", "mobile")
              ? ("_180" as const)
              : ("_270" as const)
          }
          slot={"Blockchain"}
        >
          <BlockchainsvgIcon
            className={classNames(defaultcss.all, sty.svg___2LlTg)}
            role={"img"}
          />
        </ChipCategoryHeader>

        <ChipCategoryHeader
          className={classNames(
            "__wab_instance",
            sty.chipCategoryHeader__dv2Br
          )}
          size={
            hasVariant(globalVariants, "screen", "mobile")
              ? ("_180" as const)
              : ("_270" as const)
          }
          slot={"Health"}
        >
          <Icon18Icon
            className={classNames(defaultcss.all, sty.svg__bpmXv)}
            role={"img"}
          />
        </ChipCategoryHeader>

        <ChipCategoryHeader
          className={classNames(
            "__wab_instance",
            sty.chipCategoryHeader__yH6X0
          )}
          size={
            hasVariant(globalVariants, "screen", "mobile")
              ? ("_180" as const)
              : ("_270" as const)
          }
          slot={"FinTech"}
        >
          <Icon25Icon
            className={classNames(defaultcss.all, sty.svg__cneVt)}
            role={"img"}
          />
        </ChipCategoryHeader>

        <ChipCategoryHeader
          className={classNames(
            "__wab_instance",
            sty.chipCategoryHeader__fwQfr
          )}
          size={
            hasVariant(globalVariants, "screen", "mobile")
              ? ("_180" as const)
              : ("_270" as const)
          }
          slot={"Insurance"}
        >
          <Icon32Icon
            className={classNames(defaultcss.all, sty.svg__miFSg)}
            role={"img"}
          />
        </ChipCategoryHeader>

        <ChipCategoryHeader
          className={classNames(
            "__wab_instance",
            sty.chipCategoryHeader__bfCud
          )}
          size={
            hasVariant(globalVariants, "screen", "mobile")
              ? ("_180" as const)
              : ("_270" as const)
          }
          slot={"Cloud"}
        >
          <Icon44Icon
            className={classNames(defaultcss.all, sty.svg__zB26N)}
            role={"img"}
          />
        </ChipCategoryHeader>

        <ChipCategoryHeader
          className={classNames(
            "__wab_instance",
            sty.chipCategoryHeader__tl6Dt
          )}
          size={
            hasVariant(globalVariants, "screen", "mobile")
              ? ("_180" as const)
              : ("_270" as const)
          }
          slot={"View all industries"}
        />
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSectionShopByIndustry__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSectionShopByIndustry__VariantsArgs;
    args?: PlasmicSectionShopByIndustry__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicSectionShopByIndustry__Fetches;
  } & Omit<PlasmicSectionShopByIndustry__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSectionShopByIndustry__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSectionShopByIndustry__ArgProps,
      internalVariantPropNames: PlasmicSectionShopByIndustry__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicSectionShopByIndustry__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSectionShopByIndustry";
  } else {
    func.displayName = `PlasmicSectionShopByIndustry.${nodeName}`;
  }
  return func;
}

export const PlasmicSectionShopByIndustry = Object.assign(
  // Top-level PlasmicSectionShopByIndustry renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicSectionShopByIndustry
    internalVariantProps: PlasmicSectionShopByIndustry__VariantProps,
    internalArgProps: PlasmicSectionShopByIndustry__ArgProps
  }
);

export default PlasmicSectionShopByIndustry;
/* prettier-ignore-end */
