// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: QYkl57rOnjSIZTZ
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicTablePricingPriceDisplay.module.css"; // plasmic-import: QYkl57rOnjSIZTZ/css

export type PlasmicTablePricingPriceDisplay__VariantMembers = {};

export type PlasmicTablePricingPriceDisplay__VariantsArgs = {};
type VariantPropType = keyof PlasmicTablePricingPriceDisplay__VariantsArgs;
export const PlasmicTablePricingPriceDisplay__VariantProps =
  new Array<VariantPropType>();

export type PlasmicTablePricingPriceDisplay__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  slot4?: React.ReactNode;
};

type ArgPropType = keyof PlasmicTablePricingPriceDisplay__ArgsType;
export const PlasmicTablePricingPriceDisplay__ArgProps = new Array<ArgPropType>(
  "children",
  "slot",
  "slot2",
  "slot3",
  "slot4"
);

export type PlasmicTablePricingPriceDisplay__OverridesType = {
  root?: p.Flex<"div">;
  elementNumberValueIntervalTermParent?: p.Flex<"div">;
  descriptionTextParent?: p.Flex<"div">;
};

export interface DefaultTablePricingPriceDisplayProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  slot4?: React.ReactNode;
  className?: string;
}

function PlasmicTablePricingPriceDisplay__RenderFunc(props: {
  variants: PlasmicTablePricingPriceDisplay__VariantsArgs;
  args: PlasmicTablePricingPriceDisplay__ArgsType;
  overrides: PlasmicTablePricingPriceDisplay__OverridesType;
  dataFetches?: PlasmicTablePricingPriceDisplay__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div className={classNames(defaultcss.all, sty.freeBox__wtsA7)}>
        <div className={classNames(defaultcss.all, sty.freeBox__csk1I)}>
          {p.renderPlasmicSlot({
            defaultContents: "Membership",
            value: args.children,
            className: classNames(sty.slotChildren)
          })}
        </div>
      </div>

      <p.Stack
        as={"div"}
        data-plasmic-name={"elementNumberValueIntervalTermParent"}
        data-plasmic-override={overrides.elementNumberValueIntervalTermParent}
        hasGap={true}
        className={classNames(
          defaultcss.all,
          sty.elementNumberValueIntervalTermParent
        )}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.freeBox__xOl59)}
        >
          <div className={classNames(defaultcss.all, sty.freeBox__vAu1)}>
            <div className={classNames(defaultcss.all, sty.freeBox__iKcZ)}>
              {p.renderPlasmicSlot({
                defaultContents: "$",
                value: args.slot2,
                className: classNames(sty.slotSlot2)
              })}
            </div>
          </div>

          <div className={classNames(defaultcss.all, sty.freeBox__zr23N)}>
            <div className={classNames(defaultcss.all, sty.freeBox__m73E8)}>
              {p.renderPlasmicSlot({
                defaultContents: "50",
                value: args.slot3,
                className: classNames(sty.slotSlot3)
              })}
            </div>
          </div>

          <div className={classNames(defaultcss.all, sty.freeBox__iA9NH)}>
            <div className={classNames(defaultcss.all, sty.freeBox__gi73)}>
              {p.renderPlasmicSlot({
                defaultContents: "/year",
                value: args.slot4,
                className: classNames(sty.slotSlot4)
              })}
            </div>
          </div>
        </p.Stack>

        <div
          data-plasmic-name={"descriptionTextParent"}
          data-plasmic-override={overrides.descriptionTextParent}
          className={classNames(defaultcss.all, sty.descriptionTextParent)}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Description",
            value: args.slot,
            className: classNames(sty.slotSlot)
          })}
        </div>
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "elementNumberValueIntervalTermParent",
    "descriptionTextParent"
  ],
  elementNumberValueIntervalTermParent: [
    "elementNumberValueIntervalTermParent",
    "descriptionTextParent"
  ],
  descriptionTextParent: ["descriptionTextParent"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  elementNumberValueIntervalTermParent: "div";
  descriptionTextParent: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTablePricingPriceDisplay__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTablePricingPriceDisplay__VariantsArgs;
    args?: PlasmicTablePricingPriceDisplay__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicTablePricingPriceDisplay__Fetches;
  } & Omit<PlasmicTablePricingPriceDisplay__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTablePricingPriceDisplay__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTablePricingPriceDisplay__ArgProps,
      internalVariantPropNames: PlasmicTablePricingPriceDisplay__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicTablePricingPriceDisplay__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTablePricingPriceDisplay";
  } else {
    func.displayName = `PlasmicTablePricingPriceDisplay.${nodeName}`;
  }
  return func;
}

export const PlasmicTablePricingPriceDisplay = Object.assign(
  // Top-level PlasmicTablePricingPriceDisplay renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    elementNumberValueIntervalTermParent: makeNodeComponent(
      "elementNumberValueIntervalTermParent"
    ),
    descriptionTextParent: makeNodeComponent("descriptionTextParent"),

    // Metadata about props expected for PlasmicTablePricingPriceDisplay
    internalVariantProps: PlasmicTablePricingPriceDisplay__VariantProps,
    internalArgProps: PlasmicTablePricingPriceDisplay__ArgProps
  }
);

export default PlasmicTablePricingPriceDisplay;
/* prettier-ignore-end */
