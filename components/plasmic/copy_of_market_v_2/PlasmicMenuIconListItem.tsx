// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: A4cpU1IW2YGn9yX
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicMenuIconListItem.module.css"; // plasmic-import: A4cpU1IW2YGn9yX/css

import OptionalFixedBrandColorIcon from "./icons/PlasmicIcon__OptionalFixedBrandColor"; // plasmic-import: HqXIfXOrfprzYd9/icon

export type PlasmicMenuIconListItem__VariantMembers = {
  disabled: "disabled";
};

export type PlasmicMenuIconListItem__VariantsArgs = {
  disabled?: SingleBooleanChoiceArg<"disabled">;
};

type VariantPropType = keyof PlasmicMenuIconListItem__VariantsArgs;
export const PlasmicMenuIconListItem__VariantProps = new Array<VariantPropType>(
  "disabled"
);

export type PlasmicMenuIconListItem__ArgsType = {
  navText?: React.ReactNode;
  navIcon?: React.ReactNode;
  target?: string;
};

type ArgPropType = keyof PlasmicMenuIconListItem__ArgsType;
export const PlasmicMenuIconListItem__ArgProps = new Array<ArgPropType>(
  "navText",
  "navIcon",
  "target"
);

export type PlasmicMenuIconListItem__OverridesType = {
  menuIconListItemLink?: p.Flex<"a"> & Partial<LinkProps>;
  sideBarNavCardLinkParent?: p.Flex<"a"> & Partial<LinkProps>;
  iconTextParent?: p.Flex<"div">;
  navTextParent?: p.Flex<"div">;
};

export interface DefaultMenuIconListItemProps {
  navText?: React.ReactNode;
  navIcon?: React.ReactNode;
  target?: string;
  disabled?: SingleBooleanChoiceArg<"disabled">;
  className?: string;
}

function PlasmicMenuIconListItem__RenderFunc(props: {
  variants: PlasmicMenuIconListItem__VariantsArgs;
  args: PlasmicMenuIconListItem__ArgsType;
  overrides: PlasmicMenuIconListItem__OverridesType;
  dataFetches?: PlasmicMenuIconListItem__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.PlasmicLink
      data-plasmic-name={"menuIconListItemLink"}
      data-plasmic-override={overrides.menuIconListItemLink}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        defaultcss.all,
        projectcss.root_reset,
        sty.menuIconListItemLink,
        {
          [sty.menuIconListItemLink__disabled]: hasVariant(
            variants,
            "disabled",
            "disabled"
          )
        }
      )}
      component={Link}
      platform={"nextjs"}
    >
      <p.Stack
        as={p.PlasmicLink}
        data-plasmic-name={"sideBarNavCardLinkParent"}
        data-plasmic-override={overrides.sideBarNavCardLinkParent}
        hasGap={true}
        className={classNames(defaultcss.all, sty.sideBarNavCardLinkParent, {
          [sty.sideBarNavCardLinkParent__disabled]: hasVariant(
            variants,
            "disabled",
            "disabled"
          )
        })}
        component={Link}
        platform={"nextjs"}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"iconTextParent"}
          data-plasmic-override={overrides.iconTextParent}
          hasGap={true}
          className={classNames(defaultcss.all, sty.iconTextParent)}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <div className={classNames(defaultcss.all, sty.freeBox___3AMo4)}>
                <OptionalFixedBrandColorIcon
                  className={classNames(defaultcss.all, sty.svg__tAuUd)}
                  role={"img"}
                />
              </div>
            ),

            value: args.navIcon,
            className: classNames(sty.slotNavIcon, {
              [sty.slotNavIcon__disabled]: hasVariant(
                variants,
                "disabled",
                "disabled"
              )
            })
          })}

          <div
            data-plasmic-name={"navTextParent"}
            data-plasmic-override={overrides.navTextParent}
            className={classNames(defaultcss.all, sty.navTextParent)}
          >
            {p.renderPlasmicSlot({
              defaultContents: "Item",
              value: args.navText,
              className: classNames(sty.slotNavText, {
                [sty.slotNavText__disabled]: hasVariant(
                  variants,
                  "disabled",
                  "disabled"
                )
              })
            })}
          </div>
        </p.Stack>
      </p.Stack>
    </p.PlasmicLink>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  menuIconListItemLink: [
    "menuIconListItemLink",
    "sideBarNavCardLinkParent",
    "iconTextParent",
    "navTextParent"
  ],
  sideBarNavCardLinkParent: [
    "sideBarNavCardLinkParent",
    "iconTextParent",
    "navTextParent"
  ],
  iconTextParent: ["iconTextParent", "navTextParent"],
  navTextParent: ["navTextParent"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  menuIconListItemLink: "a";
  sideBarNavCardLinkParent: "a";
  iconTextParent: "div";
  navTextParent: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMenuIconListItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMenuIconListItem__VariantsArgs;
    args?: PlasmicMenuIconListItem__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicMenuIconListItem__Fetches;
  } & Omit<PlasmicMenuIconListItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMenuIconListItem__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicMenuIconListItem__ArgProps,
      internalVariantPropNames: PlasmicMenuIconListItem__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicMenuIconListItem__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "menuIconListItemLink") {
    func.displayName = "PlasmicMenuIconListItem";
  } else {
    func.displayName = `PlasmicMenuIconListItem.${nodeName}`;
  }
  return func;
}

export const PlasmicMenuIconListItem = Object.assign(
  // Top-level PlasmicMenuIconListItem renders the root element
  makeNodeComponent("menuIconListItemLink"),
  {
    // Helper components rendering sub-elements
    sideBarNavCardLinkParent: makeNodeComponent("sideBarNavCardLinkParent"),
    iconTextParent: makeNodeComponent("iconTextParent"),
    navTextParent: makeNodeComponent("navTextParent"),

    // Metadata about props expected for PlasmicMenuIconListItem
    internalVariantProps: PlasmicMenuIconListItem__VariantProps,
    internalArgProps: PlasmicMenuIconListItem__ArgProps
  }
);

export default PlasmicMenuIconListItem;
/* prettier-ignore-end */
