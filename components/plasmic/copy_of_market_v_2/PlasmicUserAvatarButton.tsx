// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: S6be1w_HeX7JCB
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicUserAvatarButton.module.css"; // plasmic-import: S6be1w_HeX7JCB/css

export type PlasmicUserAvatarButton__VariantMembers = {
  size: "_80Px" | "_64Px" | "_48Px" | "_40Px" | "_32Px" | "_24Px" | "_16Px";
};

export type PlasmicUserAvatarButton__VariantsArgs = {
  size?: SingleChoiceArg<
    "_80Px" | "_64Px" | "_48Px" | "_40Px" | "_32Px" | "_24Px" | "_16Px"
  >;
};

type VariantPropType = keyof PlasmicUserAvatarButton__VariantsArgs;
export const PlasmicUserAvatarButton__VariantProps = new Array<VariantPropType>(
  "size"
);

export type PlasmicUserAvatarButton__ArgsType = {
  avatarImage?: React.ReactNode;
};

type ArgPropType = keyof PlasmicUserAvatarButton__ArgsType;
export const PlasmicUserAvatarButton__ArgProps = new Array<ArgPropType>(
  "avatarImage"
);

export type PlasmicUserAvatarButton__OverridesType = {
  avatarButtonEdit?: p.Flex<"button">;
  avatarImageBackground?: p.Flex<"div">;
};

export interface DefaultUserAvatarButtonProps {
  avatarImage?: React.ReactNode;
  size?: SingleChoiceArg<
    "_80Px" | "_64Px" | "_48Px" | "_40Px" | "_32Px" | "_24Px" | "_16Px"
  >;
  className?: string;
}

function PlasmicUserAvatarButton__RenderFunc(props: {
  variants: PlasmicUserAvatarButton__VariantsArgs;
  args: PlasmicUserAvatarButton__ArgsType;
  overrides: PlasmicUserAvatarButton__OverridesType;
  dataFetches?: PlasmicUserAvatarButton__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <button
      data-plasmic-name={"avatarButtonEdit"}
      data-plasmic-override={overrides.avatarButtonEdit}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        defaultcss.button,
        projectcss.root_reset,
        sty.avatarButtonEdit,
        {
          [sty.avatarButtonEdit__size__16Px]: hasVariant(
            variants,
            "size",
            "_16Px"
          ),
          [sty.avatarButtonEdit__size__24Px]: hasVariant(
            variants,
            "size",
            "_24Px"
          ),
          [sty.avatarButtonEdit__size__32Px]: hasVariant(
            variants,
            "size",
            "_32Px"
          ),
          [sty.avatarButtonEdit__size__40Px]: hasVariant(
            variants,
            "size",
            "_40Px"
          ),
          [sty.avatarButtonEdit__size__48Px]: hasVariant(
            variants,
            "size",
            "_48Px"
          ),
          [sty.avatarButtonEdit__size__64Px]: hasVariant(
            variants,
            "size",
            "_64Px"
          ),
          [sty.avatarButtonEdit__size__80Px]: hasVariant(
            variants,
            "size",
            "_80Px"
          )
        }
      )}
    >
      <div
        data-plasmic-name={"avatarImageBackground"}
        data-plasmic-override={overrides.avatarImageBackground}
        className={classNames(defaultcss.all, sty.avatarImageBackground, {
          [sty.avatarImageBackground__size__40Px]: hasVariant(
            variants,
            "size",
            "_40Px"
          ),
          [sty.avatarImageBackground__size__80Px]: hasVariant(
            variants,
            "size",
            "_80Px"
          )
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <img
              alt={""}
              className={classNames(defaultcss.img, sty.img__h6F2S)}
              role={"img"}
              src={"/plasmic/copy_of_market_v_2/images/image4.png"}
            />
          ),

          value: args.avatarImage,
          className: classNames(sty.slotAvatarImage, {
            [sty.slotAvatarImage__size__80Px]: hasVariant(
              variants,
              "size",
              "_80Px"
            )
          })
        })}
      </div>
    </button>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  avatarButtonEdit: ["avatarButtonEdit", "avatarImageBackground"],
  avatarImageBackground: ["avatarImageBackground"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  avatarButtonEdit: "button";
  avatarImageBackground: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicUserAvatarButton__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicUserAvatarButton__VariantsArgs;
    args?: PlasmicUserAvatarButton__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicUserAvatarButton__Fetches;
  } & Omit<PlasmicUserAvatarButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicUserAvatarButton__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicUserAvatarButton__ArgProps,
      internalVariantPropNames: PlasmicUserAvatarButton__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicUserAvatarButton__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "avatarButtonEdit") {
    func.displayName = "PlasmicUserAvatarButton";
  } else {
    func.displayName = `PlasmicUserAvatarButton.${nodeName}`;
  }
  return func;
}

export const PlasmicUserAvatarButton = Object.assign(
  // Top-level PlasmicUserAvatarButton renders the root element
  makeNodeComponent("avatarButtonEdit"),
  {
    // Helper components rendering sub-elements
    avatarImageBackground: makeNodeComponent("avatarImageBackground"),

    // Metadata about props expected for PlasmicUserAvatarButton
    internalVariantProps: PlasmicUserAvatarButton__VariantProps,
    internalArgProps: PlasmicUserAvatarButton__ArgProps
  }
);

export default PlasmicUserAvatarButton;
/* prettier-ignore-end */
