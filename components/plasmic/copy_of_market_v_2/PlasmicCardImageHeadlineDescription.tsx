// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: Z97-BR6RPlDzUhI
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ImagePrimary from "../../ImagePrimary"; // plasmic-import: r4bT63FKybDWVF/component
import TextLinkUnderlinePrimary from "../../TextLinkUnderlinePrimary"; // plasmic-import: 6pY-cK_-KJMdF_/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicCardImageHeadlineDescription.module.css"; // plasmic-import: Z97-BR6RPlDzUhI/css

export type PlasmicCardImageHeadlineDescription__VariantMembers = {
  description: "description";
  size: "_360X360" | "_270X270";
};

export type PlasmicCardImageHeadlineDescription__VariantsArgs = {
  description?: SingleBooleanChoiceArg<"description">;
  size?: SingleChoiceArg<"_360X360" | "_270X270">;
};

type VariantPropType = keyof PlasmicCardImageHeadlineDescription__VariantsArgs;
export const PlasmicCardImageHeadlineDescription__VariantProps =
  new Array<VariantPropType>("description", "size");

export type PlasmicCardImageHeadlineDescription__ArgsType = {
  textLinkHeadlineParent?: React.ReactNode;
  subheadParent?: React.ReactNode;
  _360X360?: React.ReactNode;
  _270X270?: React.ReactNode;
};

type ArgPropType = keyof PlasmicCardImageHeadlineDescription__ArgsType;
export const PlasmicCardImageHeadlineDescription__ArgProps =
  new Array<ArgPropType>(
    "textLinkHeadlineParent",
    "subheadParent",
    "_360X360",
    "_270X270"
  );

export type PlasmicCardImageHeadlineDescription__OverridesType = {
  root?: p.Flex<"div">;
  imageParent?: p.Flex<"div">;
  imagePrimary?: p.Flex<typeof ImagePrimary>;
  textLinkHeadlineParent?: p.Flex<"div">;
  subheadParent?: p.Flex<"div">;
};

export interface DefaultCardImageHeadlineDescriptionProps {
  textLinkHeadlineParent?: React.ReactNode;
  subheadParent?: React.ReactNode;
  _360X360?: React.ReactNode;
  _270X270?: React.ReactNode;
  description?: SingleBooleanChoiceArg<"description">;
  size?: SingleChoiceArg<"_360X360" | "_270X270">;
  className?: string;
}

function PlasmicCardImageHeadlineDescription__RenderFunc(props: {
  variants: PlasmicCardImageHeadlineDescription__VariantsArgs;
  args: PlasmicCardImageHeadlineDescription__ArgsType;
  overrides: PlasmicCardImageHeadlineDescription__OverridesType;
  dataFetches?: PlasmicCardImageHeadlineDescription__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__size__270X270]: hasVariant(variants, "size", "_270X270"),
        [sty.root__size__360X360]: hasVariant(variants, "size", "_360X360")
      })}
    >
      <div
        data-plasmic-name={"imageParent"}
        data-plasmic-override={overrides.imageParent}
        className={classNames(defaultcss.all, sty.imageParent, {
          [sty.imageParent__size__270X270]: hasVariant(
            variants,
            "size",
            "_270X270"
          )
        })}
      >
        <ImagePrimary
          data-plasmic-name={"imagePrimary"}
          data-plasmic-override={overrides.imagePrimary}
          _11={
            hasVariant(variants, "size", "_270X270")
              ? ("_270X270" as const)
              : ("_360X360" as const)
          }
          _270X270={
            <React.Fragment>
              {false ? (
                <img
                  alt={""}
                  className={classNames(defaultcss.img, sty.img__eA05P)}
                  role={"img"}
                  src={
                    "https://craftypixels.com/placeholder-image/40x40/f8f8f8/333333" as const
                  }
                />
              ) : null}
              {p.renderPlasmicSlot({
                defaultContents: (
                  <img
                    alt={""}
                    className={classNames(defaultcss.img, sty.img__pdNfO)}
                    role={"img"}
                    src={
                      "https://craftypixels.com/placeholder-image/270x270/f8f8f8/333333" as const
                    }
                  />
                ),

                value: args._270X270
              })}
            </React.Fragment>
          }
          _360X360={
            <React.Fragment>
              {false ? (
                <img
                  alt={""}
                  className={classNames(defaultcss.img, sty.img___1Ss0)}
                  role={"img"}
                  src={
                    "https://craftypixels.com/placeholder-image/40x40/f8f8f8/333333" as const
                  }
                />
              ) : null}
              {p.renderPlasmicSlot({
                defaultContents: (
                  <img
                    alt={""}
                    className={classNames(defaultcss.img, sty.img__cCos)}
                    role={"img"}
                    src={
                      "https://craftypixels.com/placeholder-image/360x360/f8f8f8/333333" as const
                    }
                  />
                ),

                value: args._360X360
              })}
            </React.Fragment>
          }
        />
      </div>

      <div
        data-plasmic-name={"textLinkHeadlineParent"}
        data-plasmic-override={overrides.textLinkHeadlineParent}
        className={classNames(defaultcss.all, sty.textLinkHeadlineParent, {
          [sty.textLinkHeadlineParent__size__270X270]: hasVariant(
            variants,
            "size",
            "_270X270"
          ),
          [sty.textLinkHeadlineParent__size__360X360]: hasVariant(
            variants,
            "size",
            "_360X360"
          )
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <TextLinkUnderlinePrimary
              color={"headline" as const}
              size={"_24" as const}
              text={
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__omNUo
                  )}
                >
                  {"Text link Headline"}
                </div>
              }
            />
          ),

          value: args.textLinkHeadlineParent
        })}
      </div>

      <div
        data-plasmic-name={"subheadParent"}
        data-plasmic-override={overrides.subheadParent}
        className={classNames(defaultcss.all, sty.subheadParent, {
          [sty.subheadParent__description]: hasVariant(
            variants,
            "description",
            "description"
          ),
          [sty.subheadParent__size__270X270]: hasVariant(
            variants,
            "size",
            "_270X270"
          ),
          [sty.subheadParent__size__360X360]: hasVariant(
            variants,
            "size",
            "_360X360"
          )
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox__nMqS
              )}
            >
              {"Subhead description"}
            </div>
          ),

          value: args.subheadParent
        })}
      </div>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "imageParent",
    "imagePrimary",
    "textLinkHeadlineParent",
    "subheadParent"
  ],
  imageParent: ["imageParent", "imagePrimary"],
  imagePrimary: ["imagePrimary"],
  textLinkHeadlineParent: ["textLinkHeadlineParent"],
  subheadParent: ["subheadParent"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  imageParent: "div";
  imagePrimary: typeof ImagePrimary;
  textLinkHeadlineParent: "div";
  subheadParent: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCardImageHeadlineDescription__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCardImageHeadlineDescription__VariantsArgs;
    args?: PlasmicCardImageHeadlineDescription__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicCardImageHeadlineDescription__Fetches;
  } & Omit< // Specify variants directly as props
    PlasmicCardImageHeadlineDescription__VariantsArgs,
    ReservedPropsType
  > &
    // Specify args directly as props
    Omit<PlasmicCardImageHeadlineDescription__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCardImageHeadlineDescription__ArgProps,
      internalVariantPropNames:
        PlasmicCardImageHeadlineDescription__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicCardImageHeadlineDescription__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCardImageHeadlineDescription";
  } else {
    func.displayName = `PlasmicCardImageHeadlineDescription.${nodeName}`;
  }
  return func;
}

export const PlasmicCardImageHeadlineDescription = Object.assign(
  // Top-level PlasmicCardImageHeadlineDescription renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    imageParent: makeNodeComponent("imageParent"),
    imagePrimary: makeNodeComponent("imagePrimary"),
    textLinkHeadlineParent: makeNodeComponent("textLinkHeadlineParent"),
    subheadParent: makeNodeComponent("subheadParent"),

    // Metadata about props expected for PlasmicCardImageHeadlineDescription
    internalVariantProps: PlasmicCardImageHeadlineDescription__VariantProps,
    internalArgProps: PlasmicCardImageHeadlineDescription__ArgProps
  }
);

export default PlasmicCardImageHeadlineDescription;
/* prettier-ignore-end */
