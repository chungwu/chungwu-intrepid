// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: _1lDuzbqoV4zJL
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import SwitchTextPrimary from "../../SwitchTextPrimary"; // plasmic-import: 1YLOvKMBJewwix/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicSwitchTextGroupPrimary.module.css"; // plasmic-import: _1lDuzbqoV4zJL/css

export type PlasmicSwitchTextGroupPrimary__VariantMembers = {};

export type PlasmicSwitchTextGroupPrimary__VariantsArgs = {};
type VariantPropType = keyof PlasmicSwitchTextGroupPrimary__VariantsArgs;
export const PlasmicSwitchTextGroupPrimary__VariantProps =
  new Array<VariantPropType>();

export type PlasmicSwitchTextGroupPrimary__ArgsType = {
  descriptionText?: React.ReactNode;
  textGroup?: React.ReactNode;
};

type ArgPropType = keyof PlasmicSwitchTextGroupPrimary__ArgsType;
export const PlasmicSwitchTextGroupPrimary__ArgProps = new Array<ArgPropType>(
  "descriptionText",
  "textGroup"
);

export type PlasmicSwitchTextGroupPrimary__OverridesType = {
  root?: p.Flex<"div">;
  switchTextPrimary?: p.Flex<typeof SwitchTextPrimary>;
  freeBox?: p.Flex<"div">;
  descriptionTextParent?: p.Flex<"div">;
  descriptionSlotParent?: p.Flex<"div">;
};

export interface DefaultSwitchTextGroupPrimaryProps {
  descriptionText?: React.ReactNode;
  textGroup?: React.ReactNode;
  className?: string;
}

function PlasmicSwitchTextGroupPrimary__RenderFunc(props: {
  variants: PlasmicSwitchTextGroupPrimary__VariantsArgs;
  args: PlasmicSwitchTextGroupPrimary__ArgsType;
  overrides: PlasmicSwitchTextGroupPrimary__OverridesType;
  dataFetches?: PlasmicSwitchTextGroupPrimary__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <SwitchTextPrimary
        data-plasmic-name={"switchTextPrimary"}
        data-plasmic-override={overrides.switchTextPrimary}
        className={classNames("__wab_instance", sty.switchTextPrimary)}
        text={p.renderPlasmicSlot({
          defaultContents: "Enter some text",
          value: args.textGroup
        })}
      />

      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(defaultcss.all, sty.freeBox)}
      >
        <div
          data-plasmic-name={"descriptionTextParent"}
          data-plasmic-override={overrides.descriptionTextParent}
          className={classNames(defaultcss.all, sty.descriptionTextParent)}
        >
          <div
            data-plasmic-name={"descriptionSlotParent"}
            data-plasmic-override={overrides.descriptionSlotParent}
            className={classNames(defaultcss.all, sty.descriptionSlotParent)}
          >
            {p.renderPlasmicSlot({
              defaultContents: "Description",
              value: args.descriptionText,
              className: classNames(sty.slotDescriptionText)
            })}
          </div>
        </div>
      </div>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "switchTextPrimary",
    "freeBox",
    "descriptionTextParent",
    "descriptionSlotParent"
  ],
  switchTextPrimary: ["switchTextPrimary"],
  freeBox: ["freeBox", "descriptionTextParent", "descriptionSlotParent"],
  descriptionTextParent: ["descriptionTextParent", "descriptionSlotParent"],
  descriptionSlotParent: ["descriptionSlotParent"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  switchTextPrimary: typeof SwitchTextPrimary;
  freeBox: "div";
  descriptionTextParent: "div";
  descriptionSlotParent: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSwitchTextGroupPrimary__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSwitchTextGroupPrimary__VariantsArgs;
    args?: PlasmicSwitchTextGroupPrimary__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicSwitchTextGroupPrimary__Fetches;
  } & Omit<PlasmicSwitchTextGroupPrimary__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSwitchTextGroupPrimary__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSwitchTextGroupPrimary__ArgProps,
      internalVariantPropNames: PlasmicSwitchTextGroupPrimary__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicSwitchTextGroupPrimary__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSwitchTextGroupPrimary";
  } else {
    func.displayName = `PlasmicSwitchTextGroupPrimary.${nodeName}`;
  }
  return func;
}

export const PlasmicSwitchTextGroupPrimary = Object.assign(
  // Top-level PlasmicSwitchTextGroupPrimary renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    switchTextPrimary: makeNodeComponent("switchTextPrimary"),
    freeBox: makeNodeComponent("freeBox"),
    descriptionTextParent: makeNodeComponent("descriptionTextParent"),
    descriptionSlotParent: makeNodeComponent("descriptionSlotParent"),

    // Metadata about props expected for PlasmicSwitchTextGroupPrimary
    internalVariantProps: PlasmicSwitchTextGroupPrimary__VariantProps,
    internalArgProps: PlasmicSwitchTextGroupPrimary__ArgProps
  }
);

export default PlasmicSwitchTextGroupPrimary;
/* prettier-ignore-end */
