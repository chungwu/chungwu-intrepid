// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: -MQQi4eWrKtoHRO
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicInputTextAreaPrimary.module.css"; // plasmic-import: -MQQi4eWrKtoHRO/css

export type PlasmicInputTextAreaPrimary__VariantMembers = {
  type: "primary" | "secondary";
  width: "_90" | "_180" | "_270" | "_360" | "_540" | "_720";
  height: "_90" | "_180" | "_270" | "_360" | "_540" | "_720";
};

export type PlasmicInputTextAreaPrimary__VariantsArgs = {
  type?: SingleChoiceArg<"primary" | "secondary">;
  width?: SingleChoiceArg<"_90" | "_180" | "_270" | "_360" | "_540" | "_720">;
  height?: SingleChoiceArg<"_90" | "_180" | "_270" | "_360" | "_540" | "_720">;
};

type VariantPropType = keyof PlasmicInputTextAreaPrimary__VariantsArgs;
export const PlasmicInputTextAreaPrimary__VariantProps =
  new Array<VariantPropType>("type", "width", "height");

export type PlasmicInputTextAreaPrimary__ArgsType = {
  placeholder?: string;
};

type ArgPropType = keyof PlasmicInputTextAreaPrimary__ArgsType;
export const PlasmicInputTextAreaPrimary__ArgProps = new Array<ArgPropType>(
  "placeholder"
);

export type PlasmicInputTextAreaPrimary__OverridesType = {
  root?: p.Flex<"div">;
  parent?: p.Flex<"div">;
  textarea?: p.Flex<"textarea">;
};

export interface DefaultInputTextAreaPrimaryProps {
  placeholder?: string;
  type?: SingleChoiceArg<"primary" | "secondary">;
  width?: SingleChoiceArg<"_90" | "_180" | "_270" | "_360" | "_540" | "_720">;
  height?: SingleChoiceArg<"_90" | "_180" | "_270" | "_360" | "_540" | "_720">;
  className?: string;
}

function PlasmicInputTextAreaPrimary__RenderFunc(props: {
  variants: PlasmicInputTextAreaPrimary__VariantsArgs;
  args: PlasmicInputTextAreaPrimary__ArgsType;
  overrides: PlasmicInputTextAreaPrimary__OverridesType;
  dataFetches?: PlasmicInputTextAreaPrimary__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    (hasVariant(variants, "height", "_720") ? true : true) ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
          [sty.root__height__720]: hasVariant(variants, "height", "_720"),
          [sty.root__type_secondary]: hasVariant(variants, "type", "secondary")
        })}
      >
        <div
          data-plasmic-name={"parent"}
          data-plasmic-override={overrides.parent}
          className={classNames(defaultcss.all, sty.parent, {
            [sty.parent__height__180]: hasVariant(variants, "height", "_180"),
            [sty.parent__height__270]: hasVariant(variants, "height", "_270"),
            [sty.parent__height__360]: hasVariant(variants, "height", "_360"),
            [sty.parent__height__540]: hasVariant(variants, "height", "_540"),
            [sty.parent__height__720]: hasVariant(variants, "height", "_720"),
            [sty.parent__height__720_width__180]:
              hasVariant(variants, "height", "_720") &&
              hasVariant(variants, "width", "_180"),
            [sty.parent__height__720_width__270]:
              hasVariant(variants, "height", "_720") &&
              hasVariant(variants, "width", "_270"),
            [sty.parent__height__720_width__360]:
              hasVariant(variants, "height", "_720") &&
              hasVariant(variants, "width", "_360"),
            [sty.parent__height__720_width__90]:
              hasVariant(variants, "height", "_720") &&
              hasVariant(variants, "width", "_90"),
            [sty.parent__height__90]: hasVariant(variants, "height", "_90"),
            [sty.parent__width__180]: hasVariant(variants, "width", "_180"),
            [sty.parent__width__270]: hasVariant(variants, "width", "_270"),
            [sty.parent__width__360]: hasVariant(variants, "width", "_360"),
            [sty.parent__width__540]: hasVariant(variants, "width", "_540"),
            [sty.parent__width__720]: hasVariant(variants, "width", "_720"),
            [sty.parent__width__720_height__90]:
              hasVariant(variants, "width", "_720") &&
              hasVariant(variants, "height", "_90"),
            [sty.parent__width__90]: hasVariant(variants, "width", "_90")
          })}
        >
          <textarea
            data-plasmic-name={"textarea"}
            data-plasmic-override={overrides.textarea}
            className={classNames(defaultcss.textarea, sty.textarea, {
              [sty.textarea__height__720]: hasVariant(
                variants,
                "height",
                "_720"
              ),
              [sty.textarea__type_secondary]: hasVariant(
                variants,
                "type",
                "secondary"
              )
            })}
            placeholder={args.placeholder}
            value={"" as const}
          />
        </div>
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "parent", "textarea"],
  parent: ["parent", "textarea"],
  textarea: ["textarea"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  parent: "div";
  textarea: "textarea";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInputTextAreaPrimary__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicInputTextAreaPrimary__VariantsArgs;
    args?: PlasmicInputTextAreaPrimary__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicInputTextAreaPrimary__Fetches;
  } & Omit<PlasmicInputTextAreaPrimary__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicInputTextAreaPrimary__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicInputTextAreaPrimary__ArgProps,
      internalVariantPropNames: PlasmicInputTextAreaPrimary__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicInputTextAreaPrimary__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInputTextAreaPrimary";
  } else {
    func.displayName = `PlasmicInputTextAreaPrimary.${nodeName}`;
  }
  return func;
}

export const PlasmicInputTextAreaPrimary = Object.assign(
  // Top-level PlasmicInputTextAreaPrimary renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    parent: makeNodeComponent("parent"),
    textarea: makeNodeComponent("textarea"),

    // Metadata about props expected for PlasmicInputTextAreaPrimary
    internalVariantProps: PlasmicInputTextAreaPrimary__VariantProps,
    internalArgProps: PlasmicInputTextAreaPrimary__ArgProps
  }
);

export default PlasmicInputTextAreaPrimary;
/* prettier-ignore-end */
