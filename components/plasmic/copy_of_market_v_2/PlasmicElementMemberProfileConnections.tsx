// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: 5-AqvXiyOk61eS
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import UserAvatar from "../../UserAvatar"; // plasmic-import: kWaJrwe3c90GY1/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: biX3aS42hiG0fF/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicElementMemberProfileConnections.module.css"; // plasmic-import: 5-AqvXiyOk61eS/css

export type PlasmicElementMemberProfileConnections__VariantMembers = {};

export type PlasmicElementMemberProfileConnections__VariantsArgs = {};
type VariantPropType =
  keyof PlasmicElementMemberProfileConnections__VariantsArgs;
export const PlasmicElementMemberProfileConnections__VariantProps =
  new Array<VariantPropType>();

export type PlasmicElementMemberProfileConnections__ArgsType = {};
type ArgPropType = keyof PlasmicElementMemberProfileConnections__ArgsType;
export const PlasmicElementMemberProfileConnections__ArgProps =
  new Array<ArgPropType>();

export type PlasmicElementMemberProfileConnections__OverridesType = {
  root?: p.Flex<"div">;
  parent?: p.Flex<"div">;
  connectionsHealine?: p.Flex<"div">;
  connectionsHeadlineText?: p.Flex<"div">;
  memberConnectionsParent?: p.Flex<"div">;
  linkConnectionsViewAllParent?: p.Flex<"div">;
  linkConnectionsViewAll?: p.Flex<"a"> & Partial<LinkProps>;
  freeBox?: p.Flex<"div">;
};

export interface DefaultElementMemberProfileConnectionsProps {
  className?: string;
}

function PlasmicElementMemberProfileConnections__RenderFunc(props: {
  variants: PlasmicElementMemberProfileConnections__VariantsArgs;
  args: PlasmicElementMemberProfileConnections__ArgsType;
  overrides: PlasmicElementMemberProfileConnections__OverridesType;
  dataFetches?: PlasmicElementMemberProfileConnections__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"parent"}
        data-plasmic-override={overrides.parent}
        hasGap={true}
        className={classNames(defaultcss.all, sty.parent)}
      >
        <div
          data-plasmic-name={"connectionsHealine"}
          data-plasmic-override={overrides.connectionsHealine}
          className={classNames(defaultcss.all, sty.connectionsHealine)}
        >
          <div
            data-plasmic-name={"connectionsHeadlineText"}
            data-plasmic-override={overrides.connectionsHeadlineText}
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.connectionsHeadlineText
            )}
          >
            {hasVariant(globalVariants, "screen", "desktop")
              ? "Connections"
              : "Connections"}
          </div>
        </div>

        <p.Stack
          as={"div"}
          data-plasmic-name={"memberConnectionsParent"}
          data-plasmic-override={overrides.memberConnectionsParent}
          hasGap={true}
          className={classNames(defaultcss.all, sty.memberConnectionsParent)}
        >
          <UserAvatar
            className={classNames("__wab_instance", sty.userAvatar__iYqN)}
            navUserAvatar48={
              <img
                alt={""}
                className={classNames(defaultcss.img, sty.img__n53Ep)}
                role={"img"}
                src={"/plasmic/copy_of_market_v_2/images/collinHbs2014Jpg.jpeg"}
              />
            }
            size={"_48" as const}
          />

          <UserAvatar
            className={classNames("__wab_instance", sty.userAvatar__al7Oi)}
            navUserAvatar48={
              <img
                alt={""}
                className={classNames(defaultcss.img, sty.img__zYcSm)}
                role={"img"}
                src={"/plasmic/copy_of_market_v_2/images/memberHero11Png.jpeg"}
              />
            }
            size={"_48" as const}
          />

          <UserAvatar
            className={classNames("__wab_instance", sty.userAvatar__uwPaO)}
            navUserAvatar48={
              <img
                alt={""}
                className={classNames(defaultcss.img, sty.img__pMcon)}
                role={"img"}
                src={
                  "/plasmic/copy_of_market_v_2/images/peopleCreative3Jpg.jpeg"
                }
              />
            }
            size={"_48" as const}
          />

          <UserAvatar
            className={classNames("__wab_instance", sty.userAvatar__lOiiL)}
            navUserAvatar48={
              <img
                alt={""}
                className={classNames(defaultcss.img, sty.img__duonf)}
                role={"img"}
                src={"/plasmic/copy_of_market_v_2/images/image32.png"}
              />
            }
            size={"_48" as const}
          />

          <UserAvatar
            className={classNames("__wab_instance", sty.userAvatar__zVtEj)}
            navUserAvatar48={
              <img
                alt={""}
                className={classNames(defaultcss.img, sty.img__idlmh)}
                role={"img"}
                src={
                  "/plasmic/copy_of_market_v_2/images/brookeCagleW7Pk4FfrSy0Unsplashjpg.jpeg"
                }
              />
            }
            size={"_48" as const}
          />

          <UserAvatar
            className={classNames("__wab_instance", sty.userAvatar__cmPHp)}
            navUserAvatar48={
              <img
                alt={""}
                className={classNames(defaultcss.img, sty.img__oibrf)}
                role={"img"}
                src={
                  "/plasmic/copy_of_market_v_2/images/charlesDeluvioKVg2Dqtak7CUnsplashjpg.jpeg"
                }
              />
            }
            size={"_48" as const}
          />

          <UserAvatar
            className={classNames("__wab_instance", sty.userAvatar__u4Blw)}
            navUserAvatar48={
              <img
                alt={""}
                className={classNames(defaultcss.img, sty.img__qvY4G)}
                role={"img"}
                src={
                  "/plasmic/copy_of_market_v_2/images/cesarRinconXhVpWcr5GrQUnsplashjpg.jpeg"
                }
              />
            }
            size={"_48" as const}
          />

          <UserAvatar
            className={classNames("__wab_instance", sty.userAvatar__y8OJh)}
            navUserAvatar48={
              <img
                alt={""}
                className={classNames(defaultcss.img, sty.img__uUqq)}
                role={"img"}
                src={
                  "/plasmic/copy_of_market_v_2/images/giftHabeshawZmSk6Is2YQ4Unsplashjpg.jpeg"
                }
              />
            }
            size={"_48" as const}
          />

          <UserAvatar
            className={classNames("__wab_instance", sty.userAvatar__fRLcI)}
            navUserAvatar48={
              <img
                alt={""}
                className={classNames(defaultcss.img, sty.img__f2LwF)}
                role={"img"}
                src={
                  "/plasmic/copy_of_market_v_2/images/hustWilsonWyDr1Kfs23YUnsplashjpg.jpeg"
                }
              />
            }
            size={"_48" as const}
          />

          <UserAvatar
            className={classNames("__wab_instance", sty.userAvatar__ftZb4)}
            navUserAvatar48={
              <img
                alt={""}
                className={classNames(defaultcss.img, sty.img__jjVb4)}
                role={"img"}
                src={
                  "/plasmic/copy_of_market_v_2/images/jonGroganKUdeP8QQMgUnsplashjpg.jpeg"
                }
              />
            }
            size={"_48" as const}
          />
        </p.Stack>

        <div
          data-plasmic-name={"linkConnectionsViewAllParent"}
          data-plasmic-override={overrides.linkConnectionsViewAllParent}
          className={classNames(
            defaultcss.all,
            sty.linkConnectionsViewAllParent
          )}
        >
          <p.PlasmicLink
            data-plasmic-name={"linkConnectionsViewAll"}
            data-plasmic-override={overrides.linkConnectionsViewAll}
            className={classNames(defaultcss.all, sty.linkConnectionsViewAll)}
            component={Link}
            platform={"nextjs"}
          >
            <div
              data-plasmic-name={"freeBox"}
              data-plasmic-override={overrides.freeBox}
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox
              )}
            >
              {"View all connections"}
            </div>
          </p.PlasmicLink>
        </div>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "parent",
    "connectionsHealine",
    "connectionsHeadlineText",
    "memberConnectionsParent",
    "linkConnectionsViewAllParent",
    "linkConnectionsViewAll",
    "freeBox"
  ],
  parent: [
    "parent",
    "connectionsHealine",
    "connectionsHeadlineText",
    "memberConnectionsParent",
    "linkConnectionsViewAllParent",
    "linkConnectionsViewAll",
    "freeBox"
  ],
  connectionsHealine: ["connectionsHealine", "connectionsHeadlineText"],
  connectionsHeadlineText: ["connectionsHeadlineText"],
  memberConnectionsParent: ["memberConnectionsParent"],
  linkConnectionsViewAllParent: [
    "linkConnectionsViewAllParent",
    "linkConnectionsViewAll",
    "freeBox"
  ],
  linkConnectionsViewAll: ["linkConnectionsViewAll", "freeBox"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  parent: "div";
  connectionsHealine: "div";
  connectionsHeadlineText: "div";
  memberConnectionsParent: "div";
  linkConnectionsViewAllParent: "div";
  linkConnectionsViewAll: "a";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicElementMemberProfileConnections__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicElementMemberProfileConnections__VariantsArgs;
    args?: PlasmicElementMemberProfileConnections__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicElementMemberProfileConnections__Fetches;
  } & Omit< // Specify variants directly as props
    PlasmicElementMemberProfileConnections__VariantsArgs,
    ReservedPropsType
  > &
    // Specify args directly as props
    Omit<PlasmicElementMemberProfileConnections__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicElementMemberProfileConnections__ArgProps,
      internalVariantPropNames:
        PlasmicElementMemberProfileConnections__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicElementMemberProfileConnections__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicElementMemberProfileConnections";
  } else {
    func.displayName = `PlasmicElementMemberProfileConnections.${nodeName}`;
  }
  return func;
}

export const PlasmicElementMemberProfileConnections = Object.assign(
  // Top-level PlasmicElementMemberProfileConnections renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    parent: makeNodeComponent("parent"),
    connectionsHealine: makeNodeComponent("connectionsHealine"),
    connectionsHeadlineText: makeNodeComponent("connectionsHeadlineText"),
    memberConnectionsParent: makeNodeComponent("memberConnectionsParent"),
    linkConnectionsViewAllParent: makeNodeComponent(
      "linkConnectionsViewAllParent"
    ),
    linkConnectionsViewAll: makeNodeComponent("linkConnectionsViewAll"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicElementMemberProfileConnections
    internalVariantProps: PlasmicElementMemberProfileConnections__VariantProps,
    internalArgProps: PlasmicElementMemberProfileConnections__ArgProps
  }
);

export default PlasmicElementMemberProfileConnections;
/* prettier-ignore-end */
