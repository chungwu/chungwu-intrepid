// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: Bxpx-jQAWOTDxtF
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import UserAvatar from "../../UserAvatar"; // plasmic-import: kWaJrwe3c90GY1/component
import TagBadgeVerification from "../../TagBadgeVerification"; // plasmic-import: VGML93vWMU9W43k/component
import TagPartnerD from "../../TagPartnerD"; // plasmic-import: oP3_LL4xXepZaZN/component
import RatingDisplayDetail from "../../RatingDisplayDetail"; // plasmic-import: EZFFldQYBrJIX/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicChipUserProfile.module.css"; // plasmic-import: Bxpx-jQAWOTDxtF/css

import ViewIcon from "./icons/PlasmicIcon__View"; // plasmic-import: I6EK4zmpxF59ShL/icon
import HeartFillIcon from "./icons/PlasmicIcon__HeartFill"; // plasmic-import: BXMci0FAqLD75cK/icon
import BookmarkIcon from "./icons/PlasmicIcon__Bookmark"; // plasmic-import: jLuEpvSpry_1edd/icon

export type PlasmicChipUserProfile__VariantMembers = {
  attributes: "rating" | "membership" | "verification" | "stats";
};

export type PlasmicChipUserProfile__VariantsArgs = {
  attributes?: MultiChoiceArg<
    "rating" | "membership" | "verification" | "stats"
  >;
};

type VariantPropType = keyof PlasmicChipUserProfile__VariantsArgs;
export const PlasmicChipUserProfile__VariantProps = new Array<VariantPropType>(
  "attributes"
);

export type PlasmicChipUserProfile__ArgsType = {
  navUserAvatar80?: React.ReactNode;
  target?: string;
};

type ArgPropType = keyof PlasmicChipUserProfile__ArgsType;
export const PlasmicChipUserProfile__ArgProps = new Array<ArgPropType>(
  "navUserAvatar80",
  "target"
);

export type PlasmicChipUserProfile__OverridesType = {
  root?: p.Flex<"a"> & Partial<LinkProps>;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  userAvatar?: p.Flex<typeof UserAvatar>;
  userInfoParent?: p.Flex<"div">;
  tagBadgeVerification?: p.Flex<typeof TagBadgeVerification>;
  verificationCityParent?: p.Flex<"div">;
  tagPartnerD?: p.Flex<typeof TagPartnerD>;
  ratingDisplayDetail?: p.Flex<typeof RatingDisplayDetail>;
  reviewLinkA?: p.Flex<"a"> & Partial<LinkProps>;
  reviewLinkB?: p.Flex<"a"> & Partial<LinkProps>;
  userStatsParent?: p.Flex<"div">;
  viewButtonCount?: p.Flex<"div">;
  viewButton?: p.Flex<"button">;
  viewDisplay?: p.Flex<"svg">;
  viewNumberValueParent?: p.Flex<"div">;
  viewNumberIncrement?: p.Flex<"div">;
  heartButtonCount?: p.Flex<"div">;
  heartButton?: p.Flex<"button">;
  heartDisplay?: p.Flex<"svg">;
  heartNumberValueParent?: p.Flex<"div">;
  heartNumberIncrement?: p.Flex<"div">;
  bookmarkButtonCount?: p.Flex<"div">;
  bookmarkButton?: p.Flex<"button">;
  bookmarkDisplay?: p.Flex<"svg">;
  bookmarkNumberValueParent?: p.Flex<"div">;
  bookmarkNumberIncrement?: p.Flex<"div">;
  location?: p.Flex<"div">;
  cityText?: p.Flex<"div">;
};

export interface DefaultChipUserProfileProps {
  navUserAvatar80?: React.ReactNode;
  target?: string;
  attributes?: MultiChoiceArg<
    "rating" | "membership" | "verification" | "stats"
  >;
  className?: string;
}

function PlasmicChipUserProfile__RenderFunc(props: {
  variants: PlasmicChipUserProfile__VariantsArgs;
  args: PlasmicChipUserProfile__ArgsType;
  overrides: PlasmicChipUserProfile__OverridesType;
  dataFetches?: PlasmicChipUserProfile__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={p.PlasmicLink}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
      component={Link}
      platform={"nextjs"}
    >
      <p.PlasmicLink
        data-plasmic-name={"link"}
        data-plasmic-override={overrides.link}
        className={classNames(defaultcss.all, sty.link)}
        component={Link}
        platform={"nextjs"}
      >
        <UserAvatar
          data-plasmic-name={"userAvatar"}
          data-plasmic-override={overrides.userAvatar}
          className={classNames("__wab_instance", sty.userAvatar)}
          navUserAvatar80={p.renderPlasmicSlot({
            defaultContents: (
              <img
                alt={""}
                className={classNames(defaultcss.img, sty.img__xRxR)}
                role={"img"}
                src={"/plasmic/copy_of_market_v_2/images/image4.png"}
              />
            ),

            value: args.navUserAvatar80
          })}
          size={"_64" as const}
        />
      </p.PlasmicLink>

      <p.Stack
        as={"div"}
        data-plasmic-name={"userInfoParent"}
        data-plasmic-override={overrides.userInfoParent}
        hasGap={true}
        className={classNames(defaultcss.all, sty.userInfoParent)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.freeBox__nAxkM, {
            [sty.freeBox__attributes_verification__nAxkM4Yqej]: hasVariant(
              variants,
              "attributes",
              "verification"
            )
          })}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.freeBox__xCcS, {
              [sty.freeBox__attributes_verification__xCcS4Yqej]: hasVariant(
                variants,
                "attributes",
                "verification"
              )
            })}
          >
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox__tS7Xq
              )}
            >
              {"Username"}
            </div>

            {(
              hasVariant(variants, "attributes", "verification") ? false : true
            ) ? (
              <TagBadgeVerification
                data-plasmic-name={"tagBadgeVerification"}
                data-plasmic-override={overrides.tagBadgeVerification}
                className={classNames(
                  "__wab_instance",
                  sty.tagBadgeVerification,
                  {
                    [sty.tagBadgeVerification__attributes_verification]:
                      hasVariant(variants, "attributes", "verification")
                  }
                )}
                size={"_14" as const}
              />
            ) : null}
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"verificationCityParent"}
            data-plasmic-override={overrides.verificationCityParent}
            hasGap={true}
            className={classNames(defaultcss.all, sty.verificationCityParent)}
          >
            {(
              hasVariant(variants, "attributes", "membership") ? false : true
            ) ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.freeBox__bivfq, {
                  [sty.freeBox__attributes_membership__bivfqXsM9]: hasVariant(
                    variants,
                    "attributes",
                    "membership"
                  ),
                  [sty.freeBox__attributes_rating__bivfq6MW2H]: hasVariant(
                    variants,
                    "attributes",
                    "rating"
                  )
                })}
              >
                <TagPartnerD
                  data-plasmic-name={"tagPartnerD"}
                  data-plasmic-override={overrides.tagPartnerD}
                  className={classNames("__wab_instance", sty.tagPartnerD, {
                    [sty.tagPartnerD__attributes_membership]: hasVariant(
                      variants,
                      "attributes",
                      "membership"
                    )
                  })}
                />
              </p.Stack>
            ) : null}
            {(hasVariant(variants, "attributes", "rating") ? false : true) ? (
              <RatingDisplayDetail
                data-plasmic-name={"ratingDisplayDetail"}
                data-plasmic-override={overrides.ratingDisplayDetail}
                className={classNames(
                  "__wab_instance",
                  sty.ratingDisplayDetail,
                  {
                    [sty.ratingDisplayDetail__attributes_membership]:
                      hasVariant(variants, "attributes", "membership"),
                    [sty.ratingDisplayDetail__attributes_rating]: hasVariant(
                      variants,
                      "attributes",
                      "rating"
                    )
                  }
                )}
                size={"_14" as const}
                slot={
                  <p.PlasmicLink
                    data-plasmic-name={"reviewLinkB"}
                    data-plasmic-override={overrides.reviewLinkB}
                    className={classNames(defaultcss.all, sty.reviewLinkB)}
                    component={Link}
                    platform={"nextjs"}
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox___8GUo9
                      )}
                    >
                      {"(1000)"}
                    </div>
                  </p.PlasmicLink>
                }
              >
                <p.PlasmicLink
                  data-plasmic-name={"reviewLinkA"}
                  data-plasmic-override={overrides.reviewLinkA}
                  className={classNames(defaultcss.all, sty.reviewLinkA)}
                  component={Link}
                  platform={"nextjs"}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__lmCgF
                    )}
                  >
                    {"4.67"}
                  </div>
                </p.PlasmicLink>
              </RatingDisplayDetail>
            ) : null}
          </p.Stack>
        </p.Stack>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.freeBox__iWHyJ)}
        >
          {(hasVariant(variants, "attributes", "stats") ? false : true) ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"userStatsParent"}
              data-plasmic-override={overrides.userStatsParent}
              hasGap={true}
              className={classNames(defaultcss.all, sty.userStatsParent, {
                [sty.userStatsParent__attributes_stats]: hasVariant(
                  variants,
                  "attributes",
                  "stats"
                ),
                [sty.userStatsParent__attributes_verification]: hasVariant(
                  variants,
                  "attributes",
                  "verification"
                )
              })}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"viewButtonCount"}
                data-plasmic-override={overrides.viewButtonCount}
                hasGap={true}
                className={classNames(defaultcss.all, sty.viewButtonCount)}
              >
                <button
                  data-plasmic-name={"viewButton"}
                  data-plasmic-override={overrides.viewButton}
                  className={classNames(defaultcss.button, sty.viewButton)}
                >
                  <ViewIcon
                    data-plasmic-name={"viewDisplay"}
                    data-plasmic-override={overrides.viewDisplay}
                    className={classNames(defaultcss.all, sty.viewDisplay)}
                    role={"img"}
                  />
                </button>

                <div
                  data-plasmic-name={"viewNumberValueParent"}
                  data-plasmic-override={overrides.viewNumberValueParent}
                  className={classNames(
                    defaultcss.all,
                    sty.viewNumberValueParent
                  )}
                >
                  <div
                    data-plasmic-name={"viewNumberIncrement"}
                    data-plasmic-override={overrides.viewNumberIncrement}
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.viewNumberIncrement
                    )}
                  >
                    {"1000"}
                  </div>
                </div>
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"heartButtonCount"}
                data-plasmic-override={overrides.heartButtonCount}
                hasGap={true}
                className={classNames(defaultcss.all, sty.heartButtonCount)}
              >
                <button
                  data-plasmic-name={"heartButton"}
                  data-plasmic-override={overrides.heartButton}
                  className={classNames(defaultcss.button, sty.heartButton)}
                >
                  <HeartFillIcon
                    data-plasmic-name={"heartDisplay"}
                    data-plasmic-override={overrides.heartDisplay}
                    className={classNames(defaultcss.all, sty.heartDisplay)}
                    role={"img"}
                  />
                </button>

                <div
                  data-plasmic-name={"heartNumberValueParent"}
                  data-plasmic-override={overrides.heartNumberValueParent}
                  className={classNames(
                    defaultcss.all,
                    sty.heartNumberValueParent
                  )}
                >
                  <div
                    data-plasmic-name={"heartNumberIncrement"}
                    data-plasmic-override={overrides.heartNumberIncrement}
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.heartNumberIncrement
                    )}
                  >
                    {"1000"}
                  </div>
                </div>
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"bookmarkButtonCount"}
                data-plasmic-override={overrides.bookmarkButtonCount}
                hasGap={true}
                className={classNames(defaultcss.all, sty.bookmarkButtonCount)}
              >
                <button
                  data-plasmic-name={"bookmarkButton"}
                  data-plasmic-override={overrides.bookmarkButton}
                  className={classNames(defaultcss.button, sty.bookmarkButton)}
                >
                  <BookmarkIcon
                    data-plasmic-name={"bookmarkDisplay"}
                    data-plasmic-override={overrides.bookmarkDisplay}
                    className={classNames(defaultcss.all, sty.bookmarkDisplay)}
                    role={"img"}
                  />
                </button>

                <div
                  data-plasmic-name={"bookmarkNumberValueParent"}
                  data-plasmic-override={overrides.bookmarkNumberValueParent}
                  className={classNames(
                    defaultcss.all,
                    sty.bookmarkNumberValueParent
                  )}
                >
                  <div
                    data-plasmic-name={"bookmarkNumberIncrement"}
                    data-plasmic-override={overrides.bookmarkNumberIncrement}
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.bookmarkNumberIncrement
                    )}
                  >
                    {"1000"}
                  </div>
                </div>
              </p.Stack>
            </p.Stack>
          ) : null}

          <p.Stack
            as={"div"}
            data-plasmic-name={"location"}
            data-plasmic-override={overrides.location}
            hasGap={true}
            className={classNames(defaultcss.all, sty.location)}
          >
            <div
              data-plasmic-name={"cityText"}
              data-plasmic-override={overrides.cityText}
              className={classNames(defaultcss.all, sty.cityText)}
            >
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.freeBox__e3VmK
                )}
              >
                {"City"}
              </div>

              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.freeBox___35WYp
                )}
              >
                {","}
              </div>
            </div>

            <div className={classNames(defaultcss.all, sty.freeBox__yHjrf)}>
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.freeBox__nv2Pw
                )}
              >
                {"Country"}
              </div>
            </div>
          </p.Stack>
        </p.Stack>
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "link",
    "userAvatar",
    "userInfoParent",
    "tagBadgeVerification",
    "verificationCityParent",
    "tagPartnerD",
    "ratingDisplayDetail",
    "reviewLinkA",
    "reviewLinkB",
    "userStatsParent",
    "viewButtonCount",
    "viewButton",
    "viewDisplay",
    "viewNumberValueParent",
    "viewNumberIncrement",
    "heartButtonCount",
    "heartButton",
    "heartDisplay",
    "heartNumberValueParent",
    "heartNumberIncrement",
    "bookmarkButtonCount",
    "bookmarkButton",
    "bookmarkDisplay",
    "bookmarkNumberValueParent",
    "bookmarkNumberIncrement",
    "location",
    "cityText"
  ],
  link: ["link", "userAvatar"],
  userAvatar: ["userAvatar"],
  userInfoParent: [
    "userInfoParent",
    "tagBadgeVerification",
    "verificationCityParent",
    "tagPartnerD",
    "ratingDisplayDetail",
    "reviewLinkA",
    "reviewLinkB",
    "userStatsParent",
    "viewButtonCount",
    "viewButton",
    "viewDisplay",
    "viewNumberValueParent",
    "viewNumberIncrement",
    "heartButtonCount",
    "heartButton",
    "heartDisplay",
    "heartNumberValueParent",
    "heartNumberIncrement",
    "bookmarkButtonCount",
    "bookmarkButton",
    "bookmarkDisplay",
    "bookmarkNumberValueParent",
    "bookmarkNumberIncrement",
    "location",
    "cityText"
  ],
  tagBadgeVerification: ["tagBadgeVerification"],
  verificationCityParent: [
    "verificationCityParent",
    "tagPartnerD",
    "ratingDisplayDetail",
    "reviewLinkA",
    "reviewLinkB"
  ],
  tagPartnerD: ["tagPartnerD"],
  ratingDisplayDetail: ["ratingDisplayDetail", "reviewLinkA", "reviewLinkB"],
  reviewLinkA: ["reviewLinkA"],
  reviewLinkB: ["reviewLinkB"],
  userStatsParent: [
    "userStatsParent",
    "viewButtonCount",
    "viewButton",
    "viewDisplay",
    "viewNumberValueParent",
    "viewNumberIncrement",
    "heartButtonCount",
    "heartButton",
    "heartDisplay",
    "heartNumberValueParent",
    "heartNumberIncrement",
    "bookmarkButtonCount",
    "bookmarkButton",
    "bookmarkDisplay",
    "bookmarkNumberValueParent",
    "bookmarkNumberIncrement"
  ],
  viewButtonCount: [
    "viewButtonCount",
    "viewButton",
    "viewDisplay",
    "viewNumberValueParent",
    "viewNumberIncrement"
  ],
  viewButton: ["viewButton", "viewDisplay"],
  viewDisplay: ["viewDisplay"],
  viewNumberValueParent: ["viewNumberValueParent", "viewNumberIncrement"],
  viewNumberIncrement: ["viewNumberIncrement"],
  heartButtonCount: [
    "heartButtonCount",
    "heartButton",
    "heartDisplay",
    "heartNumberValueParent",
    "heartNumberIncrement"
  ],
  heartButton: ["heartButton", "heartDisplay"],
  heartDisplay: ["heartDisplay"],
  heartNumberValueParent: ["heartNumberValueParent", "heartNumberIncrement"],
  heartNumberIncrement: ["heartNumberIncrement"],
  bookmarkButtonCount: [
    "bookmarkButtonCount",
    "bookmarkButton",
    "bookmarkDisplay",
    "bookmarkNumberValueParent",
    "bookmarkNumberIncrement"
  ],
  bookmarkButton: ["bookmarkButton", "bookmarkDisplay"],
  bookmarkDisplay: ["bookmarkDisplay"],
  bookmarkNumberValueParent: [
    "bookmarkNumberValueParent",
    "bookmarkNumberIncrement"
  ],
  bookmarkNumberIncrement: ["bookmarkNumberIncrement"],
  location: ["location", "cityText"],
  cityText: ["cityText"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "a";
  link: "a";
  userAvatar: typeof UserAvatar;
  userInfoParent: "div";
  tagBadgeVerification: typeof TagBadgeVerification;
  verificationCityParent: "div";
  tagPartnerD: typeof TagPartnerD;
  ratingDisplayDetail: typeof RatingDisplayDetail;
  reviewLinkA: "a";
  reviewLinkB: "a";
  userStatsParent: "div";
  viewButtonCount: "div";
  viewButton: "button";
  viewDisplay: "svg";
  viewNumberValueParent: "div";
  viewNumberIncrement: "div";
  heartButtonCount: "div";
  heartButton: "button";
  heartDisplay: "svg";
  heartNumberValueParent: "div";
  heartNumberIncrement: "div";
  bookmarkButtonCount: "div";
  bookmarkButton: "button";
  bookmarkDisplay: "svg";
  bookmarkNumberValueParent: "div";
  bookmarkNumberIncrement: "div";
  location: "div";
  cityText: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicChipUserProfile__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicChipUserProfile__VariantsArgs;
    args?: PlasmicChipUserProfile__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicChipUserProfile__Fetches;
  } & Omit<PlasmicChipUserProfile__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicChipUserProfile__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicChipUserProfile__ArgProps,
      internalVariantPropNames: PlasmicChipUserProfile__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicChipUserProfile__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicChipUserProfile";
  } else {
    func.displayName = `PlasmicChipUserProfile.${nodeName}`;
  }
  return func;
}

export const PlasmicChipUserProfile = Object.assign(
  // Top-level PlasmicChipUserProfile renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),
    userAvatar: makeNodeComponent("userAvatar"),
    userInfoParent: makeNodeComponent("userInfoParent"),
    tagBadgeVerification: makeNodeComponent("tagBadgeVerification"),
    verificationCityParent: makeNodeComponent("verificationCityParent"),
    tagPartnerD: makeNodeComponent("tagPartnerD"),
    ratingDisplayDetail: makeNodeComponent("ratingDisplayDetail"),
    reviewLinkA: makeNodeComponent("reviewLinkA"),
    reviewLinkB: makeNodeComponent("reviewLinkB"),
    userStatsParent: makeNodeComponent("userStatsParent"),
    viewButtonCount: makeNodeComponent("viewButtonCount"),
    viewButton: makeNodeComponent("viewButton"),
    viewDisplay: makeNodeComponent("viewDisplay"),
    viewNumberValueParent: makeNodeComponent("viewNumberValueParent"),
    viewNumberIncrement: makeNodeComponent("viewNumberIncrement"),
    heartButtonCount: makeNodeComponent("heartButtonCount"),
    heartButton: makeNodeComponent("heartButton"),
    heartDisplay: makeNodeComponent("heartDisplay"),
    heartNumberValueParent: makeNodeComponent("heartNumberValueParent"),
    heartNumberIncrement: makeNodeComponent("heartNumberIncrement"),
    bookmarkButtonCount: makeNodeComponent("bookmarkButtonCount"),
    bookmarkButton: makeNodeComponent("bookmarkButton"),
    bookmarkDisplay: makeNodeComponent("bookmarkDisplay"),
    bookmarkNumberValueParent: makeNodeComponent("bookmarkNumberValueParent"),
    bookmarkNumberIncrement: makeNodeComponent("bookmarkNumberIncrement"),
    location: makeNodeComponent("location"),
    cityText: makeNodeComponent("cityText"),

    // Metadata about props expected for PlasmicChipUserProfile
    internalVariantProps: PlasmicChipUserProfile__VariantProps,
    internalArgProps: PlasmicChipUserProfile__ArgProps
  }
);

export default PlasmicChipUserProfile;
/* prettier-ignore-end */
