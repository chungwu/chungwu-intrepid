// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: kZPshifETwLA7G
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavbarInternal from "../../NavbarInternal"; // plasmic-import: nBfIHHqHvjUywN9/component
import NavbarPartnerEdit from "../../NavbarPartnerEdit"; // plasmic-import: cfySDEV6eDVdN0/component
import CardHeaderTitleDisplay from "../../CardHeaderTitleDisplay"; // plasmic-import: fk5BRaqICb6MOmt/component
import CardHeaderTitlePrimary from "../../CardHeaderTitlePrimary"; // plasmic-import: qjG0g-Rmz0BeDH/component
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: gpNjXfbD_ZdpPU/component
import InputTextForm from "../../InputTextForm"; // plasmic-import: xiZmrha0lhlIet/component
import SelectGroupDropdownPrimary from "../../SelectGroupDropdownPrimary"; // plasmic-import: LkR_9K5xfRnJSu/component
import ButtonCirclePlusMinus from "../../ButtonCirclePlusMinus"; // plasmic-import: Ywd6v68I9OnfFBZ/component
import SearchbarPrimary from "../../SearchbarPrimary"; // plasmic-import: i9y9X99bmAqsmFE/component
import TableUserAdminHeader from "../../TableUserAdminHeader"; // plasmic-import: 3wnZtCFqMPjAid/component
import TableUserAdminRecord from "../../TableUserAdminRecord"; // plasmic-import: X0kgw2C82SN2_M/component
import FooterB from "../../FooterB"; // plasmic-import: IZENTiSL4_zyK8/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: biX3aS42hiG0fF/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicEditteammanage.module.css"; // plasmic-import: kZPshifETwLA7G/css

import PlusBoldIcon from "./icons/PlasmicIcon__PlusBold"; // plasmic-import: lhSEEajPJGZatfD/icon

export type PlasmicEditteammanage__VariantMembers = {};

export type PlasmicEditteammanage__VariantsArgs = {};
type VariantPropType = keyof PlasmicEditteammanage__VariantsArgs;
export const PlasmicEditteammanage__VariantProps = new Array<VariantPropType>();

export type PlasmicEditteammanage__ArgsType = {};
type ArgPropType = keyof PlasmicEditteammanage__ArgsType;
export const PlasmicEditteammanage__ArgProps = new Array<ArgPropType>();

export type PlasmicEditteammanage__OverridesType = {
  root?: p.Flex<"div">;
  navbarInternal?: p.Flex<typeof NavbarInternal>;
  navbarPartnerEdit?: p.Flex<typeof NavbarPartnerEdit>;
  sectionTeamManageMembersHeader?: p.Flex<"section">;
  cardHeaderTitleDisplay?: p.Flex<typeof CardHeaderTitleDisplay>;
  sectionTeamInviteMembers?: p.Flex<"section">;
  cardTeamInviteMembers?: p.Flex<"div">;
  buttonPrimary?: p.Flex<typeof ButtonPrimary>;
  tableAddTeamMember?: p.Flex<"div">;
  inviteMemberHeader?: p.Flex<"div">;
  inviteMemberRecord?: p.Flex<"div">;
  incrementParent?: p.Flex<"div">;
  addMember?: p.Flex<typeof ButtonCirclePlusMinus>;
  inviteButtonParent?: p.Flex<"div">;
  inviteMembers?: p.Flex<typeof ButtonPrimary>;
  sectionTeamManageMembers?: p.Flex<"section">;
  cardTeamManageMembers?: p.Flex<"div">;
  tableTeamMemberEditParent?: p.Flex<"div">;
  searchFilterDateParent?: p.Flex<"div">;
  searchbarPrimary?: p.Flex<typeof SearchbarPrimary>;
  tableSelectColumnParent?: p.Flex<"div">;
  tableUserAdminHeader?: p.Flex<typeof TableUserAdminHeader>;
  footerB?: p.Flex<typeof FooterB>;
};

export interface DefaultEditteammanageProps {
  dataFetches: PlasmicEditteammanage__Fetches;
}

function PlasmicEditteammanage__RenderFunc(props: {
  variants: PlasmicEditteammanage__VariantsArgs;
  args: PlasmicEditteammanage__ArgsType;
  overrides: PlasmicEditteammanage__OverridesType;
  dataFetches?: PlasmicEditteammanage__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <React.Fragment>
      <Head>
        <title key="title">{""}</title>
        <meta key="og:title" property="og:title" content={""} />
        <meta
          key="description"
          name="description"
          property="og:description"
          content={""}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <NavbarInternal
            data-plasmic-name={"navbarInternal"}
            data-plasmic-override={overrides.navbarInternal}
            className={classNames("__wab_instance", sty.navbarInternal)}
          />

          <NavbarPartnerEdit
            data-plasmic-name={"navbarPartnerEdit"}
            data-plasmic-override={overrides.navbarPartnerEdit}
            className={classNames("__wab_instance", sty.navbarPartnerEdit)}
            navItems={["notifications", "messages", "reviews", "wallet"]}
            selected={"team" as const}
          />

          <p.Stack
            as={"section"}
            data-plasmic-name={"sectionTeamManageMembersHeader"}
            data-plasmic-override={overrides.sectionTeamManageMembersHeader}
            hasGap={true}
            className={classNames(
              defaultcss.all,
              sty.sectionTeamManageMembersHeader
            )}
          >
            <CardHeaderTitleDisplay
              data-plasmic-name={"cardHeaderTitleDisplay"}
              data-plasmic-override={overrides.cardHeaderTitleDisplay}
              size={"_720" as const}
              slot={
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__n716L
                  )}
                >
                  {"Manage members"}
                </div>
              }
              textDisplay={"Team"}
              textSubhead={"Maintain a safe and secure community experience  "}
            />
          </p.Stack>

          <p.Stack
            as={"section"}
            data-plasmic-name={"sectionTeamInviteMembers"}
            data-plasmic-override={overrides.sectionTeamInviteMembers}
            hasGap={true}
            className={classNames(defaultcss.all, sty.sectionTeamInviteMembers)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"cardTeamInviteMembers"}
              data-plasmic-override={overrides.cardTeamInviteMembers}
              hasGap={true}
              className={classNames(defaultcss.all, sty.cardTeamInviteMembers)}
            >
              <CardHeaderTitlePrimary
                className={classNames(
                  "__wab_instance",
                  sty.cardHeaderTitlePrimary__ds4QH
                )}
                slot={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox___6OR7
                    )}
                  >
                    {
                      "Manage and invite team members by email address or by invitation link."
                    }
                  </div>
                }
              >
                {"Invite"}
              </CardHeaderTitlePrimary>

              <ButtonPrimary
                data-plasmic-name={"buttonPrimary"}
                data-plasmic-override={overrides.buttonPrimary}
                className={classNames("__wab_instance", sty.buttonPrimary)}
                size={"_140" as const}
                type={"primary" as const}
              >
                {"Invite link"}
              </ButtonPrimary>

              <p.Stack
                as={"div"}
                data-plasmic-name={"tableAddTeamMember"}
                data-plasmic-override={overrides.tableAddTeamMember}
                hasGap={true}
                className={classNames(defaultcss.all, sty.tableAddTeamMember)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"inviteMemberHeader"}
                  data-plasmic-override={overrides.inviteMemberHeader}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.inviteMemberHeader)}
                >
                  <InputTextForm
                    className={classNames(
                      "__wab_instance",
                      sty.inputTextForm__yqpVl
                    )}
                    labelHeadline={
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.freeBox__deHWt
                        )}
                      >
                        {"Email"}
                      </div>
                    }
                    subhead={"subhead" as const}
                    width={"_540" as const}
                  />

                  <SelectGroupDropdownPrimary
                    className={classNames(
                      "__wab_instance",
                      sty.selectGroupDropdownPrimary__dEs0X
                    )}
                    description={"description" as const}
                    placeholder={"Member"}
                    width={"_90" as const}
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox__ffDcv
                      )}
                    >
                      {"Role"}
                    </div>
                  </SelectGroupDropdownPrimary>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"inviteMemberRecord"}
                  data-plasmic-override={overrides.inviteMemberRecord}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.inviteMemberRecord)}
                >
                  <InputTextForm
                    className={classNames(
                      "__wab_instance",
                      sty.inputTextForm__vtU3
                    )}
                    label={"label" as const}
                    subhead={"subhead" as const}
                    width={"_540" as const}
                  />

                  <SelectGroupDropdownPrimary
                    className={classNames(
                      "__wab_instance",
                      sty.selectGroupDropdownPrimary___6MZzJ
                    )}
                    description={"description" as const}
                    label={"label" as const}
                    placeholder={"Member"}
                    width={"_90" as const}
                  />
                </p.Stack>

                <div
                  data-plasmic-name={"incrementParent"}
                  data-plasmic-override={overrides.incrementParent}
                  className={classNames(defaultcss.all, sty.incrementParent)}
                >
                  <ButtonCirclePlusMinus
                    data-plasmic-name={"addMember"}
                    data-plasmic-override={overrides.addMember}
                    alignment={"left" as const}
                    className={classNames("__wab_instance", sty.addMember)}
                  />
                </div>

                <div
                  data-plasmic-name={"inviteButtonParent"}
                  data-plasmic-override={overrides.inviteButtonParent}
                  className={classNames(defaultcss.all, sty.inviteButtonParent)}
                >
                  <ButtonPrimary
                    data-plasmic-name={"inviteMembers"}
                    data-plasmic-override={overrides.inviteMembers}
                    size={"_140" as const}
                    type={"outline" as const}
                  >
                    {"Invite"}
                  </ButtonPrimary>
                </div>
              </p.Stack>
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"section"}
            data-plasmic-name={"sectionTeamManageMembers"}
            data-plasmic-override={overrides.sectionTeamManageMembers}
            hasGap={true}
            className={classNames(defaultcss.all, sty.sectionTeamManageMembers)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"cardTeamManageMembers"}
              data-plasmic-override={overrides.cardTeamManageMembers}
              hasGap={true}
              className={classNames(defaultcss.all, sty.cardTeamManageMembers)}
            >
              <CardHeaderTitlePrimary
                className={classNames(
                  "__wab_instance",
                  sty.cardHeaderTitlePrimary___5TnFp
                )}
                slot={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox___2X41H
                    )}
                  >
                    {"Manage member access roles"}
                  </div>
                }
              >
                {"Manage"}
              </CardHeaderTitlePrimary>

              <p.Stack
                as={"div"}
                data-plasmic-name={"tableTeamMemberEditParent"}
                data-plasmic-override={overrides.tableTeamMemberEditParent}
                hasGap={true}
                className={classNames(
                  defaultcss.all,
                  sty.tableTeamMemberEditParent
                )}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"searchFilterDateParent"}
                  data-plasmic-override={overrides.searchFilterDateParent}
                  hasGap={true}
                  className={classNames(
                    defaultcss.all,
                    sty.searchFilterDateParent
                  )}
                >
                  <SearchbarPrimary
                    data-plasmic-name={"searchbarPrimary"}
                    data-plasmic-override={overrides.searchbarPrimary}
                    className={classNames(
                      "__wab_instance",
                      sty.searchbarPrimary
                    )}
                    width={"_540" as const}
                  />

                  <SelectGroupDropdownPrimary
                    className={classNames(
                      "__wab_instance",
                      sty.selectGroupDropdownPrimary__eAlnh
                    )}
                    description={"description" as const}
                    label={"label" as const}
                    placeholder={"Member"}
                    width={"_90" as const}
                  />
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"tableSelectColumnParent"}
                  data-plasmic-override={overrides.tableSelectColumnParent}
                  hasGap={true}
                  className={classNames(
                    defaultcss.all,
                    sty.tableSelectColumnParent
                  )}
                >
                  <TableUserAdminHeader
                    data-plasmic-name={"tableUserAdminHeader"}
                    data-plasmic-override={overrides.tableUserAdminHeader}
                    className={classNames(
                      "__wab_instance",
                      sty.tableUserAdminHeader
                    )}
                  />

                  <TableUserAdminRecord
                    className={classNames(
                      "__wab_instance",
                      sty.tableUserAdminRecord___4KvdE
                    )}
                  />

                  <TableUserAdminRecord
                    action={"select" as const}
                    className={classNames(
                      "__wab_instance",
                      sty.tableUserAdminRecord__djd1H
                    )}
                  />
                </p.Stack>
              </p.Stack>
            </p.Stack>
          </p.Stack>

          <FooterB
            data-plasmic-name={"footerB"}
            data-plasmic-override={overrides.footerB}
            className={classNames("__wab_instance", sty.footerB)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbarInternal",
    "navbarPartnerEdit",
    "sectionTeamManageMembersHeader",
    "cardHeaderTitleDisplay",
    "sectionTeamInviteMembers",
    "cardTeamInviteMembers",
    "buttonPrimary",
    "tableAddTeamMember",
    "inviteMemberHeader",
    "inviteMemberRecord",
    "incrementParent",
    "addMember",
    "inviteButtonParent",
    "inviteMembers",
    "sectionTeamManageMembers",
    "cardTeamManageMembers",
    "tableTeamMemberEditParent",
    "searchFilterDateParent",
    "searchbarPrimary",
    "tableSelectColumnParent",
    "tableUserAdminHeader",
    "footerB"
  ],
  navbarInternal: ["navbarInternal"],
  navbarPartnerEdit: ["navbarPartnerEdit"],
  sectionTeamManageMembersHeader: [
    "sectionTeamManageMembersHeader",
    "cardHeaderTitleDisplay"
  ],
  cardHeaderTitleDisplay: ["cardHeaderTitleDisplay"],
  sectionTeamInviteMembers: [
    "sectionTeamInviteMembers",
    "cardTeamInviteMembers",
    "buttonPrimary",
    "tableAddTeamMember",
    "inviteMemberHeader",
    "inviteMemberRecord",
    "incrementParent",
    "addMember",
    "inviteButtonParent",
    "inviteMembers"
  ],
  cardTeamInviteMembers: [
    "cardTeamInviteMembers",
    "buttonPrimary",
    "tableAddTeamMember",
    "inviteMemberHeader",
    "inviteMemberRecord",
    "incrementParent",
    "addMember",
    "inviteButtonParent",
    "inviteMembers"
  ],
  buttonPrimary: ["buttonPrimary"],
  tableAddTeamMember: [
    "tableAddTeamMember",
    "inviteMemberHeader",
    "inviteMemberRecord",
    "incrementParent",
    "addMember",
    "inviteButtonParent",
    "inviteMembers"
  ],
  inviteMemberHeader: ["inviteMemberHeader"],
  inviteMemberRecord: ["inviteMemberRecord"],
  incrementParent: ["incrementParent", "addMember"],
  addMember: ["addMember"],
  inviteButtonParent: ["inviteButtonParent", "inviteMembers"],
  inviteMembers: ["inviteMembers"],
  sectionTeamManageMembers: [
    "sectionTeamManageMembers",
    "cardTeamManageMembers",
    "tableTeamMemberEditParent",
    "searchFilterDateParent",
    "searchbarPrimary",
    "tableSelectColumnParent",
    "tableUserAdminHeader"
  ],
  cardTeamManageMembers: [
    "cardTeamManageMembers",
    "tableTeamMemberEditParent",
    "searchFilterDateParent",
    "searchbarPrimary",
    "tableSelectColumnParent",
    "tableUserAdminHeader"
  ],
  tableTeamMemberEditParent: [
    "tableTeamMemberEditParent",
    "searchFilterDateParent",
    "searchbarPrimary",
    "tableSelectColumnParent",
    "tableUserAdminHeader"
  ],
  searchFilterDateParent: ["searchFilterDateParent", "searchbarPrimary"],
  searchbarPrimary: ["searchbarPrimary"],
  tableSelectColumnParent: ["tableSelectColumnParent", "tableUserAdminHeader"],
  tableUserAdminHeader: ["tableUserAdminHeader"],
  footerB: ["footerB"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbarInternal: typeof NavbarInternal;
  navbarPartnerEdit: typeof NavbarPartnerEdit;
  sectionTeamManageMembersHeader: "section";
  cardHeaderTitleDisplay: typeof CardHeaderTitleDisplay;
  sectionTeamInviteMembers: "section";
  cardTeamInviteMembers: "div";
  buttonPrimary: typeof ButtonPrimary;
  tableAddTeamMember: "div";
  inviteMemberHeader: "div";
  inviteMemberRecord: "div";
  incrementParent: "div";
  addMember: typeof ButtonCirclePlusMinus;
  inviteButtonParent: "div";
  inviteMembers: typeof ButtonPrimary;
  sectionTeamManageMembers: "section";
  cardTeamManageMembers: "div";
  tableTeamMemberEditParent: "div";
  searchFilterDateParent: "div";
  searchbarPrimary: typeof SearchbarPrimary;
  tableSelectColumnParent: "div";
  tableUserAdminHeader: typeof TableUserAdminHeader;
  footerB: typeof FooterB;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicEditteammanage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicEditteammanage__VariantsArgs;
    args?: PlasmicEditteammanage__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicEditteammanage__Fetches;
  } & Omit<PlasmicEditteammanage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicEditteammanage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicEditteammanage__ArgProps,
      internalVariantPropNames: PlasmicEditteammanage__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicEditteammanage__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEditteammanage";
  } else {
    func.displayName = `PlasmicEditteammanage.${nodeName}`;
  }
  return func;
}

export const PlasmicEditteammanage = Object.assign(
  // Top-level PlasmicEditteammanage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbarInternal: makeNodeComponent("navbarInternal"),
    navbarPartnerEdit: makeNodeComponent("navbarPartnerEdit"),
    sectionTeamManageMembersHeader: makeNodeComponent(
      "sectionTeamManageMembersHeader"
    ),
    cardHeaderTitleDisplay: makeNodeComponent("cardHeaderTitleDisplay"),
    sectionTeamInviteMembers: makeNodeComponent("sectionTeamInviteMembers"),
    cardTeamInviteMembers: makeNodeComponent("cardTeamInviteMembers"),
    buttonPrimary: makeNodeComponent("buttonPrimary"),
    tableAddTeamMember: makeNodeComponent("tableAddTeamMember"),
    inviteMemberHeader: makeNodeComponent("inviteMemberHeader"),
    inviteMemberRecord: makeNodeComponent("inviteMemberRecord"),
    incrementParent: makeNodeComponent("incrementParent"),
    addMember: makeNodeComponent("addMember"),
    inviteButtonParent: makeNodeComponent("inviteButtonParent"),
    inviteMembers: makeNodeComponent("inviteMembers"),
    sectionTeamManageMembers: makeNodeComponent("sectionTeamManageMembers"),
    cardTeamManageMembers: makeNodeComponent("cardTeamManageMembers"),
    tableTeamMemberEditParent: makeNodeComponent("tableTeamMemberEditParent"),
    searchFilterDateParent: makeNodeComponent("searchFilterDateParent"),
    searchbarPrimary: makeNodeComponent("searchbarPrimary"),
    tableSelectColumnParent: makeNodeComponent("tableSelectColumnParent"),
    tableUserAdminHeader: makeNodeComponent("tableUserAdminHeader"),
    footerB: makeNodeComponent("footerB"),

    // Metadata about props expected for PlasmicEditteammanage
    internalVariantProps: PlasmicEditteammanage__VariantProps,
    internalArgProps: PlasmicEditteammanage__ArgProps
  }
);

export default PlasmicEditteammanage;
/* prettier-ignore-end */
