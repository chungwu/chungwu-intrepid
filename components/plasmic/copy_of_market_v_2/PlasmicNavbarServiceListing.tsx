// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: CjIIrelyshy5Wa
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import LogoHeader from "../../LogoHeader"; // plasmic-import: KYZQ9ThnFfyK_/component
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: gpNjXfbD_ZdpPU/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: biX3aS42hiG0fF/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicNavbarServiceListing.module.css"; // plasmic-import: CjIIrelyshy5Wa/css

import PlusBoldIcon from "./icons/PlasmicIcon__PlusBold"; // plasmic-import: lhSEEajPJGZatfD/icon

export type PlasmicNavbarServiceListing__VariantMembers = {
  color: "color";
  state: "checkout";
};

export type PlasmicNavbarServiceListing__VariantsArgs = {
  color?: SingleBooleanChoiceArg<"color">;
  state?: SingleChoiceArg<"checkout">;
};

type VariantPropType = keyof PlasmicNavbarServiceListing__VariantsArgs;
export const PlasmicNavbarServiceListing__VariantProps =
  new Array<VariantPropType>("color", "state");

export type PlasmicNavbarServiceListing__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicNavbarServiceListing__ArgsType;
export const PlasmicNavbarServiceListing__ArgProps = new Array<ArgPropType>(
  "children"
);

export type PlasmicNavbarServiceListing__OverridesType = {
  root?: p.Flex<"div">;
  logoHeader?: p.Flex<typeof LogoHeader>;
  img?: p.Flex<"img">;
  buttonPrimary?: p.Flex<typeof ButtonPrimary>;
  freeBox?: p.Flex<"div">;
};

export interface DefaultNavbarServiceListingProps {
  children?: React.ReactNode;
  color?: SingleBooleanChoiceArg<"color">;
  state?: SingleChoiceArg<"checkout">;
  className?: string;
}

function PlasmicNavbarServiceListing__RenderFunc(props: {
  variants: PlasmicNavbarServiceListing__VariantsArgs;
  args: PlasmicNavbarServiceListing__ArgsType;
  overrides: PlasmicNavbarServiceListing__OverridesType;
  dataFetches?: PlasmicNavbarServiceListing__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__color]: hasVariant(variants, "color", "color")
      })}
    >
      <LogoHeader
        data-plasmic-name={"logoHeader"}
        data-plasmic-override={overrides.logoHeader}
        className={classNames("__wab_instance", sty.logoHeader)}
      >
        <img
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(defaultcss.img, sty.img, {
            [sty.img__color]: hasVariant(variants, "color", "color")
          })}
          role={"img"}
          src={
            hasVariant(variants, "color", "color")
              ? "/plasmic/copy_of_market_v_2/images/intrepidPrimaryBsvg.svg"
              : "/plasmic/copy_of_market_v_2/images/intrepidLogo2021V2Darksvg.svg"
          }
        />
      </LogoHeader>

      {(hasVariant(globalVariants, "screen", "mobile") ? false : true)
        ? p.renderPlasmicSlot({
            defaultContents: "Section Title",
            value: args.children,
            className: classNames(sty.slotChildren, {
              [sty.slotChildren__color]: hasVariant(variants, "color", "color")
            })
          })
        : null}

      <ButtonPrimary
        data-plasmic-name={"buttonPrimary"}
        data-plasmic-override={overrides.buttonPrimary}
        className={classNames("__wab_instance", sty.buttonPrimary)}
        color={"brand" as const}
        size={"_120" as const}
      >
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.freeBox,
            {
              [sty.freeBox__state_checkout]: hasVariant(
                variants,
                "state",
                "checkout"
              )
            }
          )}
        >
          {hasVariant(variants, "state", "checkout") ? "Place Order" : "Next"}
        </div>
      </ButtonPrimary>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "logoHeader", "img", "buttonPrimary", "freeBox"],
  logoHeader: ["logoHeader", "img"],
  img: ["img"],
  buttonPrimary: ["buttonPrimary", "freeBox"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  logoHeader: typeof LogoHeader;
  img: "img";
  buttonPrimary: typeof ButtonPrimary;
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavbarServiceListing__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavbarServiceListing__VariantsArgs;
    args?: PlasmicNavbarServiceListing__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicNavbarServiceListing__Fetches;
  } & Omit<PlasmicNavbarServiceListing__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNavbarServiceListing__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNavbarServiceListing__ArgProps,
      internalVariantPropNames: PlasmicNavbarServiceListing__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicNavbarServiceListing__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavbarServiceListing";
  } else {
    func.displayName = `PlasmicNavbarServiceListing.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbarServiceListing = Object.assign(
  // Top-level PlasmicNavbarServiceListing renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    logoHeader: makeNodeComponent("logoHeader"),
    img: makeNodeComponent("img"),
    buttonPrimary: makeNodeComponent("buttonPrimary"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicNavbarServiceListing
    internalVariantProps: PlasmicNavbarServiceListing__VariantProps,
    internalArgProps: PlasmicNavbarServiceListing__ArgProps
  }
);

export default PlasmicNavbarServiceListing;
/* prettier-ignore-end */
