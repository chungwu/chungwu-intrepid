// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: yFwfZ0ardR5faM
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavLink from "../../NavLink"; // plasmic-import: XqQQfEEDIGeiz/component
import NavLinkCounter from "../../NavLinkCounter"; // plasmic-import: hZnsIRN1C34btPr/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: biX3aS42hiG0fF/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicNavbarMemberUserProfile.module.css"; // plasmic-import: yFwfZ0ardR5faM/css

export type PlasmicNavbarMemberUserProfile__VariantMembers = {
  selected:
    | "about"
    | "subscriptions"
    | "lists"
    | "teams"
    | "reviews"
    | "reacts"
    | "views";
};

export type PlasmicNavbarMemberUserProfile__VariantsArgs = {
  selected?: SingleChoiceArg<
    | "about"
    | "subscriptions"
    | "lists"
    | "teams"
    | "reviews"
    | "reacts"
    | "views"
  >;
};

type VariantPropType = keyof PlasmicNavbarMemberUserProfile__VariantsArgs;
export const PlasmicNavbarMemberUserProfile__VariantProps =
  new Array<VariantPropType>("selected");

export type PlasmicNavbarMemberUserProfile__ArgsType = {};
type ArgPropType = keyof PlasmicNavbarMemberUserProfile__ArgsType;
export const PlasmicNavbarMemberUserProfile__ArgProps =
  new Array<ArgPropType>();

export type PlasmicNavbarMemberUserProfile__OverridesType = {
  root?: p.Flex<"div">;
  parent?: p.Flex<"div">;
  navLink?: p.Flex<typeof NavLink>;
};

export interface DefaultNavbarMemberUserProfileProps {
  selected?: SingleChoiceArg<
    | "about"
    | "subscriptions"
    | "lists"
    | "teams"
    | "reviews"
    | "reacts"
    | "views"
  >;
  className?: string;
}

function PlasmicNavbarMemberUserProfile__RenderFunc(props: {
  variants: PlasmicNavbarMemberUserProfile__VariantsArgs;
  args: PlasmicNavbarMemberUserProfile__ArgsType;
  overrides: PlasmicNavbarMemberUserProfile__OverridesType;
  dataFetches?: PlasmicNavbarMemberUserProfile__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    (
      hasVariant(globalVariants, "screen", "mobile")
        ? true
        : hasVariant(globalVariants, "screen", "desktop")
        ? true
        : true
    ) ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
      >
        {(
          hasVariant(globalVariants, "screen", "mobile")
            ? true
            : hasVariant(globalVariants, "screen", "desktop")
            ? true
            : true
        ) ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"parent"}
            data-plasmic-override={overrides.parent}
            hasGap={true}
            className={classNames(defaultcss.all, sty.parent)}
          >
            {(
              hasVariant(globalVariants, "screen", "mobile")
                ? true
                : hasVariant(globalVariants, "screen", "desktop")
                ? true
                : true
            ) ? (
              <NavLink
                data-plasmic-name={"navLink"}
                data-plasmic-override={overrides.navLink}
                className={classNames("__wab_instance", sty.navLink, {
                  [sty.navLink__selected_lists]: hasVariant(
                    variants,
                    "selected",
                    "lists"
                  ),
                  [sty.navLink__selected_reacts]: hasVariant(
                    variants,
                    "selected",
                    "reacts"
                  ),
                  [sty.navLink__selected_reviews]: hasVariant(
                    variants,
                    "selected",
                    "reviews"
                  ),
                  [sty.navLink__selected_subscriptions]: hasVariant(
                    variants,
                    "selected",
                    "subscriptions"
                  ),
                  [sty.navLink__selected_teams]: hasVariant(
                    variants,
                    "selected",
                    "teams"
                  ),
                  [sty.navLink__selected_views]: hasVariant(
                    variants,
                    "selected",
                    "views"
                  )
                })}
                linkText={
                  hasVariant(globalVariants, "screen", "desktop")
                    ? "About"
                    : "About"
                }
                state={
                  hasVariant(variants, "selected", "views")
                    ? undefined
                    : hasVariant(variants, "selected", "reacts")
                    ? undefined
                    : hasVariant(variants, "selected", "reviews")
                    ? undefined
                    : hasVariant(variants, "selected", "teams")
                    ? undefined
                    : hasVariant(variants, "selected", "lists")
                    ? undefined
                    : hasVariant(variants, "selected", "subscriptions")
                    ? undefined
                    : hasVariant(globalVariants, "screen", "desktop")
                    ? ("selected" as const)
                    : ("selected" as const)
                }
              />
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "mobile")
                ? true
                : hasVariant(globalVariants, "screen", "desktop")
                ? true
                : true
            ) ? (
              <NavLinkCounter
                className={classNames(
                  "__wab_instance",
                  sty.navLinkCounter__vPdgU,
                  {
                    [sty.navLinkCounter__selected_subscriptions__vPdgUAiFic]:
                      hasVariant(variants, "selected", "subscriptions")
                  }
                )}
                navLabel={
                  hasVariant(globalVariants, "screen", "desktop")
                    ? "Subscriptions"
                    : "Subscriptions"
                }
                numberValue={
                  hasVariant(globalVariants, "screen", "desktop") ? "3" : "278"
                }
                state={
                  hasVariant(variants, "selected", "subscriptions")
                    ? ("selected" as const)
                    : ("disabled" as const)
                }
              />
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "mobile")
                ? true
                : hasVariant(globalVariants, "screen", "desktop")
                ? true
                : true
            ) ? (
              <NavLinkCounter
                className={classNames(
                  "__wab_instance",
                  sty.navLinkCounter__g5Zw,
                  {
                    [sty.navLinkCounter__selected_lists__g5ZwUGl]: hasVariant(
                      variants,
                      "selected",
                      "lists"
                    )
                  }
                )}
                navLabel={
                  hasVariant(globalVariants, "screen", "desktop")
                    ? "Lists"
                    : "Lists"
                }
                numberValue={
                  hasVariant(globalVariants, "screen", "desktop") ? "12" : "8"
                }
                state={
                  hasVariant(variants, "selected", "lists")
                    ? ("selected" as const)
                    : ("disabled" as const)
                }
              />
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "mobile")
                ? true
                : hasVariant(globalVariants, "screen", "desktop")
                ? true
                : true
            ) ? (
              <NavLinkCounter
                className={classNames(
                  "__wab_instance",
                  sty.navLinkCounter__zugKz,
                  {
                    [sty.navLinkCounter__selected_teams__zugKzXQj1]: hasVariant(
                      variants,
                      "selected",
                      "teams"
                    )
                  }
                )}
                navLabel={
                  hasVariant(globalVariants, "screen", "desktop")
                    ? "Teams"
                    : "Teams"
                }
                numberValue={
                  hasVariant(globalVariants, "screen", "desktop") ? "12" : "12"
                }
                state={
                  hasVariant(variants, "selected", "teams")
                    ? ("selected" as const)
                    : ("disabled" as const)
                }
              />
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "mobile")
                ? true
                : hasVariant(globalVariants, "screen", "desktop")
                ? true
                : true
            ) ? (
              <NavLinkCounter
                className={classNames(
                  "__wab_instance",
                  sty.navLinkCounter__s39Xw,
                  {
                    [sty.navLinkCounter__selected_reviews__s39XWzl7RO]:
                      hasVariant(variants, "selected", "reviews")
                  }
                )}
                navLabel={
                  hasVariant(globalVariants, "screen", "desktop")
                    ? "Reviews"
                    : "Reviews"
                }
                numberValue={
                  hasVariant(globalVariants, "screen", "desktop") ? "12" : "162"
                }
                state={
                  hasVariant(variants, "selected", "reviews")
                    ? ("selected" as const)
                    : ("disabled" as const)
                }
              />
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "mobile")
                ? true
                : hasVariant(globalVariants, "screen", "desktop")
                ? true
                : true
            ) ? (
              <NavLinkCounter
                className={classNames(
                  "__wab_instance",
                  sty.navLinkCounter__ss14I,
                  {
                    [sty.navLinkCounter__selected_reacts__ss14IqFbbX]:
                      hasVariant(variants, "selected", "reacts")
                  }
                )}
                navLabel={
                  hasVariant(globalVariants, "screen", "desktop")
                    ? "Reacts"
                    : "Reacts"
                }
                numberValue={
                  hasVariant(globalVariants, "screen", "desktop")
                    ? "999"
                    : "24k"
                }
                state={
                  hasVariant(variants, "selected", "reacts")
                    ? ("selected" as const)
                    : ("disabled" as const)
                }
              />
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "mobile")
                ? true
                : hasVariant(globalVariants, "screen", "desktop")
                ? true
                : true
            ) ? (
              <NavLinkCounter
                className={classNames(
                  "__wab_instance",
                  sty.navLinkCounter__xvyX5,
                  {
                    [sty.navLinkCounter__selected_views__xvyX5YXmvc]:
                      hasVariant(variants, "selected", "views")
                  }
                )}
                navLabel={
                  hasVariant(globalVariants, "screen", "desktop")
                    ? "Views"
                    : "Views"
                }
                numberValue={
                  hasVariant(globalVariants, "screen", "desktop")
                    ? "999"
                    : "100k"
                }
                state={
                  hasVariant(variants, "selected", "views")
                    ? ("selected" as const)
                    : ("disabled" as const)
                }
              />
            ) : null}
          </p.Stack>
        ) : null}
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "parent", "navLink"],
  parent: ["parent", "navLink"],
  navLink: ["navLink"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  parent: "div";
  navLink: typeof NavLink;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavbarMemberUserProfile__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavbarMemberUserProfile__VariantsArgs;
    args?: PlasmicNavbarMemberUserProfile__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicNavbarMemberUserProfile__Fetches;
  } & Omit<PlasmicNavbarMemberUserProfile__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNavbarMemberUserProfile__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNavbarMemberUserProfile__ArgProps,
      internalVariantPropNames: PlasmicNavbarMemberUserProfile__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicNavbarMemberUserProfile__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavbarMemberUserProfile";
  } else {
    func.displayName = `PlasmicNavbarMemberUserProfile.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbarMemberUserProfile = Object.assign(
  // Top-level PlasmicNavbarMemberUserProfile renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    parent: makeNodeComponent("parent"),
    navLink: makeNodeComponent("navLink"),

    // Metadata about props expected for PlasmicNavbarMemberUserProfile
    internalVariantProps: PlasmicNavbarMemberUserProfile__VariantProps,
    internalArgProps: PlasmicNavbarMemberUserProfile__ArgProps
  }
);

export default PlasmicNavbarMemberUserProfile;
/* prettier-ignore-end */
