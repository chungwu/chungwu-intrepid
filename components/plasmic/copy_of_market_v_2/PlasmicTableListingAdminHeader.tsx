// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: AEcfdxG0mYS8vu
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ElementRadioPrimary from "../../ElementRadioPrimary"; // plasmic-import: LCJ0Mh3XlqeJy94/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: biX3aS42hiG0fF/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicTableListingAdminHeader.module.css"; // plasmic-import: AEcfdxG0mYS8vu/css

export type PlasmicTableListingAdminHeader__VariantMembers = {};

export type PlasmicTableListingAdminHeader__VariantsArgs = {};
type VariantPropType = keyof PlasmicTableListingAdminHeader__VariantsArgs;
export const PlasmicTableListingAdminHeader__VariantProps =
  new Array<VariantPropType>();

export type PlasmicTableListingAdminHeader__ArgsType = {};
type ArgPropType = keyof PlasmicTableListingAdminHeader__ArgsType;
export const PlasmicTableListingAdminHeader__ArgProps =
  new Array<ArgPropType>();

export type PlasmicTableListingAdminHeader__OverridesType = {
  root?: p.Flex<"div">;
  listingHeadlineSelectAllParent?: p.Flex<"div">;
  elementRadioPrimary?: p.Flex<typeof ElementRadioPrimary>;
  listingParent?: p.Flex<"div">;
  statusParent?: p.Flex<"div">;
  toDoParent?: p.Flex<"div">;
  modifiedDateParent?: p.Flex<"div">;
  categoryParent?: p.Flex<"div">;
  priceParent?: p.Flex<"div">;
  termParent?: p.Flex<"div">;
  expiryParent?: p.Flex<"div">;
  renewParent?: p.Flex<"div">;
  cancelParent?: p.Flex<"div">;
};

export interface DefaultTableListingAdminHeaderProps {
  className?: string;
}

function PlasmicTableListingAdminHeader__RenderFunc(props: {
  variants: PlasmicTableListingAdminHeader__VariantsArgs;
  args: PlasmicTableListingAdminHeader__ArgsType;
  overrides: PlasmicTableListingAdminHeader__OverridesType;
  dataFetches?: PlasmicTableListingAdminHeader__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"listingHeadlineSelectAllParent"}
        data-plasmic-override={overrides.listingHeadlineSelectAllParent}
        hasGap={true}
        className={classNames(
          defaultcss.all,
          sty.listingHeadlineSelectAllParent
        )}
      >
        <ElementRadioPrimary
          data-plasmic-name={"elementRadioPrimary"}
          data-plasmic-override={overrides.elementRadioPrimary}
          className={classNames("__wab_instance", sty.elementRadioPrimary)}
          size={"_14Px" as const}
        />

        <div
          data-plasmic-name={"listingParent"}
          data-plasmic-override={overrides.listingParent}
          className={classNames(defaultcss.all, sty.listingParent)}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox___7QIz
            )}
          >
            {"Listing"}
          </div>
        </div>
      </p.Stack>

      {(hasVariant(globalVariants, "screen", "mobile") ? true : true) ? (
        <div
          data-plasmic-name={"statusParent"}
          data-plasmic-override={overrides.statusParent}
          className={classNames(defaultcss.all, sty.statusParent)}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox__zYpB7
            )}
          >
            {"Status"}
          </div>
        </div>
      ) : null}
      {(hasVariant(globalVariants, "screen", "mobile") ? true : true) ? (
        <div
          data-plasmic-name={"toDoParent"}
          data-plasmic-override={overrides.toDoParent}
          className={classNames(defaultcss.all, sty.toDoParent)}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox___49B75
            )}
          >
            {"To do"}
          </div>
        </div>
      ) : null}
      {(hasVariant(globalVariants, "screen", "mobile") ? true : true) ? (
        <div
          data-plasmic-name={"modifiedDateParent"}
          data-plasmic-override={overrides.modifiedDateParent}
          className={classNames(defaultcss.all, sty.modifiedDateParent)}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox__atSvr
            )}
          >
            {"modified"}
          </div>
        </div>
      ) : null}
      {(hasVariant(globalVariants, "screen", "mobile") ? true : true) ? (
        <div
          data-plasmic-name={"categoryParent"}
          data-plasmic-override={overrides.categoryParent}
          className={classNames(defaultcss.all, sty.categoryParent)}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox__ulxn6
            )}
          >
            {"Category"}
          </div>
        </div>
      ) : null}
      {(hasVariant(globalVariants, "screen", "mobile") ? true : true) ? (
        <div
          data-plasmic-name={"priceParent"}
          data-plasmic-override={overrides.priceParent}
          className={classNames(defaultcss.all, sty.priceParent)}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox___2VHab
            )}
          >
            {"Price"}
          </div>
        </div>
      ) : null}
      {(hasVariant(globalVariants, "screen", "mobile") ? true : true) ? (
        <div
          data-plasmic-name={"termParent"}
          data-plasmic-override={overrides.termParent}
          className={classNames(defaultcss.all, sty.termParent)}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox___468Lk
            )}
          >
            {"Term"}
          </div>
        </div>
      ) : null}
      {(hasVariant(globalVariants, "screen", "mobile") ? true : true) ? (
        <div
          data-plasmic-name={"expiryParent"}
          data-plasmic-override={overrides.expiryParent}
          className={classNames(defaultcss.all, sty.expiryParent)}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox__hIaYe
            )}
          >
            {"Expiry"}
          </div>
        </div>
      ) : null}
      {(hasVariant(globalVariants, "screen", "mobile") ? true : true) ? (
        <div
          data-plasmic-name={"renewParent"}
          data-plasmic-override={overrides.renewParent}
          className={classNames(defaultcss.all, sty.renewParent)}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox__ry5Mf
            )}
          >
            {"Auto-renew"}
          </div>
        </div>
      ) : null}
      {(hasVariant(globalVariants, "screen", "mobile") ? true : true) ? (
        <div
          data-plasmic-name={"cancelParent"}
          data-plasmic-override={overrides.cancelParent}
          className={classNames(defaultcss.all, sty.cancelParent)}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox__a6Fmy
            )}
          >
            {"Cancel"}
          </div>
        </div>
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "listingHeadlineSelectAllParent",
    "elementRadioPrimary",
    "listingParent",
    "statusParent",
    "toDoParent",
    "modifiedDateParent",
    "categoryParent",
    "priceParent",
    "termParent",
    "expiryParent",
    "renewParent",
    "cancelParent"
  ],
  listingHeadlineSelectAllParent: [
    "listingHeadlineSelectAllParent",
    "elementRadioPrimary",
    "listingParent"
  ],
  elementRadioPrimary: ["elementRadioPrimary"],
  listingParent: ["listingParent"],
  statusParent: ["statusParent"],
  toDoParent: ["toDoParent"],
  modifiedDateParent: ["modifiedDateParent"],
  categoryParent: ["categoryParent"],
  priceParent: ["priceParent"],
  termParent: ["termParent"],
  expiryParent: ["expiryParent"],
  renewParent: ["renewParent"],
  cancelParent: ["cancelParent"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  listingHeadlineSelectAllParent: "div";
  elementRadioPrimary: typeof ElementRadioPrimary;
  listingParent: "div";
  statusParent: "div";
  toDoParent: "div";
  modifiedDateParent: "div";
  categoryParent: "div";
  priceParent: "div";
  termParent: "div";
  expiryParent: "div";
  renewParent: "div";
  cancelParent: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTableListingAdminHeader__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTableListingAdminHeader__VariantsArgs;
    args?: PlasmicTableListingAdminHeader__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicTableListingAdminHeader__Fetches;
  } & Omit<PlasmicTableListingAdminHeader__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTableListingAdminHeader__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTableListingAdminHeader__ArgProps,
      internalVariantPropNames: PlasmicTableListingAdminHeader__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicTableListingAdminHeader__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTableListingAdminHeader";
  } else {
    func.displayName = `PlasmicTableListingAdminHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicTableListingAdminHeader = Object.assign(
  // Top-level PlasmicTableListingAdminHeader renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    listingHeadlineSelectAllParent: makeNodeComponent(
      "listingHeadlineSelectAllParent"
    ),
    elementRadioPrimary: makeNodeComponent("elementRadioPrimary"),
    listingParent: makeNodeComponent("listingParent"),
    statusParent: makeNodeComponent("statusParent"),
    toDoParent: makeNodeComponent("toDoParent"),
    modifiedDateParent: makeNodeComponent("modifiedDateParent"),
    categoryParent: makeNodeComponent("categoryParent"),
    priceParent: makeNodeComponent("priceParent"),
    termParent: makeNodeComponent("termParent"),
    expiryParent: makeNodeComponent("expiryParent"),
    renewParent: makeNodeComponent("renewParent"),
    cancelParent: makeNodeComponent("cancelParent"),

    // Metadata about props expected for PlasmicTableListingAdminHeader
    internalVariantProps: PlasmicTableListingAdminHeader__VariantProps,
    internalArgProps: PlasmicTableListingAdminHeader__ArgProps
  }
);

export default PlasmicTableListingAdminHeader;
/* prettier-ignore-end */
