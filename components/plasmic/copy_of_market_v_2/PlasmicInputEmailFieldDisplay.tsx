// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: VqUqrqjkoC9OCv4
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicInputEmailFieldDisplay.module.css"; // plasmic-import: VqUqrqjkoC9OCv4/css

export type PlasmicInputEmailFieldDisplay__VariantMembers = {};

export type PlasmicInputEmailFieldDisplay__VariantsArgs = {};
type VariantPropType = keyof PlasmicInputEmailFieldDisplay__VariantsArgs;
export const PlasmicInputEmailFieldDisplay__VariantProps =
  new Array<VariantPropType>();

export type PlasmicInputEmailFieldDisplay__ArgsType = {
  buttonText?: React.ReactNode;
};

type ArgPropType = keyof PlasmicInputEmailFieldDisplay__ArgsType;
export const PlasmicInputEmailFieldDisplay__ArgProps = new Array<ArgPropType>(
  "buttonText"
);

export type PlasmicInputEmailFieldDisplay__OverridesType = {
  root?: p.Flex<"div">;
  parent?: p.Flex<"div">;
  textbox?: p.Flex<"input">;
  button?: p.Flex<"button">;
};

export interface DefaultInputEmailFieldDisplayProps {
  buttonText?: React.ReactNode;
  className?: string;
}

function PlasmicInputEmailFieldDisplay__RenderFunc(props: {
  variants: PlasmicInputEmailFieldDisplay__VariantsArgs;
  args: PlasmicInputEmailFieldDisplay__ArgsType;
  overrides: PlasmicInputEmailFieldDisplay__OverridesType;
  dataFetches?: PlasmicInputEmailFieldDisplay__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"parent"}
        data-plasmic-override={overrides.parent}
        hasGap={true}
        className={classNames(defaultcss.all, sty.parent)}
      >
        <input
          data-plasmic-name={"textbox"}
          data-plasmic-override={overrides.textbox}
          className={classNames(defaultcss.input, sty.textbox)}
          placeholder={"Enter your..." as const}
          size={1 as const}
          type={"text" as const}
          value={"" as const}
        />

        <button
          data-plasmic-name={"button"}
          data-plasmic-override={overrides.button}
          className={classNames(defaultcss.button, sty.button)}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Click Me",
            value: args.buttonText,
            className: classNames(sty.slotButtonText)
          })}
        </button>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "parent", "textbox", "button"],
  parent: ["parent", "textbox", "button"],
  textbox: ["textbox"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  parent: "div";
  textbox: "input";
  button: "button";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInputEmailFieldDisplay__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicInputEmailFieldDisplay__VariantsArgs;
    args?: PlasmicInputEmailFieldDisplay__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicInputEmailFieldDisplay__Fetches;
  } & Omit<PlasmicInputEmailFieldDisplay__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicInputEmailFieldDisplay__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicInputEmailFieldDisplay__ArgProps,
      internalVariantPropNames: PlasmicInputEmailFieldDisplay__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicInputEmailFieldDisplay__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInputEmailFieldDisplay";
  } else {
    func.displayName = `PlasmicInputEmailFieldDisplay.${nodeName}`;
  }
  return func;
}

export const PlasmicInputEmailFieldDisplay = Object.assign(
  // Top-level PlasmicInputEmailFieldDisplay renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    parent: makeNodeComponent("parent"),
    textbox: makeNodeComponent("textbox"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicInputEmailFieldDisplay
    internalVariantProps: PlasmicInputEmailFieldDisplay__VariantProps,
    internalArgProps: PlasmicInputEmailFieldDisplay__ArgProps
  }
);

export default PlasmicInputEmailFieldDisplay;
/* prettier-ignore-end */
