// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: Mx4HQhNc2W5WKP
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicChipCategoryHeader.module.css"; // plasmic-import: Mx4HQhNc2W5WKP/css

import ChevronRightIcon from "./icons/PlasmicIcon__ChevronRight"; // plasmic-import: m28uAvImID5kjZn/icon

export type PlasmicChipCategoryHeader__VariantMembers = {
  color:
    | "bgLightB"
    | "bgDarkA"
    | "bgBrandLight"
    | "bgBlueLight"
    | "bgPinkLight"
    | "bgMagentaLight";
  size: "_180" | "_270" | "_360";
};

export type PlasmicChipCategoryHeader__VariantsArgs = {
  color?: SingleChoiceArg<
    | "bgLightB"
    | "bgDarkA"
    | "bgBrandLight"
    | "bgBlueLight"
    | "bgPinkLight"
    | "bgMagentaLight"
  >;
  size?: SingleChoiceArg<"_180" | "_270" | "_360">;
};

type VariantPropType = keyof PlasmicChipCategoryHeader__VariantsArgs;
export const PlasmicChipCategoryHeader__VariantProps =
  new Array<VariantPropType>("color", "size");

export type PlasmicChipCategoryHeader__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  target?: string;
};

type ArgPropType = keyof PlasmicChipCategoryHeader__ArgsType;
export const PlasmicChipCategoryHeader__ArgProps = new Array<ArgPropType>(
  "children",
  "slot",
  "target"
);

export type PlasmicChipCategoryHeader__OverridesType = {
  root?: p.Flex<"a"> & Partial<LinkProps>;
};

export interface DefaultChipCategoryHeaderProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  target?: string;
  color?: SingleChoiceArg<
    | "bgLightB"
    | "bgDarkA"
    | "bgBrandLight"
    | "bgBlueLight"
    | "bgPinkLight"
    | "bgMagentaLight"
  >;
  size?: SingleChoiceArg<"_180" | "_270" | "_360">;
  className?: string;
}

function PlasmicChipCategoryHeader__RenderFunc(props: {
  variants: PlasmicChipCategoryHeader__VariantsArgs;
  args: PlasmicChipCategoryHeader__ArgsType;
  overrides: PlasmicChipCategoryHeader__OverridesType;
  dataFetches?: PlasmicChipCategoryHeader__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={p.PlasmicLink}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__color_bgBlueLight]: hasVariant(
          variants,
          "color",
          "bgBlueLight"
        ),
        [sty.root__color_bgBrandLight]: hasVariant(
          variants,
          "color",
          "bgBrandLight"
        ),
        [sty.root__color_bgDarkA]: hasVariant(variants, "color", "bgDarkA"),
        [sty.root__color_bgLightB]: hasVariant(variants, "color", "bgLightB"),
        [sty.root__color_bgMagentaLight]: hasVariant(
          variants,
          "color",
          "bgMagentaLight"
        ),
        [sty.root__color_bgMagentaLight_size__180]:
          hasVariant(variants, "color", "bgMagentaLight") &&
          hasVariant(variants, "size", "_180"),
        [sty.root__color_bgPinkLight]: hasVariant(
          variants,
          "color",
          "bgPinkLight"
        ),
        [sty.root__size__180]: hasVariant(variants, "size", "_180"),
        [sty.root__size__270]: hasVariant(variants, "size", "_270"),
        [sty.root__size__360]: hasVariant(variants, "size", "_360")
      })}
      component={Link}
      platform={"nextjs"}
    >
      <div
        className={classNames(defaultcss.all, sty.freeBox__faOfF, {
          [sty.freeBox__size__180__faOfFjc647]: hasVariant(
            variants,
            "size",
            "_180"
          ),
          [sty.freeBox__size__360__faOfFxpEaS]: hasVariant(
            variants,
            "size",
            "_360"
          )
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <ChevronRightIcon
              className={classNames(defaultcss.all, sty.svg__sxa3)}
              role={"img"}
            />
          ),

          value: args.children,
          className: classNames(sty.slotChildren, {
            [sty.slotChildren__color_bgDarkA]: hasVariant(
              variants,
              "color",
              "bgDarkA"
            ),
            [sty.slotChildren__color_bgLightB]: hasVariant(
              variants,
              "color",
              "bgLightB"
            ),
            [sty.slotChildren__size__180]: hasVariant(variants, "size", "_180"),
            [sty.slotChildren__size__360]: hasVariant(variants, "size", "_360")
          })
        })}
      </div>

      <div
        className={classNames(defaultcss.all, sty.freeBox__hhU7V, {
          [sty.freeBox__size__360__hhU7VxpEaS]: hasVariant(
            variants,
            "size",
            "_360"
          )
        })}
      >
        <div
          className={classNames(defaultcss.all, sty.freeBox__jqvuZ, {
            [sty.freeBox__color_bgDarkA__jqvuZiIWwR]: hasVariant(
              variants,
              "color",
              "bgDarkA"
            ),
            [sty.freeBox__size__360__jqvuZxpEaS]: hasVariant(
              variants,
              "size",
              "_360"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Headline category",
            value: args.slot,
            className: classNames(sty.slotSlot, {
              [sty.slotSlot__color_bgDarkA]: hasVariant(
                variants,
                "color",
                "bgDarkA"
              ),
              [sty.slotSlot__color_bgLightB]: hasVariant(
                variants,
                "color",
                "bgLightB"
              ),
              [sty.slotSlot__size__180]: hasVariant(variants, "size", "_180"),
              [sty.slotSlot__size__270]: hasVariant(variants, "size", "_270"),
              [sty.slotSlot__size__360]: hasVariant(variants, "size", "_360")
            })
          })}
        </div>
      </div>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicChipCategoryHeader__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicChipCategoryHeader__VariantsArgs;
    args?: PlasmicChipCategoryHeader__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicChipCategoryHeader__Fetches;
  } & Omit<PlasmicChipCategoryHeader__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicChipCategoryHeader__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicChipCategoryHeader__ArgProps,
      internalVariantPropNames: PlasmicChipCategoryHeader__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicChipCategoryHeader__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicChipCategoryHeader";
  } else {
    func.displayName = `PlasmicChipCategoryHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicChipCategoryHeader = Object.assign(
  // Top-level PlasmicChipCategoryHeader renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicChipCategoryHeader
    internalVariantProps: PlasmicChipCategoryHeader__VariantProps,
    internalArgProps: PlasmicChipCategoryHeader__ArgProps
  }
);

export default PlasmicChipCategoryHeader;
/* prettier-ignore-end */
