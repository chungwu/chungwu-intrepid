// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: fajj6T1z8UI-X8
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavLink from "../../NavLink"; // plasmic-import: XqQQfEEDIGeiz/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicNavbarVertical.module.css"; // plasmic-import: fajj6T1z8UI-X8/css

export type PlasmicNavbarVertical__VariantMembers = {
  _switch: "_switch";
  user: "member" | "partner";
  size: "_360" | "_270" | "_180";
};

export type PlasmicNavbarVertical__VariantsArgs = {
  _switch?: SingleBooleanChoiceArg<"_switch">;
  user?: SingleChoiceArg<"member" | "partner">;
  size?: SingleChoiceArg<"_360" | "_270" | "_180">;
};

type VariantPropType = keyof PlasmicNavbarVertical__VariantsArgs;
export const PlasmicNavbarVertical__VariantProps = new Array<VariantPropType>(
  "_switch",
  "user",
  "size"
);

export type PlasmicNavbarVertical__ArgsType = {
  linkText?: React.ReactNode;
  slot4?: React.ReactNode;
};

type ArgPropType = keyof PlasmicNavbarVertical__ArgsType;
export const PlasmicNavbarVertical__ArgProps = new Array<ArgPropType>(
  "linkText",
  "slot4"
);

export type PlasmicNavbarVertical__OverridesType = {
  sidePanel?: p.Flex<"div">;
  navCard?: p.Flex<"div">;
  iconParent?: p.Flex<"div">;
  navLinkParent?: p.Flex<"div">;
  navLink?: p.Flex<typeof NavLink>;
};

export interface DefaultNavbarVerticalProps {
  linkText?: React.ReactNode;
  slot4?: React.ReactNode;
  _switch?: SingleBooleanChoiceArg<"_switch">;
  user?: SingleChoiceArg<"member" | "partner">;
  size?: SingleChoiceArg<"_360" | "_270" | "_180">;
  className?: string;
}

function PlasmicNavbarVertical__RenderFunc(props: {
  variants: PlasmicNavbarVertical__VariantsArgs;
  args: PlasmicNavbarVertical__ArgsType;
  overrides: PlasmicNavbarVertical__OverridesType;
  dataFetches?: PlasmicNavbarVertical__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"sidePanel"}
      data-plasmic-override={overrides.sidePanel}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        defaultcss.all,
        projectcss.root_reset,
        sty.sidePanel,
        { [sty.sidePanel___switch]: hasVariant(variants, "_switch", "_switch") }
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"navCard"}
        data-plasmic-override={overrides.navCard}
        hasGap={true}
        className={classNames(defaultcss.all, sty.navCard, {
          [sty.navCard___switch]: hasVariant(variants, "_switch", "_switch"),
          [sty.navCard__user_partner]: hasVariant(variants, "user", "partner")
        })}
      >
        <div
          data-plasmic-name={"iconParent"}
          data-plasmic-override={overrides.iconParent}
          className={classNames(defaultcss.all, sty.iconParent, {
            [sty.iconParent___switch]: hasVariant(
              variants,
              "_switch",
              "_switch"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <svg
                className={classNames(defaultcss.all, sty.svg__yaTap)}
                role={"img"}
              />
            ),

            value: args.slot4
          })}
        </div>

        <div
          data-plasmic-name={"navLinkParent"}
          data-plasmic-override={overrides.navLinkParent}
          className={classNames(defaultcss.all, sty.navLinkParent, {
            [sty.navLinkParent___switch]: hasVariant(
              variants,
              "_switch",
              "_switch"
            )
          })}
        >
          <NavLink
            data-plasmic-name={"navLink"}
            data-plasmic-override={overrides.navLink}
            className={classNames("__wab_instance", sty.navLink, {
              [sty.navLink___switch]: hasVariant(variants, "_switch", "_switch")
            })}
            linkText={p.renderPlasmicSlot({
              defaultContents: "click me",
              value: args.linkText,
              className: classNames(sty.slotLinkText, {
                [sty.slotLinkText___switch]: hasVariant(
                  variants,
                  "_switch",
                  "_switch"
                ),
                [sty.slotLinkText__user_partner]: hasVariant(
                  variants,
                  "user",
                  "partner"
                )
              })
            })}
          />
        </div>
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  sidePanel: ["sidePanel", "navCard", "iconParent", "navLinkParent", "navLink"],
  navCard: ["navCard", "iconParent", "navLinkParent", "navLink"],
  iconParent: ["iconParent"],
  navLinkParent: ["navLinkParent", "navLink"],
  navLink: ["navLink"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  sidePanel: "div";
  navCard: "div";
  iconParent: "div";
  navLinkParent: "div";
  navLink: typeof NavLink;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavbarVertical__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavbarVertical__VariantsArgs;
    args?: PlasmicNavbarVertical__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicNavbarVertical__Fetches;
  } & Omit<PlasmicNavbarVertical__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNavbarVertical__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNavbarVertical__ArgProps,
      internalVariantPropNames: PlasmicNavbarVertical__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicNavbarVertical__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "sidePanel") {
    func.displayName = "PlasmicNavbarVertical";
  } else {
    func.displayName = `PlasmicNavbarVertical.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbarVertical = Object.assign(
  // Top-level PlasmicNavbarVertical renders the root element
  makeNodeComponent("sidePanel"),
  {
    // Helper components rendering sub-elements
    navCard: makeNodeComponent("navCard"),
    iconParent: makeNodeComponent("iconParent"),
    navLinkParent: makeNodeComponent("navLinkParent"),
    navLink: makeNodeComponent("navLink"),

    // Metadata about props expected for PlasmicNavbarVertical
    internalVariantProps: PlasmicNavbarVertical__VariantProps,
    internalArgProps: PlasmicNavbarVertical__ArgProps
  }
);

export default PlasmicNavbarVertical;
/* prettier-ignore-end */
