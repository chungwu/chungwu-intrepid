// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: 18mEdZZTbGkBq6
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TextLinkArrow from "../../TextLinkArrow"; // plasmic-import: owlfhtgWXRNTq-/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: biX3aS42hiG0fF/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicAlertRedirectUser.module.css"; // plasmic-import: 18mEdZZTbGkBq6/css

import Icon42Icon from "./icons/PlasmicIcon__Icon42"; // plasmic-import: nnjVCoy3v9C1hIs/icon
import Icon118Icon from "./icons/PlasmicIcon__Icon118"; // plasmic-import: pXVovyNfHjQVjud/icon
import ChevronLeftIcon from "./icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r8gtrzySptnr1T7/icon

export type PlasmicAlertRedirectUser__VariantMembers = {
  partner: "partner";
  color: "light" | "dark" | "brand";
};

export type PlasmicAlertRedirectUser__VariantsArgs = {
  partner?: SingleBooleanChoiceArg<"partner">;
  color?: SingleChoiceArg<"light" | "dark" | "brand">;
};

type VariantPropType = keyof PlasmicAlertRedirectUser__VariantsArgs;
export const PlasmicAlertRedirectUser__VariantProps =
  new Array<VariantPropType>("partner", "color");

export type PlasmicAlertRedirectUser__ArgsType = {};
type ArgPropType = keyof PlasmicAlertRedirectUser__ArgsType;
export const PlasmicAlertRedirectUser__ArgProps = new Array<ArgPropType>();

export type PlasmicAlertRedirectUser__OverridesType = {
  root?: p.Flex<"div">;
  textLinkArrow?: p.Flex<typeof TextLinkArrow>;
  link?: p.Flex<"a"> & Partial<LinkProps>;
};

export interface DefaultAlertRedirectUserProps {
  partner?: SingleBooleanChoiceArg<"partner">;
  color?: SingleChoiceArg<"light" | "dark" | "brand">;
  className?: string;
}

function PlasmicAlertRedirectUser__RenderFunc(props: {
  variants: PlasmicAlertRedirectUser__VariantsArgs;
  args: PlasmicAlertRedirectUser__ArgsType;
  overrides: PlasmicAlertRedirectUser__OverridesType;
  dataFetches?: PlasmicAlertRedirectUser__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__color_brand]: hasVariant(variants, "color", "brand"),
        [sty.root__color_dark]: hasVariant(variants, "color", "dark"),
        [sty.root__color_light]: hasVariant(variants, "color", "light"),
        [sty.root__partner]: hasVariant(variants, "partner", "partner")
      })}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.freeBox__x3BdD)}
      >
        {(
          hasVariant(globalVariants, "screen", "mobile")
            ? true
            : hasVariant(globalVariants, "screen", "desktop")
            ? true
            : true
        ) ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.freeBox__u3AvM)}
          >
            <Icon42Icon
              className={classNames(defaultcss.all, sty.svg___8BwoH, {
                [sty.svg__color_light___8BwoHzB8F]: hasVariant(
                  variants,
                  "color",
                  "light"
                )
              })}
              role={"img"}
            />

            {(hasVariant(globalVariants, "screen", "mobile") ? true : false) ? (
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.freeBox__hZC7,
                  {
                    [sty.freeBox__color_light__hZC7ZB8F]: hasVariant(
                      variants,
                      "color",
                      "light"
                    ),
                    [sty.freeBox__partner__hZC7SCGd7]: hasVariant(
                      variants,
                      "partner",
                      "partner"
                    )
                  }
                )}
              >
                {hasVariant(variants, "partner", "partner") ? (
                  <span>
                    <React.Fragment>{"Do you want to "}</React.Fragment>
                    <span style={{ textDecoration: "underline" }}>
                      {"sell"}
                    </span>
                    <React.Fragment>
                      {" technology and creative services to our members?"}
                    </React.Fragment>
                  </span>
                ) : (
                  <span>
                    <React.Fragment>{"Do you want to "}</React.Fragment>
                    <span style={{ textDecoration: "underline" }}>
                      {"find"}
                    </span>
                    <React.Fragment>
                      {" technology and creative services for your business?"}
                    </React.Fragment>
                  </span>
                )}
              </div>
            ) : null}
          </p.Stack>
        ) : null}
        {(hasVariant(globalVariants, "screen", "mobile") ? false : true) ? (
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox___7Dt0K,
              {
                [sty.freeBox__color_light___7Dt0KZB8F]: hasVariant(
                  variants,
                  "color",
                  "light"
                ),
                [sty.freeBox__partner___7Dt0KsCGd7]: hasVariant(
                  variants,
                  "partner",
                  "partner"
                )
              }
            )}
          >
            {hasVariant(variants, "partner", "partner") ? (
              <span>
                <React.Fragment>{"Do you want to "}</React.Fragment>
                <span style={{ textDecoration: "underline" }}>{"sell"}</span>
                <React.Fragment>
                  {" technology and creative services to our members?"}
                </React.Fragment>
              </span>
            ) : (
              <span>
                <React.Fragment>{"Do you want to "}</React.Fragment>
                <span style={{ textDecoration: "underline" }}>{"find"}</span>
                <React.Fragment>
                  {" technology and creative services for your business?"}
                </React.Fragment>
              </span>
            )}
          </div>
        ) : null}

        <TextLinkArrow
          data-plasmic-name={"textLinkArrow"}
          data-plasmic-override={overrides.textLinkArrow}
          className={classNames("__wab_instance", sty.textLinkArrow, {
            [sty.textLinkArrow__color_light]: hasVariant(
              variants,
              "color",
              "light"
            )
          })}
          color={
            hasVariant(variants, "color", "light")
              ? ("brand" as const)
              : ("light" as const)
          }
          direction={"right" as const}
          svgRight={
            <Icon118Icon
              className={classNames(defaultcss.all, sty.svg___5XNj0, {
                [sty.svg__color_light___5XNj0ZB8F]: hasVariant(
                  variants,
                  "color",
                  "light"
                )
              })}
              role={"img"}
            />
          }
        >
          <p.PlasmicLink
            data-plasmic-name={"link"}
            data-plasmic-override={overrides.link}
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.link,
              {
                [sty.link__color_brand]: hasVariant(variants, "color", "brand"),
                [sty.link__color_dark]: hasVariant(variants, "color", "dark"),
                [sty.link__color_light]: hasVariant(variants, "color", "light"),
                [sty.link__partner]: hasVariant(variants, "partner", "partner"),
                [sty.link__partner_color_brand]:
                  hasVariant(variants, "partner", "partner") &&
                  hasVariant(variants, "color", "brand"),
                [sty.link__partner_color_dark]:
                  hasVariant(variants, "partner", "partner") &&
                  hasVariant(variants, "color", "dark"),
                [sty.link__partner_color_light]:
                  hasVariant(variants, "partner", "partner") &&
                  hasVariant(variants, "color", "light")
              }
            )}
            component={Link}
            platform={"nextjs"}
          >
            {hasVariant(variants, "partner", "partner")
              ? "Sell services"
              : "Find services"}
          </p.PlasmicLink>
        </TextLinkArrow>
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "textLinkArrow", "link"],
  textLinkArrow: ["textLinkArrow", "link"],
  link: ["link"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  textLinkArrow: typeof TextLinkArrow;
  link: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAlertRedirectUser__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAlertRedirectUser__VariantsArgs;
    args?: PlasmicAlertRedirectUser__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicAlertRedirectUser__Fetches;
  } & Omit<PlasmicAlertRedirectUser__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAlertRedirectUser__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicAlertRedirectUser__ArgProps,
      internalVariantPropNames: PlasmicAlertRedirectUser__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicAlertRedirectUser__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAlertRedirectUser";
  } else {
    func.displayName = `PlasmicAlertRedirectUser.${nodeName}`;
  }
  return func;
}

export const PlasmicAlertRedirectUser = Object.assign(
  // Top-level PlasmicAlertRedirectUser renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    textLinkArrow: makeNodeComponent("textLinkArrow"),
    link: makeNodeComponent("link"),

    // Metadata about props expected for PlasmicAlertRedirectUser
    internalVariantProps: PlasmicAlertRedirectUser__VariantProps,
    internalArgProps: PlasmicAlertRedirectUser__ArgProps
  }
);

export default PlasmicAlertRedirectUser;
/* prettier-ignore-end */
