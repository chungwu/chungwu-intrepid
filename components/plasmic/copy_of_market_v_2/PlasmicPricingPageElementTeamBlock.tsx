// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: z1m_lEVVJqYOi96
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicPricingPageElementTeamBlock.module.css"; // plasmic-import: z1m_lEVVJqYOi96/css

import TeamPartnersIcon from "./icons/PlasmicIcon__TeamPartners"; // plasmic-import: Hf6TOd80Ag78cQq/icon

export type PlasmicPricingPageElementTeamBlock__VariantMembers = {};

export type PlasmicPricingPageElementTeamBlock__VariantsArgs = {};
type VariantPropType = keyof PlasmicPricingPageElementTeamBlock__VariantsArgs;
export const PlasmicPricingPageElementTeamBlock__VariantProps =
  new Array<VariantPropType>();

export type PlasmicPricingPageElementTeamBlock__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
};

type ArgPropType = keyof PlasmicPricingPageElementTeamBlock__ArgsType;
export const PlasmicPricingPageElementTeamBlock__ArgProps =
  new Array<ArgPropType>("children", "slot", "slot2", "slot3");

export type PlasmicPricingPageElementTeamBlock__OverridesType = {
  root?: p.Flex<"div">;
  elementTeamListItemParent?: p.Flex<"div">;
  elementTeamMembersListItem?: p.Flex<"div">;
  valuePercentParent23242?: p.Flex<"div">;
};

export interface DefaultPricingPageElementTeamBlockProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  className?: string;
}

function PlasmicPricingPageElementTeamBlock__RenderFunc(props: {
  variants: PlasmicPricingPageElementTeamBlock__VariantsArgs;
  args: PlasmicPricingPageElementTeamBlock__ArgsType;
  overrides: PlasmicPricingPageElementTeamBlock__OverridesType;
  dataFetches?: PlasmicPricingPageElementTeamBlock__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div className={classNames(defaultcss.all, sty.freeBox__kbtK)}>
        <div className={classNames(defaultcss.all, sty.freeBox__yyHGg)}>
          {p.renderPlasmicSlot({
            defaultContents: "Team",
            value: args.slot3,
            className: classNames(sty.slotSlot3)
          })}
        </div>
      </div>

      <p.Stack
        as={"div"}
        data-plasmic-name={"elementTeamListItemParent"}
        data-plasmic-override={overrides.elementTeamListItemParent}
        hasGap={true}
        className={classNames(defaultcss.all, sty.elementTeamListItemParent)}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"elementTeamMembersListItem"}
          data-plasmic-override={overrides.elementTeamMembersListItem}
          hasGap={true}
          className={classNames(defaultcss.all, sty.elementTeamMembersListItem)}
        >
          <div className={classNames(defaultcss.all, sty.freeBox__bYaaN)}>
            {p.renderPlasmicSlot({
              defaultContents: (
                <TeamPartnersIcon
                  className={classNames(defaultcss.all, sty.svg__trm89)}
                  role={"img"}
                />
              ),

              value: args.slot2
            })}
          </div>

          <p.Stack
            as={"div"}
            data-plasmic-name={"valuePercentParent23242"}
            data-plasmic-override={overrides.valuePercentParent23242}
            hasGap={true}
            className={classNames(defaultcss.all, sty.valuePercentParent23242)}
          >
            <div className={classNames(defaultcss.all, sty.freeBox__jenYh)}>
              {p.renderPlasmicSlot({
                defaultContents: "3",
                value: args.slot,
                className: classNames(sty.slotSlot)
              })}
            </div>
          </p.Stack>

          <div className={classNames(defaultcss.all, sty.freeBox__n9Wo6)}>
            {p.renderPlasmicSlot({
              defaultContents: "Team members included",
              value: args.children,
              className: classNames(sty.slotChildren)
            })}
          </div>
        </p.Stack>
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "elementTeamListItemParent",
    "elementTeamMembersListItem",
    "valuePercentParent23242"
  ],
  elementTeamListItemParent: [
    "elementTeamListItemParent",
    "elementTeamMembersListItem",
    "valuePercentParent23242"
  ],
  elementTeamMembersListItem: [
    "elementTeamMembersListItem",
    "valuePercentParent23242"
  ],
  valuePercentParent23242: ["valuePercentParent23242"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  elementTeamListItemParent: "div";
  elementTeamMembersListItem: "div";
  valuePercentParent23242: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPricingPageElementTeamBlock__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPricingPageElementTeamBlock__VariantsArgs;
    args?: PlasmicPricingPageElementTeamBlock__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicPricingPageElementTeamBlock__Fetches;
  } & Omit< // Specify variants directly as props
    PlasmicPricingPageElementTeamBlock__VariantsArgs,
    ReservedPropsType
  > &
    // Specify args directly as props
    Omit<PlasmicPricingPageElementTeamBlock__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPricingPageElementTeamBlock__ArgProps,
      internalVariantPropNames: PlasmicPricingPageElementTeamBlock__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicPricingPageElementTeamBlock__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPricingPageElementTeamBlock";
  } else {
    func.displayName = `PlasmicPricingPageElementTeamBlock.${nodeName}`;
  }
  return func;
}

export const PlasmicPricingPageElementTeamBlock = Object.assign(
  // Top-level PlasmicPricingPageElementTeamBlock renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    elementTeamListItemParent: makeNodeComponent("elementTeamListItemParent"),
    elementTeamMembersListItem: makeNodeComponent("elementTeamMembersListItem"),
    valuePercentParent23242: makeNodeComponent("valuePercentParent23242"),

    // Metadata about props expected for PlasmicPricingPageElementTeamBlock
    internalVariantProps: PlasmicPricingPageElementTeamBlock__VariantProps,
    internalArgProps: PlasmicPricingPageElementTeamBlock__ArgProps
  }
);

export default PlasmicPricingPageElementTeamBlock;
/* prettier-ignore-end */
