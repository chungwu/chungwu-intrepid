// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: Z1QwRDIS1-_WXx
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import UserAvatar from "../../UserAvatar"; // plasmic-import: kWaJrwe3c90GY1/component
import TagPartnerA from "../../TagPartnerA"; // plasmic-import: 72IB-zeDYisARTy/component
import BadgeCommunityRating from "../../BadgeCommunityRating"; // plasmic-import: pvHb6wkRxy_-nIy/component
import IconPrimary from "../../IconPrimary"; // plasmic-import: leoxU5GkcMHMK8X/component
import AvatarGroupPrimary from "../../AvatarGroupPrimary"; // plasmic-import: NsOs_-MKA7ylYG0/component
import ElementLocationPrimary from "../../ElementLocationPrimary"; // plasmic-import: ZxMCtSSS3lPiHE/component
import ButtonLinkPrimary from "../../ButtonLinkPrimary"; // plasmic-import: tSiOWgKlHR05p7/component
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: gpNjXfbD_ZdpPU/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: biX3aS42hiG0fF/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicCardHeroMemberProfileDisplay.module.css"; // plasmic-import: Z1QwRDIS1-_WXx/css

import Icon171Icon from "./icons/PlasmicIcon__Icon171"; // plasmic-import: L1T0WWEIfF6hPBd/icon
import TeamPartnersIcon from "./icons/PlasmicIcon__TeamPartners"; // plasmic-import: Hf6TOd80Ag78cQq/icon
import PlusBoldIcon from "./icons/PlasmicIcon__PlusBold"; // plasmic-import: lhSEEajPJGZatfD/icon
import BookmarkIcon from "./icons/PlasmicIcon__Bookmark"; // plasmic-import: jLuEpvSpry_1edd/icon

export type PlasmicCardHeroMemberProfileDisplay__VariantMembers = {
  userState: "loggedIn" | "loggedOut";
};

export type PlasmicCardHeroMemberProfileDisplay__VariantsArgs = {
  userState?: SingleChoiceArg<"loggedIn" | "loggedOut">;
};

type VariantPropType = keyof PlasmicCardHeroMemberProfileDisplay__VariantsArgs;
export const PlasmicCardHeroMemberProfileDisplay__VariantProps =
  new Array<VariantPropType>("userState");

export type PlasmicCardHeroMemberProfileDisplay__ArgsType = {};
type ArgPropType = keyof PlasmicCardHeroMemberProfileDisplay__ArgsType;
export const PlasmicCardHeroMemberProfileDisplay__ArgProps =
  new Array<ArgPropType>();

export type PlasmicCardHeroMemberProfileDisplay__OverridesType = {
  root?: p.Flex<"div">;
  parent?: p.Flex<"div">;
  userProfileHeadline?: p.Flex<"div">;
  userAvatar?: p.Flex<typeof UserAvatar>;
  navUserAvatar80?: p.Flex<"img">;
  userDetailParent?: p.Flex<"div">;
  userFirstLastName?: p.Flex<"div">;
  firstNameParent?: p.Flex<"div">;
  lastNameParent?: p.Flex<"div">;
  displayNameParent2?: p.Flex<"div">;
  atSignParent?: p.Flex<"div">;
  displayNameheadlineParent?: p.Flex<"div">;
  companyStatsParent?: p.Flex<"div">;
  memberStatus2?: p.Flex<typeof TagPartnerA>;
  individualRating?: p.Flex<typeof BadgeCommunityRating>;
  teamAvatarGroupParent?: p.Flex<"div">;
  svgIcon3?: p.Flex<"svg">;
  svgIcon4?: p.Flex<"svg">;
  avatarGroupPrimary?: p.Flex<typeof AvatarGroupPrimary>;
  locationParent?: p.Flex<"div">;
  elementLocationPrimary?: p.Flex<typeof ElementLocationPrimary>;
  userMemberDescription?: p.Flex<"div">;
  _80CharactersMax?: p.Flex<"div">;
  userButtons?: p.Flex<"div">;
  buttonLinkPrimary?: p.Flex<typeof ButtonLinkPrimary>;
  buttonPrimary?: p.Flex<typeof ButtonPrimary>;
  svgIcon?: p.Flex<"svg">;
};

export interface DefaultCardHeroMemberProfileDisplayProps {
  userState?: SingleChoiceArg<"loggedIn" | "loggedOut">;
  className?: string;
}

function PlasmicCardHeroMemberProfileDisplay__RenderFunc(props: {
  variants: PlasmicCardHeroMemberProfileDisplay__VariantsArgs;
  args: PlasmicCardHeroMemberProfileDisplay__ArgsType;
  overrides: PlasmicCardHeroMemberProfileDisplay__OverridesType;
  dataFetches?: PlasmicCardHeroMemberProfileDisplay__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"parent"}
        data-plasmic-override={overrides.parent}
        hasGap={true}
        className={classNames(defaultcss.all, sty.parent, {
          [sty.parent__userState_loggedIn]: hasVariant(
            variants,
            "userState",
            "loggedIn"
          )
        })}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"userProfileHeadline"}
          data-plasmic-override={overrides.userProfileHeadline}
          hasGap={true}
          className={classNames(defaultcss.all, sty.userProfileHeadline)}
        >
          <UserAvatar
            data-plasmic-name={"userAvatar"}
            data-plasmic-override={overrides.userAvatar}
            navUserAvatar80={
              <img
                data-plasmic-name={"navUserAvatar80"}
                data-plasmic-override={overrides.navUserAvatar80}
                alt={""}
                className={classNames(defaultcss.img, sty.navUserAvatar80)}
                role={"img"}
                src={
                  "/plasmic/copy_of_market_v_2/images/userAvatarForPresentationjpg.jpeg"
                }
              />
            }
            size={"_80" as const}
            verified={
              hasVariant(globalVariants, "screen", "desktop")
                ? ("verified" as const)
                : ("verified" as const)
            }
          />

          <p.Stack
            as={"div"}
            data-plasmic-name={"userDetailParent"}
            data-plasmic-override={overrides.userDetailParent}
            hasGap={true}
            className={classNames(defaultcss.all, sty.userDetailParent)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"userFirstLastName"}
              data-plasmic-override={overrides.userFirstLastName}
              hasGap={true}
              className={classNames(defaultcss.all, sty.userFirstLastName)}
            >
              <div
                data-plasmic-name={"firstNameParent"}
                data-plasmic-override={overrides.firstNameParent}
                className={classNames(defaultcss.all, sty.firstNameParent)}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox___0Iq0Q
                  )}
                >
                  {"Annie"}
                </div>
              </div>

              <div
                data-plasmic-name={"lastNameParent"}
                data-plasmic-override={overrides.lastNameParent}
                className={classNames(defaultcss.all, sty.lastNameParent)}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__bNk
                  )}
                >
                  {"Young Son"}
                </div>
              </div>
            </p.Stack>

            {true ? (
              <p.Stack
                as={"div"}
                data-plasmic-name={"displayNameParent2"}
                data-plasmic-override={overrides.displayNameParent2}
                hasGap={true}
                className={classNames(defaultcss.all, sty.displayNameParent2)}
              >
                <div
                  data-plasmic-name={"atSignParent"}
                  data-plasmic-override={overrides.atSignParent}
                  className={classNames(defaultcss.all, sty.atSignParent)}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__oEJyp
                    )}
                  >
                    {"@"}
                  </div>
                </div>

                <div
                  data-plasmic-name={"displayNameheadlineParent"}
                  data-plasmic-override={overrides.displayNameheadlineParent}
                  className={classNames(
                    defaultcss.all,
                    sty.displayNameheadlineParent
                  )}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__zUtIw
                    )}
                  >
                    {"pixiedesign"}
                  </div>
                </div>
              </p.Stack>
            ) : null}

            <p.Stack
              as={"div"}
              data-plasmic-name={"companyStatsParent"}
              data-plasmic-override={overrides.companyStatsParent}
              hasGap={true}
              className={classNames(defaultcss.all, sty.companyStatsParent)}
            >
              <TagPartnerA
                data-plasmic-name={"memberStatus2"}
                data-plasmic-override={overrides.memberStatus2}
                className={classNames("__wab_instance", sty.memberStatus2)}
              />

              <BadgeCommunityRating
                data-plasmic-name={"individualRating"}
                data-plasmic-override={overrides.individualRating}
                className={classNames("__wab_instance", sty.individualRating)}
              />

              {(
                hasVariant(globalVariants, "screen", "mobile")
                  ? true
                  : hasVariant(globalVariants, "screen", "desktop")
                  ? true
                  : true
              ) ? (
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"teamAvatarGroupParent"}
                  data-plasmic-override={overrides.teamAvatarGroupParent}
                  hasGap={true}
                  className={classNames(
                    defaultcss.all,
                    sty.teamAvatarGroupParent
                  )}
                >
                  {(
                    hasVariant(globalVariants, "screen", "mobile")
                      ? true
                      : hasVariant(globalVariants, "screen", "desktop")
                      ? true
                      : true
                  ) ? (
                    <IconPrimary
                      className={classNames(
                        "__wab_instance",
                        sty.iconPrimary__ye8Oh
                      )}
                      size={
                        hasVariant(globalVariants, "screen", "desktop")
                          ? ("_18Px" as const)
                          : ("_18Px" as const)
                      }
                      svgIcon16Px={
                        <p.PlasmicIcon
                          data-plasmic-name={"svgIcon3"}
                          data-plasmic-override={overrides.svgIcon3}
                          PlasmicIconType={
                            hasVariant(globalVariants, "screen", "desktop")
                              ? TeamPartnersIcon
                              : Icon171Icon
                          }
                          className={classNames(defaultcss.all, sty.svgIcon3)}
                          role={"img"}
                        />
                      }
                      svgIcon18Px={
                        <p.PlasmicIcon
                          data-plasmic-name={"svgIcon4"}
                          data-plasmic-override={overrides.svgIcon4}
                          PlasmicIconType={
                            hasVariant(globalVariants, "screen", "desktop")
                              ? TeamPartnersIcon
                              : TeamPartnersIcon
                          }
                          className={classNames(defaultcss.all, sty.svgIcon4)}
                          role={"img"}
                        />
                      }
                    />
                  ) : null}
                  {(
                    hasVariant(globalVariants, "screen", "mobile") ? true : true
                  ) ? (
                    <AvatarGroupPrimary
                      data-plasmic-name={"avatarGroupPrimary"}
                      data-plasmic-override={overrides.avatarGroupPrimary}
                      amount={"_3" as const}
                      className={classNames("__wab_instance")}
                      groupSize={"_16" as const}
                    />
                  ) : null}
                </p.Stack>
              ) : null}
            </p.Stack>

            {(
              hasVariant(globalVariants, "screen", "mobile")
                ? true
                : hasVariant(globalVariants, "screen", "desktop")
                ? true
                : true
            ) ? (
              <p.Stack
                as={"div"}
                data-plasmic-name={"locationParent"}
                data-plasmic-override={overrides.locationParent}
                hasGap={true}
                className={classNames(defaultcss.all, sty.locationParent)}
              >
                <ElementLocationPrimary
                  data-plasmic-name={"elementLocationPrimary"}
                  data-plasmic-override={overrides.elementLocationPrimary}
                  className={classNames(
                    "__wab_instance",
                    sty.elementLocationPrimary
                  )}
                />
              </p.Stack>
            ) : null}
          </p.Stack>
        </p.Stack>

        <p.Stack
          as={"div"}
          data-plasmic-name={"userMemberDescription"}
          data-plasmic-override={overrides.userMemberDescription}
          hasGap={true}
          className={classNames(defaultcss.all, sty.userMemberDescription)}
        >
          <div
            data-plasmic-name={"_80CharactersMax"}
            data-plasmic-override={overrides._80CharactersMax}
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty._80CharactersMax
            )}
          >
            {hasVariant(globalVariants, "screen", "desktop")
              ? "Designer and engineer. Ex Uber, Ex-Shopify. #travel"
              : "Designer and engineer. Ex Uber, Ex-Shopify. #travel"}
          </div>
        </p.Stack>

        <p.Stack
          as={"div"}
          data-plasmic-name={"userButtons"}
          data-plasmic-override={overrides.userButtons}
          hasGap={true}
          className={classNames(defaultcss.all, sty.userButtons, {
            [sty.userButtons__userState_loggedIn]: hasVariant(
              variants,
              "userState",
              "loggedIn"
            )
          })}
        >
          {(hasVariant(variants, "userState", "loggedIn") ? true : false) ? (
            <ButtonLinkPrimary
              data-plasmic-name={"buttonLinkPrimary"}
              data-plasmic-override={overrides.buttonLinkPrimary}
              className={classNames("__wab_instance", sty.buttonLinkPrimary, {
                [sty.buttonLinkPrimary__userState_loggedIn]: hasVariant(
                  variants,
                  "userState",
                  "loggedIn"
                )
              })}
              color={
                hasVariant(variants, "userState", "loggedIn")
                  ? ("brand" as const)
                  : undefined
              }
              height={
                hasVariant(variants, "userState", "loggedIn")
                  ? ("_36" as const)
                  : undefined
              }
              text={
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__aIj2B,
                    {
                      [sty.freeBox__userState_loggedIn__aIj2BtvlIh]: hasVariant(
                        variants,
                        "userState",
                        "loggedIn"
                      )
                    }
                  )}
                >
                  {hasVariant(variants, "userState", "loggedIn")
                    ? "Edit"
                    : "Hyper Link"}
                </div>
              }
              type={
                hasVariant(variants, "userState", "loggedIn")
                  ? ("outline" as const)
                  : undefined
              }
              width={
                hasVariant(variants, "userState", "loggedIn")
                  ? ("_120" as const)
                  : undefined
              }
            />
          ) : null}
          {(hasVariant(variants, "userState", "loggedIn") ? false : true) ? (
            <ButtonPrimary
              data-plasmic-name={"buttonPrimary"}
              data-plasmic-override={overrides.buttonPrimary}
              color={
                hasVariant(variants, "userState", "loggedIn")
                  ? ("brand" as const)
                  : ("brand" as const)
              }
              size={"_120" as const}
              type={
                hasVariant(variants, "userState", "loggedIn")
                  ? ("outline" as const)
                  : ("primary" as const)
              }
            >
              {hasVariant(variants, "userState", "loggedIn")
                ? "Edit"
                : "Follow"}
            </ButtonPrimary>
          ) : null}

          <IconPrimary
            className={classNames("__wab_instance", sty.iconPrimary__sjZ5)}
            size={"_36Px" as const}
            svgIcon={
              <BookmarkIcon
                data-plasmic-name={"svgIcon"}
                data-plasmic-override={overrides.svgIcon}
                className={classNames(defaultcss.all, sty.svgIcon)}
                role={"img"}
              />
            }
          />
        </p.Stack>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "parent",
    "userProfileHeadline",
    "userAvatar",
    "navUserAvatar80",
    "userDetailParent",
    "userFirstLastName",
    "firstNameParent",
    "lastNameParent",
    "displayNameParent2",
    "atSignParent",
    "displayNameheadlineParent",
    "companyStatsParent",
    "memberStatus2",
    "individualRating",
    "teamAvatarGroupParent",
    "svgIcon3",
    "svgIcon4",
    "avatarGroupPrimary",
    "locationParent",
    "elementLocationPrimary",
    "userMemberDescription",
    "_80CharactersMax",
    "userButtons",
    "buttonLinkPrimary",
    "buttonPrimary",
    "svgIcon"
  ],
  parent: [
    "parent",
    "userProfileHeadline",
    "userAvatar",
    "navUserAvatar80",
    "userDetailParent",
    "userFirstLastName",
    "firstNameParent",
    "lastNameParent",
    "displayNameParent2",
    "atSignParent",
    "displayNameheadlineParent",
    "companyStatsParent",
    "memberStatus2",
    "individualRating",
    "teamAvatarGroupParent",
    "svgIcon3",
    "svgIcon4",
    "avatarGroupPrimary",
    "locationParent",
    "elementLocationPrimary",
    "userMemberDescription",
    "_80CharactersMax",
    "userButtons",
    "buttonLinkPrimary",
    "buttonPrimary",
    "svgIcon"
  ],
  userProfileHeadline: [
    "userProfileHeadline",
    "userAvatar",
    "navUserAvatar80",
    "userDetailParent",
    "userFirstLastName",
    "firstNameParent",
    "lastNameParent",
    "displayNameParent2",
    "atSignParent",
    "displayNameheadlineParent",
    "companyStatsParent",
    "memberStatus2",
    "individualRating",
    "teamAvatarGroupParent",
    "svgIcon3",
    "svgIcon4",
    "avatarGroupPrimary",
    "locationParent",
    "elementLocationPrimary"
  ],
  userAvatar: ["userAvatar", "navUserAvatar80"],
  navUserAvatar80: ["navUserAvatar80"],
  userDetailParent: [
    "userDetailParent",
    "userFirstLastName",
    "firstNameParent",
    "lastNameParent",
    "displayNameParent2",
    "atSignParent",
    "displayNameheadlineParent",
    "companyStatsParent",
    "memberStatus2",
    "individualRating",
    "teamAvatarGroupParent",
    "svgIcon3",
    "svgIcon4",
    "avatarGroupPrimary",
    "locationParent",
    "elementLocationPrimary"
  ],
  userFirstLastName: ["userFirstLastName", "firstNameParent", "lastNameParent"],
  firstNameParent: ["firstNameParent"],
  lastNameParent: ["lastNameParent"],
  displayNameParent2: [
    "displayNameParent2",
    "atSignParent",
    "displayNameheadlineParent"
  ],
  atSignParent: ["atSignParent"],
  displayNameheadlineParent: ["displayNameheadlineParent"],
  companyStatsParent: [
    "companyStatsParent",
    "memberStatus2",
    "individualRating",
    "teamAvatarGroupParent",
    "svgIcon3",
    "svgIcon4",
    "avatarGroupPrimary"
  ],
  memberStatus2: ["memberStatus2"],
  individualRating: ["individualRating"],
  teamAvatarGroupParent: [
    "teamAvatarGroupParent",
    "svgIcon3",
    "svgIcon4",
    "avatarGroupPrimary"
  ],
  svgIcon3: ["svgIcon3"],
  svgIcon4: ["svgIcon4"],
  avatarGroupPrimary: ["avatarGroupPrimary"],
  locationParent: ["locationParent", "elementLocationPrimary"],
  elementLocationPrimary: ["elementLocationPrimary"],
  userMemberDescription: ["userMemberDescription", "_80CharactersMax"],
  _80CharactersMax: ["_80CharactersMax"],
  userButtons: ["userButtons", "buttonLinkPrimary", "buttonPrimary", "svgIcon"],
  buttonLinkPrimary: ["buttonLinkPrimary"],
  buttonPrimary: ["buttonPrimary"],
  svgIcon: ["svgIcon"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  parent: "div";
  userProfileHeadline: "div";
  userAvatar: typeof UserAvatar;
  navUserAvatar80: "img";
  userDetailParent: "div";
  userFirstLastName: "div";
  firstNameParent: "div";
  lastNameParent: "div";
  displayNameParent2: "div";
  atSignParent: "div";
  displayNameheadlineParent: "div";
  companyStatsParent: "div";
  memberStatus2: typeof TagPartnerA;
  individualRating: typeof BadgeCommunityRating;
  teamAvatarGroupParent: "div";
  svgIcon3: "svg";
  svgIcon4: "svg";
  avatarGroupPrimary: typeof AvatarGroupPrimary;
  locationParent: "div";
  elementLocationPrimary: typeof ElementLocationPrimary;
  userMemberDescription: "div";
  _80CharactersMax: "div";
  userButtons: "div";
  buttonLinkPrimary: typeof ButtonLinkPrimary;
  buttonPrimary: typeof ButtonPrimary;
  svgIcon: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCardHeroMemberProfileDisplay__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCardHeroMemberProfileDisplay__VariantsArgs;
    args?: PlasmicCardHeroMemberProfileDisplay__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicCardHeroMemberProfileDisplay__Fetches;
  } & Omit< // Specify variants directly as props
    PlasmicCardHeroMemberProfileDisplay__VariantsArgs,
    ReservedPropsType
  > &
    // Specify args directly as props
    Omit<PlasmicCardHeroMemberProfileDisplay__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCardHeroMemberProfileDisplay__ArgProps,
      internalVariantPropNames:
        PlasmicCardHeroMemberProfileDisplay__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicCardHeroMemberProfileDisplay__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCardHeroMemberProfileDisplay";
  } else {
    func.displayName = `PlasmicCardHeroMemberProfileDisplay.${nodeName}`;
  }
  return func;
}

export const PlasmicCardHeroMemberProfileDisplay = Object.assign(
  // Top-level PlasmicCardHeroMemberProfileDisplay renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    parent: makeNodeComponent("parent"),
    userProfileHeadline: makeNodeComponent("userProfileHeadline"),
    userAvatar: makeNodeComponent("userAvatar"),
    navUserAvatar80: makeNodeComponent("navUserAvatar80"),
    userDetailParent: makeNodeComponent("userDetailParent"),
    userFirstLastName: makeNodeComponent("userFirstLastName"),
    firstNameParent: makeNodeComponent("firstNameParent"),
    lastNameParent: makeNodeComponent("lastNameParent"),
    displayNameParent2: makeNodeComponent("displayNameParent2"),
    atSignParent: makeNodeComponent("atSignParent"),
    displayNameheadlineParent: makeNodeComponent("displayNameheadlineParent"),
    companyStatsParent: makeNodeComponent("companyStatsParent"),
    memberStatus2: makeNodeComponent("memberStatus2"),
    individualRating: makeNodeComponent("individualRating"),
    teamAvatarGroupParent: makeNodeComponent("teamAvatarGroupParent"),
    svgIcon3: makeNodeComponent("svgIcon3"),
    svgIcon4: makeNodeComponent("svgIcon4"),
    avatarGroupPrimary: makeNodeComponent("avatarGroupPrimary"),
    locationParent: makeNodeComponent("locationParent"),
    elementLocationPrimary: makeNodeComponent("elementLocationPrimary"),
    userMemberDescription: makeNodeComponent("userMemberDescription"),
    _80CharactersMax: makeNodeComponent("_80CharactersMax"),
    userButtons: makeNodeComponent("userButtons"),
    buttonLinkPrimary: makeNodeComponent("buttonLinkPrimary"),
    buttonPrimary: makeNodeComponent("buttonPrimary"),
    svgIcon: makeNodeComponent("svgIcon"),

    // Metadata about props expected for PlasmicCardHeroMemberProfileDisplay
    internalVariantProps: PlasmicCardHeroMemberProfileDisplay__VariantProps,
    internalArgProps: PlasmicCardHeroMemberProfileDisplay__ArgProps
  }
);

export default PlasmicCardHeroMemberProfileDisplay;
/* prettier-ignore-end */
