// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: owlfhtgWXRNTq-
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicTextLinkArrow.module.css"; // plasmic-import: owlfhtgWXRNTq-/css

import ChevronLeftIcon from "./icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r8gtrzySptnr1T7/icon
import ChevronRightIcon from "./icons/PlasmicIcon__ChevronRight"; // plasmic-import: m28uAvImID5kjZn/icon

export type PlasmicTextLinkArrow__VariantMembers = {
  direction: "right" | "left";
  color: "light" | "dark" | "brand";
  size: "_14" | "_16" | "_18" | "_24";
};

export type PlasmicTextLinkArrow__VariantsArgs = {
  direction?: SingleChoiceArg<"right" | "left">;
  color?: SingleChoiceArg<"light" | "dark" | "brand">;
  size?: SingleChoiceArg<"_14" | "_16" | "_18" | "_24">;
};

type VariantPropType = keyof PlasmicTextLinkArrow__VariantsArgs;
export const PlasmicTextLinkArrow__VariantProps = new Array<VariantPropType>(
  "direction",
  "color",
  "size"
);

export type PlasmicTextLinkArrow__ArgsType = {
  children?: React.ReactNode;
  svgRight?: React.ReactNode;
  svgLeft?: React.ReactNode;
  id?: string;
  destination?: string | PageHref;
};

type ArgPropType = keyof PlasmicTextLinkArrow__ArgsType;
export const PlasmicTextLinkArrow__ArgProps = new Array<ArgPropType>(
  "children",
  "svgRight",
  "svgLeft",
  "id",
  "destination"
);

export type PlasmicTextLinkArrow__OverridesType = {
  root?: p.Flex<"a"> & Partial<LinkProps>;
  parent?: p.Flex<"div">;
  svgLeftParent?: p.Flex<"div">;
  svgRightParent?: p.Flex<"div">;
};

export interface DefaultTextLinkArrowProps {
  children?: React.ReactNode;
  svgRight?: React.ReactNode;
  svgLeft?: React.ReactNode;
  id?: string;
  destination?: string | PageHref;
  direction?: SingleChoiceArg<"right" | "left">;
  color?: SingleChoiceArg<"light" | "dark" | "brand">;
  size?: SingleChoiceArg<"_14" | "_16" | "_18" | "_24">;
  className?: string;
}

function PlasmicTextLinkArrow__RenderFunc(props: {
  variants: PlasmicTextLinkArrow__VariantsArgs;
  args: PlasmicTextLinkArrow__ArgsType;
  overrides: PlasmicTextLinkArrow__OverridesType;
  dataFetches?: PlasmicTextLinkArrow__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={p.PlasmicLink}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__color_brand]: hasVariant(variants, "color", "brand"),
        [sty.root__color_dark]: hasVariant(variants, "color", "dark"),
        [sty.root__color_light]: hasVariant(variants, "color", "light")
      })}
      component={Link}
      href={args.destination}
      id={args.id}
      platform={"nextjs"}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"parent"}
        data-plasmic-override={overrides.parent}
        hasGap={true}
        className={classNames(defaultcss.all, sty.parent, {
          [sty.parent__direction_left]: hasVariant(
            variants,
            "direction",
            "left"
          ),
          [sty.parent__direction_right]: hasVariant(
            variants,
            "direction",
            "right"
          )
        })}
      >
        {(hasVariant(variants, "direction", "right") ? false : true) ? (
          <div
            data-plasmic-name={"svgLeftParent"}
            data-plasmic-override={overrides.svgLeftParent}
            className={classNames(defaultcss.all, sty.svgLeftParent, {
              [sty.svgLeftParent__direction_left]: hasVariant(
                variants,
                "direction",
                "left"
              ),
              [sty.svgLeftParent__direction_right]: hasVariant(
                variants,
                "direction",
                "right"
              ),
              [sty.svgLeftParent__size__16]: hasVariant(
                variants,
                "size",
                "_16"
              ),
              [sty.svgLeftParent__size__18]: hasVariant(
                variants,
                "size",
                "_18"
              ),
              [sty.svgLeftParent__size__24]: hasVariant(variants, "size", "_24")
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <ChevronLeftIcon
                  className={classNames(defaultcss.all, sty.svg__fXt0Z)}
                  role={"img"}
                />
              ),

              value: args.svgLeft,
              className: classNames(sty.slotSvgLeft, {
                [sty.slotSvgLeft__color_brand]: hasVariant(
                  variants,
                  "color",
                  "brand"
                ),
                [sty.slotSvgLeft__color_dark]: hasVariant(
                  variants,
                  "color",
                  "dark"
                ),
                [sty.slotSvgLeft__color_light]: hasVariant(
                  variants,
                  "color",
                  "light"
                ),
                [sty.slotSvgLeft__size__16]: hasVariant(variants, "size", "_16")
              })
            })}
          </div>
        ) : null}
        {p.renderPlasmicSlot({
          defaultContents: "link ",
          value: args.children,
          className: classNames(sty.slotChildren, {
            [sty.slotChildren__color_brand]: hasVariant(
              variants,
              "color",
              "brand"
            ),
            [sty.slotChildren__color_dark]: hasVariant(
              variants,
              "color",
              "dark"
            ),
            [sty.slotChildren__color_light]: hasVariant(
              variants,
              "color",
              "light"
            ),
            [sty.slotChildren__size__14]: hasVariant(variants, "size", "_14"),
            [sty.slotChildren__size__16]: hasVariant(variants, "size", "_16"),
            [sty.slotChildren__size__18]: hasVariant(variants, "size", "_18"),
            [sty.slotChildren__size__24]: hasVariant(variants, "size", "_24")
          })
        })}

        {(hasVariant(variants, "direction", "left") ? false : true) ? (
          <div
            data-plasmic-name={"svgRightParent"}
            data-plasmic-override={overrides.svgRightParent}
            className={classNames(defaultcss.all, sty.svgRightParent, {
              [sty.svgRightParent__direction_left]: hasVariant(
                variants,
                "direction",
                "left"
              ),
              [sty.svgRightParent__size__14]: hasVariant(
                variants,
                "size",
                "_14"
              ),
              [sty.svgRightParent__size__16]: hasVariant(
                variants,
                "size",
                "_16"
              ),
              [sty.svgRightParent__size__18]: hasVariant(
                variants,
                "size",
                "_18"
              ),
              [sty.svgRightParent__size__24]: hasVariant(
                variants,
                "size",
                "_24"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <ChevronRightIcon
                  className={classNames(defaultcss.all, sty.svg___3ZlMi)}
                  role={"img"}
                />
              ),

              value: args.svgRight,
              className: classNames(sty.slotSvgRight, {
                [sty.slotSvgRight__color_brand]: hasVariant(
                  variants,
                  "color",
                  "brand"
                ),
                [sty.slotSvgRight__color_brand_direction_right]:
                  hasVariant(variants, "color", "brand") &&
                  hasVariant(variants, "direction", "right"),
                [sty.slotSvgRight__color_dark]: hasVariant(
                  variants,
                  "color",
                  "dark"
                ),
                [sty.slotSvgRight__color_light]: hasVariant(
                  variants,
                  "color",
                  "light"
                )
              })
            })}
          </div>
        ) : null}
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "parent", "svgLeftParent", "svgRightParent"],
  parent: ["parent", "svgLeftParent", "svgRightParent"],
  svgLeftParent: ["svgLeftParent"],
  svgRightParent: ["svgRightParent"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "a";
  parent: "div";
  svgLeftParent: "div";
  svgRightParent: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTextLinkArrow__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTextLinkArrow__VariantsArgs;
    args?: PlasmicTextLinkArrow__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicTextLinkArrow__Fetches;
  } & Omit<PlasmicTextLinkArrow__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTextLinkArrow__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTextLinkArrow__ArgProps,
      internalVariantPropNames: PlasmicTextLinkArrow__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicTextLinkArrow__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTextLinkArrow";
  } else {
    func.displayName = `PlasmicTextLinkArrow.${nodeName}`;
  }
  return func;
}

export const PlasmicTextLinkArrow = Object.assign(
  // Top-level PlasmicTextLinkArrow renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    parent: makeNodeComponent("parent"),
    svgLeftParent: makeNodeComponent("svgLeftParent"),
    svgRightParent: makeNodeComponent("svgRightParent"),

    // Metadata about props expected for PlasmicTextLinkArrow
    internalVariantProps: PlasmicTextLinkArrow__VariantProps,
    internalArgProps: PlasmicTextLinkArrow__ArgProps
  }
);

export default PlasmicTextLinkArrow;
/* prettier-ignore-end */
