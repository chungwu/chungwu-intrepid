// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: xhtqzOQbigz-bm
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ButtonConnectedAccount from "../../ButtonConnectedAccount"; // plasmic-import: gtSe0S4gPoo40V/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicInputFormCardWebhookConnections.module.css"; // plasmic-import: xhtqzOQbigz-bm/css

export type PlasmicInputFormCardWebhookConnections__VariantMembers = {
  payment: "payment";
  accounting: "accounting";
  border: "border";
  subheadDescription: "subheadDescription";
};

export type PlasmicInputFormCardWebhookConnections__VariantsArgs = {
  payment?: SingleBooleanChoiceArg<"payment">;
  accounting?: SingleBooleanChoiceArg<"accounting">;
  border?: SingleBooleanChoiceArg<"border">;
  subheadDescription?: SingleBooleanChoiceArg<"subheadDescription">;
};

type VariantPropType =
  keyof PlasmicInputFormCardWebhookConnections__VariantsArgs;
export const PlasmicInputFormCardWebhookConnections__VariantProps =
  new Array<VariantPropType>(
    "payment",
    "accounting",
    "border",
    "subheadDescription"
  );

export type PlasmicInputFormCardWebhookConnections__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  description?: React.ReactNode;
};

type ArgPropType = keyof PlasmicInputFormCardWebhookConnections__ArgsType;
export const PlasmicInputFormCardWebhookConnections__ArgProps =
  new Array<ArgPropType>("children", "slot", "description");

export type PlasmicInputFormCardWebhookConnections__OverridesType = {
  root?: p.Flex<"div">;
  parent?: p.Flex<"div">;
  headlineParent?: p.Flex<"div">;
  headlineSubheadParent?: p.Flex<"div">;
  headline?: p.Flex<"div">;
  subhead?: p.Flex<"div">;
  buttons?: p.Flex<"div">;
  descriptionParent?: p.Flex<"div">;
  description?: p.Flex<"div">;
  descriptionTextParent?: p.Flex<"div">;
};

export interface DefaultInputFormCardWebhookConnectionsProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  description?: React.ReactNode;
  payment?: SingleBooleanChoiceArg<"payment">;
  accounting?: SingleBooleanChoiceArg<"accounting">;
  border?: SingleBooleanChoiceArg<"border">;
  subheadDescription?: SingleBooleanChoiceArg<"subheadDescription">;
  className?: string;
}

function PlasmicInputFormCardWebhookConnections__RenderFunc(props: {
  variants: PlasmicInputFormCardWebhookConnections__VariantsArgs;
  args: PlasmicInputFormCardWebhookConnections__ArgsType;
  overrides: PlasmicInputFormCardWebhookConnections__OverridesType;
  dataFetches?: PlasmicInputFormCardWebhookConnections__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div
        data-plasmic-name={"parent"}
        data-plasmic-override={overrides.parent}
        className={classNames(defaultcss.all, sty.parent, {
          [sty.parent__border]: hasVariant(variants, "border", "border")
        })}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"headlineParent"}
          data-plasmic-override={overrides.headlineParent}
          hasGap={true}
          className={classNames(defaultcss.all, sty.headlineParent, {
            [sty.headlineParent__subheadDescription]: hasVariant(
              variants,
              "subheadDescription",
              "subheadDescription"
            )
          })}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"headlineSubheadParent"}
            data-plasmic-override={overrides.headlineSubheadParent}
            hasGap={true}
            className={classNames(defaultcss.all, sty.headlineSubheadParent)}
          >
            <div
              data-plasmic-name={"headline"}
              data-plasmic-override={overrides.headline}
              className={classNames(defaultcss.all, sty.headline)}
            >
              {p.renderPlasmicSlot({
                defaultContents: hasVariant(
                  variants,
                  "accounting",
                  "accounting"
                )
                  ? "Accounting Connections"
                  : hasVariant(variants, "payment", "payment")
                  ? "Payout Connections"
                  : "Login Connections",
                value: args.children,
                className: classNames(sty.slotChildren, {
                  [sty.slotChildren__accounting]: hasVariant(
                    variants,
                    "accounting",
                    "accounting"
                  ),
                  [sty.slotChildren__payment]: hasVariant(
                    variants,
                    "payment",
                    "payment"
                  )
                })
              })}
            </div>

            <div
              data-plasmic-name={"subhead"}
              data-plasmic-override={overrides.subhead}
              className={classNames(defaultcss.all, sty.subhead)}
            >
              {p.renderPlasmicSlot({
                defaultContents: hasVariant(
                  variants,
                  "accounting",
                  "accounting"
                )
                  ? "Connect your accounting systems to log financing benefits."
                  : "Connect your social accounts to log in to Intrepid.",
                value: args.slot,
                className: classNames(sty.slotSlot, {
                  [sty.slotSlot__accounting]: hasVariant(
                    variants,
                    "accounting",
                    "accounting"
                  ),
                  [sty.slotSlot__payment]: hasVariant(
                    variants,
                    "payment",
                    "payment"
                  )
                })
              })}
            </div>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"buttons"}
            data-plasmic-override={overrides.buttons}
            hasGap={true}
            className={classNames(defaultcss.all, sty.buttons)}
          >
            <ButtonConnectedAccount
              className={classNames(
                "__wab_instance",
                sty.buttonConnectedAccount___5VVr,
                {
                  [sty.buttonConnectedAccount__accounting___5VVrzBtVr]:
                    hasVariant(variants, "accounting", "accounting"),
                  [sty.buttonConnectedAccount__payment___5VVrgBwOz]: hasVariant(
                    variants,
                    "payment",
                    "payment"
                  ),
                  [sty.buttonConnectedAccount__subheadDescription___5VVrOfugr]:
                    hasVariant(
                      variants,
                      "subheadDescription",
                      "subheadDescription"
                    )
                }
              )}
              company={
                hasVariant(variants, "accounting", "accounting")
                  ? ("xero" as const)
                  : hasVariant(variants, "payment", "payment")
                  ? ("stripe" as const)
                  : ("google" as const)
              }
              width={"_160" as const}
            />

            <ButtonConnectedAccount
              className={classNames(
                "__wab_instance",
                sty.buttonConnectedAccount__fb4Re,
                {
                  [sty.buttonConnectedAccount__accounting__fb4RezBtVr]:
                    hasVariant(variants, "accounting", "accounting"),
                  [sty.buttonConnectedAccount__payment__fb4RegBwOz]: hasVariant(
                    variants,
                    "payment",
                    "payment"
                  )
                }
              )}
              company={
                hasVariant(variants, "accounting", "accounting")
                  ? ("quickbooks" as const)
                  : hasVariant(variants, "payment", "payment")
                  ? ("paypal" as const)
                  : ("facebook" as const)
              }
              width={"_160" as const}
            />
          </p.Stack>
        </p.Stack>

        <div
          data-plasmic-name={"descriptionParent"}
          data-plasmic-override={overrides.descriptionParent}
          className={classNames(defaultcss.all, sty.descriptionParent, {
            [sty.descriptionParent__subheadDescription]: hasVariant(
              variants,
              "subheadDescription",
              "subheadDescription"
            )
          })}
        >
          <div
            data-plasmic-name={"description"}
            data-plasmic-override={overrides.description}
            className={classNames(defaultcss.all, sty.description, {
              [sty.description__accounting]: hasVariant(
                variants,
                "accounting",
                "accounting"
              ),
              [sty.description__payment]: hasVariant(
                variants,
                "payment",
                "payment"
              )
            })}
          >
            <div
              data-plasmic-name={"descriptionTextParent"}
              data-plasmic-override={overrides.descriptionTextParent}
              className={classNames(defaultcss.all, sty.descriptionTextParent, {
                [sty.descriptionTextParent__accounting]: hasVariant(
                  variants,
                  "accounting",
                  "accounting"
                ),
                [sty.descriptionTextParent__payment]: hasVariant(
                  variants,
                  "payment",
                  "payment"
                )
              })}
            >
              {p.renderPlasmicSlot({
                defaultContents:
                  "One login connection can be added per third-party service.",
                value: args.description,
                className: classNames(sty.slotDescription, {
                  [sty.slotDescription__accounting]: hasVariant(
                    variants,
                    "accounting",
                    "accounting"
                  ),
                  [sty.slotDescription__payment]: hasVariant(
                    variants,
                    "payment",
                    "payment"
                  )
                })
              })}
            </div>
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "parent",
    "headlineParent",
    "headlineSubheadParent",
    "headline",
    "subhead",
    "buttons",
    "descriptionParent",
    "description",
    "descriptionTextParent"
  ],
  parent: [
    "parent",
    "headlineParent",
    "headlineSubheadParent",
    "headline",
    "subhead",
    "buttons",
    "descriptionParent",
    "description",
    "descriptionTextParent"
  ],
  headlineParent: [
    "headlineParent",
    "headlineSubheadParent",
    "headline",
    "subhead",
    "buttons"
  ],
  headlineSubheadParent: ["headlineSubheadParent", "headline", "subhead"],
  headline: ["headline"],
  subhead: ["subhead"],
  buttons: ["buttons"],
  descriptionParent: [
    "descriptionParent",
    "description",
    "descriptionTextParent"
  ],
  description: ["description", "descriptionTextParent"],
  descriptionTextParent: ["descriptionTextParent"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  parent: "div";
  headlineParent: "div";
  headlineSubheadParent: "div";
  headline: "div";
  subhead: "div";
  buttons: "div";
  descriptionParent: "div";
  description: "div";
  descriptionTextParent: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInputFormCardWebhookConnections__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicInputFormCardWebhookConnections__VariantsArgs;
    args?: PlasmicInputFormCardWebhookConnections__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicInputFormCardWebhookConnections__Fetches;
  } & Omit< // Specify variants directly as props
    PlasmicInputFormCardWebhookConnections__VariantsArgs,
    ReservedPropsType
  > &
    // Specify args directly as props
    Omit<PlasmicInputFormCardWebhookConnections__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicInputFormCardWebhookConnections__ArgProps,
      internalVariantPropNames:
        PlasmicInputFormCardWebhookConnections__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicInputFormCardWebhookConnections__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInputFormCardWebhookConnections";
  } else {
    func.displayName = `PlasmicInputFormCardWebhookConnections.${nodeName}`;
  }
  return func;
}

export const PlasmicInputFormCardWebhookConnections = Object.assign(
  // Top-level PlasmicInputFormCardWebhookConnections renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    parent: makeNodeComponent("parent"),
    headlineParent: makeNodeComponent("headlineParent"),
    headlineSubheadParent: makeNodeComponent("headlineSubheadParent"),
    headline: makeNodeComponent("headline"),
    subhead: makeNodeComponent("subhead"),
    buttons: makeNodeComponent("buttons"),
    descriptionParent: makeNodeComponent("descriptionParent"),
    description: makeNodeComponent("description"),
    descriptionTextParent: makeNodeComponent("descriptionTextParent"),

    // Metadata about props expected for PlasmicInputFormCardWebhookConnections
    internalVariantProps: PlasmicInputFormCardWebhookConnections__VariantProps,
    internalArgProps: PlasmicInputFormCardWebhookConnections__ArgProps
  }
);

export default PlasmicInputFormCardWebhookConnections;
/* prettier-ignore-end */
