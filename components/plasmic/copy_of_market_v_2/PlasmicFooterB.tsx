// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: IZENTiSL4_zyK8
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavbarLogo from "../../NavbarLogo"; // plasmic-import: kyLUbmyv_OS8Zz/component
import FooterSocialLinkGroup from "../../FooterSocialLinkGroup"; // plasmic-import: j6v1kJ6rwo13FS/component
import FooterSocialLink from "../../FooterSocialLink"; // plasmic-import: dlOB9wdpVUBY-S/component
import FooterLink from "../../FooterLink"; // plasmic-import: 4YhZYxEP2nxyNW/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicFooterB.module.css"; // plasmic-import: IZENTiSL4_zyK8/css

import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: FygICV-AHdTJMVV/icon

export type PlasmicFooterB__VariantMembers = {
  color: "light" | "dark";
};

export type PlasmicFooterB__VariantsArgs = {
  color?: SingleChoiceArg<"light" | "dark">;
};

type VariantPropType = keyof PlasmicFooterB__VariantsArgs;
export const PlasmicFooterB__VariantProps = new Array<VariantPropType>("color");

export type PlasmicFooterB__ArgsType = {};
type ArgPropType = keyof PlasmicFooterB__ArgsType;
export const PlasmicFooterB__ArgProps = new Array<ArgPropType>();

export type PlasmicFooterB__OverridesType = {
  root?: p.Flex<"footer">;
  navbarLogo?: p.Flex<typeof NavbarLogo>;
  addressFooter?: p.Flex<"div">;
  footerSocialLinkGroup?: p.Flex<typeof FooterSocialLinkGroup>;
  footerLegal?: p.Flex<"div">;
  social2?: p.Flex<"div">;
  privacyPolicyComponent?: p.Flex<typeof FooterLink>;
  termsoOfServiceComponent?: p.Flex<typeof FooterLink>;
};

export interface DefaultFooterBProps {
  color?: SingleChoiceArg<"light" | "dark">;
  className?: string;
}

function PlasmicFooterB__RenderFunc(props: {
  variants: PlasmicFooterB__VariantsArgs;
  args: PlasmicFooterB__ArgsType;
  overrides: PlasmicFooterB__OverridesType;
  dataFetches?: PlasmicFooterB__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"footer"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__color_dark]: hasVariant(variants, "color", "dark"),
        [sty.root__color_light]: hasVariant(variants, "color", "light")
      })}
    >
      <NavbarLogo
        data-plasmic-name={"navbarLogo"}
        data-plasmic-override={overrides.navbarLogo}
        className={classNames("__wab_instance", sty.navbarLogo, {
          [sty.navbarLogo__color_dark]: hasVariant(variants, "color", "dark")
        })}
        destination={"/" as const}
        light={
          hasVariant(variants, "color", "dark") ? ("light" as const) : undefined
        }
      />

      <div
        data-plasmic-name={"addressFooter"}
        data-plasmic-override={overrides.addressFooter}
        className={classNames(defaultcss.all, sty.addressFooter)}
      >
        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.freeBox__lAx0X,
            {
              [sty.freeBox__color_dark__lAx0X5SOnq]: hasVariant(
                variants,
                "color",
                "dark"
              )
            }
          )}
        >
          {"548 Market Street\nSan Francisco, California\n940104, USA"}
        </div>
      </div>

      <FooterSocialLinkGroup
        data-plasmic-name={"footerSocialLinkGroup"}
        data-plasmic-override={overrides.footerSocialLinkGroup}
        className={classNames("__wab_instance", sty.footerSocialLinkGroup, {
          [sty.footerSocialLinkGroup__color_dark]: hasVariant(
            variants,
            "color",
            "dark"
          )
        })}
        color={
          hasVariant(variants, "color", "dark") ? ("dark" as const) : undefined
        }
      />

      <p.Stack
        as={"div"}
        data-plasmic-name={"footerLegal"}
        data-plasmic-override={overrides.footerLegal}
        hasGap={true}
        className={classNames(defaultcss.all, sty.footerLegal)}
      >
        {false ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"social2"}
            data-plasmic-override={overrides.social2}
            hasGap={true}
            className={classNames(defaultcss.all, sty.social2)}
          >
            <FooterSocialLink
              className={classNames(
                "__wab_instance",
                sty.footerSocialLink___20Pvn
              )}
            />

            <FooterSocialLink
              className={classNames(
                "__wab_instance",
                sty.footerSocialLink__uQS
              )}
            >
              <Icon8Icon
                className={classNames(defaultcss.all, sty.svg__uyIgM)}
                role={"img"}
              />
            </FooterSocialLink>

            <FooterSocialLink
              className={classNames(
                "__wab_instance",
                sty.footerSocialLink__sMtV3
              )}
            >
              <Icon8Icon
                className={classNames(defaultcss.all, sty.svg__xl11)}
                role={"img"}
              />
            </FooterSocialLink>

            <FooterSocialLink
              className={classNames(
                "__wab_instance",
                sty.footerSocialLink__hGxPh
              )}
            >
              <Icon8Icon
                className={classNames(defaultcss.all, sty.svg__euXwN)}
                role={"img"}
              />
            </FooterSocialLink>

            <FooterSocialLink
              className={classNames(
                "__wab_instance",
                sty.footerSocialLink__ilCvF
              )}
            >
              <Icon8Icon
                className={classNames(defaultcss.all, sty.svg__ee0Ez)}
                role={"img"}
              />
            </FooterSocialLink>
          </p.Stack>
        ) : null}

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.freeBox__xgc9W, {
            [sty.freeBox__color_dark__xgc9W5SOnq]: hasVariant(
              variants,
              "color",
              "dark"
            )
          })}
        >
          <FooterLink
            data-plasmic-name={"privacyPolicyComponent"}
            data-plasmic-override={overrides.privacyPolicyComponent}
            className={classNames(
              "__wab_instance",
              sty.privacyPolicyComponent,
              {
                [sty.privacyPolicyComponent__color_dark]: hasVariant(
                  variants,
                  "color",
                  "dark"
                )
              }
            )}
            color={
              hasVariant(variants, "color", "dark")
                ? ("light" as const)
                : ("dark" as const)
            }
            destination={"/privacy" as const}
            slot={
              hasVariant(variants, "color", "dark")
                ? "Privacy"
                : hasVariant(variants, "color", "light")
                ? "Privacy"
                : "Privacy"
            }
          />

          <FooterLink
            data-plasmic-name={"termsoOfServiceComponent"}
            data-plasmic-override={overrides.termsoOfServiceComponent}
            className={classNames(
              "__wab_instance",
              sty.termsoOfServiceComponent,
              {
                [sty.termsoOfServiceComponent__color_dark]: hasVariant(
                  variants,
                  "color",
                  "dark"
                )
              }
            )}
            color={
              hasVariant(variants, "color", "dark")
                ? ("light" as const)
                : ("dark" as const)
            }
            destination={"/terms" as const}
            slot={
              hasVariant(variants, "color", "dark")
                ? "Terms"
                : hasVariant(variants, "color", "light")
                ? "Terms"
                : "Terms"
            }
          />
        </p.Stack>

        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.freeBox___06XgJ,
            {
              [sty.freeBox__color_dark___06XgJ5SOnq]: hasVariant(
                variants,
                "color",
                "dark"
              )
            }
          )}
        >
          {"Â© Intrepid Financial Technologies, Inc "}
        </div>
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbarLogo",
    "addressFooter",
    "footerSocialLinkGroup",
    "footerLegal",
    "social2",
    "privacyPolicyComponent",
    "termsoOfServiceComponent"
  ],
  navbarLogo: ["navbarLogo"],
  addressFooter: ["addressFooter"],
  footerSocialLinkGroup: ["footerSocialLinkGroup"],
  footerLegal: [
    "footerLegal",
    "social2",
    "privacyPolicyComponent",
    "termsoOfServiceComponent"
  ],
  social2: ["social2"],
  privacyPolicyComponent: ["privacyPolicyComponent"],
  termsoOfServiceComponent: ["termsoOfServiceComponent"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "footer";
  navbarLogo: typeof NavbarLogo;
  addressFooter: "div";
  footerSocialLinkGroup: typeof FooterSocialLinkGroup;
  footerLegal: "div";
  social2: "div";
  privacyPolicyComponent: typeof FooterLink;
  termsoOfServiceComponent: typeof FooterLink;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFooterB__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFooterB__VariantsArgs;
    args?: PlasmicFooterB__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicFooterB__Fetches;
  } & Omit<PlasmicFooterB__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFooterB__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFooterB__ArgProps,
      internalVariantPropNames: PlasmicFooterB__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicFooterB__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFooterB";
  } else {
    func.displayName = `PlasmicFooterB.${nodeName}`;
  }
  return func;
}

export const PlasmicFooterB = Object.assign(
  // Top-level PlasmicFooterB renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbarLogo: makeNodeComponent("navbarLogo"),
    addressFooter: makeNodeComponent("addressFooter"),
    footerSocialLinkGroup: makeNodeComponent("footerSocialLinkGroup"),
    footerLegal: makeNodeComponent("footerLegal"),
    social2: makeNodeComponent("social2"),
    privacyPolicyComponent: makeNodeComponent("privacyPolicyComponent"),
    termsoOfServiceComponent: makeNodeComponent("termsoOfServiceComponent"),

    // Metadata about props expected for PlasmicFooterB
    internalVariantProps: PlasmicFooterB__VariantProps,
    internalArgProps: PlasmicFooterB__ArgProps
  }
);

export default PlasmicFooterB;
/* prettier-ignore-end */
