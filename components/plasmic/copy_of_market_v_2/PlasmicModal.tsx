// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: ytBnhM7UCCbNaqG
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicModal.module.css"; // plasmic-import: ytBnhM7UCCbNaqG/css

export type PlasmicModal__VariantMembers = {};

export type PlasmicModal__VariantsArgs = {};
type VariantPropType = keyof PlasmicModal__VariantsArgs;
export const PlasmicModal__VariantProps = new Array<VariantPropType>();

export type PlasmicModal__ArgsType = {
  headline?: React.ReactNode;
  subhead?: React.ReactNode;
  bodyText?: React.ReactNode;
  children?: React.ReactNode;
  slot?: React.ReactNode;
};

type ArgPropType = keyof PlasmicModal__ArgsType;
export const PlasmicModal__ArgProps = new Array<ArgPropType>(
  "headline",
  "subhead",
  "bodyText",
  "children",
  "slot"
);

export type PlasmicModal__OverridesType = {
  root?: p.Flex<"div">;
  parent?: p.Flex<"div">;
  buttonParent?: p.Flex<"div">;
  textParent?: p.Flex<"div">;
  textParentB?: p.Flex<"div">;
};

export interface DefaultModalProps {
  headline?: React.ReactNode;
  subhead?: React.ReactNode;
  bodyText?: React.ReactNode;
  children?: React.ReactNode;
  slot?: React.ReactNode;
  className?: string;
}

function PlasmicModal__RenderFunc(props: {
  variants: PlasmicModal__VariantsArgs;
  args: PlasmicModal__ArgsType;
  overrides: PlasmicModal__OverridesType;
  dataFetches?: PlasmicModal__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"parent"}
        data-plasmic-override={overrides.parent}
        hasGap={true}
        className={classNames(defaultcss.all, sty.parent)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.freeBox__aebj)}
        >
          <div className={classNames(defaultcss.all, sty.freeBox__atY7H)}>
            <div className={classNames(defaultcss.all, sty.freeBox__phbsc)}>
              {p.renderPlasmicSlot({
                defaultContents: "Modal Headline Title",
                value: args.headline,
                className: classNames(sty.slotHeadline)
              })}
            </div>
          </div>

          <div className={classNames(defaultcss.all, sty.freeBox__y8Qu6)}>
            <div className={classNames(defaultcss.all, sty.freeBox__iuvs)}>
              {p.renderPlasmicSlot({
                defaultContents: "This is a modal to get your attention",
                value: args.subhead,
                className: classNames(sty.slotSubhead)
              })}
            </div>
          </div>
        </p.Stack>

        <div className={classNames(defaultcss.all, sty.freeBox__yFt4B)}>
          <div className={classNames(defaultcss.all, sty.freeBox__jv272)}>
            {p.renderPlasmicSlot({
              defaultContents:
                "One morning, when Gregor Samsa woke from troubled dreams, he found himself transformed in.",
              value: args.bodyText
            })}
          </div>
        </div>

        <div
          data-plasmic-name={"buttonParent"}
          data-plasmic-override={overrides.buttonParent}
          className={classNames(defaultcss.all, sty.buttonParent)}
        >
          <button className={classNames(defaultcss.button, sty.button__wRv9V)}>
            <div
              data-plasmic-name={"textParent"}
              data-plasmic-override={overrides.textParent}
              className={classNames(defaultcss.all, sty.textParent)}
            >
              {p.renderPlasmicSlot({
                defaultContents: "cancel",
                value: args.children,
                className: classNames(sty.slotChildren)
              })}
            </div>
          </button>

          <button className={classNames(defaultcss.button, sty.button__oXj7U)}>
            <div
              data-plasmic-name={"textParentB"}
              data-plasmic-override={overrides.textParentB}
              className={classNames(defaultcss.all, sty.textParentB)}
            >
              {p.renderPlasmicSlot({
                defaultContents: "submit",
                value: args.slot,
                className: classNames(sty.slotSlot)
              })}
            </div>
          </button>
        </div>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "parent", "buttonParent", "textParent", "textParentB"],
  parent: ["parent", "buttonParent", "textParent", "textParentB"],
  buttonParent: ["buttonParent", "textParent", "textParentB"],
  textParent: ["textParent"],
  textParentB: ["textParentB"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  parent: "div";
  buttonParent: "div";
  textParent: "div";
  textParentB: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicModal__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicModal__VariantsArgs;
    args?: PlasmicModal__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicModal__Fetches;
  } & Omit<PlasmicModal__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicModal__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicModal__ArgProps,
      internalVariantPropNames: PlasmicModal__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicModal__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicModal";
  } else {
    func.displayName = `PlasmicModal.${nodeName}`;
  }
  return func;
}

export const PlasmicModal = Object.assign(
  // Top-level PlasmicModal renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    parent: makeNodeComponent("parent"),
    buttonParent: makeNodeComponent("buttonParent"),
    textParent: makeNodeComponent("textParent"),
    textParentB: makeNodeComponent("textParentB"),

    // Metadata about props expected for PlasmicModal
    internalVariantProps: PlasmicModal__VariantProps,
    internalArgProps: PlasmicModal__ArgProps
  }
);

export default PlasmicModal;
/* prettier-ignore-end */
