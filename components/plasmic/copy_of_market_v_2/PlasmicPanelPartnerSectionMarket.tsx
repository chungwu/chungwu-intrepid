// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: brD8Soq4a9tnKam
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import MenuIconListItem from "../../MenuIconListItem"; // plasmic-import: A4cpU1IW2YGn9yX/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicPanelPartnerSectionMarket.module.css"; // plasmic-import: brD8Soq4a9tnKam/css

import ListingIcon from "./icons/PlasmicIcon__Listing"; // plasmic-import: V-Z6DuZPre8UBS6/icon
import OrdersIcon from "./icons/PlasmicIcon__Orders"; // plasmic-import: lkmMjceRvmz8Quq/icon
import ChartIcon from "./icons/PlasmicIcon__Chart"; // plasmic-import: B44to6Maolz5BFM/icon
import CommentReviewBIcon from "./icons/PlasmicIcon__CommentReviewB"; // plasmic-import: aj70qLXx4-ZWjbL/icon
import CommentReviewIcon from "./icons/PlasmicIcon__CommentReview"; // plasmic-import: XV58WNulEaMmNoZ/icon

export type PlasmicPanelPartnerSectionMarket__VariantMembers = {};

export type PlasmicPanelPartnerSectionMarket__VariantsArgs = {};
type VariantPropType = keyof PlasmicPanelPartnerSectionMarket__VariantsArgs;
export const PlasmicPanelPartnerSectionMarket__VariantProps =
  new Array<VariantPropType>();

export type PlasmicPanelPartnerSectionMarket__ArgsType = {};
type ArgPropType = keyof PlasmicPanelPartnerSectionMarket__ArgsType;
export const PlasmicPanelPartnerSectionMarket__ArgProps =
  new Array<ArgPropType>();

export type PlasmicPanelPartnerSectionMarket__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultPanelPartnerSectionMarketProps {
  className?: string;
}

function PlasmicPanelPartnerSectionMarket__RenderFunc(props: {
  variants: PlasmicPanelPartnerSectionMarket__VariantsArgs;
  args: PlasmicPanelPartnerSectionMarket__ArgsType;
  overrides: PlasmicPanelPartnerSectionMarket__OverridesType;
  dataFetches?: PlasmicPanelPartnerSectionMarket__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.freeBox__gV4Ip)}
      >
        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.freeBox___3Gdm
          )}
        >
          {"Market"}
        </div>
      </p.Stack>

      <MenuIconListItem
        className={classNames("__wab_instance", sty.menuIconListItem___4YaWf)}
        navIcon={
          <div className={classNames(defaultcss.all, sty.freeBox__p2Km)}>
            <ListingIcon
              className={classNames(defaultcss.all, sty.svg__nc2I)}
              role={"img"}
            />
          </div>
        }
        navText={"Listings"}
      />

      <MenuIconListItem
        className={classNames("__wab_instance", sty.menuIconListItem___0Aglx)}
        navIcon={
          <div className={classNames(defaultcss.all, sty.freeBox__qyhFr)}>
            <OrdersIcon
              className={classNames(defaultcss.all, sty.svg__k5K9X)}
              role={"img"}
            />
          </div>
        }
        navText={"Orders"}
      />

      <MenuIconListItem
        className={classNames("__wab_instance", sty.menuIconListItem__mnNlK)}
        navIcon={
          <div className={classNames(defaultcss.all, sty.freeBox__oxtXe)}>
            <ChartIcon
              className={classNames(defaultcss.all, sty.svg__s8P0)}
              role={"img"}
            />
          </div>
        }
        navText={"Performance"}
      />

      <MenuIconListItem
        className={classNames("__wab_instance", sty.menuIconListItem___5NdtD)}
        navIcon={
          <div className={classNames(defaultcss.all, sty.freeBox__f5MbH)}>
            <CommentReviewBIcon
              className={classNames(defaultcss.all, sty.svg__uU7Y)}
              role={"img"}
            />
          </div>
        }
        navText={"Reviews"}
      />

      <MenuIconListItem
        className={classNames("__wab_instance", sty.menuIconListItem__ifpAv)}
        navIcon={
          <div className={classNames(defaultcss.all, sty.freeBox__adU6R)}>
            <CommentReviewIcon
              className={classNames(defaultcss.all, sty.svg__jjbtp)}
              role={"img"}
            />
          </div>
        }
        navText={"Messages"}
      />
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPanelPartnerSectionMarket__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPanelPartnerSectionMarket__VariantsArgs;
    args?: PlasmicPanelPartnerSectionMarket__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicPanelPartnerSectionMarket__Fetches;
  } & Omit<PlasmicPanelPartnerSectionMarket__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPanelPartnerSectionMarket__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPanelPartnerSectionMarket__ArgProps,
      internalVariantPropNames: PlasmicPanelPartnerSectionMarket__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicPanelPartnerSectionMarket__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPanelPartnerSectionMarket";
  } else {
    func.displayName = `PlasmicPanelPartnerSectionMarket.${nodeName}`;
  }
  return func;
}

export const PlasmicPanelPartnerSectionMarket = Object.assign(
  // Top-level PlasmicPanelPartnerSectionMarket renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicPanelPartnerSectionMarket
    internalVariantProps: PlasmicPanelPartnerSectionMarket__VariantProps,
    internalArgProps: PlasmicPanelPartnerSectionMarket__ArgProps
  }
);

export default PlasmicPanelPartnerSectionMarket;
/* prettier-ignore-end */
