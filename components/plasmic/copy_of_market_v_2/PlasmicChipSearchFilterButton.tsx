// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: 3nlcq-i3fhWpnw8
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicChipSearchFilterButton.module.css"; // plasmic-import: 3nlcq-i3fhWpnw8/css

export type PlasmicChipSearchFilterButton__VariantMembers = {
  trigger: "disabled";
  type: "primary";
  color: "primary";
  size: "_32Px";
};

export type PlasmicChipSearchFilterButton__VariantsArgs = {
  trigger?: SingleChoiceArg<"disabled">;
  type?: SingleChoiceArg<"primary">;
  color?: SingleChoiceArg<"primary">;
  size?: SingleChoiceArg<"_32Px">;
};

type VariantPropType = keyof PlasmicChipSearchFilterButton__VariantsArgs;
export const PlasmicChipSearchFilterButton__VariantProps =
  new Array<VariantPropType>("trigger", "type", "color", "size");

export type PlasmicChipSearchFilterButton__ArgsType = {
  text?: React.ReactNode;
  target?: string;
};

type ArgPropType = keyof PlasmicChipSearchFilterButton__ArgsType;
export const PlasmicChipSearchFilterButton__ArgProps = new Array<ArgPropType>(
  "text",
  "target"
);

export type PlasmicChipSearchFilterButton__OverridesType = {
  buttonTrigger?: p.Flex<"button">;
};

export interface DefaultChipSearchFilterButtonProps {
  text?: React.ReactNode;
  target?: string;
  trigger?: SingleChoiceArg<"disabled">;
  type?: SingleChoiceArg<"primary">;
  color?: SingleChoiceArg<"primary">;
  size?: SingleChoiceArg<"_32Px">;
  className?: string;
}

function PlasmicChipSearchFilterButton__RenderFunc(props: {
  variants: PlasmicChipSearchFilterButton__VariantsArgs;
  args: PlasmicChipSearchFilterButton__ArgsType;
  overrides: PlasmicChipSearchFilterButton__OverridesType;
  dataFetches?: PlasmicChipSearchFilterButton__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <button
      data-plasmic-name={"buttonTrigger"}
      data-plasmic-override={overrides.buttonTrigger}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        defaultcss.button,
        projectcss.root_reset,
        sty.buttonTrigger,
        {
          [sty.buttonTrigger__trigger_disabled]: hasVariant(
            variants,
            "trigger",
            "disabled"
          )
        }
      )}
    >
      {p.renderPlasmicSlot({
        defaultContents: "Search",
        value: args.text,
        className: classNames(sty.slotText, {
          [sty.slotText__trigger_disabled]: hasVariant(
            variants,
            "trigger",
            "disabled"
          )
        })
      })}
    </button>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  buttonTrigger: ["buttonTrigger"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  buttonTrigger: "button";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicChipSearchFilterButton__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicChipSearchFilterButton__VariantsArgs;
    args?: PlasmicChipSearchFilterButton__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicChipSearchFilterButton__Fetches;
  } & Omit<PlasmicChipSearchFilterButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicChipSearchFilterButton__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicChipSearchFilterButton__ArgProps,
      internalVariantPropNames: PlasmicChipSearchFilterButton__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicChipSearchFilterButton__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "buttonTrigger") {
    func.displayName = "PlasmicChipSearchFilterButton";
  } else {
    func.displayName = `PlasmicChipSearchFilterButton.${nodeName}`;
  }
  return func;
}

export const PlasmicChipSearchFilterButton = Object.assign(
  // Top-level PlasmicChipSearchFilterButton renders the root element
  makeNodeComponent("buttonTrigger"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicChipSearchFilterButton
    internalVariantProps: PlasmicChipSearchFilterButton__VariantProps,
    internalArgProps: PlasmicChipSearchFilterButton__ArgProps
  }
);

export default PlasmicChipSearchFilterButton;
/* prettier-ignore-end */
