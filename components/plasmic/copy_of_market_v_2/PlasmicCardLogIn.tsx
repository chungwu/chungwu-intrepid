// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: E5VOlk3wsw20Wp
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: gpNjXfbD_ZdpPU/component
import ButtonConnectedAccount from "../../ButtonConnectedAccount"; // plasmic-import: gtSe0S4gPoo40V/component
import ButtonLinkPrimary from "../../ButtonLinkPrimary"; // plasmic-import: tSiOWgKlHR05p7/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicCardLogIn.module.css"; // plasmic-import: E5VOlk3wsw20Wp/css

import PlusBoldIcon from "./icons/PlasmicIcon__PlusBold"; // plasmic-import: lhSEEajPJGZatfD/icon

export type PlasmicCardLogIn__VariantMembers = {
  size: "_360" | "_540";
};

export type PlasmicCardLogIn__VariantsArgs = {
  size?: SingleChoiceArg<"_360" | "_540">;
};

type VariantPropType = keyof PlasmicCardLogIn__VariantsArgs;
export const PlasmicCardLogIn__VariantProps = new Array<VariantPropType>(
  "size"
);

export type PlasmicCardLogIn__ArgsType = {
  id?: string;
  placeholder?: string;
};

type ArgPropType = keyof PlasmicCardLogIn__ArgsType;
export const PlasmicCardLogIn__ArgProps = new Array<ArgPropType>(
  "id",
  "placeholder"
);

export type PlasmicCardLogIn__OverridesType = {
  formLogin?: p.Flex<"form">;
  inputLabelParent?: p.Flex<"div">;
  emailLabel?: p.Flex<"label">;
  email?: p.Flex<"input">;
  inputPasswordLabelParent?: p.Flex<"div">;
  passwordLabel?: p.Flex<"label">;
  password?: p.Flex<"input">;
  buttonContinueParent?: p.Flex<"div">;
  loginContinueButton?: p.Flex<typeof ButtonPrimary>;
  recoveryLinkParent?: p.Flex<"div">;
  resetPassword?: p.Flex<"a"> & Partial<LinkProps>;
  loginFacebookConnect?: p.Flex<typeof ButtonConnectedAccount>;
  loginGoogleConnect?: p.Flex<typeof ButtonConnectedAccount>;
  signupSubhead?: p.Flex<"div">;
  buttonLinkPrimary?: p.Flex<typeof ButtonLinkPrimary>;
};

export interface DefaultCardLogInProps {
  id?: string;
  placeholder?: string;
  size?: SingleChoiceArg<"_360" | "_540">;
  className?: string;
}

function PlasmicCardLogIn__RenderFunc(props: {
  variants: PlasmicCardLogIn__VariantsArgs;
  args: PlasmicCardLogIn__ArgsType;
  overrides: PlasmicCardLogIn__OverridesType;
  dataFetches?: PlasmicCardLogIn__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"form"}
      data-plasmic-name={"formLogin"}
      data-plasmic-override={overrides.formLogin}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        defaultcss.all,
        projectcss.root_reset,
        sty.formLogin,
        {
          [sty.formLogin__size__360]: hasVariant(variants, "size", "_360"),
          [sty.formLogin__size__540]: hasVariant(variants, "size", "_540")
        }
      )}
      id={args.id}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"inputLabelParent"}
        data-plasmic-override={overrides.inputLabelParent}
        hasGap={true}
        className={classNames(defaultcss.all, sty.inputLabelParent)}
      >
        <label
          data-plasmic-name={"emailLabel"}
          data-plasmic-override={overrides.emailLabel}
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.emailLabel
          )}
        >
          {"Email"}
        </label>

        <input
          data-plasmic-name={"email"}
          data-plasmic-override={overrides.email}
          className={classNames(defaultcss.input, sty.email)}
          placeholder={"Enter your email address" as const}
          size={1 as const}
          type={"text" as const}
          value={"" as const}
        />
      </p.Stack>

      <p.Stack
        as={"div"}
        data-plasmic-name={"inputPasswordLabelParent"}
        data-plasmic-override={overrides.inputPasswordLabelParent}
        hasGap={true}
        className={classNames(defaultcss.all, sty.inputPasswordLabelParent)}
      >
        <label
          data-plasmic-name={"passwordLabel"}
          data-plasmic-override={overrides.passwordLabel}
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.passwordLabel
          )}
        >
          {"Password"}
        </label>

        <input
          data-plasmic-name={"password"}
          data-plasmic-override={overrides.password}
          className={classNames(defaultcss.input, sty.password)}
          placeholder={
            args.placeholder !== undefined
              ? args.placeholder
              : "Enter your password"
          }
          size={1 as const}
          type={"password" as const}
        />

        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.freeBox__upOI
          )}
        >
          {"Must contain at least 8 alphanumeric characters"}
        </div>
      </p.Stack>

      <p.Stack
        as={"div"}
        data-plasmic-name={"buttonContinueParent"}
        data-plasmic-override={overrides.buttonContinueParent}
        hasGap={true}
        className={classNames(defaultcss.all, sty.buttonContinueParent)}
      >
        <ButtonPrimary
          data-plasmic-name={"loginContinueButton"}
          data-plasmic-override={overrides.loginContinueButton}
          className={classNames("__wab_instance", sty.loginContinueButton)}
          size={"_360" as const}
        >
          {"Continue"}
        </ButtonPrimary>

        <p.Stack
          as={"div"}
          data-plasmic-name={"recoveryLinkParent"}
          data-plasmic-override={overrides.recoveryLinkParent}
          hasGap={true}
          className={classNames(defaultcss.all, sty.recoveryLinkParent)}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox__fiZVy
            )}
          >
            {"Forgot password?"}
          </div>

          <p.PlasmicLink
            data-plasmic-name={"resetPassword"}
            data-plasmic-override={overrides.resetPassword}
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.resetPassword
            )}
            component={Link}
            href={"/password-reset" as const}
            platform={"nextjs"}
          >
            {"Send recovery link"}
          </p.PlasmicLink>
        </p.Stack>
      </p.Stack>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.freeBox__fg6Fq)}
      >
        <div className={classNames(defaultcss.all, sty.freeBox__aIxiC)} />

        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.freeBox___5KaZp
          )}
        >
          {"or"}
        </div>

        <div className={classNames(defaultcss.all, sty.freeBox__wNyIv)} />
      </p.Stack>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.freeBox__grOxW)}
      >
        <ButtonConnectedAccount
          data-plasmic-name={"loginFacebookConnect"}
          data-plasmic-override={overrides.loginFacebookConnect}
          className={classNames("__wab_instance", sty.loginFacebookConnect)}
          company={"facebook" as const}
          height={"_48" as const}
          width={"_360" as const}
        />

        <ButtonConnectedAccount
          data-plasmic-name={"loginGoogleConnect"}
          data-plasmic-override={overrides.loginGoogleConnect}
          className={classNames("__wab_instance", sty.loginGoogleConnect)}
          company={"google" as const}
          height={"_48" as const}
          width={"_360" as const}
        />
      </p.Stack>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.freeBox__toxY)}
      />

      <div
        data-plasmic-name={"signupSubhead"}
        data-plasmic-override={overrides.signupSubhead}
        className={classNames(
          defaultcss.all,
          defaultcss.__wab_text,
          sty.signupSubhead
        )}
      >
        {"Don't have an account?"}
      </div>

      <ButtonLinkPrimary
        data-plasmic-name={"buttonLinkPrimary"}
        data-plasmic-override={overrides.buttonLinkPrimary}
        className={classNames("__wab_instance", sty.buttonLinkPrimary)}
        color={"light" as const}
        destination={"/sign-up" as const}
        height={"_48" as const}
        text={
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox__bcifb
            )}
          >
            {"Sign up"}
          </div>
        }
        type={"outline" as const}
        width={"_360" as const}
      />
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  formLogin: [
    "formLogin",
    "inputLabelParent",
    "emailLabel",
    "email",
    "inputPasswordLabelParent",
    "passwordLabel",
    "password",
    "buttonContinueParent",
    "loginContinueButton",
    "recoveryLinkParent",
    "resetPassword",
    "loginFacebookConnect",
    "loginGoogleConnect",
    "signupSubhead",
    "buttonLinkPrimary"
  ],
  inputLabelParent: ["inputLabelParent", "emailLabel", "email"],
  emailLabel: ["emailLabel"],
  email: ["email"],
  inputPasswordLabelParent: [
    "inputPasswordLabelParent",
    "passwordLabel",
    "password"
  ],
  passwordLabel: ["passwordLabel"],
  password: ["password"],
  buttonContinueParent: [
    "buttonContinueParent",
    "loginContinueButton",
    "recoveryLinkParent",
    "resetPassword"
  ],
  loginContinueButton: ["loginContinueButton"],
  recoveryLinkParent: ["recoveryLinkParent", "resetPassword"],
  resetPassword: ["resetPassword"],
  loginFacebookConnect: ["loginFacebookConnect"],
  loginGoogleConnect: ["loginGoogleConnect"],
  signupSubhead: ["signupSubhead"],
  buttonLinkPrimary: ["buttonLinkPrimary"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  formLogin: "form";
  inputLabelParent: "div";
  emailLabel: "label";
  email: "input";
  inputPasswordLabelParent: "div";
  passwordLabel: "label";
  password: "input";
  buttonContinueParent: "div";
  loginContinueButton: typeof ButtonPrimary;
  recoveryLinkParent: "div";
  resetPassword: "a";
  loginFacebookConnect: typeof ButtonConnectedAccount;
  loginGoogleConnect: typeof ButtonConnectedAccount;
  signupSubhead: "div";
  buttonLinkPrimary: typeof ButtonLinkPrimary;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCardLogIn__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCardLogIn__VariantsArgs;
    args?: PlasmicCardLogIn__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicCardLogIn__Fetches;
  } & Omit<PlasmicCardLogIn__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCardLogIn__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCardLogIn__ArgProps,
      internalVariantPropNames: PlasmicCardLogIn__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicCardLogIn__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "formLogin") {
    func.displayName = "PlasmicCardLogIn";
  } else {
    func.displayName = `PlasmicCardLogIn.${nodeName}`;
  }
  return func;
}

export const PlasmicCardLogIn = Object.assign(
  // Top-level PlasmicCardLogIn renders the root element
  makeNodeComponent("formLogin"),
  {
    // Helper components rendering sub-elements
    inputLabelParent: makeNodeComponent("inputLabelParent"),
    emailLabel: makeNodeComponent("emailLabel"),
    email: makeNodeComponent("email"),
    inputPasswordLabelParent: makeNodeComponent("inputPasswordLabelParent"),
    passwordLabel: makeNodeComponent("passwordLabel"),
    password: makeNodeComponent("password"),
    buttonContinueParent: makeNodeComponent("buttonContinueParent"),
    loginContinueButton: makeNodeComponent("loginContinueButton"),
    recoveryLinkParent: makeNodeComponent("recoveryLinkParent"),
    resetPassword: makeNodeComponent("resetPassword"),
    loginFacebookConnect: makeNodeComponent("loginFacebookConnect"),
    loginGoogleConnect: makeNodeComponent("loginGoogleConnect"),
    signupSubhead: makeNodeComponent("signupSubhead"),
    buttonLinkPrimary: makeNodeComponent("buttonLinkPrimary"),

    // Metadata about props expected for PlasmicCardLogIn
    internalVariantProps: PlasmicCardLogIn__VariantProps,
    internalArgProps: PlasmicCardLogIn__ArgProps
  }
);

export default PlasmicCardLogIn;
/* prettier-ignore-end */
