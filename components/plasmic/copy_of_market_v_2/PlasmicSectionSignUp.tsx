// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: kcR5JSus3pINXQ
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import CardSignUp from "../../CardSignUp"; // plasmic-import: eHJa7ciga7ihS0/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: biX3aS42hiG0fF/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicSectionSignUp.module.css"; // plasmic-import: kcR5JSus3pINXQ/css

import Icon43Icon from "./icons/PlasmicIcon__Icon43"; // plasmic-import: uYZcHonxcU9iEGk/icon

export type PlasmicSectionSignUp__VariantMembers = {};

export type PlasmicSectionSignUp__VariantsArgs = {};
type VariantPropType = keyof PlasmicSectionSignUp__VariantsArgs;
export const PlasmicSectionSignUp__VariantProps = new Array<VariantPropType>();

export type PlasmicSectionSignUp__ArgsType = {};
type ArgPropType = keyof PlasmicSectionSignUp__ArgsType;
export const PlasmicSectionSignUp__ArgProps = new Array<ArgPropType>();

export type PlasmicSectionSignUp__OverridesType = {
  root?: p.Flex<"div">;
  signUpFormContainerDiv?: p.Flex<"div">;
  signUpHeadlineDiv?: p.Flex<"div">;
  svgLinkDiv?: p.Flex<"a"> & Partial<LinkProps>;
  svg?: p.Flex<"svg">;
  freeBox?: p.Flex<"div">;
  cardSignUp?: p.Flex<typeof CardSignUp>;
};

export interface DefaultSectionSignUpProps {
  className?: string;
}

function PlasmicSectionSignUp__RenderFunc(props: {
  variants: PlasmicSectionSignUp__VariantsArgs;
  args: PlasmicSectionSignUp__ArgsType;
  overrides: PlasmicSectionSignUp__OverridesType;
  dataFetches?: PlasmicSectionSignUp__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      {(hasVariant(globalVariants, "screen", "desktop") ? true : true) ? (
        <div
          data-plasmic-name={"signUpFormContainerDiv"}
          data-plasmic-override={overrides.signUpFormContainerDiv}
          className={classNames(defaultcss.all, sty.signUpFormContainerDiv)}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"signUpHeadlineDiv"}
            data-plasmic-override={overrides.signUpHeadlineDiv}
            hasGap={true}
            className={classNames(defaultcss.all, sty.signUpHeadlineDiv)}
          >
            <p.PlasmicLink
              data-plasmic-name={"svgLinkDiv"}
              data-plasmic-override={overrides.svgLinkDiv}
              className={classNames(defaultcss.all, sty.svgLinkDiv)}
              component={Link}
              href={"/" as const}
              platform={"nextjs"}
            >
              <Icon43Icon
                data-plasmic-name={"svg"}
                data-plasmic-override={overrides.svg}
                className={classNames(defaultcss.all, sty.svg)}
                role={"img"}
              />
            </p.PlasmicLink>

            <div
              data-plasmic-name={"freeBox"}
              data-plasmic-override={overrides.freeBox}
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox
              )}
            >
              {"Sign up"}
            </div>

            <CardSignUp
              data-plasmic-name={"cardSignUp"}
              data-plasmic-override={overrides.cardSignUp}
              className={classNames("__wab_instance", sty.cardSignUp)}
            />
          </p.Stack>
        </div>
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "signUpFormContainerDiv",
    "signUpHeadlineDiv",
    "svgLinkDiv",
    "svg",
    "freeBox",
    "cardSignUp"
  ],
  signUpFormContainerDiv: [
    "signUpFormContainerDiv",
    "signUpHeadlineDiv",
    "svgLinkDiv",
    "svg",
    "freeBox",
    "cardSignUp"
  ],
  signUpHeadlineDiv: [
    "signUpHeadlineDiv",
    "svgLinkDiv",
    "svg",
    "freeBox",
    "cardSignUp"
  ],
  svgLinkDiv: ["svgLinkDiv", "svg"],
  svg: ["svg"],
  freeBox: ["freeBox"],
  cardSignUp: ["cardSignUp"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  signUpFormContainerDiv: "div";
  signUpHeadlineDiv: "div";
  svgLinkDiv: "a";
  svg: "svg";
  freeBox: "div";
  cardSignUp: typeof CardSignUp;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSectionSignUp__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSectionSignUp__VariantsArgs;
    args?: PlasmicSectionSignUp__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicSectionSignUp__Fetches;
  } & Omit<PlasmicSectionSignUp__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSectionSignUp__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSectionSignUp__ArgProps,
      internalVariantPropNames: PlasmicSectionSignUp__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicSectionSignUp__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSectionSignUp";
  } else {
    func.displayName = `PlasmicSectionSignUp.${nodeName}`;
  }
  return func;
}

export const PlasmicSectionSignUp = Object.assign(
  // Top-level PlasmicSectionSignUp renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    signUpFormContainerDiv: makeNodeComponent("signUpFormContainerDiv"),
    signUpHeadlineDiv: makeNodeComponent("signUpHeadlineDiv"),
    svgLinkDiv: makeNodeComponent("svgLinkDiv"),
    svg: makeNodeComponent("svg"),
    freeBox: makeNodeComponent("freeBox"),
    cardSignUp: makeNodeComponent("cardSignUp"),

    // Metadata about props expected for PlasmicSectionSignUp
    internalVariantProps: PlasmicSectionSignUp__VariantProps,
    internalArgProps: PlasmicSectionSignUp__ArgProps
  }
);

export default PlasmicSectionSignUp;
/* prettier-ignore-end */
