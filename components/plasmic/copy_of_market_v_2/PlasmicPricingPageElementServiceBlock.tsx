// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: adlTRbUv8NU1Fen
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TablePricingElementPercentValueBold from "../../TablePricingElementPercentValueBold"; // plasmic-import: NTW6aK4CioPsO7y/component
import TablePricingElementPercentValue from "../../TablePricingElementPercentValue"; // plasmic-import: LRtFhyieDHqn4Di/component
import TablePricingElementNumberValue from "../../TablePricingElementNumberValue"; // plasmic-import: mpXWNZ3UQjyzWPh/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicPricingPageElementServiceBlock.module.css"; // plasmic-import: adlTRbUv8NU1Fen/css

import Icon164Icon from "./icons/PlasmicIcon__Icon164"; // plasmic-import: w7nSyC5BjylkNp1/icon
import Icon122Icon from "./icons/PlasmicIcon__Icon122"; // plasmic-import: GEUiKMgMQ7RXOJ2/icon
import ListingIcon from "./icons/PlasmicIcon__Listing"; // plasmic-import: V-Z6DuZPre8UBS6/icon
import Icon169Icon from "./icons/PlasmicIcon__Icon169"; // plasmic-import: hzDc3CsFLBB3eRG/icon

export type PlasmicPricingPageElementServiceBlock__VariantMembers = {};

export type PlasmicPricingPageElementServiceBlock__VariantsArgs = {};
type VariantPropType =
  keyof PlasmicPricingPageElementServiceBlock__VariantsArgs;
export const PlasmicPricingPageElementServiceBlock__VariantProps =
  new Array<VariantPropType>();

export type PlasmicPricingPageElementServiceBlock__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  slot4?: React.ReactNode;
  slot5?: React.ReactNode;
  featurevalueText?: React.ReactNode;
  slot7?: React.ReactNode;
  slot8?: React.ReactNode;
  slot9?: React.ReactNode;
  slot10?: React.ReactNode;
  slot11?: React.ReactNode;
  slot6?: React.ReactNode;
  slot12?: React.ReactNode;
  slot13?: React.ReactNode;
  slot14?: React.ReactNode;
  slot15?: React.ReactNode;
};

type ArgPropType = keyof PlasmicPricingPageElementServiceBlock__ArgsType;
export const PlasmicPricingPageElementServiceBlock__ArgProps =
  new Array<ArgPropType>(
    "children",
    "slot",
    "slot2",
    "slot3",
    "slot4",
    "slot5",
    "featurevalueText",
    "slot7",
    "slot8",
    "slot9",
    "slot10",
    "slot11",
    "slot6",
    "slot12",
    "slot13",
    "slot14",
    "slot15"
  );

export type PlasmicPricingPageElementServiceBlock__OverridesType = {
  root?: p.Flex<"div">;
  tablePricingElementPercentValueBold?: p.Flex<
    typeof TablePricingElementPercentValueBold
  >;
  tablePricingElementPercentValue?: p.Flex<
    typeof TablePricingElementPercentValue
  >;
};

export interface DefaultPricingPageElementServiceBlockProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  slot4?: React.ReactNode;
  slot5?: React.ReactNode;
  featurevalueText?: React.ReactNode;
  slot7?: React.ReactNode;
  slot8?: React.ReactNode;
  slot9?: React.ReactNode;
  slot10?: React.ReactNode;
  slot11?: React.ReactNode;
  slot6?: React.ReactNode;
  slot12?: React.ReactNode;
  slot13?: React.ReactNode;
  slot14?: React.ReactNode;
  slot15?: React.ReactNode;
  className?: string;
}

function PlasmicPricingPageElementServiceBlock__RenderFunc(props: {
  variants: PlasmicPricingPageElementServiceBlock__VariantsArgs;
  args: PlasmicPricingPageElementServiceBlock__ArgsType;
  overrides: PlasmicPricingPageElementServiceBlock__OverridesType;
  dataFetches?: PlasmicPricingPageElementServiceBlock__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div className={classNames(defaultcss.all, sty.freeBox___60E73)}>
        <div className={classNames(defaultcss.all, sty.freeBox__gmGzN)}>
          {p.renderPlasmicSlot({
            defaultContents: "Service",
            value: args.slot6,
            className: classNames(sty.slotSlot6)
          })}
        </div>
      </div>

      <TablePricingElementPercentValueBold
        data-plasmic-name={"tablePricingElementPercentValueBold"}
        data-plasmic-override={overrides.tablePricingElementPercentValueBold}
        className={classNames(
          "__wab_instance",
          sty.tablePricingElementPercentValueBold
        )}
        numberValue={p.renderPlasmicSlot({
          defaultContents: "0",
          value: args.children
        })}
        percent={p.renderPlasmicSlot({
          defaultContents: "%",
          value: args.slot9
        })}
        svgIcon={p.renderPlasmicSlot({
          defaultContents: (
            <Icon164Icon
              className={classNames(defaultcss.all, sty.svg___4EnQf)}
              role={"img"}
            />
          ),

          value: args.slot12
        })}
        textValueProposition={p.renderPlasmicSlot({
          defaultContents: "Payment processing fees",
          value: args.slot11
        })}
      />

      <TablePricingElementPercentValue
        data-plasmic-name={"tablePricingElementPercentValue"}
        data-plasmic-override={overrides.tablePricingElementPercentValue}
        className={classNames(
          "__wab_instance",
          sty.tablePricingElementPercentValue
        )}
        featureValuePropText={p.renderPlasmicSlot({
          defaultContents: "Service rate on earned income",
          value: args.slot4,
          className: classNames(sty.slotSlot4)
        })}
        numberValue={p.renderPlasmicSlot({
          defaultContents: "5",
          value: args.slot
        })}
        percent={p.renderPlasmicSlot({
          defaultContents: "%",
          value: args.slot8
        })}
        svgIcon={p.renderPlasmicSlot({
          defaultContents: (
            <Icon122Icon
              className={classNames(defaultcss.all, sty.svg__bHeiM)}
              role={"img"}
            />
          ),

          value: args.slot13
        })}
      />

      <TablePricingElementNumberValue
        className={classNames(
          "__wab_instance",
          sty.tablePricingElementNumberValue__h1IzZ
        )}
        featureValueText={p.renderPlasmicSlot({
          defaultContents: "Standard rate per listing",
          value: args.slot10
        })}
        numberValue={p.renderPlasmicSlot({
          defaultContents: "3",
          value: args.slot2
        })}
        percent={p.renderPlasmicSlot({
          defaultContents: "$",
          value: args.slot7
        })}
        svgIcon={p.renderPlasmicSlot({
          defaultContents: (
            <ListingIcon
              className={classNames(defaultcss.all, sty.svg__l6LHg)}
              role={"img"}
            />
          ),

          value: args.slot14
        })}
      />

      <TablePricingElementNumberValue
        className={classNames(
          "__wab_instance",
          sty.tablePricingElementNumberValue__tfM
        )}
        featureValueText={p.renderPlasmicSlot({
          defaultContents: "Priority upgrade per listing",
          value: args.featurevalueText
        })}
        numberValue={p.renderPlasmicSlot({
          defaultContents: "1",
          value: args.slot3
        })}
        percent={p.renderPlasmicSlot({
          defaultContents: "$",
          value: args.slot5
        })}
        svgIcon={p.renderPlasmicSlot({
          defaultContents: (
            <Icon169Icon
              className={classNames(defaultcss.all, sty.svg__t4QjW)}
              role={"img"}
            />
          ),

          value: args.slot15
        })}
      />
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "tablePricingElementPercentValueBold",
    "tablePricingElementPercentValue"
  ],
  tablePricingElementPercentValueBold: ["tablePricingElementPercentValueBold"],
  tablePricingElementPercentValue: ["tablePricingElementPercentValue"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  tablePricingElementPercentValueBold: typeof TablePricingElementPercentValueBold;
  tablePricingElementPercentValue: typeof TablePricingElementPercentValue;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPricingPageElementServiceBlock__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPricingPageElementServiceBlock__VariantsArgs;
    args?: PlasmicPricingPageElementServiceBlock__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicPricingPageElementServiceBlock__Fetches;
  } & Omit< // Specify variants directly as props
    PlasmicPricingPageElementServiceBlock__VariantsArgs,
    ReservedPropsType
  > &
    // Specify args directly as props
    Omit<PlasmicPricingPageElementServiceBlock__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPricingPageElementServiceBlock__ArgProps,
      internalVariantPropNames:
        PlasmicPricingPageElementServiceBlock__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicPricingPageElementServiceBlock__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPricingPageElementServiceBlock";
  } else {
    func.displayName = `PlasmicPricingPageElementServiceBlock.${nodeName}`;
  }
  return func;
}

export const PlasmicPricingPageElementServiceBlock = Object.assign(
  // Top-level PlasmicPricingPageElementServiceBlock renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    tablePricingElementPercentValueBold: makeNodeComponent(
      "tablePricingElementPercentValueBold"
    ),
    tablePricingElementPercentValue: makeNodeComponent(
      "tablePricingElementPercentValue"
    ),

    // Metadata about props expected for PlasmicPricingPageElementServiceBlock
    internalVariantProps: PlasmicPricingPageElementServiceBlock__VariantProps,
    internalArgProps: PlasmicPricingPageElementServiceBlock__ArgProps
  }
);

export default PlasmicPricingPageElementServiceBlock;
/* prettier-ignore-end */
