// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: 9I6cKBLOMWVCOTc
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import PanelButtonNewListing from "../../PanelButtonNewListing"; // plasmic-import: EayliL28AU_4nQj/component
import PanelButtonPowerUp from "../../PanelButtonPowerUp"; // plasmic-import: KyscJUYF2gCNOkx/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicPanelButtonHeader.module.css"; // plasmic-import: 9I6cKBLOMWVCOTc/css

export type PlasmicPanelButtonHeader__VariantMembers = {
  user: "member" | "partner";
};

export type PlasmicPanelButtonHeader__VariantsArgs = {
  user?: SingleChoiceArg<"member" | "partner">;
};

type VariantPropType = keyof PlasmicPanelButtonHeader__VariantsArgs;
export const PlasmicPanelButtonHeader__VariantProps =
  new Array<VariantPropType>("user");

export type PlasmicPanelButtonHeader__ArgsType = {};
type ArgPropType = keyof PlasmicPanelButtonHeader__ArgsType;
export const PlasmicPanelButtonHeader__ArgProps = new Array<ArgPropType>();

export type PlasmicPanelButtonHeader__OverridesType = {
  root?: p.Flex<"div">;
  partnerNewListing?: p.Flex<typeof PanelButtonNewListing>;
  partnerPowerUp?: p.Flex<typeof PanelButtonPowerUp>;
};

export interface DefaultPanelButtonHeaderProps {
  user?: SingleChoiceArg<"member" | "partner">;
  className?: string;
}

function PlasmicPanelButtonHeader__RenderFunc(props: {
  variants: PlasmicPanelButtonHeader__VariantsArgs;
  args: PlasmicPanelButtonHeader__ArgsType;
  overrides: PlasmicPanelButtonHeader__OverridesType;
  dataFetches?: PlasmicPanelButtonHeader__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <PanelButtonNewListing
        data-plasmic-name={"partnerNewListing"}
        data-plasmic-override={overrides.partnerNewListing}
        className={classNames("__wab_instance", sty.partnerNewListing, {
          [sty.partnerNewListing__user_member]: hasVariant(
            variants,
            "user",
            "member"
          ),
          [sty.partnerNewListing__user_partner]: hasVariant(
            variants,
            "user",
            "partner"
          )
        })}
        trigger={"" as const}
      />

      <PanelButtonPowerUp
        data-plasmic-name={"partnerPowerUp"}
        data-plasmic-override={overrides.partnerPowerUp}
        className={classNames("__wab_instance", sty.partnerPowerUp, {
          [sty.partnerPowerUp__user_member]: hasVariant(
            variants,
            "user",
            "member"
          ),
          [sty.partnerPowerUp__user_partner]: hasVariant(
            variants,
            "user",
            "partner"
          )
        })}
        destination={
          hasVariant(variants, "user", "member")
            ? ("/member/pricing" as const)
            : ("/partner/pricing" as const)
        }
      />
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "partnerNewListing", "partnerPowerUp"],
  partnerNewListing: ["partnerNewListing"],
  partnerPowerUp: ["partnerPowerUp"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  partnerNewListing: typeof PanelButtonNewListing;
  partnerPowerUp: typeof PanelButtonPowerUp;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPanelButtonHeader__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPanelButtonHeader__VariantsArgs;
    args?: PlasmicPanelButtonHeader__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicPanelButtonHeader__Fetches;
  } & Omit<PlasmicPanelButtonHeader__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPanelButtonHeader__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPanelButtonHeader__ArgProps,
      internalVariantPropNames: PlasmicPanelButtonHeader__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicPanelButtonHeader__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPanelButtonHeader";
  } else {
    func.displayName = `PlasmicPanelButtonHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicPanelButtonHeader = Object.assign(
  // Top-level PlasmicPanelButtonHeader renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    partnerNewListing: makeNodeComponent("partnerNewListing"),
    partnerPowerUp: makeNodeComponent("partnerPowerUp"),

    // Metadata about props expected for PlasmicPanelButtonHeader
    internalVariantProps: PlasmicPanelButtonHeader__VariantProps,
    internalArgProps: PlasmicPanelButtonHeader__ArgProps
  }
);

export default PlasmicPanelButtonHeader;
/* prettier-ignore-end */
