// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: BOpGfj7CC1w-6t
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicInputCardNumberField.module.css"; // plasmic-import: BOpGfj7CC1w-6t/css

export type PlasmicInputCardNumberField__VariantMembers = {
  description: "description";
  state: "success";
  size: "_180" | "_270";
};

export type PlasmicInputCardNumberField__VariantsArgs = {
  description?: SingleBooleanChoiceArg<"description">;
  state?: SingleChoiceArg<"success">;
  size?: SingleChoiceArg<"_180" | "_270">;
};

type VariantPropType = keyof PlasmicInputCardNumberField__VariantsArgs;
export const PlasmicInputCardNumberField__VariantProps =
  new Array<VariantPropType>("description", "state", "size");

export type PlasmicInputCardNumberField__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
};

type ArgPropType = keyof PlasmicInputCardNumberField__ArgsType;
export const PlasmicInputCardNumberField__ArgProps = new Array<ArgPropType>(
  "children",
  "slot"
);

export type PlasmicInputCardNumberField__OverridesType = {
  root?: p.Flex<"div">;
  textbox?: p.Flex<"input">;
};

export interface DefaultInputCardNumberFieldProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  description?: SingleBooleanChoiceArg<"description">;
  state?: SingleChoiceArg<"success">;
  size?: SingleChoiceArg<"_180" | "_270">;
  className?: string;
}

function PlasmicInputCardNumberField__RenderFunc(props: {
  variants: PlasmicInputCardNumberField__VariantsArgs;
  args: PlasmicInputCardNumberField__ArgsType;
  overrides: PlasmicInputCardNumberField__OverridesType;
  dataFetches?: PlasmicInputCardNumberField__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__size__180]: hasVariant(variants, "size", "_180"),
        [sty.root__size__270]: hasVariant(variants, "size", "_270")
      })}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.freeBox__fdmhD, {
          [sty.freeBox__size__180__fdmhDSwfJz]: hasVariant(
            variants,
            "size",
            "_180"
          ),
          [sty.freeBox__state_success__fdmhDLdydK]: hasVariant(
            variants,
            "state",
            "success"
          )
        })}
      >
        <p.Stack
          as={"input"}
          data-plasmic-name={"textbox"}
          data-plasmic-override={overrides.textbox}
          hasGap={true}
          className={classNames(defaultcss.input, sty.textbox, {
            [sty.textbox__size__180]: hasVariant(variants, "size", "_180"),
            [sty.textbox__state_success]: hasVariant(
              variants,
              "state",
              "success"
            )
          })}
          placeholder={"" as const}
          size={1 as const}
          type={"text" as const}
          value={"" as const}
        />

        <div
          className={classNames(defaultcss.all, sty.freeBox__lCcW5, {
            [sty.freeBox__size__180__lCcW5SwfJz]: hasVariant(
              variants,
              "size",
              "_180"
            ),
            [sty.freeBox__size__270__lCcW51T0Lh]: hasVariant(
              variants,
              "size",
              "_270"
            ),
            [sty.freeBox__state_success__lCcW5LdydK]: hasVariant(
              variants,
              "state",
              "success"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Content",
            value: args.children,
            className: classNames(sty.slotChildren, {
              [sty.slotChildren__size__180]: hasVariant(
                variants,
                "size",
                "_180"
              ),
              [sty.slotChildren__state_success]: hasVariant(
                variants,
                "state",
                "success"
              )
            })
          })}
        </div>
      </p.Stack>

      {(hasVariant(variants, "description", "description") ? false : true) ? (
        <div
          className={classNames(defaultcss.all, sty.freeBox__a7C6V, {
            [sty.freeBox__description__a7C6VsxZca]: hasVariant(
              variants,
              "description",
              "description"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Description",
            value: args.slot,
            className: classNames(sty.slotSlot, {
              [sty.slotSlot__description]: hasVariant(
                variants,
                "description",
                "description"
              ),
              [sty.slotSlot__size__180]: hasVariant(variants, "size", "_180")
            })
          })}
        </div>
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "textbox"],
  textbox: ["textbox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  textbox: "input";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInputCardNumberField__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicInputCardNumberField__VariantsArgs;
    args?: PlasmicInputCardNumberField__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicInputCardNumberField__Fetches;
  } & Omit<PlasmicInputCardNumberField__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicInputCardNumberField__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicInputCardNumberField__ArgProps,
      internalVariantPropNames: PlasmicInputCardNumberField__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicInputCardNumberField__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInputCardNumberField";
  } else {
    func.displayName = `PlasmicInputCardNumberField.${nodeName}`;
  }
  return func;
}

export const PlasmicInputCardNumberField = Object.assign(
  // Top-level PlasmicInputCardNumberField renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    textbox: makeNodeComponent("textbox"),

    // Metadata about props expected for PlasmicInputCardNumberField
    internalVariantProps: PlasmicInputCardNumberField__VariantProps,
    internalArgProps: PlasmicInputCardNumberField__ArgProps
  }
);

export default PlasmicInputCardNumberField;
/* prettier-ignore-end */
