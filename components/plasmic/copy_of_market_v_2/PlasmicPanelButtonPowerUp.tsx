// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: KyscJUYF2gCNOkx
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicPanelButtonPowerUp.module.css"; // plasmic-import: KyscJUYF2gCNOkx/css

import BoostIcon from "./icons/PlasmicIcon__Boost"; // plasmic-import: zTeN8PzxWbg23t7/icon

export type PlasmicPanelButtonPowerUp__VariantMembers = {};

export type PlasmicPanelButtonPowerUp__VariantsArgs = {};
type VariantPropType = keyof PlasmicPanelButtonPowerUp__VariantsArgs;
export const PlasmicPanelButtonPowerUp__VariantProps =
  new Array<VariantPropType>();

export type PlasmicPanelButtonPowerUp__ArgsType = {
  target?: string;
  trigger?: string;
  destination?: string | PageHref;
};

type ArgPropType = keyof PlasmicPanelButtonPowerUp__ArgsType;
export const PlasmicPanelButtonPowerUp__ArgProps = new Array<ArgPropType>(
  "target",
  "trigger",
  "destination"
);

export type PlasmicPanelButtonPowerUp__OverridesType = {
  root?: p.Flex<"div">;
  powerUp?: p.Flex<"a"> & Partial<LinkProps>;
  sideBarCardLink?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
  freeBox?: p.Flex<"div">;
};

export interface DefaultPanelButtonPowerUpProps {
  target?: string;
  trigger?: string;
  destination?: string | PageHref;
  className?: string;
}

function PlasmicPanelButtonPowerUp__RenderFunc(props: {
  variants: PlasmicPanelButtonPowerUp__VariantsArgs;
  args: PlasmicPanelButtonPowerUp__ArgsType;
  overrides: PlasmicPanelButtonPowerUp__OverridesType;
  dataFetches?: PlasmicPanelButtonPowerUp__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.PlasmicLink
        data-plasmic-name={"powerUp"}
        data-plasmic-override={overrides.powerUp}
        className={classNames(defaultcss.all, sty.powerUp)}
        component={Link}
        href={args.destination}
        platform={"nextjs"}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"sideBarCardLink"}
          data-plasmic-override={overrides.sideBarCardLink}
          hasGap={true}
          className={classNames(defaultcss.all, sty.sideBarCardLink)}
        >
          <BoostIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(defaultcss.all, sty.svg)}
            role={"img"}
          />

          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox
            )}
          >
            {"Power up"}
          </div>
        </p.Stack>
      </p.PlasmicLink>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "powerUp", "sideBarCardLink", "svg", "freeBox"],
  powerUp: ["powerUp", "sideBarCardLink", "svg", "freeBox"],
  sideBarCardLink: ["sideBarCardLink", "svg", "freeBox"],
  svg: ["svg"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  powerUp: "a";
  sideBarCardLink: "div";
  svg: "svg";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPanelButtonPowerUp__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPanelButtonPowerUp__VariantsArgs;
    args?: PlasmicPanelButtonPowerUp__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicPanelButtonPowerUp__Fetches;
  } & Omit<PlasmicPanelButtonPowerUp__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPanelButtonPowerUp__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPanelButtonPowerUp__ArgProps,
      internalVariantPropNames: PlasmicPanelButtonPowerUp__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicPanelButtonPowerUp__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPanelButtonPowerUp";
  } else {
    func.displayName = `PlasmicPanelButtonPowerUp.${nodeName}`;
  }
  return func;
}

export const PlasmicPanelButtonPowerUp = Object.assign(
  // Top-level PlasmicPanelButtonPowerUp renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    powerUp: makeNodeComponent("powerUp"),
    sideBarCardLink: makeNodeComponent("sideBarCardLink"),
    svg: makeNodeComponent("svg"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicPanelButtonPowerUp
    internalVariantProps: PlasmicPanelButtonPowerUp__VariantProps,
    internalArgProps: PlasmicPanelButtonPowerUp__ArgProps
  }
);

export default PlasmicPanelButtonPowerUp;
/* prettier-ignore-end */
