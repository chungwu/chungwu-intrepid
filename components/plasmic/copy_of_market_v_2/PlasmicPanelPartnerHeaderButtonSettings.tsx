// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: Vqc1rsknPOAtRV
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicPanelPartnerHeaderButtonSettings.module.css"; // plasmic-import: Vqc1rsknPOAtRV/css

import ChevronDownBIcon from "./icons/PlasmicIcon__ChevronDownB"; // plasmic-import: _PBzFXwb8iqLULI/icon

export type PlasmicPanelPartnerHeaderButtonSettings__VariantMembers = {};

export type PlasmicPanelPartnerHeaderButtonSettings__VariantsArgs = {};
type VariantPropType =
  keyof PlasmicPanelPartnerHeaderButtonSettings__VariantsArgs;
export const PlasmicPanelPartnerHeaderButtonSettings__VariantProps =
  new Array<VariantPropType>();

export type PlasmicPanelPartnerHeaderButtonSettings__ArgsType = {
  target?: string;
  trigger?: string;
};

type ArgPropType = keyof PlasmicPanelPartnerHeaderButtonSettings__ArgsType;
export const PlasmicPanelPartnerHeaderButtonSettings__ArgProps =
  new Array<ArgPropType>("target", "trigger");

export type PlasmicPanelPartnerHeaderButtonSettings__OverridesType = {
  root?: p.Flex<"div">;
  parent?: p.Flex<"button">;
  usernamePartnerProfileName?: p.Flex<"div">;
  campanyDisplayNameParent?: p.Flex<"div">;
  companyNameText?: p.Flex<"div">;
  partnerDisplayName?: p.Flex<"div">;
  atSgin?: p.Flex<"div">;
  companyNameDisplay?: p.Flex<"div">;
  dropDownUserSettingsTrigger?: p.Flex<"svg">;
};

export interface DefaultPanelPartnerHeaderButtonSettingsProps {
  target?: string;
  trigger?: string;
  className?: string;
}

function PlasmicPanelPartnerHeaderButtonSettings__RenderFunc(props: {
  variants: PlasmicPanelPartnerHeaderButtonSettings__VariantsArgs;
  args: PlasmicPanelPartnerHeaderButtonSettings__ArgsType;
  overrides: PlasmicPanelPartnerHeaderButtonSettings__OverridesType;
  dataFetches?: PlasmicPanelPartnerHeaderButtonSettings__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"button"}
        data-plasmic-name={"parent"}
        data-plasmic-override={overrides.parent}
        hasGap={true}
        className={classNames(defaultcss.button, sty.parent)}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"usernamePartnerProfileName"}
          data-plasmic-override={overrides.usernamePartnerProfileName}
          hasGap={true}
          className={classNames(defaultcss.all, sty.usernamePartnerProfileName)}
        >
          <div
            data-plasmic-name={"campanyDisplayNameParent"}
            data-plasmic-override={overrides.campanyDisplayNameParent}
            className={classNames(defaultcss.all, sty.campanyDisplayNameParent)}
          >
            <div
              data-plasmic-name={"companyNameText"}
              data-plasmic-override={overrides.companyNameText}
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.companyNameText
              )}
            >
              {"CompanyRealName"}
            </div>
          </div>

          <div
            data-plasmic-name={"partnerDisplayName"}
            data-plasmic-override={overrides.partnerDisplayName}
            className={classNames(defaultcss.all, sty.partnerDisplayName)}
          >
            <div
              data-plasmic-name={"atSgin"}
              data-plasmic-override={overrides.atSgin}
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.atSgin
              )}
            >
              {"@"}
            </div>

            <div
              data-plasmic-name={"companyNameDisplay"}
              data-plasmic-override={overrides.companyNameDisplay}
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.companyNameDisplay
              )}
            >
              {"companyDisplayName"}
            </div>
          </div>
        </p.Stack>

        <ChevronDownBIcon
          data-plasmic-name={"dropDownUserSettingsTrigger"}
          data-plasmic-override={overrides.dropDownUserSettingsTrigger}
          className={classNames(
            defaultcss.all,
            sty.dropDownUserSettingsTrigger
          )}
          role={"img"}
        />
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "parent",
    "usernamePartnerProfileName",
    "campanyDisplayNameParent",
    "companyNameText",
    "partnerDisplayName",
    "atSgin",
    "companyNameDisplay",
    "dropDownUserSettingsTrigger"
  ],
  parent: [
    "parent",
    "usernamePartnerProfileName",
    "campanyDisplayNameParent",
    "companyNameText",
    "partnerDisplayName",
    "atSgin",
    "companyNameDisplay",
    "dropDownUserSettingsTrigger"
  ],
  usernamePartnerProfileName: [
    "usernamePartnerProfileName",
    "campanyDisplayNameParent",
    "companyNameText",
    "partnerDisplayName",
    "atSgin",
    "companyNameDisplay"
  ],
  campanyDisplayNameParent: ["campanyDisplayNameParent", "companyNameText"],
  companyNameText: ["companyNameText"],
  partnerDisplayName: ["partnerDisplayName", "atSgin", "companyNameDisplay"],
  atSgin: ["atSgin"],
  companyNameDisplay: ["companyNameDisplay"],
  dropDownUserSettingsTrigger: ["dropDownUserSettingsTrigger"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  parent: "button";
  usernamePartnerProfileName: "div";
  campanyDisplayNameParent: "div";
  companyNameText: "div";
  partnerDisplayName: "div";
  atSgin: "div";
  companyNameDisplay: "div";
  dropDownUserSettingsTrigger: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPanelPartnerHeaderButtonSettings__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPanelPartnerHeaderButtonSettings__VariantsArgs;
    args?: PlasmicPanelPartnerHeaderButtonSettings__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicPanelPartnerHeaderButtonSettings__Fetches;
  } & Omit< // Specify variants directly as props
    PlasmicPanelPartnerHeaderButtonSettings__VariantsArgs,
    ReservedPropsType
  > &
    // Specify args directly as props
    Omit<PlasmicPanelPartnerHeaderButtonSettings__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPanelPartnerHeaderButtonSettings__ArgProps,
      internalVariantPropNames:
        PlasmicPanelPartnerHeaderButtonSettings__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicPanelPartnerHeaderButtonSettings__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPanelPartnerHeaderButtonSettings";
  } else {
    func.displayName = `PlasmicPanelPartnerHeaderButtonSettings.${nodeName}`;
  }
  return func;
}

export const PlasmicPanelPartnerHeaderButtonSettings = Object.assign(
  // Top-level PlasmicPanelPartnerHeaderButtonSettings renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    parent: makeNodeComponent("parent"),
    usernamePartnerProfileName: makeNodeComponent("usernamePartnerProfileName"),
    campanyDisplayNameParent: makeNodeComponent("campanyDisplayNameParent"),
    companyNameText: makeNodeComponent("companyNameText"),
    partnerDisplayName: makeNodeComponent("partnerDisplayName"),
    atSgin: makeNodeComponent("atSgin"),
    companyNameDisplay: makeNodeComponent("companyNameDisplay"),
    dropDownUserSettingsTrigger: makeNodeComponent(
      "dropDownUserSettingsTrigger"
    ),

    // Metadata about props expected for PlasmicPanelPartnerHeaderButtonSettings
    internalVariantProps: PlasmicPanelPartnerHeaderButtonSettings__VariantProps,
    internalArgProps: PlasmicPanelPartnerHeaderButtonSettings__ArgProps
  }
);

export default PlasmicPanelPartnerHeaderButtonSettings;
/* prettier-ignore-end */
