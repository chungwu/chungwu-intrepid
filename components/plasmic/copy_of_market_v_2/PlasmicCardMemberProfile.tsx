// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: jpV_L_H1W1NSm5
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import UserAvatarButton from "../../UserAvatarButton"; // plasmic-import: S6be1w_HeX7JCB/component
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: gpNjXfbD_ZdpPU/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: biX3aS42hiG0fF/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicCardMemberProfile.module.css"; // plasmic-import: jpV_L_H1W1NSm5/css

import PlusBoldIcon from "./icons/PlasmicIcon__PlusBold"; // plasmic-import: lhSEEajPJGZatfD/icon

export type PlasmicCardMemberProfile__VariantMembers = {
  session: "session";
};

export type PlasmicCardMemberProfile__VariantsArgs = {
  session?: SingleBooleanChoiceArg<"session">;
};

type VariantPropType = keyof PlasmicCardMemberProfile__VariantsArgs;
export const PlasmicCardMemberProfile__VariantProps =
  new Array<VariantPropType>("session");

export type PlasmicCardMemberProfile__ArgsType = {};
type ArgPropType = keyof PlasmicCardMemberProfile__ArgsType;
export const PlasmicCardMemberProfile__ArgProps = new Array<ArgPropType>();

export type PlasmicCardMemberProfile__OverridesType = {
  parent?: p.Flex<"div">;
  userProfileAvatar?: p.Flex<typeof UserAvatarButton>;
  img?: p.Flex<"img">;
  userProfileUsernameFirstName2?: p.Flex<"div">;
  userProfileUsernameLastName2?: p.Flex<"div">;
  userProfileUsernameLastName?: p.Flex<"div">;
  buttonPrimary?: p.Flex<typeof ButtonPrimary>;
  userProfileTimestamp?: p.Flex<"div">;
};

export interface DefaultCardMemberProfileProps {
  session?: SingleBooleanChoiceArg<"session">;
  className?: string;
}

function PlasmicCardMemberProfile__RenderFunc(props: {
  variants: PlasmicCardMemberProfile__VariantsArgs;
  args: PlasmicCardMemberProfile__ArgsType;
  overrides: PlasmicCardMemberProfile__OverridesType;
  dataFetches?: PlasmicCardMemberProfile__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"parent"}
      data-plasmic-override={overrides.parent}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.parent, {
        [sty.parent__session]: hasVariant(variants, "session", "session")
      })}
    >
      <UserAvatarButton
        data-plasmic-name={"userProfileAvatar"}
        data-plasmic-override={overrides.userProfileAvatar}
        avatarImage={
          <img
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(defaultcss.img, sty.img)}
            role={"img"}
            src={"/plasmic/copy_of_market_v_2/images/image4.png"}
          />
        }
        className={classNames("__wab_instance", sty.userProfileAvatar)}
      />

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.freeBox___0VeH)}
      >
        <div
          data-plasmic-name={"userProfileUsernameFirstName2"}
          data-plasmic-override={overrides.userProfileUsernameFirstName2}
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.userProfileUsernameFirstName2
          )}
        >
          {"Collin"}
        </div>

        <div
          data-plasmic-name={"userProfileUsernameLastName2"}
          data-plasmic-override={overrides.userProfileUsernameLastName2}
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.userProfileUsernameLastName2
          )}
        >
          {"Thompson"}
        </div>
      </p.Stack>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.freeBox__g4Nov)}
      >
        <div
          data-plasmic-name={"userProfileUsernameLastName"}
          data-plasmic-override={overrides.userProfileUsernameLastName}
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.userProfileUsernameLastName
          )}
        >
          {"@techronin"}
        </div>
      </p.Stack>

      <ButtonPrimary
        data-plasmic-name={"buttonPrimary"}
        data-plasmic-override={overrides.buttonPrimary}
        className={classNames("__wab_instance", sty.buttonPrimary, {
          [sty.buttonPrimary__session]: hasVariant(
            variants,
            "session",
            "session"
          )
        })}
        color={"brand" as const}
        size={"_140" as const}
      >
        {hasVariant(variants, "session", "session") ? "Edit" : "Follow"}
      </ButtonPrimary>

      <div className={classNames(defaultcss.all, sty.freeBox__kglu3)} />

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.freeBox__oGSzN)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.freeBox__q2SQi)}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox__pyCsy
            )}
          >
            {"123"}
          </div>

          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox__oHox
            )}
          >
            {"Members"}
          </div>
        </p.Stack>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.freeBox__bpq3Q)}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox___0ElVu
            )}
          >
            {"123"}
          </div>

          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox__m0Pn
            )}
          >
            {"Partners"}
          </div>
        </p.Stack>
      </p.Stack>

      <div className={classNames(defaultcss.all, sty.freeBox__mnLNt)} />

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.freeBox__iQNvF)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.freeBox__vzYry)}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox__b0PnD
            )}
          >
            {"123"}
          </div>

          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox__tjnEj
            )}
          >
            {"Followers"}
          </div>
        </p.Stack>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.freeBox__kkbom)}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox__sitWb
            )}
          >
            {"123"}
          </div>

          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox__oz9QN
            )}
          >
            {"Following"}
          </div>
        </p.Stack>
      </p.Stack>

      <div className={classNames(defaultcss.all, sty.freeBox__clhuo)} />

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.freeBox__npFws)}
      >
        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.freeBox__bfOeS
          )}
        >
          {"Member since"}
        </div>

        <div
          data-plasmic-name={"userProfileTimestamp"}
          data-plasmic-override={overrides.userProfileTimestamp}
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.userProfileTimestamp
          )}
        >
          {"January 2021"}
        </div>
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  parent: [
    "parent",
    "userProfileAvatar",
    "img",
    "userProfileUsernameFirstName2",
    "userProfileUsernameLastName2",
    "userProfileUsernameLastName",
    "buttonPrimary",
    "userProfileTimestamp"
  ],
  userProfileAvatar: ["userProfileAvatar", "img"],
  img: ["img"],
  userProfileUsernameFirstName2: ["userProfileUsernameFirstName2"],
  userProfileUsernameLastName2: ["userProfileUsernameLastName2"],
  userProfileUsernameLastName: ["userProfileUsernameLastName"],
  buttonPrimary: ["buttonPrimary"],
  userProfileTimestamp: ["userProfileTimestamp"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  parent: "div";
  userProfileAvatar: typeof UserAvatarButton;
  img: "img";
  userProfileUsernameFirstName2: "div";
  userProfileUsernameLastName2: "div";
  userProfileUsernameLastName: "div";
  buttonPrimary: typeof ButtonPrimary;
  userProfileTimestamp: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCardMemberProfile__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCardMemberProfile__VariantsArgs;
    args?: PlasmicCardMemberProfile__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicCardMemberProfile__Fetches;
  } & Omit<PlasmicCardMemberProfile__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCardMemberProfile__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCardMemberProfile__ArgProps,
      internalVariantPropNames: PlasmicCardMemberProfile__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicCardMemberProfile__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "parent") {
    func.displayName = "PlasmicCardMemberProfile";
  } else {
    func.displayName = `PlasmicCardMemberProfile.${nodeName}`;
  }
  return func;
}

export const PlasmicCardMemberProfile = Object.assign(
  // Top-level PlasmicCardMemberProfile renders the root element
  makeNodeComponent("parent"),
  {
    // Helper components rendering sub-elements
    userProfileAvatar: makeNodeComponent("userProfileAvatar"),
    img: makeNodeComponent("img"),
    userProfileUsernameFirstName2: makeNodeComponent(
      "userProfileUsernameFirstName2"
    ),
    userProfileUsernameLastName2: makeNodeComponent(
      "userProfileUsernameLastName2"
    ),
    userProfileUsernameLastName: makeNodeComponent(
      "userProfileUsernameLastName"
    ),
    buttonPrimary: makeNodeComponent("buttonPrimary"),
    userProfileTimestamp: makeNodeComponent("userProfileTimestamp"),

    // Metadata about props expected for PlasmicCardMemberProfile
    internalVariantProps: PlasmicCardMemberProfile__VariantProps,
    internalArgProps: PlasmicCardMemberProfile__ArgProps
  }
);

export default PlasmicCardMemberProfile;
/* prettier-ignore-end */
