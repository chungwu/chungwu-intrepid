// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: SC-07wTZAqk8QnI
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicInputTextPrefixSuffix.module.css"; // plasmic-import: SC-07wTZAqk8QnI/css

export type PlasmicInputTextPrefixSuffix__VariantMembers = {
  type: "primary" | "secondary";
  width: "_120" | "_160" | "_180" | "_270" | "_360" | "_540" | "_720";
  height: "_32" | "_36" | "_40" | "_48";
  prefix: "prefix";
  suffix: "suffix";
};

export type PlasmicInputTextPrefixSuffix__VariantsArgs = {
  type?: SingleChoiceArg<"primary" | "secondary">;
  width?: SingleChoiceArg<
    "_120" | "_160" | "_180" | "_270" | "_360" | "_540" | "_720"
  >;
  height?: SingleChoiceArg<"_32" | "_36" | "_40" | "_48">;
  prefix?: SingleBooleanChoiceArg<"prefix">;
  suffix?: SingleBooleanChoiceArg<"suffix">;
};

type VariantPropType = keyof PlasmicInputTextPrefixSuffix__VariantsArgs;
export const PlasmicInputTextPrefixSuffix__VariantProps =
  new Array<VariantPropType>("type", "width", "height", "prefix", "suffix");

export type PlasmicInputTextPrefixSuffix__ArgsType = {
  prefixLabelHeadline?: React.ReactNode;
  suffixLabelHeadline?: React.ReactNode;
};

type ArgPropType = keyof PlasmicInputTextPrefixSuffix__ArgsType;
export const PlasmicInputTextPrefixSuffix__ArgProps = new Array<ArgPropType>(
  "prefixLabelHeadline",
  "suffixLabelHeadline"
);

export type PlasmicInputTextPrefixSuffix__OverridesType = {
  root?: p.Flex<"div">;
  parent?: p.Flex<"div">;
  prefixparent?: p.Flex<"div">;
  value?: p.Flex<"input">;
  suffixParent?: p.Flex<"div">;
};

export interface DefaultInputTextPrefixSuffixProps {
  prefixLabelHeadline?: React.ReactNode;
  suffixLabelHeadline?: React.ReactNode;
  type?: SingleChoiceArg<"primary" | "secondary">;
  width?: SingleChoiceArg<
    "_120" | "_160" | "_180" | "_270" | "_360" | "_540" | "_720"
  >;
  height?: SingleChoiceArg<"_32" | "_36" | "_40" | "_48">;
  prefix?: SingleBooleanChoiceArg<"prefix">;
  suffix?: SingleBooleanChoiceArg<"suffix">;
  className?: string;
}

function PlasmicInputTextPrefixSuffix__RenderFunc(props: {
  variants: PlasmicInputTextPrefixSuffix__VariantsArgs;
  args: PlasmicInputTextPrefixSuffix__ArgsType;
  overrides: PlasmicInputTextPrefixSuffix__OverridesType;
  dataFetches?: PlasmicInputTextPrefixSuffix__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div
        data-plasmic-name={"parent"}
        data-plasmic-override={overrides.parent}
        className={classNames(defaultcss.all, sty.parent, {
          [sty.parent__height__32]: hasVariant(variants, "height", "_32"),
          [sty.parent__height__36]: hasVariant(variants, "height", "_36"),
          [sty.parent__height__40]: hasVariant(variants, "height", "_40"),
          [sty.parent__height__48]: hasVariant(variants, "height", "_48"),
          [sty.parent__type_secondary]: hasVariant(
            variants,
            "type",
            "secondary"
          ),
          [sty.parent__width__120]: hasVariant(variants, "width", "_120"),
          [sty.parent__width__160]: hasVariant(variants, "width", "_160"),
          [sty.parent__width__180]: hasVariant(variants, "width", "_180"),
          [sty.parent__width__270]: hasVariant(variants, "width", "_270"),
          [sty.parent__width__360]: hasVariant(variants, "width", "_360"),
          [sty.parent__width__540]: hasVariant(variants, "width", "_540"),
          [sty.parent__width__720]: hasVariant(variants, "width", "_720")
        })}
      >
        <div
          data-plasmic-name={"prefixparent"}
          data-plasmic-override={overrides.prefixparent}
          className={classNames(defaultcss.all, sty.prefixparent, {
            [sty.prefixparent__prefix]: hasVariant(
              variants,
              "prefix",
              "prefix"
            ),
            [sty.prefixparent__suffix]: hasVariant(
              variants,
              "suffix",
              "suffix"
            ),
            [sty.prefixparent__suffix_prefix]:
              hasVariant(variants, "suffix", "suffix") &&
              hasVariant(variants, "prefix", "prefix"),
            [sty.prefixparent__type_secondary]: hasVariant(
              variants,
              "type",
              "secondary"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Text",
            value: args.prefixLabelHeadline,
            className: classNames(sty.slotPrefixLabelHeadline, {
              [sty.slotPrefixLabelHeadline__type_secondary]: hasVariant(
                variants,
                "type",
                "secondary"
              )
            })
          })}
        </div>

        <input
          data-plasmic-name={"value"}
          data-plasmic-override={overrides.value}
          className={classNames(defaultcss.input, sty.value)}
          placeholder={"" as const}
          size={1 as const}
          type={"text" as const}
          value={"" as const}
        />

        <div
          data-plasmic-name={"suffixParent"}
          data-plasmic-override={overrides.suffixParent}
          className={classNames(defaultcss.all, sty.suffixParent, {
            [sty.suffixParent__suffix]: hasVariant(
              variants,
              "suffix",
              "suffix"
            ),
            [sty.suffixParent__type_secondary]: hasVariant(
              variants,
              "type",
              "secondary"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Text",
            value: args.suffixLabelHeadline,
            className: classNames(sty.slotSuffixLabelHeadline, {
              [sty.slotSuffixLabelHeadline__type_secondary]: hasVariant(
                variants,
                "type",
                "secondary"
              )
            })
          })}
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "parent", "prefixparent", "value", "suffixParent"],
  parent: ["parent", "prefixparent", "value", "suffixParent"],
  prefixparent: ["prefixparent"],
  value: ["value"],
  suffixParent: ["suffixParent"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  parent: "div";
  prefixparent: "div";
  value: "input";
  suffixParent: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInputTextPrefixSuffix__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicInputTextPrefixSuffix__VariantsArgs;
    args?: PlasmicInputTextPrefixSuffix__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicInputTextPrefixSuffix__Fetches;
  } & Omit<PlasmicInputTextPrefixSuffix__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicInputTextPrefixSuffix__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicInputTextPrefixSuffix__ArgProps,
      internalVariantPropNames: PlasmicInputTextPrefixSuffix__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicInputTextPrefixSuffix__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInputTextPrefixSuffix";
  } else {
    func.displayName = `PlasmicInputTextPrefixSuffix.${nodeName}`;
  }
  return func;
}

export const PlasmicInputTextPrefixSuffix = Object.assign(
  // Top-level PlasmicInputTextPrefixSuffix renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    parent: makeNodeComponent("parent"),
    prefixparent: makeNodeComponent("prefixparent"),
    value: makeNodeComponent("value"),
    suffixParent: makeNodeComponent("suffixParent"),

    // Metadata about props expected for PlasmicInputTextPrefixSuffix
    internalVariantProps: PlasmicInputTextPrefixSuffix__VariantProps,
    internalArgProps: PlasmicInputTextPrefixSuffix__ArgProps
  }
);

export default PlasmicInputTextPrefixSuffix;
/* prettier-ignore-end */
