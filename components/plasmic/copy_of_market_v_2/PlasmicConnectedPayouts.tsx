// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: fCuHk7eXFW4NQm
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import InputFormCardWebhookConnections from "../../InputFormCardWebhookConnections"; // plasmic-import: xhtqzOQbigz-bm/component
import CardConnectedAccount from "../../CardConnectedAccount"; // plasmic-import: 40diCBROeAR9vl/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicConnectedPayouts.module.css"; // plasmic-import: fCuHk7eXFW4NQm/css

export type PlasmicConnectedPayouts__VariantMembers = {
  closed: "closed";
  visible: "stripe" | "paypal";
};

export type PlasmicConnectedPayouts__VariantsArgs = {
  closed?: SingleBooleanChoiceArg<"closed">;
  visible?: SingleChoiceArg<"stripe" | "paypal">;
};

type VariantPropType = keyof PlasmicConnectedPayouts__VariantsArgs;
export const PlasmicConnectedPayouts__VariantProps = new Array<VariantPropType>(
  "closed",
  "visible"
);

export type PlasmicConnectedPayouts__ArgsType = {};
type ArgPropType = keyof PlasmicConnectedPayouts__ArgsType;
export const PlasmicConnectedPayouts__ArgProps = new Array<ArgPropType>();

export type PlasmicConnectedPayouts__OverridesType = {
  root?: p.Flex<"div">;
  connectedPayoutAccount?: p.Flex<typeof InputFormCardWebhookConnections>;
  connectedStripe?: p.Flex<typeof CardConnectedAccount>;
  connectedPaypal?: p.Flex<typeof CardConnectedAccount>;
};

export interface DefaultConnectedPayoutsProps {
  closed?: SingleBooleanChoiceArg<"closed">;
  visible?: SingleChoiceArg<"stripe" | "paypal">;
  className?: string;
}

function PlasmicConnectedPayouts__RenderFunc(props: {
  variants: PlasmicConnectedPayouts__VariantsArgs;
  args: PlasmicConnectedPayouts__ArgsType;
  overrides: PlasmicConnectedPayouts__OverridesType;
  dataFetches?: PlasmicConnectedPayouts__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__closed]: hasVariant(variants, "closed", "closed"),
        [sty.root__visible_paypal]: hasVariant(variants, "visible", "paypal"),
        [sty.root__visible_stripe]: hasVariant(variants, "visible", "stripe")
      })}
    >
      <InputFormCardWebhookConnections
        data-plasmic-name={"connectedPayoutAccount"}
        data-plasmic-override={overrides.connectedPayoutAccount}
        className={classNames("__wab_instance", sty.connectedPayoutAccount, {
          [sty.connectedPayoutAccount__visible_paypal]: hasVariant(
            variants,
            "visible",
            "paypal"
          ),
          [sty.connectedPayoutAccount__visible_stripe]: hasVariant(
            variants,
            "visible",
            "stripe"
          )
        })}
        payment={"payment" as const}
        slot={"Connect your payment accounts to receive payouts from Intrepid."}
      >
        {"Payout Connections"}
      </InputFormCardWebhookConnections>

      {(
        hasVariant(variants, "visible", "paypal")
          ? false
          : hasVariant(variants, "closed", "closed")
          ? false
          : true
      ) ? (
        <CardConnectedAccount
          data-plasmic-name={"connectedStripe"}
          data-plasmic-override={overrides.connectedStripe}
          className={classNames("__wab_instance", sty.connectedStripe, {
            [sty.connectedStripe__closed]: hasVariant(
              variants,
              "closed",
              "closed"
            ),
            [sty.connectedStripe__visible_paypal]: hasVariant(
              variants,
              "visible",
              "paypal"
            ),
            [sty.connectedStripe__visible_stripe]: hasVariant(
              variants,
              "visible",
              "stripe"
            )
          })}
          team={"team" as const}
          userFirstname={
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox___3IEo
              )}
            >
              {"companyName"}
            </div>
          }
          userLastName={
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox__jFjpI
              )}
            >
              {"userLastName"}
            </div>
          }
        />
      ) : null}
      {(
        hasVariant(variants, "visible", "stripe")
          ? false
          : hasVariant(variants, "closed", "closed")
          ? false
          : true
      ) ? (
        <CardConnectedAccount
          data-plasmic-name={"connectedPaypal"}
          data-plasmic-override={overrides.connectedPaypal}
          className={classNames("__wab_instance", sty.connectedPaypal, {
            [sty.connectedPaypal__closed]: hasVariant(
              variants,
              "closed",
              "closed"
            ),
            [sty.connectedPaypal__visible_paypal]: hasVariant(
              variants,
              "visible",
              "paypal"
            ),
            [sty.connectedPaypal__visible_stripe]: hasVariant(
              variants,
              "visible",
              "stripe"
            )
          })}
          team={"team" as const}
          userFirstname={
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox__zjbkk
              )}
            >
              {"companyName"}
            </div>
          }
          userLastName={
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox__bax4C
              )}
            >
              {"userLastName"}
            </div>
          }
        />
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "connectedPayoutAccount",
    "connectedStripe",
    "connectedPaypal"
  ],
  connectedPayoutAccount: ["connectedPayoutAccount"],
  connectedStripe: ["connectedStripe"],
  connectedPaypal: ["connectedPaypal"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  connectedPayoutAccount: typeof InputFormCardWebhookConnections;
  connectedStripe: typeof CardConnectedAccount;
  connectedPaypal: typeof CardConnectedAccount;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicConnectedPayouts__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicConnectedPayouts__VariantsArgs;
    args?: PlasmicConnectedPayouts__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicConnectedPayouts__Fetches;
  } & Omit<PlasmicConnectedPayouts__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicConnectedPayouts__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicConnectedPayouts__ArgProps,
      internalVariantPropNames: PlasmicConnectedPayouts__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicConnectedPayouts__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicConnectedPayouts";
  } else {
    func.displayName = `PlasmicConnectedPayouts.${nodeName}`;
  }
  return func;
}

export const PlasmicConnectedPayouts = Object.assign(
  // Top-level PlasmicConnectedPayouts renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    connectedPayoutAccount: makeNodeComponent("connectedPayoutAccount"),
    connectedStripe: makeNodeComponent("connectedStripe"),
    connectedPaypal: makeNodeComponent("connectedPaypal"),

    // Metadata about props expected for PlasmicConnectedPayouts
    internalVariantProps: PlasmicConnectedPayouts__VariantProps,
    internalArgProps: PlasmicConnectedPayouts__ArgProps
  }
);

export default PlasmicConnectedPayouts;
/* prettier-ignore-end */
