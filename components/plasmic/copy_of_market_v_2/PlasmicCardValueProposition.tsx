// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: ZaTlEbsFiBx7C8
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicCardValueProposition.module.css"; // plasmic-import: ZaTlEbsFiBx7C8/css

import Icon114Icon from "./icons/PlasmicIcon__Icon114"; // plasmic-import: VfXaOZlZvq_xDZf/icon

export type PlasmicCardValueProposition__VariantMembers = {
  background: "bgLightB";
  size: "_160" | "_270";
};

export type PlasmicCardValueProposition__VariantsArgs = {
  background?: SingleChoiceArg<"bgLightB">;
  size?: SingleChoiceArg<"_160" | "_270">;
};

type VariantPropType = keyof PlasmicCardValueProposition__VariantsArgs;
export const PlasmicCardValueProposition__VariantProps =
  new Array<VariantPropType>("background", "size");

export type PlasmicCardValueProposition__ArgsType = {
  svg?: React.ReactNode;
  headline?: React.ReactNode;
  textBody?: React.ReactNode;
};

type ArgPropType = keyof PlasmicCardValueProposition__ArgsType;
export const PlasmicCardValueProposition__ArgProps = new Array<ArgPropType>(
  "svg",
  "headline",
  "textBody"
);

export type PlasmicCardValueProposition__OverridesType = {
  root?: p.Flex<"div">;
  svgParentBg?: p.Flex<"div">;
  parent?: p.Flex<"div">;
  headlineTextParent?: p.Flex<"div">;
  textBodyParent?: p.Flex<"div">;
};

export interface DefaultCardValuePropositionProps {
  svg?: React.ReactNode;
  headline?: React.ReactNode;
  textBody?: React.ReactNode;
  background?: SingleChoiceArg<"bgLightB">;
  size?: SingleChoiceArg<"_160" | "_270">;
  className?: string;
}

function PlasmicCardValueProposition__RenderFunc(props: {
  variants: PlasmicCardValueProposition__VariantsArgs;
  args: PlasmicCardValueProposition__ArgsType;
  overrides: PlasmicCardValueProposition__OverridesType;
  dataFetches?: PlasmicCardValueProposition__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__background_bgLightB]: hasVariant(
          variants,
          "background",
          "bgLightB"
        ),
        [sty.root__size__160]: hasVariant(variants, "size", "_160"),
        [sty.root__size__270]: hasVariant(variants, "size", "_270")
      })}
    >
      <div
        data-plasmic-name={"svgParentBg"}
        data-plasmic-override={overrides.svgParentBg}
        className={classNames(defaultcss.all, sty.svgParentBg, {
          [sty.svgParentBg__size__160]: hasVariant(variants, "size", "_160"),
          [sty.svgParentBg__size__270]: hasVariant(variants, "size", "_270")
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <Icon114Icon
              className={classNames(defaultcss.all, sty.svg__wllZe)}
              role={"img"}
            />
          ),

          value: args.svg
        })}
      </div>

      <p.Stack
        as={"div"}
        data-plasmic-name={"parent"}
        data-plasmic-override={overrides.parent}
        hasGap={true}
        className={classNames(defaultcss.all, sty.parent)}
      >
        <div
          data-plasmic-name={"headlineTextParent"}
          data-plasmic-override={overrides.headlineTextParent}
          className={classNames(defaultcss.all, sty.headlineTextParent, {
            [sty.headlineTextParent__size__160]: hasVariant(
              variants,
              "size",
              "_160"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Headline value proposition",
            value: args.headline,
            className: classNames(sty.slotHeadline, {
              [sty.slotHeadline__size__160]: hasVariant(
                variants,
                "size",
                "_160"
              ),
              [sty.slotHeadline__size__270]: hasVariant(
                variants,
                "size",
                "_270"
              )
            })
          })}
        </div>

        <div
          data-plasmic-name={"textBodyParent"}
          data-plasmic-override={overrides.textBodyParent}
          className={classNames(defaultcss.all, sty.textBodyParent, {
            [sty.textBodyParent__size__160]: hasVariant(
              variants,
              "size",
              "_160"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents:
              "Description of the key value that we provide. it should only a few line",
            value: args.textBody,
            className: classNames(sty.slotTextBody, {
              [sty.slotTextBody__size__160]: hasVariant(
                variants,
                "size",
                "_160"
              ),
              [sty.slotTextBody__size__270]: hasVariant(
                variants,
                "size",
                "_270"
              )
            })
          })}
        </div>
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "svgParentBg",
    "parent",
    "headlineTextParent",
    "textBodyParent"
  ],
  svgParentBg: ["svgParentBg"],
  parent: ["parent", "headlineTextParent", "textBodyParent"],
  headlineTextParent: ["headlineTextParent"],
  textBodyParent: ["textBodyParent"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  svgParentBg: "div";
  parent: "div";
  headlineTextParent: "div";
  textBodyParent: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCardValueProposition__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCardValueProposition__VariantsArgs;
    args?: PlasmicCardValueProposition__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicCardValueProposition__Fetches;
  } & Omit<PlasmicCardValueProposition__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCardValueProposition__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCardValueProposition__ArgProps,
      internalVariantPropNames: PlasmicCardValueProposition__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicCardValueProposition__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCardValueProposition";
  } else {
    func.displayName = `PlasmicCardValueProposition.${nodeName}`;
  }
  return func;
}

export const PlasmicCardValueProposition = Object.assign(
  // Top-level PlasmicCardValueProposition renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svgParentBg: makeNodeComponent("svgParentBg"),
    parent: makeNodeComponent("parent"),
    headlineTextParent: makeNodeComponent("headlineTextParent"),
    textBodyParent: makeNodeComponent("textBodyParent"),

    // Metadata about props expected for PlasmicCardValueProposition
    internalVariantProps: PlasmicCardValueProposition__VariantProps,
    internalArgProps: PlasmicCardValueProposition__ArgProps
  }
);

export default PlasmicCardValueProposition;
/* prettier-ignore-end */
