// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: Eq1jGMGwndREK9
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavbarServiceListing from "../../NavbarServiceListing"; // plasmic-import: CjIIrelyshy5Wa/component
import ProgressBar from "../../ProgressBar"; // plasmic-import: L1r4sBRgwURapY/component
import CardQuestionServiceListing from "../../CardQuestionServiceListing"; // plasmic-import: 6ULzHucCr0IVSB/component
import ToolTipServiceListing from "../../ToolTipServiceListing"; // plasmic-import: EWZKmdZCm54hbu/component
import ButtonFormDropdownSelect from "../../ButtonFormDropdownSelect"; // plasmic-import: 3Qqc2KbBe45URw/component
import RadioCheckboxCard from "../../RadioCheckboxCard"; // plasmic-import: av9HZ4_jQpoVJO/component
import SearchBadge from "../../SearchBadge"; // plasmic-import: NX4Ld8qtgVFY99/component
import ChipBadgeDisplay from "../../ChipBadgeDisplay"; // plasmic-import: SSFk1BeJq0HW6X/component
import FooterServiceListing from "../../FooterServiceListing"; // plasmic-import: KdJma6zoTnjpLW/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicServicelistingdelivery.module.css"; // plasmic-import: Eq1jGMGwndREK9/css

import Icon100Icon from "./icons/PlasmicIcon__Icon100"; // plasmic-import: AOrmKBCHzOZuEYY/icon
import Icon96Icon from "./icons/PlasmicIcon__Icon96"; // plasmic-import: bC6DTgVYN3bioSf/icon
import PlusBoldIcon from "./icons/PlasmicIcon__PlusBold"; // plasmic-import: lhSEEajPJGZatfD/icon
import Icon170Icon from "./icons/PlasmicIcon__Icon170"; // plasmic-import: 8dZnFQrWLcwMPnF/icon
import Icon114Icon from "./icons/PlasmicIcon__Icon114"; // plasmic-import: VfXaOZlZvq_xDZf/icon

export type PlasmicServicelistingdelivery__VariantMembers = {};

export type PlasmicServicelistingdelivery__VariantsArgs = {};
type VariantPropType = keyof PlasmicServicelistingdelivery__VariantsArgs;
export const PlasmicServicelistingdelivery__VariantProps =
  new Array<VariantPropType>();

export type PlasmicServicelistingdelivery__ArgsType = {};
type ArgPropType = keyof PlasmicServicelistingdelivery__ArgsType;
export const PlasmicServicelistingdelivery__ArgProps = new Array<ArgPropType>();

export type PlasmicServicelistingdelivery__OverridesType = {
  root?: p.Flex<"form">;
  serviceListingNavbar?: p.Flex<"div">;
  navbarServiceListing?: p.Flex<typeof NavbarServiceListing>;
  progressBar?: p.Flex<typeof ProgressBar>;
  questionTimeBlock?: p.Flex<"div">;
  textbox?: p.Flex<"input">;
  questionMeetingBlock?: p.Flex<"div">;
  questionRevisionBlock?: p.Flex<"div">;
  questionRequirementBlock?: p.Flex<"div">;
  questionFormatBlock?: p.Flex<"div">;
  searchBadge?: p.Flex<typeof SearchBadge>;
  chipBadgeDisplay?: p.Flex<typeof ChipBadgeDisplay>;
  footerServiceListing?: p.Flex<typeof FooterServiceListing>;
};

export interface DefaultServicelistingdeliveryProps {
  dataFetches: PlasmicServicelistingdelivery__Fetches;
}

function PlasmicServicelistingdelivery__RenderFunc(props: {
  variants: PlasmicServicelistingdelivery__VariantsArgs;
  args: PlasmicServicelistingdelivery__ArgsType;
  overrides: PlasmicServicelistingdelivery__OverridesType;
  dataFetches?: PlasmicServicelistingdelivery__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <React.Fragment>
      <Head>
        <title key="title">{""}</title>
        <meta key="og:title" property="og:title" content={""} />
        <meta
          key="description"
          name="description"
          property="og:description"
          content={""}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <form
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"serviceListingNavbar"}
            data-plasmic-override={overrides.serviceListingNavbar}
            className={classNames(defaultcss.all, sty.serviceListingNavbar)}
          >
            <NavbarServiceListing
              data-plasmic-name={"navbarServiceListing"}
              data-plasmic-override={overrides.navbarServiceListing}
              className={classNames("__wab_instance", sty.navbarServiceListing)}
            >
              {"Delivery"}
            </NavbarServiceListing>

            <ProgressBar
              data-plasmic-name={"progressBar"}
              data-plasmic-override={overrides.progressBar}
              className={classNames("__wab_instance", sty.progressBar)}
              progress={"_60" as const}
            />
          </div>

          <p.Stack
            as={"div"}
            data-plasmic-name={"questionTimeBlock"}
            data-plasmic-override={overrides.questionTimeBlock}
            hasGap={true}
            className={classNames(defaultcss.all, sty.questionTimeBlock)}
          >
            <CardQuestionServiceListing
              className={classNames(
                "__wab_instance",
                sty.cardQuestionServiceListing___872Fe
              )}
              slot={
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__szQJw
                  )}
                >
                  {"Step 4"}
                </div>
              }
              slot2={"Enter a number, in days, between 1 and 90."}
            >
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.freeBox__u9Xul
                )}
              >
                {"How much time is required to deliver your service?"}
              </div>
            </CardQuestionServiceListing>

            <input
              data-plasmic-name={"textbox"}
              data-plasmic-override={overrides.textbox}
              className={classNames(defaultcss.input, sty.textbox)}
              placeholder={"Enter a number" as const}
              size={1 as const}
              type={"text" as const}
              value={"" as const}
            />
          </p.Stack>

          <ToolTipServiceListing
            className={classNames(
              "__wab_instance",
              sty.toolTipServiceListing__mpdUr
            )}
            slot={"Delivery term or timeline"}
          >
            {
              "Selecting accurate categories helps Members know what to expect when it comes to format, features, outcomes, and level of service they'll receive when creating digital products with you, or your team."
            }
          </ToolTipServiceListing>

          <p.Stack
            as={"div"}
            data-plasmic-name={"questionMeetingBlock"}
            data-plasmic-override={overrides.questionMeetingBlock}
            hasGap={true}
            className={classNames(defaultcss.all, sty.questionMeetingBlock)}
          >
            <CardQuestionServiceListing
              className={classNames(
                "__wab_instance",
                sty.cardQuestionServiceListing__v3Wkp
              )}
              overline={"overline" as const}
              slot={
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__ytCYw
                  )}
                >
                  {"Step 2"}
                </div>
              }
              slot2={"1 to 10 meetings per project, or chose unlimited"}
            >
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.freeBox__roQ0G
                )}
              >
                {"How many meetings will you offer your client?"}
              </div>
            </CardQuestionServiceListing>

            <ButtonFormDropdownSelect
              className={classNames(
                "__wab_instance",
                sty.buttonFormDropdownSelect___9LfM0
              )}
              description={"description" as const}
              dropdownTitle={"Select"}
              headlineLabelTitle={"Now, let's be specific"}
              label={"label" as const}
              size={"_360X40" as const}
            />
          </p.Stack>

          <ToolTipServiceListing
            className={classNames(
              "__wab_instance",
              sty.toolTipServiceListing__frJIx
            )}
            slot={"Meetings & communication"}
          >
            {
              "Selecting accurate categories helps Members know what to expect when it comes to format, features, outcomes, and level of service they'll receive when creating digital products with you, or your team."
            }
          </ToolTipServiceListing>

          <p.Stack
            as={"div"}
            data-plasmic-name={"questionRevisionBlock"}
            data-plasmic-override={overrides.questionRevisionBlock}
            hasGap={true}
            className={classNames(defaultcss.all, sty.questionRevisionBlock)}
          >
            <CardQuestionServiceListing
              className={classNames(
                "__wab_instance",
                sty.cardQuestionServiceListing__rRmBp
              )}
              overline={"overline" as const}
              slot={
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__cc5LW
                  )}
                >
                  {"Step 2"}
                </div>
              }
              slot2={"1 to 10 revisions per project, or chose unlimited"}
            >
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.freeBox__rAzNd
                )}
              >
                {"How many revisions will you offer your client?"}
              </div>
            </CardQuestionServiceListing>

            <ButtonFormDropdownSelect
              className={classNames(
                "__wab_instance",
                sty.buttonFormDropdownSelect__elpi8
              )}
              description={"description" as const}
              dropdownTitle={"Select"}
              headlineLabelTitle={"Now, let's be specific"}
              label={"label" as const}
              size={"_360X40" as const}
            />
          </p.Stack>

          <ToolTipServiceListing
            className={classNames(
              "__wab_instance",
              sty.toolTipServiceListing__boqz5
            )}
            slot={"Revisions & service design"}
          >
            {
              "Describe the key steps/process involved to deliver your service to the client.Provide a detailed, step-by-step overview or outline on how a project will progress.The process you use to deliver your service, provides insight to the client on the level of service you offer, and the details of the experience you provide to deliver the desired outcome."
            }
          </ToolTipServiceListing>

          <ToolTipServiceListing
            className={classNames(
              "__wab_instance",
              sty.toolTipServiceListing__omoM6
            )}
            slot={"Required client assets"}
          >
            {
              "For clarity and positive results, outline what you need the client to provide before you can start your service.\n"
            }
          </ToolTipServiceListing>

          <p.Stack
            as={"div"}
            data-plasmic-name={"questionRequirementBlock"}
            data-plasmic-override={overrides.questionRequirementBlock}
            hasGap={true}
            className={classNames(defaultcss.all, sty.questionRequirementBlock)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.freeBox__pQ2Sk)}
            >
              <CardQuestionServiceListing
                className={classNames(
                  "__wab_instance",
                  sty.cardQuestionServiceListing__mx3A
                )}
                overline={"overline" as const}
                slot={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox___1AlN
                    )}
                  >
                    {"Step 2"}
                  </div>
                }
                slot2={"Select all that apply"}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__leXJd
                  )}
                >
                  {"What do you require from the client to start your service?"}
                </div>
              </CardQuestionServiceListing>
            </p.Stack>

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.freeBox__uXh5P)}
            >
              <RadioCheckboxCard
                className={classNames(
                  "__wab_instance",
                  sty.radioCheckboxCard__xWmbJ
                )}
              >
                {"Client requirement 1"}
              </RadioCheckboxCard>

              <RadioCheckboxCard
                className={classNames(
                  "__wab_instance",
                  sty.radioCheckboxCard__iFltc
                )}
              >
                {"Client requirement 2 "}
              </RadioCheckboxCard>

              <RadioCheckboxCard
                className={classNames(
                  "__wab_instance",
                  sty.radioCheckboxCard__tyQBu
                )}
              >
                {"Client requirement 3 "}
              </RadioCheckboxCard>
            </p.Stack>
          </p.Stack>

          <ToolTipServiceListing
            className={classNames(
              "__wab_instance",
              sty.toolTipServiceListing__eAfGf
            )}
            slot={"File formats for deliverables"}
          >
            {
              "For clarity and positive results, outline what you need the client to provide before you can start your service.\n"
            }
          </ToolTipServiceListing>

          <p.Stack
            as={"div"}
            data-plasmic-name={"questionFormatBlock"}
            data-plasmic-override={overrides.questionFormatBlock}
            hasGap={true}
            className={classNames(defaultcss.all, sty.questionFormatBlock)}
          >
            <CardQuestionServiceListing
              className={classNames(
                "__wab_instance",
                sty.cardQuestionServiceListing__ejty
              )}
              overline={"overline" as const}
              slot={
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__o9IrI
                  )}
                >
                  {"Step 2"}
                </div>
              }
              slot2={"Search and select up to 5 formats."}
            >
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.freeBox__dHgWl
                )}
              >
                {"What format(s) will you provide the client?"}
              </div>
            </CardQuestionServiceListing>

            <SearchBadge
              data-plasmic-name={"searchBadge"}
              data-plasmic-override={overrides.searchBadge}
              className={classNames("__wab_instance", sty.searchBadge)}
            >
              <ChipBadgeDisplay
                data-plasmic-name={"chipBadgeDisplay"}
                data-plasmic-override={overrides.chipBadgeDisplay}
                className={classNames("__wab_instance", sty.chipBadgeDisplay)}
                type={"ghost" as const}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__jJuJm
                  )}
                >
                  {"Badge"}
                </div>
              </ChipBadgeDisplay>
            </SearchBadge>
          </p.Stack>

          <FooterServiceListing
            data-plasmic-name={"footerServiceListing"}
            data-plasmic-override={overrides.footerServiceListing}
            className={classNames("__wab_instance", sty.footerServiceListing)}
          />
        </form>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "serviceListingNavbar",
    "navbarServiceListing",
    "progressBar",
    "questionTimeBlock",
    "textbox",
    "questionMeetingBlock",
    "questionRevisionBlock",
    "questionRequirementBlock",
    "questionFormatBlock",
    "searchBadge",
    "chipBadgeDisplay",
    "footerServiceListing"
  ],
  serviceListingNavbar: [
    "serviceListingNavbar",
    "navbarServiceListing",
    "progressBar"
  ],
  navbarServiceListing: ["navbarServiceListing"],
  progressBar: ["progressBar"],
  questionTimeBlock: ["questionTimeBlock", "textbox"],
  textbox: ["textbox"],
  questionMeetingBlock: ["questionMeetingBlock"],
  questionRevisionBlock: ["questionRevisionBlock"],
  questionRequirementBlock: ["questionRequirementBlock"],
  questionFormatBlock: [
    "questionFormatBlock",
    "searchBadge",
    "chipBadgeDisplay"
  ],
  searchBadge: ["searchBadge", "chipBadgeDisplay"],
  chipBadgeDisplay: ["chipBadgeDisplay"],
  footerServiceListing: ["footerServiceListing"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "form";
  serviceListingNavbar: "div";
  navbarServiceListing: typeof NavbarServiceListing;
  progressBar: typeof ProgressBar;
  questionTimeBlock: "div";
  textbox: "input";
  questionMeetingBlock: "div";
  questionRevisionBlock: "div";
  questionRequirementBlock: "div";
  questionFormatBlock: "div";
  searchBadge: typeof SearchBadge;
  chipBadgeDisplay: typeof ChipBadgeDisplay;
  footerServiceListing: typeof FooterServiceListing;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicServicelistingdelivery__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicServicelistingdelivery__VariantsArgs;
    args?: PlasmicServicelistingdelivery__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicServicelistingdelivery__Fetches;
  } & Omit<PlasmicServicelistingdelivery__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicServicelistingdelivery__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicServicelistingdelivery__ArgProps,
      internalVariantPropNames: PlasmicServicelistingdelivery__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicServicelistingdelivery__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicServicelistingdelivery";
  } else {
    func.displayName = `PlasmicServicelistingdelivery.${nodeName}`;
  }
  return func;
}

export const PlasmicServicelistingdelivery = Object.assign(
  // Top-level PlasmicServicelistingdelivery renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    serviceListingNavbar: makeNodeComponent("serviceListingNavbar"),
    navbarServiceListing: makeNodeComponent("navbarServiceListing"),
    progressBar: makeNodeComponent("progressBar"),
    questionTimeBlock: makeNodeComponent("questionTimeBlock"),
    textbox: makeNodeComponent("textbox"),
    questionMeetingBlock: makeNodeComponent("questionMeetingBlock"),
    questionRevisionBlock: makeNodeComponent("questionRevisionBlock"),
    questionRequirementBlock: makeNodeComponent("questionRequirementBlock"),
    questionFormatBlock: makeNodeComponent("questionFormatBlock"),
    searchBadge: makeNodeComponent("searchBadge"),
    chipBadgeDisplay: makeNodeComponent("chipBadgeDisplay"),
    footerServiceListing: makeNodeComponent("footerServiceListing"),

    // Metadata about props expected for PlasmicServicelistingdelivery
    internalVariantProps: PlasmicServicelistingdelivery__VariantProps,
    internalArgProps: PlasmicServicelistingdelivery__ArgProps
  }
);

export default PlasmicServicelistingdelivery;
/* prettier-ignore-end */
