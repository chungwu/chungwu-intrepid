// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: ev2zgnRoIomYPd
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import SwitchPrimary from "../../SwitchPrimary"; // plasmic-import: NI4mgAsheQjrPj/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicToggleSubscriptionCard.module.css"; // plasmic-import: ev2zgnRoIomYPd/css

export type PlasmicToggleSubscriptionCard__VariantMembers = {
  active: "yearly" | "autorenew" | "placement";
  inactive: "yearly" | "autorenew" | "placement";
};

export type PlasmicToggleSubscriptionCard__VariantsArgs = {
  active?: SingleChoiceArg<"yearly" | "autorenew" | "placement">;
  inactive?: SingleChoiceArg<"yearly" | "autorenew" | "placement">;
};

type VariantPropType = keyof PlasmicToggleSubscriptionCard__VariantsArgs;
export const PlasmicToggleSubscriptionCard__VariantProps =
  new Array<VariantPropType>("active", "inactive");

export type PlasmicToggleSubscriptionCard__ArgsType = {};
type ArgPropType = keyof PlasmicToggleSubscriptionCard__ArgsType;
export const PlasmicToggleSubscriptionCard__ArgProps = new Array<ArgPropType>();

export type PlasmicToggleSubscriptionCard__OverridesType = {
  root?: p.Flex<"div">;
  switchPrimary?: p.Flex<typeof SwitchPrimary>;
};

export interface DefaultToggleSubscriptionCardProps {
  active?: SingleChoiceArg<"yearly" | "autorenew" | "placement">;
  inactive?: SingleChoiceArg<"yearly" | "autorenew" | "placement">;
  className?: string;
}

function PlasmicToggleSubscriptionCard__RenderFunc(props: {
  variants: PlasmicToggleSubscriptionCard__VariantsArgs;
  args: PlasmicToggleSubscriptionCard__ArgsType;
  overrides: PlasmicToggleSubscriptionCard__OverridesType;
  dataFetches?: PlasmicToggleSubscriptionCard__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.freeBox__gq2Qp)}
      >
        <div className={classNames(defaultcss.all, sty.freeBox__aKpLh)}>
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox__vvKnf,
              {
                [sty.freeBox__active_autorenew__vvKnFmJhCn]: hasVariant(
                  variants,
                  "active",
                  "autorenew"
                ),
                [sty.freeBox__active_placement__vvKnFnKZe0]: hasVariant(
                  variants,
                  "active",
                  "placement"
                ),
                [sty.freeBox__active_yearly__vvKnfmgjEx]: hasVariant(
                  variants,
                  "active",
                  "yearly"
                ),
                [sty.freeBox__inactive_autorenew__vvKnfhpXh0]: hasVariant(
                  variants,
                  "inactive",
                  "autorenew"
                ),
                [sty.freeBox__inactive_placement__vvKnfKcEua]: hasVariant(
                  variants,
                  "inactive",
                  "placement"
                ),
                [sty.freeBox__inactive_yearly__vvKnf4ES5C]: hasVariant(
                  variants,
                  "inactive",
                  "yearly"
                )
              }
            )}
          >
            {hasVariant(variants, "inactive", "placement")
              ? "Standard"
              : hasVariant(variants, "inactive", "autorenew")
              ? "Autorenew"
              : hasVariant(variants, "inactive", "yearly")
              ? "Yearly"
              : hasVariant(variants, "active", "placement")
              ? "Priority"
              : hasVariant(variants, "active", "autorenew")
              ? "Autorenew"
              : hasVariant(variants, "active", "yearly")
              ? "Yearly"
              : "Monthly"}
          </div>
        </div>
      </p.Stack>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.freeBox__xhDd7)}
      >
        <SwitchPrimary
          data-plasmic-name={"switchPrimary"}
          data-plasmic-override={overrides.switchPrimary}
          _switch={
            hasVariant(variants, "active", "placement")
              ? ("_switch" as const)
              : hasVariant(variants, "active", "autorenew")
              ? ("_switch" as const)
              : hasVariant(variants, "active", "yearly")
              ? ("_switch" as const)
              : undefined
          }
          className={classNames("__wab_instance", sty.switchPrimary, {
            [sty.switchPrimary__active_autorenew]: hasVariant(
              variants,
              "active",
              "autorenew"
            ),
            [sty.switchPrimary__active_placement]: hasVariant(
              variants,
              "active",
              "placement"
            ),
            [sty.switchPrimary__active_yearly]: hasVariant(
              variants,
              "active",
              "yearly"
            ),
            [sty.switchPrimary__inactive_autorenew]: hasVariant(
              variants,
              "inactive",
              "autorenew"
            ),
            [sty.switchPrimary__inactive_placement]: hasVariant(
              variants,
              "inactive",
              "placement"
            ),
            [sty.switchPrimary__inactive_yearly]: hasVariant(
              variants,
              "inactive",
              "yearly"
            )
          })}
          color={hasVariant(variants, "inactive", "yearly") ? [] : undefined}
        />
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "switchPrimary"],
  switchPrimary: ["switchPrimary"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  switchPrimary: typeof SwitchPrimary;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicToggleSubscriptionCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicToggleSubscriptionCard__VariantsArgs;
    args?: PlasmicToggleSubscriptionCard__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicToggleSubscriptionCard__Fetches;
  } & Omit<PlasmicToggleSubscriptionCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicToggleSubscriptionCard__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicToggleSubscriptionCard__ArgProps,
      internalVariantPropNames: PlasmicToggleSubscriptionCard__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicToggleSubscriptionCard__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicToggleSubscriptionCard";
  } else {
    func.displayName = `PlasmicToggleSubscriptionCard.${nodeName}`;
  }
  return func;
}

export const PlasmicToggleSubscriptionCard = Object.assign(
  // Top-level PlasmicToggleSubscriptionCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    switchPrimary: makeNodeComponent("switchPrimary"),

    // Metadata about props expected for PlasmicToggleSubscriptionCard
    internalVariantProps: PlasmicToggleSubscriptionCard__VariantProps,
    internalArgProps: PlasmicToggleSubscriptionCard__ArgProps
  }
);

export default PlasmicToggleSubscriptionCard;
/* prettier-ignore-end */
