// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: ABrK2eGm6v3s9Q
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavbarServiceListing from "../../NavbarServiceListing"; // plasmic-import: CjIIrelyshy5Wa/component
import ProgressBar from "../../ProgressBar"; // plasmic-import: L1r4sBRgwURapY/component
import CardQuestionServiceListing from "../../CardQuestionServiceListing"; // plasmic-import: 6ULzHucCr0IVSB/component
import InputTextField from "../../InputTextField"; // plasmic-import: eRJarSvs8Cmudj/component
import ToolTipServiceListing from "../../ToolTipServiceListing"; // plasmic-import: EWZKmdZCm54hbu/component
import InputRichTextField from "../../InputRichTextField"; // plasmic-import: _WEBDN4X8m4r90/component
import ServiceListingProcessCard from "../../ServiceListingProcessCard"; // plasmic-import: PA22Mi3r1VdJPS/component
import FooterServiceListing from "../../FooterServiceListing"; // plasmic-import: KdJma6zoTnjpLW/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicServicelistingdescription.module.css"; // plasmic-import: ABrK2eGm6v3s9Q/css

import Icon100Icon from "./icons/PlasmicIcon__Icon100"; // plasmic-import: AOrmKBCHzOZuEYY/icon

export type PlasmicServicelistingdescription__VariantMembers = {};

export type PlasmicServicelistingdescription__VariantsArgs = {};
type VariantPropType = keyof PlasmicServicelistingdescription__VariantsArgs;
export const PlasmicServicelistingdescription__VariantProps =
  new Array<VariantPropType>();

export type PlasmicServicelistingdescription__ArgsType = {};
type ArgPropType = keyof PlasmicServicelistingdescription__ArgsType;
export const PlasmicServicelistingdescription__ArgProps =
  new Array<ArgPropType>();

export type PlasmicServicelistingdescription__OverridesType = {
  root?: p.Flex<"form">;
  serviceListingNavbar?: p.Flex<"div">;
  navbarServiceListing?: p.Flex<typeof NavbarServiceListing>;
  progressBar?: p.Flex<typeof ProgressBar>;
  questionTitleBlock?: p.Flex<"div">;
  inputTextField?: p.Flex<typeof InputTextField>;
  questionDescriptionBlock?: p.Flex<"div">;
  questionProcessBlock?: p.Flex<"div">;
  serviceListingProcessCard?: p.Flex<typeof ServiceListingProcessCard>;
  footerServiceListing?: p.Flex<typeof FooterServiceListing>;
};

export interface DefaultServicelistingdescriptionProps {
  dataFetches: PlasmicServicelistingdescription__Fetches;
}

function PlasmicServicelistingdescription__RenderFunc(props: {
  variants: PlasmicServicelistingdescription__VariantsArgs;
  args: PlasmicServicelistingdescription__ArgsType;
  overrides: PlasmicServicelistingdescription__OverridesType;
  dataFetches?: PlasmicServicelistingdescription__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <React.Fragment>
      <Head>
        <title key="title">{""}</title>
        <meta key="og:title" property="og:title" content={""} />
        <meta
          key="description"
          name="description"
          property="og:description"
          content={""}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <p.Stack
          as={"form"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"serviceListingNavbar"}
            data-plasmic-override={overrides.serviceListingNavbar}
            className={classNames(defaultcss.all, sty.serviceListingNavbar)}
          >
            <NavbarServiceListing
              data-plasmic-name={"navbarServiceListing"}
              data-plasmic-override={overrides.navbarServiceListing}
              className={classNames("__wab_instance", sty.navbarServiceListing)}
            >
              {"Description"}
            </NavbarServiceListing>

            <ProgressBar
              data-plasmic-name={"progressBar"}
              data-plasmic-override={overrides.progressBar}
              className={classNames("__wab_instance", sty.progressBar)}
              progress={"_30" as const}
            />
          </div>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.freeBox__qi5Fk)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"questionTitleBlock"}
              data-plasmic-override={overrides.questionTitleBlock}
              hasGap={true}
              className={classNames(defaultcss.all, sty.questionTitleBlock)}
            >
              <CardQuestionServiceListing
                className={classNames(
                  "__wab_instance",
                  sty.cardQuestionServiceListing__hxH5
                )}
                slot={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox___7JBvF
                    )}
                  >
                    {"Step 2"}
                  </div>
                }
                slot2={"Write a title for your service. Max: 70 characters."}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox___2I0Pf
                  )}
                >
                  {"What is the name/title of your service?"}
                </div>
              </CardQuestionServiceListing>

              <InputTextField
                data-plasmic-name={"inputTextField"}
                data-plasmic-override={overrides.inputTextField}
                className={classNames("__wab_instance", sty.inputTextField)}
              />
            </p.Stack>

            <ToolTipServiceListing
              className={classNames(
                "__wab_instance",
                sty.toolTipServiceListing__zxvkS
              )}
              slot={"Choosing listing categories"}
            >
              {
                "Selecting accurate categories helps Members know what to expect when it comes to format, features, outcomes, and level of service they'll receive when creating digital products with you, or your team."
              }
            </ToolTipServiceListing>
          </p.Stack>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.freeBox___2Hncu)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"questionDescriptionBlock"}
              data-plasmic-override={overrides.questionDescriptionBlock}
              hasGap={true}
              className={classNames(
                defaultcss.all,
                sty.questionDescriptionBlock
              )}
            >
              <CardQuestionServiceListing
                className={classNames(
                  "__wab_instance",
                  sty.cardQuestionServiceListing__efgp5
                )}
                overline={"overline" as const}
                slot={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__diib9
                    )}
                  >
                    {"Step 2"}
                  </div>
                }
                slot2={
                  "Describe the service youâ€™re offering. Max: 150 characters"
                }
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__w4Ko
                  )}
                >
                  {"What is the description of your service?"}
                </div>
              </CardQuestionServiceListing>

              <InputRichTextField
                className={classNames(
                  "__wab_instance",
                  sty.inputRichTextField__xlL4Z
                )}
                description={"description" as const}
                headline={"headline" as const}
              />
            </p.Stack>

            <ToolTipServiceListing
              className={classNames(
                "__wab_instance",
                sty.toolTipServiceListing___0INqs
              )}
              slot={"Choosing listing categories"}
            >
              {
                "Selecting accurate categories helps Members know what to expect when it comes to format, features, outcomes, and level of service they'll receive when creating digital products with you, or your team."
              }
            </ToolTipServiceListing>
          </p.Stack>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.freeBox__hi1Pa)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"questionProcessBlock"}
              data-plasmic-override={overrides.questionProcessBlock}
              hasGap={true}
              className={classNames(defaultcss.all, sty.questionProcessBlock)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.freeBox__heAyi)}
              >
                <CardQuestionServiceListing
                  className={classNames(
                    "__wab_instance",
                    sty.cardQuestionServiceListing__s7Ji8
                  )}
                  overline={"overline" as const}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox__mzzOp
                      )}
                    >
                      {"Step 2"}
                    </div>
                  }
                  slot2={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox__aKMjJ
                      )}
                    >
                      {"Describe a minimum of 1 step, to maximum of 8 steps."}
                    </div>
                  }
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__a9Ia7
                    )}
                  >
                    {"What is your unique service delivery process?"}
                  </div>
                </CardQuestionServiceListing>
              </p.Stack>

              <InputRichTextField
                className={classNames(
                  "__wab_instance",
                  sty.inputRichTextField__fXwyH
                )}
                description={"description" as const}
              >
                {"Short overview"}
              </InputRichTextField>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.freeBox__nSrM)}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__twOke
                  )}
                >
                  {"Description"}
                </div>

                <ServiceListingProcessCard
                  data-plasmic-name={"serviceListingProcessCard"}
                  data-plasmic-override={overrides.serviceListingProcessCard}
                  className={classNames(
                    "__wab_instance",
                    sty.serviceListingProcessCard
                  )}
                />
              </p.Stack>
            </p.Stack>

            <ToolTipServiceListing
              className={classNames(
                "__wab_instance",
                sty.toolTipServiceListing__iLop
              )}
              slot={"Process & outcomes"}
            >
              {
                "Describe the key steps/process involved to deliver your service to the client.Provide a detailed, step-by-step overview or outline on how a project will progress.The process you use to deliver your service, provides insight to the client on the level of service you offer, and the details of the experience you provide to deliver the desired outcome."
              }
            </ToolTipServiceListing>
          </p.Stack>

          <FooterServiceListing
            data-plasmic-name={"footerServiceListing"}
            data-plasmic-override={overrides.footerServiceListing}
            className={classNames("__wab_instance", sty.footerServiceListing)}
          />
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "serviceListingNavbar",
    "navbarServiceListing",
    "progressBar",
    "questionTitleBlock",
    "inputTextField",
    "questionDescriptionBlock",
    "questionProcessBlock",
    "serviceListingProcessCard",
    "footerServiceListing"
  ],
  serviceListingNavbar: [
    "serviceListingNavbar",
    "navbarServiceListing",
    "progressBar"
  ],
  navbarServiceListing: ["navbarServiceListing"],
  progressBar: ["progressBar"],
  questionTitleBlock: ["questionTitleBlock", "inputTextField"],
  inputTextField: ["inputTextField"],
  questionDescriptionBlock: ["questionDescriptionBlock"],
  questionProcessBlock: ["questionProcessBlock", "serviceListingProcessCard"],
  serviceListingProcessCard: ["serviceListingProcessCard"],
  footerServiceListing: ["footerServiceListing"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "form";
  serviceListingNavbar: "div";
  navbarServiceListing: typeof NavbarServiceListing;
  progressBar: typeof ProgressBar;
  questionTitleBlock: "div";
  inputTextField: typeof InputTextField;
  questionDescriptionBlock: "div";
  questionProcessBlock: "div";
  serviceListingProcessCard: typeof ServiceListingProcessCard;
  footerServiceListing: typeof FooterServiceListing;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicServicelistingdescription__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicServicelistingdescription__VariantsArgs;
    args?: PlasmicServicelistingdescription__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicServicelistingdescription__Fetches;
  } & Omit<PlasmicServicelistingdescription__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicServicelistingdescription__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicServicelistingdescription__ArgProps,
      internalVariantPropNames: PlasmicServicelistingdescription__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicServicelistingdescription__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicServicelistingdescription";
  } else {
    func.displayName = `PlasmicServicelistingdescription.${nodeName}`;
  }
  return func;
}

export const PlasmicServicelistingdescription = Object.assign(
  // Top-level PlasmicServicelistingdescription renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    serviceListingNavbar: makeNodeComponent("serviceListingNavbar"),
    navbarServiceListing: makeNodeComponent("navbarServiceListing"),
    progressBar: makeNodeComponent("progressBar"),
    questionTitleBlock: makeNodeComponent("questionTitleBlock"),
    inputTextField: makeNodeComponent("inputTextField"),
    questionDescriptionBlock: makeNodeComponent("questionDescriptionBlock"),
    questionProcessBlock: makeNodeComponent("questionProcessBlock"),
    serviceListingProcessCard: makeNodeComponent("serviceListingProcessCard"),
    footerServiceListing: makeNodeComponent("footerServiceListing"),

    // Metadata about props expected for PlasmicServicelistingdescription
    internalVariantProps: PlasmicServicelistingdescription__VariantProps,
    internalArgProps: PlasmicServicelistingdescription__ArgProps
  }
);

export default PlasmicServicelistingdescription;
/* prettier-ignore-end */
