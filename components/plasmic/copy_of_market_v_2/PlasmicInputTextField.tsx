// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: eRJarSvs8Cmudj
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicInputTextField.module.css"; // plasmic-import: eRJarSvs8Cmudj/css

export type PlasmicInputTextField__VariantMembers = {
  type: "primary" | "secondary";
  size: "_160" | "_180" | "_270" | "_360" | "_540";
};

export type PlasmicInputTextField__VariantsArgs = {
  type?: SingleChoiceArg<"primary" | "secondary">;
  size?: SingleChoiceArg<"_160" | "_180" | "_270" | "_360" | "_540">;
};

type VariantPropType = keyof PlasmicInputTextField__VariantsArgs;
export const PlasmicInputTextField__VariantProps = new Array<VariantPropType>(
  "type",
  "size"
);

export type PlasmicInputTextField__ArgsType = {
  placeholder?: string;
};

type ArgPropType = keyof PlasmicInputTextField__ArgsType;
export const PlasmicInputTextField__ArgProps = new Array<ArgPropType>(
  "placeholder"
);

export type PlasmicInputTextField__OverridesType = {
  root?: p.Flex<"div">;
  inputTextParent?: p.Flex<"div">;
  description?: p.Flex<"input">;
};

export interface DefaultInputTextFieldProps {
  placeholder?: string;
  type?: SingleChoiceArg<"primary" | "secondary">;
  size?: SingleChoiceArg<"_160" | "_180" | "_270" | "_360" | "_540">;
  className?: string;
}

function PlasmicInputTextField__RenderFunc(props: {
  variants: PlasmicInputTextField__VariantsArgs;
  args: PlasmicInputTextField__ArgsType;
  overrides: PlasmicInputTextField__OverridesType;
  dataFetches?: PlasmicInputTextField__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__size__180]: hasVariant(variants, "size", "_180"),
        [sty.root__size__270]: hasVariant(variants, "size", "_270"),
        [sty.root__size__360]: hasVariant(variants, "size", "_360"),
        [sty.root__size__540]: hasVariant(variants, "size", "_540"),
        [sty.root__type_secondary]: hasVariant(variants, "type", "secondary")
      })}
    >
      <div
        data-plasmic-name={"inputTextParent"}
        data-plasmic-override={overrides.inputTextParent}
        className={classNames(defaultcss.all, sty.inputTextParent, {
          [sty.inputTextParent__size__160]: hasVariant(
            variants,
            "size",
            "_160"
          ),
          [sty.inputTextParent__size__180]: hasVariant(
            variants,
            "size",
            "_180"
          ),
          [sty.inputTextParent__size__270]: hasVariant(
            variants,
            "size",
            "_270"
          ),
          [sty.inputTextParent__size__360]: hasVariant(
            variants,
            "size",
            "_360"
          ),
          [sty.inputTextParent__size__540]: hasVariant(variants, "size", "_540")
        })}
      >
        <input
          data-plasmic-name={"description"}
          data-plasmic-override={overrides.description}
          className={classNames(defaultcss.input, sty.description, {
            [sty.description__size__160]: hasVariant(variants, "size", "_160"),
            [sty.description__size__180]: hasVariant(variants, "size", "_180"),
            [sty.description__size__270]: hasVariant(variants, "size", "_270"),
            [sty.description__size__540]: hasVariant(variants, "size", "_540"),
            [sty.description__type_secondary]: hasVariant(
              variants,
              "type",
              "secondary"
            )
          })}
          placeholder={args.placeholder}
          size={1 as const}
          type={"text" as const}
          value={"" as const}
        />
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "inputTextParent", "description"],
  inputTextParent: ["inputTextParent", "description"],
  description: ["description"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  inputTextParent: "div";
  description: "input";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInputTextField__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicInputTextField__VariantsArgs;
    args?: PlasmicInputTextField__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicInputTextField__Fetches;
  } & Omit<PlasmicInputTextField__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicInputTextField__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicInputTextField__ArgProps,
      internalVariantPropNames: PlasmicInputTextField__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicInputTextField__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInputTextField";
  } else {
    func.displayName = `PlasmicInputTextField.${nodeName}`;
  }
  return func;
}

export const PlasmicInputTextField = Object.assign(
  // Top-level PlasmicInputTextField renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    inputTextParent: makeNodeComponent("inputTextParent"),
    description: makeNodeComponent("description"),

    // Metadata about props expected for PlasmicInputTextField
    internalVariantProps: PlasmicInputTextField__VariantProps,
    internalArgProps: PlasmicInputTextField__ArgProps
  }
);

export default PlasmicInputTextField;
/* prettier-ignore-end */
