// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: dlOB9wdpVUBY-S
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicFooterSocialLink.module.css"; // plasmic-import: dlOB9wdpVUBY-S/css

import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: FygICV-AHdTJMVV/icon

export type PlasmicFooterSocialLink__VariantMembers = {
  color: "light" | "dark" | "brand";
};

export type PlasmicFooterSocialLink__VariantsArgs = {
  color?: SingleChoiceArg<"light" | "dark" | "brand">;
};

type VariantPropType = keyof PlasmicFooterSocialLink__VariantsArgs;
export const PlasmicFooterSocialLink__VariantProps = new Array<VariantPropType>(
  "color"
);

export type PlasmicFooterSocialLink__ArgsType = {
  children?: React.ReactNode;
  destination?: string | PageHref;
};

type ArgPropType = keyof PlasmicFooterSocialLink__ArgsType;
export const PlasmicFooterSocialLink__ArgProps = new Array<ArgPropType>(
  "children",
  "destination"
);

export type PlasmicFooterSocialLink__OverridesType = {
  root?: p.Flex<"a"> & Partial<LinkProps>;
  freeBox?: p.Flex<"div">;
};

export interface DefaultFooterSocialLinkProps {
  children?: React.ReactNode;
  destination?: string | PageHref;
  color?: SingleChoiceArg<"light" | "dark" | "brand">;
  className?: string;
}

function PlasmicFooterSocialLink__RenderFunc(props: {
  variants: PlasmicFooterSocialLink__VariantsArgs;
  args: PlasmicFooterSocialLink__ArgsType;
  overrides: PlasmicFooterSocialLink__OverridesType;
  dataFetches?: PlasmicFooterSocialLink__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.PlasmicLink
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__color_brand]: hasVariant(variants, "color", "brand"),
        [sty.root__color_dark]: hasVariant(variants, "color", "dark"),
        [sty.root__color_light]: hasVariant(variants, "color", "light")
      })}
      component={Link}
      href={args.destination}
      platform={"nextjs"}
      target={"_blank" as const}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(defaultcss.all, sty.freeBox)}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <Icon8Icon
              className={classNames(defaultcss.all, sty.svg__tlQsx)}
              role={"img"}
            />
          ),

          value: args.children,
          className: classNames(sty.slotChildren, {
            [sty.slotChildren__color_brand]: hasVariant(
              variants,
              "color",
              "brand"
            ),
            [sty.slotChildren__color_dark]: hasVariant(
              variants,
              "color",
              "dark"
            ),
            [sty.slotChildren__color_light]: hasVariant(
              variants,
              "color",
              "light"
            )
          })
        })}
      </div>
    </p.PlasmicLink>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "a";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFooterSocialLink__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFooterSocialLink__VariantsArgs;
    args?: PlasmicFooterSocialLink__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicFooterSocialLink__Fetches;
  } & Omit<PlasmicFooterSocialLink__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFooterSocialLink__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFooterSocialLink__ArgProps,
      internalVariantPropNames: PlasmicFooterSocialLink__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicFooterSocialLink__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFooterSocialLink";
  } else {
    func.displayName = `PlasmicFooterSocialLink.${nodeName}`;
  }
  return func;
}

export const PlasmicFooterSocialLink = Object.assign(
  // Top-level PlasmicFooterSocialLink renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicFooterSocialLink
    internalVariantProps: PlasmicFooterSocialLink__VariantProps,
    internalArgProps: PlasmicFooterSocialLink__ArgProps
  }
);

export default PlasmicFooterSocialLink;
/* prettier-ignore-end */
