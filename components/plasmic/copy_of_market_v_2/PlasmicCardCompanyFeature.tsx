// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: 7xtMTC4C-okPZ
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TextLocation from "../../TextLocation"; // plasmic-import: wLCKtuNJYpIeS/component
import TextCityname from "../../TextCityname"; // plasmic-import: 8Oz8_u6leIewl/component
import TextCountryName from "../../TextCountryName"; // plasmic-import: a6rqcZ0tL1fnk/component
import TagBadge from "../../TagBadge"; // plasmic-import: eBACR7k11POl/component
import RatingDisplayDetail from "../../RatingDisplayDetail"; // plasmic-import: EZFFldQYBrJIX/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicCardCompanyFeature.module.css"; // plasmic-import: 7xtMTC4C-okPZ/css

export type PlasmicCardCompanyFeature__VariantMembers = {};

export type PlasmicCardCompanyFeature__VariantsArgs = {};
type VariantPropType = keyof PlasmicCardCompanyFeature__VariantsArgs;
export const PlasmicCardCompanyFeature__VariantProps =
  new Array<VariantPropType>();

export type PlasmicCardCompanyFeature__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
};

type ArgPropType = keyof PlasmicCardCompanyFeature__ArgsType;
export const PlasmicCardCompanyFeature__ArgProps = new Array<ArgPropType>(
  "children",
  "slot",
  "slot2",
  "slot3"
);

export type PlasmicCardCompanyFeature__OverridesType = {
  root?: p.Flex<"div">;
  tagBadge?: p.Flex<typeof TagBadge>;
  ratingDisplayDetail?: p.Flex<typeof RatingDisplayDetail>;
};

export interface DefaultCardCompanyFeatureProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  slot3?: React.ReactNode;
  className?: string;
}

function PlasmicCardCompanyFeature__RenderFunc(props: {
  variants: PlasmicCardCompanyFeature__VariantsArgs;
  args: PlasmicCardCompanyFeature__ArgsType;
  overrides: PlasmicCardCompanyFeature__OverridesType;
  dataFetches?: PlasmicCardCompanyFeature__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div className={classNames(defaultcss.all, sty.freeBox___0Ze21)}>
        {p.renderPlasmicSlot({
          defaultContents: (
            <img
              alt={""}
              className={classNames(defaultcss.img, sty.img__oPnSx)}
              role={"img"}
            />
          ),

          value: args.slot3
        })}
      </div>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.freeBox__nImtE)}
      >
        <div className={classNames(defaultcss.all, sty.freeBox__fObme)}>
          <div className={classNames(defaultcss.all, sty.freeBox__xnbVa)}>
            {p.renderPlasmicSlot({
              defaultContents: "Company Name",
              value: args.children,
              className: classNames(sty.slotChildren)
            })}
          </div>
        </div>

        <div className={classNames(defaultcss.all, sty.freeBox___28YG)}>
          <div className={classNames(defaultcss.all, sty.freeBox__ujuRh)}>
            {p.renderPlasmicSlot({
              defaultContents: (
                <TextLocation
                  className={classNames(
                    "__wab_instance",
                    sty.textLocation__sfobG
                  )}
                />
              ),

              value: args.slot,
              className: classNames(sty.slotSlot)
            })}
          </div>
        </div>

        <div className={classNames(defaultcss.all, sty.freeBox__tR00O)}>
          <div className={classNames(defaultcss.all, sty.freeBox__ouLk)}>
            {p.renderPlasmicSlot({
              defaultContents:
                "Company Description - the tagline that describes them",
              value: args.slot2,
              className: classNames(sty.slotSlot2)
            })}
          </div>
        </div>

        <TagBadge
          data-plasmic-name={"tagBadge"}
          data-plasmic-override={overrides.tagBadge}
          className={classNames("__wab_instance", sty.tagBadge)}
        />

        <RatingDisplayDetail
          data-plasmic-name={"ratingDisplayDetail"}
          data-plasmic-override={overrides.ratingDisplayDetail}
          className={classNames("__wab_instance", sty.ratingDisplayDetail)}
          color={"primaryB" as const}
        />
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "tagBadge", "ratingDisplayDetail"],
  tagBadge: ["tagBadge"],
  ratingDisplayDetail: ["ratingDisplayDetail"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  tagBadge: typeof TagBadge;
  ratingDisplayDetail: typeof RatingDisplayDetail;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCardCompanyFeature__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCardCompanyFeature__VariantsArgs;
    args?: PlasmicCardCompanyFeature__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicCardCompanyFeature__Fetches;
  } & Omit<PlasmicCardCompanyFeature__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCardCompanyFeature__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCardCompanyFeature__ArgProps,
      internalVariantPropNames: PlasmicCardCompanyFeature__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicCardCompanyFeature__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCardCompanyFeature";
  } else {
    func.displayName = `PlasmicCardCompanyFeature.${nodeName}`;
  }
  return func;
}

export const PlasmicCardCompanyFeature = Object.assign(
  // Top-level PlasmicCardCompanyFeature renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    tagBadge: makeNodeComponent("tagBadge"),
    ratingDisplayDetail: makeNodeComponent("ratingDisplayDetail"),

    // Metadata about props expected for PlasmicCardCompanyFeature
    internalVariantProps: PlasmicCardCompanyFeature__VariantProps,
    internalArgProps: PlasmicCardCompanyFeature__ArgProps
  }
);

export default PlasmicCardCompanyFeature;
/* prettier-ignore-end */
