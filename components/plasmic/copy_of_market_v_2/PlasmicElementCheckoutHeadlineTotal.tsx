// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: 4GIILk9cbIEAWje
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicElementCheckoutHeadlineTotal.module.css"; // plasmic-import: 4GIILk9cbIEAWje/css

export type PlasmicElementCheckoutHeadlineTotal__VariantMembers = {};

export type PlasmicElementCheckoutHeadlineTotal__VariantsArgs = {};
type VariantPropType = keyof PlasmicElementCheckoutHeadlineTotal__VariantsArgs;
export const PlasmicElementCheckoutHeadlineTotal__VariantProps =
  new Array<VariantPropType>();

export type PlasmicElementCheckoutHeadlineTotal__ArgsType = {
  children?: React.ReactNode;
  totalValueNumber?: React.ReactNode;
};

type ArgPropType = keyof PlasmicElementCheckoutHeadlineTotal__ArgsType;
export const PlasmicElementCheckoutHeadlineTotal__ArgProps =
  new Array<ArgPropType>("children", "totalValueNumber");

export type PlasmicElementCheckoutHeadlineTotal__OverridesType = {
  root?: p.Flex<"div">;
  totalCurrencyNumberValue?: p.Flex<"div">;
  currencyParent?: p.Flex<"div">;
  currencyText?: p.Flex<"div">;
  subtotalParent?: p.Flex<"div">;
  totalValueNumberParent?: p.Flex<"div">;
};

export interface DefaultElementCheckoutHeadlineTotalProps {
  children?: React.ReactNode;
  totalValueNumber?: React.ReactNode;
  className?: string;
}

function PlasmicElementCheckoutHeadlineTotal__RenderFunc(props: {
  variants: PlasmicElementCheckoutHeadlineTotal__VariantsArgs;
  args: PlasmicElementCheckoutHeadlineTotal__ArgsType;
  overrides: PlasmicElementCheckoutHeadlineTotal__OverridesType;
  dataFetches?: PlasmicElementCheckoutHeadlineTotal__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.freeBox__xhsjT)}
      >
        <div className={classNames(defaultcss.all, sty.freeBox__hGRaK)}>
          {p.renderPlasmicSlot({
            defaultContents: "Sub Total",
            value: args.children,
            className: classNames(sty.slotChildren)
          })}
        </div>
      </p.Stack>

      <p.Stack
        as={"div"}
        data-plasmic-name={"totalCurrencyNumberValue"}
        data-plasmic-override={overrides.totalCurrencyNumberValue}
        hasGap={true}
        className={classNames(defaultcss.all, sty.totalCurrencyNumberValue)}
      >
        <div
          data-plasmic-name={"currencyParent"}
          data-plasmic-override={overrides.currencyParent}
          className={classNames(defaultcss.all, sty.currencyParent)}
        >
          <div
            data-plasmic-name={"currencyText"}
            data-plasmic-override={overrides.currencyText}
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.currencyText
            )}
          >
            {"$"}
          </div>
        </div>

        <div
          data-plasmic-name={"subtotalParent"}
          data-plasmic-override={overrides.subtotalParent}
          className={classNames(defaultcss.all, sty.subtotalParent)}
        >
          <div
            data-plasmic-name={"totalValueNumberParent"}
            data-plasmic-override={overrides.totalValueNumberParent}
            className={classNames(defaultcss.all, sty.totalValueNumberParent)}
          >
            {p.renderPlasmicSlot({
              defaultContents: "0.00",
              value: args.totalValueNumber,
              className: classNames(sty.slotTotalValueNumber)
            })}
          </div>
        </div>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "totalCurrencyNumberValue",
    "currencyParent",
    "currencyText",
    "subtotalParent",
    "totalValueNumberParent"
  ],
  totalCurrencyNumberValue: [
    "totalCurrencyNumberValue",
    "currencyParent",
    "currencyText",
    "subtotalParent",
    "totalValueNumberParent"
  ],
  currencyParent: ["currencyParent", "currencyText"],
  currencyText: ["currencyText"],
  subtotalParent: ["subtotalParent", "totalValueNumberParent"],
  totalValueNumberParent: ["totalValueNumberParent"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  totalCurrencyNumberValue: "div";
  currencyParent: "div";
  currencyText: "div";
  subtotalParent: "div";
  totalValueNumberParent: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicElementCheckoutHeadlineTotal__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicElementCheckoutHeadlineTotal__VariantsArgs;
    args?: PlasmicElementCheckoutHeadlineTotal__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicElementCheckoutHeadlineTotal__Fetches;
  } & Omit< // Specify variants directly as props
    PlasmicElementCheckoutHeadlineTotal__VariantsArgs,
    ReservedPropsType
  > &
    // Specify args directly as props
    Omit<PlasmicElementCheckoutHeadlineTotal__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicElementCheckoutHeadlineTotal__ArgProps,
      internalVariantPropNames:
        PlasmicElementCheckoutHeadlineTotal__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicElementCheckoutHeadlineTotal__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicElementCheckoutHeadlineTotal";
  } else {
    func.displayName = `PlasmicElementCheckoutHeadlineTotal.${nodeName}`;
  }
  return func;
}

export const PlasmicElementCheckoutHeadlineTotal = Object.assign(
  // Top-level PlasmicElementCheckoutHeadlineTotal renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    totalCurrencyNumberValue: makeNodeComponent("totalCurrencyNumberValue"),
    currencyParent: makeNodeComponent("currencyParent"),
    currencyText: makeNodeComponent("currencyText"),
    subtotalParent: makeNodeComponent("subtotalParent"),
    totalValueNumberParent: makeNodeComponent("totalValueNumberParent"),

    // Metadata about props expected for PlasmicElementCheckoutHeadlineTotal
    internalVariantProps: PlasmicElementCheckoutHeadlineTotal__VariantProps,
    internalArgProps: PlasmicElementCheckoutHeadlineTotal__ArgProps
  }
);

export default PlasmicElementCheckoutHeadlineTotal;
/* prettier-ignore-end */
