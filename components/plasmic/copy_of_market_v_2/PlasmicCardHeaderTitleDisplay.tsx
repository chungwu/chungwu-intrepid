// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4BLiU6oPcZdXDvseuPTeUa
// Component: fk5BRaqICb6MOmt
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_market_v_2.module.css"; // plasmic-import: 4BLiU6oPcZdXDvseuPTeUa/projectcss
import * as sty from "./PlasmicCardHeaderTitleDisplay.module.css"; // plasmic-import: fk5BRaqICb6MOmt/css

export type PlasmicCardHeaderTitleDisplay__VariantMembers = {
  headings: "title" | "headline" | "subhead";
  size: "_270" | "_360" | "_540" | "_720" | "_1080";
};

export type PlasmicCardHeaderTitleDisplay__VariantsArgs = {
  headings?: MultiChoiceArg<"title" | "headline" | "subhead">;
  size?: SingleChoiceArg<"_270" | "_360" | "_540" | "_720" | "_1080">;
};

type VariantPropType = keyof PlasmicCardHeaderTitleDisplay__VariantsArgs;
export const PlasmicCardHeaderTitleDisplay__VariantProps =
  new Array<VariantPropType>("headings", "size");

export type PlasmicCardHeaderTitleDisplay__ArgsType = {
  textDisplay?: React.ReactNode;
  slot?: React.ReactNode;
  textSubhead?: React.ReactNode;
};

type ArgPropType = keyof PlasmicCardHeaderTitleDisplay__ArgsType;
export const PlasmicCardHeaderTitleDisplay__ArgProps = new Array<ArgPropType>(
  "textDisplay",
  "slot",
  "textSubhead"
);

export type PlasmicCardHeaderTitleDisplay__OverridesType = {
  parent?: p.Flex<"hgroup">;
  headerDisplayGroupParent?: p.Flex<"div">;
  headerDisplayTitle?: p.Flex<"div">;
  textDisplayParent?: p.Flex<"h1">;
  headlineSubheadGroupParent?: p.Flex<"div">;
  headline?: p.Flex<"div">;
  h2?: p.Flex<"h2">;
  subhead?: p.Flex<"div">;
  textSubheadParent?: p.Flex<"div">;
};

export interface DefaultCardHeaderTitleDisplayProps {
  textDisplay?: React.ReactNode;
  slot?: React.ReactNode;
  textSubhead?: React.ReactNode;
  headings?: MultiChoiceArg<"title" | "headline" | "subhead">;
  size?: SingleChoiceArg<"_270" | "_360" | "_540" | "_720" | "_1080">;
  className?: string;
}

function PlasmicCardHeaderTitleDisplay__RenderFunc(props: {
  variants: PlasmicCardHeaderTitleDisplay__VariantsArgs;
  args: PlasmicCardHeaderTitleDisplay__ArgsType;
  overrides: PlasmicCardHeaderTitleDisplay__OverridesType;
  dataFetches?: PlasmicCardHeaderTitleDisplay__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <hgroup
      data-plasmic-name={"parent"}
      data-plasmic-override={overrides.parent}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.parent, {
        [sty.parent__size__1080]: hasVariant(variants, "size", "_1080"),
        [sty.parent__size__270]: hasVariant(variants, "size", "_270"),
        [sty.parent__size__360]: hasVariant(variants, "size", "_360"),
        [sty.parent__size__540]: hasVariant(variants, "size", "_540"),
        [sty.parent__size__720]: hasVariant(variants, "size", "_720")
      })}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"headerDisplayGroupParent"}
        data-plasmic-override={overrides.headerDisplayGroupParent}
        hasGap={true}
        className={classNames(defaultcss.all, sty.headerDisplayGroupParent, {
          [sty.headerDisplayGroupParent__size__1080]: hasVariant(
            variants,
            "size",
            "_1080"
          ),
          [sty.headerDisplayGroupParent__size__270]: hasVariant(
            variants,
            "size",
            "_270"
          ),
          [sty.headerDisplayGroupParent__size__360]: hasVariant(
            variants,
            "size",
            "_360"
          )
        })}
      >
        <div
          data-plasmic-name={"headerDisplayTitle"}
          data-plasmic-override={overrides.headerDisplayTitle}
          className={classNames(defaultcss.all, sty.headerDisplayTitle, {
            [sty.headerDisplayTitle__headings_headline]: hasVariant(
              variants,
              "headings",
              "headline"
            ),
            [sty.headerDisplayTitle__headings_title]: hasVariant(
              variants,
              "headings",
              "title"
            ),
            [sty.headerDisplayTitle__size__270]: hasVariant(
              variants,
              "size",
              "_270"
            )
          })}
        >
          <h1
            data-plasmic-name={"textDisplayParent"}
            data-plasmic-override={overrides.textDisplayParent}
            className={classNames(defaultcss.h1, sty.textDisplayParent, {
              [sty.textDisplayParent__headings_headline]: hasVariant(
                variants,
                "headings",
                "headline"
              ),
              [sty.textDisplayParent__headings_title]: hasVariant(
                variants,
                "headings",
                "title"
              )
            })}
          >
            {p.renderPlasmicSlot({
              defaultContents: "Title",
              value: args.textDisplay,
              className: classNames(sty.slotTextDisplay, {
                [sty.slotTextDisplay__headings_headline]: hasVariant(
                  variants,
                  "headings",
                  "headline"
                ),
                [sty.slotTextDisplay__headings_title]: hasVariant(
                  variants,
                  "headings",
                  "title"
                ),
                [sty.slotTextDisplay__size__270]: hasVariant(
                  variants,
                  "size",
                  "_270"
                )
              })
            })}
          </h1>
        </div>

        <p.Stack
          as={"div"}
          data-plasmic-name={"headlineSubheadGroupParent"}
          data-plasmic-override={overrides.headlineSubheadGroupParent}
          hasGap={true}
          className={classNames(
            defaultcss.all,
            sty.headlineSubheadGroupParent,
            {
              [sty.headlineSubheadGroupParent__size__1080]: hasVariant(
                variants,
                "size",
                "_1080"
              ),
              [sty.headlineSubheadGroupParent__size__360]: hasVariant(
                variants,
                "size",
                "_360"
              )
            }
          )}
        >
          <div
            data-plasmic-name={"headline"}
            data-plasmic-override={overrides.headline}
            className={classNames(defaultcss.all, sty.headline, {
              [sty.headline__headings_headline]: hasVariant(
                variants,
                "headings",
                "headline"
              ),
              [sty.headline__size__1080]: hasVariant(variants, "size", "_1080"),
              [sty.headline__size__270]: hasVariant(variants, "size", "_270")
            })}
          >
            <h2
              data-plasmic-name={"h2"}
              data-plasmic-override={overrides.h2}
              className={classNames(defaultcss.h2, sty.h2, {
                [sty.h2__headings_headline]: hasVariant(
                  variants,
                  "headings",
                  "headline"
                ),
                [sty.h2__size__1080]: hasVariant(variants, "size", "_1080"),
                [sty.h2__size__270]: hasVariant(variants, "size", "_270")
              })}
            >
              {p.renderPlasmicSlot({
                defaultContents: "Headline Title",
                value: args.slot,
                className: classNames(sty.slotSlot, {
                  [sty.slotSlot__headings_headline]: hasVariant(
                    variants,
                    "headings",
                    "headline"
                  ),
                  [sty.slotSlot__size__1080]: hasVariant(
                    variants,
                    "size",
                    "_1080"
                  ),
                  [sty.slotSlot__size__270]: hasVariant(
                    variants,
                    "size",
                    "_270"
                  )
                })
              })}
            </h2>
          </div>

          <div
            data-plasmic-name={"subhead"}
            data-plasmic-override={overrides.subhead}
            className={classNames(defaultcss.all, sty.subhead, {
              [sty.subhead__headings_headline]: hasVariant(
                variants,
                "headings",
                "headline"
              ),
              [sty.subhead__headings_subhead]: hasVariant(
                variants,
                "headings",
                "subhead"
              ),
              [sty.subhead__size__270]: hasVariant(variants, "size", "_270"),
              [sty.subhead__size__360]: hasVariant(variants, "size", "_360")
            })}
          >
            <div
              data-plasmic-name={"textSubheadParent"}
              data-plasmic-override={overrides.textSubheadParent}
              className={classNames(defaultcss.all, sty.textSubheadParent, {
                [sty.textSubheadParent__headings_headline]: hasVariant(
                  variants,
                  "headings",
                  "headline"
                ),
                [sty.textSubheadParent__headings_subhead]: hasVariant(
                  variants,
                  "headings",
                  "subhead"
                ),
                [sty.textSubheadParent__size__270]: hasVariant(
                  variants,
                  "size",
                  "_270"
                ),
                [sty.textSubheadParent__size__360]: hasVariant(
                  variants,
                  "size",
                  "_360"
                )
              })}
            >
              {p.renderPlasmicSlot({
                defaultContents: "Subhead title",
                value: args.textSubhead,
                className: classNames(sty.slotTextSubhead, {
                  [sty.slotTextSubhead__headings_headline]: hasVariant(
                    variants,
                    "headings",
                    "headline"
                  ),
                  [sty.slotTextSubhead__headings_subhead]: hasVariant(
                    variants,
                    "headings",
                    "subhead"
                  ),
                  [sty.slotTextSubhead__size__270]: hasVariant(
                    variants,
                    "size",
                    "_270"
                  )
                })
              })}
            </div>
          </div>
        </p.Stack>
      </p.Stack>
    </hgroup>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  parent: [
    "parent",
    "headerDisplayGroupParent",
    "headerDisplayTitle",
    "textDisplayParent",
    "headlineSubheadGroupParent",
    "headline",
    "h2",
    "subhead",
    "textSubheadParent"
  ],
  headerDisplayGroupParent: [
    "headerDisplayGroupParent",
    "headerDisplayTitle",
    "textDisplayParent",
    "headlineSubheadGroupParent",
    "headline",
    "h2",
    "subhead",
    "textSubheadParent"
  ],
  headerDisplayTitle: ["headerDisplayTitle", "textDisplayParent"],
  textDisplayParent: ["textDisplayParent"],
  headlineSubheadGroupParent: [
    "headlineSubheadGroupParent",
    "headline",
    "h2",
    "subhead",
    "textSubheadParent"
  ],
  headline: ["headline", "h2"],
  h2: ["h2"],
  subhead: ["subhead", "textSubheadParent"],
  textSubheadParent: ["textSubheadParent"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  parent: "hgroup";
  headerDisplayGroupParent: "div";
  headerDisplayTitle: "div";
  textDisplayParent: "h1";
  headlineSubheadGroupParent: "div";
  headline: "div";
  h2: "h2";
  subhead: "div";
  textSubheadParent: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCardHeaderTitleDisplay__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCardHeaderTitleDisplay__VariantsArgs;
    args?: PlasmicCardHeaderTitleDisplay__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicCardHeaderTitleDisplay__Fetches;
  } & Omit<PlasmicCardHeaderTitleDisplay__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCardHeaderTitleDisplay__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCardHeaderTitleDisplay__ArgProps,
      internalVariantPropNames: PlasmicCardHeaderTitleDisplay__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicCardHeaderTitleDisplay__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "parent") {
    func.displayName = "PlasmicCardHeaderTitleDisplay";
  } else {
    func.displayName = `PlasmicCardHeaderTitleDisplay.${nodeName}`;
  }
  return func;
}

export const PlasmicCardHeaderTitleDisplay = Object.assign(
  // Top-level PlasmicCardHeaderTitleDisplay renders the root element
  makeNodeComponent("parent"),
  {
    // Helper components rendering sub-elements
    headerDisplayGroupParent: makeNodeComponent("headerDisplayGroupParent"),
    headerDisplayTitle: makeNodeComponent("headerDisplayTitle"),
    textDisplayParent: makeNodeComponent("textDisplayParent"),
    headlineSubheadGroupParent: makeNodeComponent("headlineSubheadGroupParent"),
    headline: makeNodeComponent("headline"),
    h2: makeNodeComponent("h2"),
    subhead: makeNodeComponent("subhead"),
    textSubheadParent: makeNodeComponent("textSubheadParent"),

    // Metadata about props expected for PlasmicCardHeaderTitleDisplay
    internalVariantProps: PlasmicCardHeaderTitleDisplay__VariantProps,
    internalArgProps: PlasmicCardHeaderTitleDisplay__ArgProps
  }
);

export default PlasmicCardHeaderTitleDisplay;
/* prettier-ignore-end */
